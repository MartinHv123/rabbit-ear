const e=typeof window!=="undefined"&&typeof window.document!=="undefined";const t=typeof process!=="undefined"&&process.versions!=null&&process.versions.node!=null;const n={planarize:"graph could not planarize",manifold:"valid manifold required",graphCycle:"cycle not allowed",planarBoundary:"planar boundary detection error, bad graph",circularEdge:"circular edges not allowed",replaceModifyParam:"replace() index < value. indices parameter modified",replaceUndefined:"replace() generated undefined",flatFoldAngles:"foldAngles cannot be determined from flat-folded faces without an assignment",noWebGL:"WebGl not Supported",convexFace:"only convex faces are supported",window:"window not set; if using node/deno include package @xmldom/xmldom and set ear.window = xmldom",nonConvexTriangulation:"non-convex triangulation requires vertices_coords",backendStylesheet:"svgToFold found <style> in <svg>. rendering will be incomplete unless run in a major browser.",noLayerSolution:"LayerSolver bad input. no solution possible"};const s={window:undefined};const r=e=>(new e.DOMParser).parseFromString("<!DOCTYPE html><title>.</title>","text/html");const o=e=>{if(!e.document){e.document=r(e)}s.window=e;return s.window};if(e){s.window=window}const c=()=>{if(s.window===undefined){throw new Error(n.window)}return s.window};const a=e=>e!=null&&typeof e[Symbol.iterator]==="function";const i=function(){switch(arguments.length){case 0:return Array.from(arguments);case 1:return a(arguments[0])&&typeof arguments[0]!=="string"?i(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>a(e)?[...i(e)]:e))}};const f=function(){switch(arguments.length){case 0:return Array.from(arguments);case 1:return a(arguments[0])&&typeof arguments[0]!=="string"?f(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>a(e)?[...f(e)]:e)).flat()}};const l=function(){let e=f(arguments);const t=e[0];if(typeof t==="object"&&t!==null&&!Number.isNaN(t.x)){e=["x","y","z"].map((e=>t[e])).filter((e=>e!==undefined))}return e.filter((e=>typeof e==="number"))};const d=function(){return i(arguments).map((e=>l(e)))};const u=function(){const e=i(arguments);return e.length===4?[[0,1],[2,3]].map((t=>t.map((t=>e[t])))):e.map((e=>l(e)))};const m=(e,t=[])=>({vector:e,origin:t});const g=function(){const e=i(arguments);if(e.length===0||e[0]==null){return m([],[])}if(e[0].constructor===Object&&e[0].vector!==undefined){return m(e[0].vector,e[0].origin||[])}return typeof e[0]==="number"?m(l(e)):m(...e.map((e=>l(e))))};const p=Object.freeze({__proto__:null,getArrayOfVectors:d,getLine:g,getSegment:u,getVector:l});const _={file:["file_spec","file_creator","file_author","file_title","file_description","file_classes","file_frames"],frame:["frame_author","frame_title","frame_description","frame_attributes","frame_classes","frame_unit","frame_parent","frame_inherit"],graph:["vertices_coords","vertices_vertices","vertices_faces","edges_vertices","edges_faces","edges_assignment","edges_foldAngle","edges_length","faces_vertices","faces_edges","vertices_edges","edges_edges","faces_faces"],orders:["edgeOrders","faceOrders"]};const h=["singleModel","multiModel","animation","diagrams"];const v=["creasePattern","foldedForm","graph","linkage"];const b=["2D","3D","abstract","manifold","nonManifold","orientable","nonOrientable","selfTouching","nonSelfTouching","selfIntersecting","nonSelfIntersecting"];const y=Object.freeze({__proto__:null,foldFileClasses:h,foldFrameAttributes:b,foldFrameClasses:v,foldKeys:_});const E=1e-6;const M=180/Math.PI;const A=Math.PI/180;const x=Math.PI*2;const w=Object.freeze({__proto__:null,D2R:A,EPSILON:E,R2D:M,TWO_PI:x});const k=(e,t)=>e+(t||0);const O=e=>Math.sqrt(e.map((e=>e*e)).reduce(k,0));const j=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]);const F=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);const S=e=>e[0]*e[0]+e[1]*e[1];const C=e=>e.map((e=>e*e)).reduce(k,0);const V=e=>{const t=O(e);return t===0?e:e.map((e=>e/t))};const P=e=>{const t=j(e);return t===0?e:[e[0]/t,e[1]/t]};const T=e=>{const t=F(e);return t===0?e:[e[0]/t,e[1]/t,e[2]/t]};const N=(e,t)=>e.map((e=>e*t));const z=(e,t)=>[e[0]*t,e[1]*t];const B=(e,t)=>[e[0]*t,e[1]*t,e[2]*t];const $=(e,t)=>e.map(((e,n)=>e+(t[n]||0)));const R=(e,t)=>[e[0]+t[0],e[1]+t[1]];const L=(e,t)=>[e[0]+t[0],e[1]+t[1],e[2]+t[2]];const I=(e,t)=>e.map(((e,n)=>e-(t[n]||0)));const U=(e,t)=>[e[0]-t[0],e[1]-t[1]];const Q=(e,t)=>[e[0]-t[0],e[1]-t[1],e[2]-t[2]];const D=(e,t)=>e.map(((n,s)=>e[s]*t[s])).reduce(k,0);const q=(e,t)=>e[0]*t[0]+e[1]*t[1];const W=(e,t)=>e[0]*t[0]+e[1]*t[1]+e[2]*t[2];const G=(e,t)=>e.map(((e,n)=>(e+t[n])/2));const H=(e,t)=>z(R(e,t),.5);const J=(e,t)=>B(L(e,t),.5);const Z=function(){if(arguments.length===0){return undefined}const e=arguments[0].length>0?arguments[0].length:0;const t=Array(e).fill(0);Array.from(arguments).forEach((e=>t.forEach(((n,s)=>{t[s]+=e[s]||0}))));return t.map((e=>e/arguments.length))};const Y=(...e)=>{if(!e||!e.length){return undefined}const t=1/e.length;return e.reduce(((e,t)=>R(e,t)),[0,0]).map((e=>e*t))};const X=(e,t,n=0)=>{const s=1-n;return e.map(((e,r)=>e*s+(t[r]||0)*n))};const K=(e,t)=>e[0]*t[1]-e[1]*t[0];const ee=(e,t)=>[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]];const te=(e,t)=>Math.sqrt(e.map(((n,s)=>(e[s]-t[s])**2)).reduce(k,0));const ne=(e,t)=>{const n=e[0]-t[0];const s=e[1]-t[1];return Math.sqrt(n*n+s*s)};const se=(e,t)=>{const n=e[0]-t[0];const s=e[1]-t[1];const r=e[2]-t[2];return Math.sqrt(n*n+s*s+r*r)};const re=e=>e.map((e=>-e));const oe=e=>[-e[1],e[0]];const ce=e=>[e[1],-e[0]];const ae=(e,t=E)=>e.map((e=>Math.abs(e))).reduce(k,0)<t;const ie=(e,t,n=E)=>1-Math.abs(D(e,t))<n;const fe=(e,t,n=E)=>ie(V(e),V(t),n);const le=(e,t,n=E)=>Math.abs(K(e,t))<n;const de=(e,t)=>t.length===e?t:Array(e).fill(0).map(((e,n)=>t[n]?t[n]:e));const ue=(e,t)=>[e,t].map((n=>de(Math.max(e.length,t.length),n)));const me=(e=[1,0])=>{const t=P(e);return[t,oe(t)]};const ge=(e=[1,0,0])=>{const t=T(e);const n=[[1,0,0],[0,1,0],[0,0,1]].map((e=>ee(e,t)));const s=n.map(F).map(((e,t)=>({n:e,i:t}))).sort(((e,t)=>t.n-e.n)).map((e=>e.i)).shift();const r=T(n[s]);return[t,r,ee(t,r)]};const pe=e=>e.length===2?me(e):ge(e);const _e=Object.freeze({__proto__:null,add:$,add2:R,add3:L,average:Z,average2:Y,basisVectors:pe,basisVectors2:me,basisVectors3:ge,cross2:K,cross3:ee,degenerate:ae,distance:te,distance2:ne,distance3:se,dot:D,dot2:q,dot3:W,flip:re,lerp:X,magSquared:C,magSquared2:S,magnitude:O,magnitude2:j,magnitude3:F,midpoint:G,midpoint2:H,midpoint3:J,normalize:V,normalize2:P,normalize3:T,parallel:fe,parallel2:le,parallelNormalized:ie,resize:de,resizeUp:ue,rotate270:ce,rotate90:oe,scale:N,scale2:z,scale3:B,subtract:I,subtract2:U,subtract3:Q});const he=[1,0,0,1];const ve=he.concat(0,0);const be=(e,t)=>[e[0]*t[0]+e[2]*t[1]+e[4],e[1]*t[0]+e[3]*t[1]+e[5]];const ye=(e,t,n)=>({vector:[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1]],origin:[e[0]*n[0]+e[2]*n[1]+e[4],e[1]*n[0]+e[3]*n[1]+e[5]]});const Ee=(e,t)=>[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1],e[0]*t[2]+e[2]*t[3],e[1]*t[2]+e[3]*t[3],e[0]*t[4]+e[2]*t[5]+e[4],e[1]*t[4]+e[3]*t[5]+e[5]];const Me=e=>e[0]*e[3]-e[1]*e[2];const Ae=e=>{const t=Me(e);if(Math.abs(t)<1e-12||Number.isNaN(t)||!Number.isFinite(e[4])||!Number.isFinite(e[5])){return undefined}return[e[3]/t,-e[1]/t,-e[2]/t,e[0]/t,(e[2]*e[5]-e[3]*e[4])/t,(e[1]*e[4]-e[0]*e[5])/t]};const xe=(e=0,t=0)=>he.concat(e,t);const we=(e=[1,1],t=[0,0])=>[e[0],0,0,e[1],e[0]*-t[0]+t[0],e[1]*-t[1]+t[1]];const ke=(e=1,t=[0,0])=>we([e,e],t);const Oe=(e,t=[0,0])=>{const n=Math.cos(e);const s=Math.sin(e);return[n,s,-s,n,t[0],t[1]]};const je=(e,t=[0,0])=>{const n=Math.atan2(e[1],e[0]);const s=Math.cos(n);const r=Math.sin(n);const o=Math.cos(-n);const c=Math.sin(-n);const a=s*o+r*c;const i=s*-c+r*o;const f=r*o+-s*c;const l=r*-c+-s*o;const d=t[0]+a*-t[0]+-t[1]*f;const u=t[1]+i*-t[0]+-t[1]*l;return[a,i,f,l,d,u]};const Fe=Object.freeze({__proto__:null,determinant2:Me,identity2x2:he,identity2x3:ve,invertMatrix2:Ae,makeMatrix2Reflect:je,makeMatrix2Rotate:Oe,makeMatrix2Scale:we,makeMatrix2Translate:xe,makeMatrix2UniformScale:ke,multiplyMatrices2:Ee,multiplyMatrix2Line2:ye,multiplyMatrix2Vector2:be});const Se=Object.freeze([1,0,0,0,1,0,0,0,1]);const Ce=Object.freeze(Se.concat(0,0,0));const Ve=e=>Ce.map(((t,n)=>Math.abs(t-e[n])<E)).reduce(((e,t)=>e&&t),true);const Pe=(e,t)=>[e[0]*t[0]+e[3]*t[1]+e[6]*t[2]+e[9],e[1]*t[0]+e[4]*t[1]+e[7]*t[2]+e[10],e[2]*t[0]+e[5]*t[1]+e[8]*t[2]+e[11]];const Te=(e,t,n)=>({vector:[e[0]*t[0]+e[3]*t[1]+e[6]*t[2],e[1]*t[0]+e[4]*t[1]+e[7]*t[2],e[2]*t[0]+e[5]*t[1]+e[8]*t[2]],origin:[e[0]*n[0]+e[3]*n[1]+e[6]*n[2]+e[9],e[1]*n[0]+e[4]*n[1]+e[7]*n[2]+e[10],e[2]*n[0]+e[5]*n[1]+e[8]*n[2]+e[11]]});const Ne=(e,t)=>[e[0]*t[0]+e[3]*t[1]+e[6]*t[2],e[1]*t[0]+e[4]*t[1]+e[7]*t[2],e[2]*t[0]+e[5]*t[1]+e[8]*t[2],e[0]*t[3]+e[3]*t[4]+e[6]*t[5],e[1]*t[3]+e[4]*t[4]+e[7]*t[5],e[2]*t[3]+e[5]*t[4]+e[8]*t[5],e[0]*t[6]+e[3]*t[7]+e[6]*t[8],e[1]*t[6]+e[4]*t[7]+e[7]*t[8],e[2]*t[6]+e[5]*t[7]+e[8]*t[8],e[0]*t[9]+e[3]*t[10]+e[6]*t[11]+e[9],e[1]*t[9]+e[4]*t[10]+e[7]*t[11]+e[10],e[2]*t[9]+e[5]*t[10]+e[8]*t[11]+e[11]];const ze=e=>e[0]*e[4]*e[8]-e[0]*e[7]*e[5]-e[3]*e[1]*e[8]+e[3]*e[7]*e[2]+e[6]*e[1]*e[5]-e[6]*e[4]*e[2];const Be=e=>{const t=ze(e);if(Math.abs(t)<1e-12||Number.isNaN(t)||!Number.isFinite(e[9])||!Number.isFinite(e[10])||!Number.isFinite(e[11])){return undefined}const n=[e[4]*e[8]-e[7]*e[5],-e[1]*e[8]+e[7]*e[2],e[1]*e[5]-e[4]*e[2],-e[3]*e[8]+e[6]*e[5],e[0]*e[8]-e[6]*e[2],-e[0]*e[5]+e[3]*e[2],e[3]*e[7]-e[6]*e[4],-e[0]*e[7]+e[6]*e[1],e[0]*e[4]-e[3]*e[1],-e[3]*e[7]*e[11]+e[3]*e[8]*e[10]+e[6]*e[4]*e[11]-e[6]*e[5]*e[10]-e[9]*e[4]*e[8]+e[9]*e[5]*e[7],e[0]*e[7]*e[11]-e[0]*e[8]*e[10]-e[6]*e[1]*e[11]+e[6]*e[2]*e[10]+e[9]*e[1]*e[8]-e[9]*e[2]*e[7],-e[0]*e[4]*e[11]+e[0]*e[5]*e[10]+e[3]*e[1]*e[11]-e[3]*e[2]*e[10]-e[9]*e[1]*e[5]+e[9]*e[2]*e[4]];const s=1/t;return n.map((e=>e*s))};const $e=(e=0,t=0,n=0)=>Se.concat(e,t,n);const Re=(e,t,n,s,r)=>{const o=Math.cos(e);const c=Math.sin(e);const a=Se.concat([0,0,0]);a[n*3+n]=o;a[n*3+s]=(r?+1:-1)*c;a[s*3+n]=(r?-1:+1)*c;a[s*3+s]=o;const i=[0,1,2].map((e=>t[e]||0));const f=Se.concat(re(i));const l=Se.concat(i);return Ne(l,Ne(a,f))};const Le=(e,t=[0,0,0])=>Re(e,t,1,2,true);const Ie=(e,t=[0,0,0])=>Re(e,t,0,2,false);const Ue=(e,t=[0,0,0])=>Re(e,t,0,1,true);const Qe=(e,t=[0,0,1],n=[0,0,0])=>{const s=[0,1,2].map((e=>n[e]||0));const[r,o,c]=de(3,V(t));const a=Math.cos(e);const i=Math.sin(e);const f=1-a;const l=Se.concat(-s[0],-s[1],-s[2]);const d=Se.concat(s[0],s[1],s[2]);return Ne(d,Ne([f*r*r+a,f*o*r+c*i,f*c*r-o*i,f*r*o-c*i,f*o*o+a,f*c*o+r*i,f*r*c+o*i,f*o*c-r*i,f*c*c+a,0,0,0],l))};const De=(e=[1,1,1],t=[0,0,0])=>[e[0],0,0,0,e[1],0,0,0,e[2],e[0]*-t[0]+t[0],e[1]*-t[1]+t[1],e[2]*-t[2]+t[2]];const qe=(e=1,t=[0,0,0])=>De([e,e,e],t);const We=(e,t=[0,0])=>{const n=je(e,t);return[n[0],n[1],0,n[2],n[3],0,0,0,1,n[4],n[5],0]};const Ge=Object.freeze({__proto__:null,determinant3:ze,identity3x3:Se,identity3x4:Ce,invertMatrix3:Be,isIdentity3x4:Ve,makeMatrix3ReflectZ:We,makeMatrix3Rotate:Qe,makeMatrix3RotateX:Le,makeMatrix3RotateY:Ie,makeMatrix3RotateZ:Ue,makeMatrix3Scale:De,makeMatrix3Translate:$e,makeMatrix3UniformScale:qe,multiplyMatrices3:Ne,multiplyMatrix3Line3:Te,multiplyMatrix3Vector3:Pe});const He=e=>Array.from(Array(Math.floor(e))).map(((t,n)=>x*(n/e)));const Je=(e,t)=>e.map((e=>[t*Math.cos(e),t*Math.sin(e)]));const Ze=(e=3,t=1)=>Je(He(e),t);const Ye=(e=3,t=1)=>{const n=Math.PI/e;const s=He(e).map((e=>e+n));return Je(s,t)};const Xe=(e=3,t=1)=>Ze(e,t/Math.cos(Math.PI/e));const Ke=(e=3,t=1)=>Ye(e,t/Math.cos(Math.PI/e));const et=(e=3,t=1)=>Ze(e,t/2/Math.sin(Math.PI/e));const tt=(e=3,t=1)=>Ye(e,t/2/Math.sin(Math.PI/e));const nt=(e,t=E)=>{const n=e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>I(e[1],e[0])));const s=n.map(((e,t,n)=>[e,n[(t+n.length-1)%n.length]])).map((e=>!fe(e[1],e[0],t)));return e.filter(((e,t)=>s[t]))};const st=e=>.5*e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>K(...e))).reduce(((e,t)=>e+t),0);const rt=e=>{const t=1/(6*st(e));return e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>z(R(...e),K(...e)))).reduce(((e,t)=>R(e,t)),[0,0]).map((e=>e*t))};const ot=e=>{for(let t=0;t<e.length;t+=1){if(e[t]&&e[t].length){return e[t].length}}return 0};const ct=(e,t=0)=>{if(!e||!e.length){return undefined}const n=ot(e);const s=Array(n).fill(Infinity);const r=Array(n).fill(-Infinity);e.filter((e=>e!==undefined)).forEach((e=>e.forEach(((e,n)=>{if(e<s[n]){s[n]=e-t}if(e>r[n]){r[n]=e+t}}))));const o=r.map(((e,t)=>e-s[t]));return{min:s,max:r,span:o}};const at=Object.freeze({__proto__:null,boundingBox:ct,centroid:rt,makePolygonCircumradius:Ze,makePolygonCircumradiusSide:Ye,makePolygonInradius:Xe,makePolygonInradiusSide:Ke,makePolygonNonCollinear:nt,makePolygonSideLength:et,makePolygonSideLengthSide:tt,signedArea:st});const it=(e,t,n=E)=>Math.abs(e-t)<n;const ft=(e,t,n=E)=>it(e,t,n)?0:Math.sign(e-t);const lt=(e,t,n=E)=>{for(let s=0;s<Math.max(e.length,t.length);s+=1){if(!it(e[s]||0,t[s]||0,n)){return false}}return true};const dt=(e,t=E)=>e>-t;const ut=(e,t=E)=>e>t;const mt=()=>true;const gt=()=>true;const pt=dt;const _t=ut;const ht=(e,t=E)=>e>-t&&e<1+t;const vt=(e,t=E)=>e>t&&e<1-t;const bt=Object.freeze({__proto__:null,epsilonCompare:ft,epsilonEqual:it,epsilonEqualVectors:lt,exclude:ut,excludeL:gt,excludeR:_t,excludeS:vt,include:dt,includeL:mt,includeR:pt,includeS:ht});const yt={vertices:"vertex",edges:"edge",faces:"face"};const Et={vertex:"vertices",edge:"edges",face:"faces"};const Mt=Array.from("BbMmVvFfJjCcUu");const At={B:"boundary",M:"mountain",V:"valley",F:"flat",J:"join",C:"cut",U:"unassigned"};Object.keys(At).forEach((e=>{At[e.toLowerCase()]=At[e]}));const xt={B:0,b:0,M:-180,m:-180,V:180,v:180,F:0,f:0,J:0,j:0,C:0,c:0,U:0,u:0};const wt={B:false,b:false,M:true,m:true,V:true,v:true,F:false,f:false,J:false,j:false,C:false,c:false,U:true,u:true};const kt={B:true,b:true,M:false,m:false,V:false,v:false,F:false,f:false,J:false,j:false,C:true,c:true,U:false,u:false};const Ot=e=>xt[e]||0;const jt=e=>{if(e>E){return"V"}if(e<-E){return"M"}return"U"};const Ft=e=>it(0,e)||it(-180,e)||it(180,e);const St=({edges_foldAngle:e})=>{if(!e){return true}for(let t=0;t<e.length;t+=1){if(!Ft(e[t])){return false}}return true};const Ct=(e,t)=>Object.keys(e).filter((e=>t(e)));const Vt=(e,t)=>Ct(e,(e=>e.substring(0,t.length+1)===`${t}_`));const Pt=(e,t)=>Ct(e,(e=>e.substring(e.length-t.length-1,e.length)===`_${t}`));const Tt=e=>{const t={};Object.keys(e).filter((e=>e.includes("_"))).map((e=>e.substring(0,e.indexOf("_")))).forEach((e=>{t[e]=true}));return Object.keys(t)};const Nt=e=>{const t={};Object.keys(e).filter((e=>e.includes("_"))).map((e=>e.substring(e.lastIndexOf("_")+1,e.length))).forEach((e=>{t[e]=true}));return Object.keys(t)};const zt=(e,t)=>{const n=Vt(e,t);if(n.length===0){return[]}const s=Math.max(...n.map((t=>e[t].length)));const r=Array.from(Array(s)).map((()=>({})));n.forEach((t=>r.forEach(((n,s)=>{r[s][t]=e[t][s]}))));return r};const Bt=(e,t,n)=>{const s=Vt(e,t);if(s.length===0){return undefined}const r={};s.forEach((t=>{r[t]=e[t][n]}));return r};const $t=Object.freeze([].concat(_.file).concat(_.frame).concat(_.graph).concat(_.orders));const Rt=(e={})=>Object.keys(e).length===0?0:$t.filter((t=>e[t])).length/Object.keys(e).length;const Lt=({frame_classes:e,file_classes:t})=>e&&e.includes("foldedForm")||t&&t.includes("foldedForm");const It=({vertices_coords:e},t=E)=>{for(let n=0;n<e.length;n+=1){if(e[n]&&e[n].length===3&&!it(0,e[n][2],t)){return 3}}return 2};const Ut=({vertices_coords:e})=>{if(e[0]!==undefined){return e[0].length}const t=e.filter((()=>true)).shift();if(!t){return undefined}return t.length};const Qt=({edges_vertices:e,edges_foldAngle:t,edges_assignment:n})=>{if(n===undefined){return t===undefined?e.map((()=>true)):t.map((e=>e<-E||e>E))}return n.map((e=>wt[e]))};const Dt={M:"V",m:"v",V:"M",v:"m"};const qt=e=>Dt[e]||e;const Wt=e=>{if(e.edges_assignment){e.edges_assignment=e.edges_assignment.map((e=>Dt[e]?Dt[e]:e))}if(e.edges_foldAngle){e.edges_foldAngle=e.edges_foldAngle.map((e=>-e))}return e};const Gt=(e={})=>{const t={};_.file.filter((e=>e!=="file_frames")).filter((t=>e[t]!==undefined)).forEach((n=>{t[n]=e[n]}));return t};const Ht=Object.freeze({__proto__:null,assignmentCanBeFolded:wt,assignmentFlatFoldAngle:xt,assignmentIsBoundary:kt,edgeAssignmentToFoldAngle:Ot,edgeFoldAngleIsFlat:Ft,edgeFoldAngleToAssignment:jt,edgesAssignmentNames:At,edgesAssignmentValues:Mt,edgesFoldAngleAreAllFlat:St,filterKeysWithPrefix:Vt,filterKeysWithSuffix:Pt,getAllPrefixes:Tt,getAllSuffixes:Nt,getDimension:It,getDimensionQuick:Ut,getFileMetadata:Gt,invertAssignment:qt,invertAssignments:Wt,isFoldObject:Rt,isFoldedForm:Lt,makeEdgesIsFolded:Qt,pluralize:Et,singularize:yt,transposeGraphArrayAtIndex:Bt,transposeGraphArrays:zt});const Jt=function(e,t){Pt(e,"coords").forEach((n=>{e[n]=e[n].map((e=>de(3,e))).map((e=>Pe(t,e)))}));Pt(e,"matrix").forEach((n=>{e[n]=e[n].map((e=>Ne(e,t)))}));return e};const Zt=(e,...t)=>{const n=t.flat();const s=n.length===1?[n[0],n[0],n[0]]:[1,1,1].map(((e,t)=>n[t]===undefined?e:n[t]));const r=De(s);return Jt(e,r)};const Yt=(e,...t)=>{const n=l(...t);const s=de(3,n);const r=$e(...s);return Jt(e,r)};const Xt=(e,t,n,s)=>Jt(e,Qe(t,n,s));const Kt=(e,t,...n)=>{const s=l(...n);const r=de(3,s);const o=Ue(t,r);return Jt(e,o)};const en=function(e){if(!e.vertices_coords){return e}const t=ct(e.vertices_coords);const n=Math.max(...t.span);const s=n===0?1:1/n;const r=t.min;e.vertices_coords=e.vertices_coords.map((e=>I(e,r))).map((e=>e.map((e=>e*s))));return e};const tn=Object.freeze({__proto__:null,rotate:Xt,rotateZ:Kt,scale:Zt,transform:Jt,translate:Yt,unitize:en});const nn=({vertices_coords:e},t=E)=>{if(!e){return[]}const n=Ut({vertices_coords:e});const s=Array.from(Array(n));const r=[];const o=[];const c=e.map(((e,t)=>({i:t,d:e[0]}))).sort(((e,t)=>e.d-t.d)).map((e=>e.i));let a=0;const i=s.map((()=>[0,0]));const f=t=>s.map(((n,s)=>e[t][s]>i[s][0]&&e[t][s]<i[s][1])).reduce(((e,t)=>e&&t),true);const l=s=>{const r=s[s.length-1];while(e[r][0]-e[s[a]][0]>t){a+=1}const o=s.slice(a,s.length).map((t=>e[t]));i[0]=[o[0][0]-t,o[o.length-1][0]+t];for(let e=1;e<n;e+=1){const n=o.map((t=>t[e]));i[e]=[Math.min(...n)-t,Math.max(...n)+t]}};while(o.length!==e.length){const t=[];const n=c.shift();t.push(n);o.push(n);a=0;l(t);let s=0;while(s<c.length&&e[c[s]][0]<i[0][1]){if(f(c[s])){const e=c.splice(s,1).shift();t.push(e);o.push(e);l(t)}else{s+=1}}r.push(t)}return r};const sn=Object.freeze({__proto__:null,getVerticesClusters:nn});const rn=(...e)=>Math.max(0,...e.filter((e=>e!==undefined)).map((e=>e.length)));const on=(e,t)=>rn(...Vt(e,t).map((t=>e[t])));on.vertices=({vertices_coords:e,vertices_faces:t,vertices_vertices:n})=>rn(e,t,n);on.edges=({edges_vertices:e,edges_edges:t,edges_faces:n})=>rn(e,t,n);on.faces=({faces_vertices:e,faces_edges:t,faces_faces:n})=>rn(e,t,n);const cn=e=>e.concat(e.slice(0,-1).reverse());const an=(...e)=>{const t=[];e.forEach((e=>e.forEach(((e,n)=>{t[n]=e}))));return t};const fn=(e,t)=>{t.sort(((e,t)=>e-t));return[e.slice(t[1]).concat(e.slice(0,t[0]+1)),e.slice(t[0],t[1]+1)]};const ln=e=>Array.from(new Set(e));const dn=e=>{const t={};e.forEach((e=>{if(t[e]===undefined){t[e]=0}t[e]+=1}));return e.filter((e=>t[e]>1))};const un=e=>{const t={};e.forEach((e=>{t[e]=true}));return Object.keys(t).map(parseFloat)};const mn=(e,t=E)=>{const n=e.slice().sort(((e,t)=>e-t));if(n.length<2){return n}const s=[true];for(let e=1;e<n.length;e+=1){s[e]=!it(n[e],n[e-1],t)}return n.filter(((e,t)=>s[t]))};const gn=(e,t)=>{const n=[];let s=0;let r=0;while(s<e.length&&r<t.length){if(e[s]===t[r]){s+=1;continue}if(e[s]>t[r]){r+=1;continue}if(t[r]>e[s]){n.push(e[s]);s+=1;continue}}return n};const pn=(e,t,n=E)=>{const s=[];let r=0;let o=0;while(r<e.length&&o<t.length){if(it(e[r],t[o],n)){r+=1;continue}if(e[r]>t[o]){o+=1;continue}if(t[o]>e[r]){s.push(e[r]);r+=1;continue}}return s};const _n=e=>{const t=Array(e.length*(e.length-1)/2);let n=0;for(let s=0;s<e.length-1;s+=1){for(let r=s+1;r<e.length;r+=1,n+=1){t[n]=[e[s],e[r]]}}return t};const hn=(e,t)=>{const n=t===undefined?e.map(((e,t)=>({i:t,value:e}))):e.map(((e,n)=>({i:n,value:t(e)})));let s;let r=Infinity;for(let e=0;e<n.length;e+=1){if(n[e].value<r){s=e;r=n[e].value}}return s};const vn=e=>{let t=0;for(let n=1;n<e.length;n+=1){if(e[n]<e[t]){t=n}}return t};const bn=e=>{let t=0;for(let n=1;n<e.length;n+=1){if(e[n]>e[t]){t=n}}return t};const yn=Object.freeze({__proto__:null,arrayMaxIndex:bn,arrayMinIndex:vn,arrayMinimum:hn,chooseTwoPairs:_n,epsilonUniqueSortedNumbers:mn,mergeArraysWithHoles:an,mirrorArray:cn,nonUniqueElements:dn,setDifferenceSortedIntegers:gn,setDifferenceSortedNumbers:pn,splitCircularArray:fn,uniqueElements:ln,uniqueSortedNumbers:un});const En=(...e)=>{if(e.length===0){return[]}const t=e[0].map(((e,t)=>t));e.forEach((e=>t.forEach(((n,s)=>{t[s]=e[n]}))));return t};const Mn=(...e)=>{if(e.length===0){return[]}const t=e[0].map(((e,t)=>[t]));e.forEach((e=>{t.forEach(((n,s)=>n.forEach(((n,r)=>{t[s][r]=e[n]}))));t.forEach(((e,n)=>{t[n]=e.reduce(((e,t)=>e.concat(t)),[]).filter((e=>e!==undefined))}))}));return t};const An=(...e)=>{if(e.length===0){return[]}let t=e[0].map(((e,t)=>t));e.forEach((e=>{const n=e.map((e=>t[e]));t=n}));return t};const xn=(...e)=>{if(e.length===0){return[]}let t=e[0].reduce(((e,t)=>e.concat(t)),[]).map(((e,t)=>[t]));e.forEach((e=>{const n=[];e.forEach(((e,s)=>{if(typeof e==="number"){n[s]=t[e]}else{n[s]=e.map((e=>t[e])).reduce(((e,t)=>e.concat(t)),[])}}));t=n}));return t};const wn=e=>{const t=[];e.forEach(((e,n)=>{t[e]=n}));return t};const kn=e=>{const t=[];e.forEach(((e,n)=>{t[e]=t[e]===undefined?n:t[e]}));return t};const On=e=>{const t=[];const n=(e,n)=>{if(t[e]===undefined){t[e]=[]}t[e].push(n)};e.forEach(((e,t)=>{if(e==null){return}if(typeof e==="number"){n(e,t)}if(e.constructor===Array){e.forEach((e=>n(e,t)))}}));return t};const jn=e=>{const t=[];const n=(e,n)=>{if(t[e]!==undefined){if(typeof t[e]==="number"){t[e]=[t[e],n]}else{t[e].push(n)}}else{t[e]=n}};e.forEach(((e,t)=>{if(e==null){return}if(typeof e==="number"){n(e,t)}if(e.constructor===Array){e.forEach((e=>n(e,t)))}}));return t};const Fn=(e,t,n=[])=>{Pt(e,t).forEach((t=>e[t].forEach(((s,r)=>e[t][r].forEach(((s,o)=>{e[t][r][o]=n[s]}))))));const s=wn(n);Vt(e,t).forEach((t=>{e[t]=s.map((n=>e[t][n]))}))};const Sn=(e,t,n)=>{const s=kn(n);Pt(e,t).forEach((t=>e[t].forEach(((s,r)=>e[t][r].forEach(((s,o)=>{e[t][r][o]=n[s]}))))));Pt(e,t).forEach((t=>e[t].forEach(((n,s)=>{e[t][s]=e[t][s].filter((e=>e!==undefined))}))));Vt(e,t).forEach((t=>{e[t]=s.map((n=>e[t][n]))}))};const Cn=Object.freeze({__proto__:null,invertArrayMap:On,invertMap:jn,invertSimpleMap:wn,invertSimpleMapNoReplace:kn,mergeBackmaps:xn,mergeNextmaps:Mn,mergeSimpleBackmaps:An,mergeSimpleNextmaps:En,remapComponent:Fn,remapKey:Sn});const Vn=(e,t,s,r)=>{const o=on(e,t);const c=[];for(let e=0,t=0,a=0;e<o;e+=1,t+=1){while(e===r[a]){c[e]=c[s[r[a]]];if(c[e]===undefined){throw new Error(n.replaceUndefined)}e+=1;a+=1}if(e<o){c[e]=t}}return c};const Pn=(e,t,n)=>{Object.entries(n).filter((([e,t])=>e<t)).forEach((([e,t])=>{delete n[e];n[t]=e}));const s=Object.keys(n).map((e=>parseInt(e,10)));const r=un(s);const o=Vn(e,t,n,r);Sn(e,t,o);return o};const Tn=(e,t)=>nn(e,t).filter((e=>e.length>1));const Nn=(e,t=E,n=true)=>{const s=[];const r=[];const o=nn(e,t).filter((e=>e.length>1));o.forEach((e=>{if(Math.min(...e)!==e[0]){e.sort(((e,t)=>e-t))}for(let t=1;t<e.length;t+=1){s[e[t]]=e[0];r.push(e[t])}}));if(n){o.map((t=>t.map((t=>e.vertices_coords[t])))).map((e=>Z(...e))).forEach(((t,n)=>{e.vertices_coords[o[n][0]]=t}))}return{map:Pn(e,"vertices",s),remove:r}};const zn=Object.freeze({__proto__:null,duplicateVertices:Tn,removeDuplicateVertices:Nn});const Bn=(e,t,n)=>{const s=un(n);const r=on(e,t);const o=[];for(let e=0,t=0,n=0;e<r;e+=1,t+=1){while(e===s[n]){o[e]=undefined;e+=1;n+=1}if(e<r){o[e]=t}}return o};const $n=(e,t,n)=>{const s=Bn(e,t,n);Sn(e,t,s);return s};const Rn=({vertices_coords:e,edges_vertices:t})=>{if(!e||!t){return[]}let n=e.length;const s=Array(n).fill(false);t.forEach((e=>{e.filter((e=>!s[e])).forEach((e=>{s[e]=true;n-=1}))}));return s.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined))};const Ln=({vertices_coords:e,faces_vertices:t})=>{if(!e||!t){return[]}let n=e.length;const s=Array(n).fill(false);t.forEach((e=>{e.filter((e=>!s[e])).forEach((e=>{s[e]=true;n-=1}))}));return s.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined))};const In=({vertices_coords:e,edges_vertices:t,faces_vertices:n})=>{if(!e){return[]}let s=e.length;const r=Array(s).fill(false);if(t){t.forEach((e=>{e.filter((e=>!r[e])).forEach((e=>{r[e]=true;s-=1}))}))}if(n){n.forEach((e=>{e.filter((e=>!r[e])).forEach((e=>{r[e]=true;s-=1}))}))}return r.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined))};const Un=(e,t)=>{if(!t){t=In(e)}return{map:$n(e,"vertices",t),remove:t}};const Qn=Object.freeze({__proto__:null,edgeIsolatedVertices:Rn,faceIsolatedVertices:Ln,isolatedVertices:In,removeIsolatedVertices:Un});const Dn=e=>Math.atan2(e[1],e[0]);const qn=e=>[Math.cos(e),Math.sin(e)];const Wn=(e,t)=>({vector:I(t,e),origin:e});const Gn=({vector:e,origin:t})=>{const n=O(e);const s=oe(e);const r=D(t,s)/n;return{normal:N(s,1/n),distance:r}};const Hn=({normal:e,distance:t})=>({vector:ce(e),origin:N(e,t)});const Jn=Object.freeze({__proto__:null,angleToVector:qn,pointsToLine:Wn,uniqueLineToVecLine:Hn,vecLineToUniqueLine:Gn,vectorToAngle:Dn});const Zn=(e,t,n)=>{while(n<t){n+=x}while(e>t){e-=x}while(e<t){e+=x}return e<n};const Yn=(e,t)=>{while(e<0){e+=x}while(t<0){t+=x}while(e>x){e-=x}while(t>x){t-=x}const n=e-t;return n>=0?n:x-(t-e)};const Xn=(e,t)=>{while(e<0){e+=x}while(t<0){t+=x}while(e>x){e-=x}while(t>x){t-=x}const n=t-e;return n>=0?n:x-(e-t)};const Kn=(e,t)=>{const n=t[0]*e[0]+t[1]*e[1];const s=t[0]*e[1]-t[1]*e[0];let r=Math.atan2(s,n);if(r<0){r+=x}return r};const es=(e,t)=>{const n=e[0]*t[0]+e[1]*t[1];const s=e[0]*t[1]-e[1]*t[0];let r=Math.atan2(s,n);if(r<0){r+=x}return r};const ts=(e,t)=>qn(Dn(e)-Kn(e,t)/2);const ns=(e,t)=>qn(Dn(e)+es(e,t)/2);const ss=(e,t,n)=>{const s=Yn(e,t)/n;return Array.from(Array(n-1)).map(((t,n)=>e+s*(n+1)))};const rs=(e,t,n)=>{const s=Xn(e,t)/n;return Array.from(Array(n-1)).map(((t,n)=>e+s*(n+1)))};const os=(e,t,n)=>{const s=Math.atan2(e[1],e[0]);const r=Math.atan2(t[1],t[0]);return ss(s,r,n).map(qn)};const cs=(e,t,n)=>{const s=Math.atan2(e[1],e[0]);const r=Math.atan2(t[1],t[0]);return rs(s,r,n).map(qn)};const as=e=>{const t=e.map(((e,t)=>t)).sort(((t,n)=>e[t]-e[n]));return t.slice(t.indexOf(0),t.length).concat(t.slice(0,t.indexOf(0)))};const is=e=>as(e.map(Dn));const fs=e=>as(e).map((t=>e[t])).map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>Xn(e[0],e[1])));const ls=e=>fs(e.map(Dn));const ds=(e,t,n,s=E)=>{const r=P(U(t,e));const o=P(U(n,e));const c=K(r,o);if(!it(c,0,s)){return Math.sign(c)}return it(ne(e,t)+ne(t,n),ne(e,n))?0:undefined};const us=Object.freeze({__proto__:null,clockwiseAngle2:Kn,clockwiseAngleRadians:Yn,clockwiseBisect2:ts,clockwiseSubsect2:os,clockwiseSubsectRadians:ss,counterClockwiseAngle2:es,counterClockwiseAngleRadians:Xn,counterClockwiseBisect2:ns,counterClockwiseOrder2:is,counterClockwiseOrderRadians:as,counterClockwiseSectors2:ls,counterClockwiseSectorsRadians:fs,counterClockwiseSubsect2:cs,counterClockwiseSubsectRadians:rs,isCounterClockwiseBetween:Zn,threePointTurnDirection:ds});const ms=e=>{let t=-1;e.filter((e=>e!==undefined)).forEach((e=>e.forEach((e=>e.forEach((e=>{if(e>t){t=e}}))))));return t};const gs=e=>{let t=-1;e.forEach((e=>{if(e[0]>t){t=e[0]}if(e[1]>t){t=e[1]}}));return t};const ps={edges:"edgeOrders",faces:"faceOrders"};const _s=(e,t)=>Math.max(ms(Pt(e,t).map((t=>e[t]))),e[ps[t]]?gs(e[ps[t]]):-1)+1;_s.vertices=e=>_s(e,"vertices");_s.edges=e=>_s(e,"edges");_s.faces=e=>_s(e,"faces");const hs=({vertices_vertices:e,vertices_sectors:t},n,s,r={})=>{const o={};const c={vertices:[n],edges:[],angles:[]};let a=n;let i=s;while(true){const n=e[i];const s=n.indexOf(a);const f=(s+n.length-1)%n.length;const l=n[f];const d=`${i} ${l}`;if(o[d]){Object.assign(r,o);c.vertices.pop();return c}o[d]=true;if(r[d]){return undefined}c.vertices.push(i);c.edges.push(d);if(t){c.angles.push(t[i][f])}a=i;i=l}};const vs=({vertices_vertices:e,vertices_sectors:t})=>{const n={vertices_vertices:e,vertices_sectors:t};const s={};return e.map(((e,t)=>e.map((e=>hs(n,t,e,s))).filter((e=>e!==undefined)))).flat()};const bs=e=>e.filter((e=>e.angles.map((e=>Math.PI-e)).reduce(((e,t)=>e+t),0)>0));const ys=Object.freeze({__proto__:null,counterClockwiseWalk:hs,filterWalkedBoundaryFace:bs,planarVertexWalk:vs});const Es=(e,t=[1,0,0],n=[0,0,0])=>{const s=de(3,e);const r=Q(s,de(3,n));const o=T(de(3,t));const c=W(o,r);const a=B(o,c);return Q(s,a)};const Ms=Object.freeze({__proto__:null,projectPointOnPlane:Es});const As=(e,t,n)=>e.map(((e,s)=>({i:s,n:n(e,t)}))).sort(((e,t)=>e.n-t.n)).map((e=>e.i));const xs=(e,t)=>As(e,t,D);const ws=e=>{const t=[e=>e[0]>=0&&e[1]>=0,e=>e[0]<0&&e[1]>=0,e=>e[0]<0&&e[1]<0,e=>e[0]>=0&&e[1]<0];const n=[(t,n)=>e[n][0]-e[t][0],(t,n)=>e[n][0]-e[t][0],(t,n)=>e[t][0]-e[n][0],(t,n)=>e[t][0]-e[n][0]];const s=e.map((e=>t.map(((t,n)=>t(e)?n:undefined)).filter((e=>e!==undefined)).shift()));const r=[[],[],[],[]];s.forEach(((e,t)=>{r[e].push(t)}));return r.flatMap(((e,t)=>e.sort(n[t])))};const ks=(e,t=[1,0,0],n=[0,0,0])=>{const s=ge(t);const r=[s[1],s[2],s[0]];const o=e.map((e=>Es(e,t,n)));const c=o.map((e=>I(e,n)));const a=c.map((e=>[D(e,r[0]),D(e,r[1])]));const i=a.map(P);return ws(i)};const Os=Object.freeze({__proto__:null,radialSortPointIndices3:ks,radialSortUnitVectors2:ws,sortAgainstItem:As,sortPointsAlongVector:xs});const js=({vertices_coords:e},t,n)=>t.map((t=>e[t])).map((t=>I(t,e[n]))).map((e=>Math.atan2(e[1],e[0]))).map((e=>e>-E?e:e+Math.PI*2)).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).map((e=>e.i)).map((e=>t[e]));const Fs=({vertices_coords:e},t,n)=>xs(t.map((t=>e[t])),n).map((e=>t[e]));const Ss=Object.freeze({__proto__:null,sortVerticesAlongVector:Fs,sortVerticesCounterClockwise:js});const Cs=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))).map((e=>{let t;let n;let s=0;do{t=I(e[(s+1)%e.length],e[s]);n=I(e[(s+2)%e.length],e[s]);s+=1}while(s<e.length&&fe(t,n));return T(ee(de(3,t),de(3,n)))}));const Vs=({vertices_coords:e,faces_vertices:t,faces_normal:n})=>{const s=(e,t)=>{e[0]+=t[0];e[1]+=t[1];e[2]+=t[2]};if(!n){n=Cs({vertices_coords:e,faces_vertices:t})}const r=e.map((()=>[0,0,0]));t.forEach(((e,t)=>e.forEach((e=>s(r[e],n[t])))));return r.map((e=>T(e)))};const Ps=Object.freeze({__proto__:null,makeFacesNormal:Cs,makeVerticesNormal:Vs});const Ts=({edges_vertices:e})=>{const t=[];e.forEach(((e,n)=>e.forEach((e=>{if(t[e]===undefined){t[e]=[]}t[e].push(n)}))));return t};const Ns=({edges_vertices:e,vertices_vertices:t})=>{const n=Us({edges_vertices:e});return t.map(((e,t)=>e.map((e=>n[`${t} ${e}`]))))};const zs=({vertices_coords:e,vertices_edges:t,edges_vertices:n})=>{if(!t){t=Ts({edges_vertices:n})}const s=t.map(((e,t)=>e.map((e=>n[e].filter((e=>e!==t)))).reduce(((e,t)=>e.concat(t)),[])));return e===undefined?s:s.map(((t,n)=>js({vertices_coords:e},t,n)))};const Bs=({vertices_coords:e,vertices_faces:t,faces_vertices:n})=>{if(!t){t=Ls({vertices_coords:e,faces_vertices:n})}const s=t.map((e=>e.map((e=>n[e]))));const r=s.map(((e,t)=>e.map((e=>e.indexOf(t)))));const o=s.map(((e,t)=>e.map(((e,n)=>[(r[t][n]+e.length-1)%e.length,r[t][n],(r[t][n]+1)%e.length]))));const c=o.map(((e,t)=>e.map(((e,n)=>e.map((e=>s[t][n][e]))))));const a=c.map((e=>{const t=e.map((e=>[[0,1],[1,2]].map((t=>t.map((t=>e[t])).join(" ")))));const n={};const s={};t.forEach(((e,t)=>{n[e[0]]=t;s[e[1]]=t}));return{facesVerts:t,to:s,from:n}}));return a.map((e=>{const t=Object.keys(e.to);const n=t.map((e=>e.split(" ").reverse().join(" ")));const s=t.filter(((t,s)=>!(n[s]in e.from)));if(s.length>2){console.warn("vertices_vertices found an unsolvable vertex");return[]}const r=s.length?s:[t[0]];const o=[];const c={};for(let t=0;t<r.length;t+=1){const n=r[t];const s=[n];c[n]=true;let a=false;do{const t=s[s.length-1];const n=e.to[t];if(!(n in e.facesVerts)){break}let r;if(e.facesVerts[n][0]===t){r=e.facesVerts[n][1]}if(e.facesVerts[n][1]===t){r=e.facesVerts[n][0]}if(r===undefined){return"not found"}const o=r.split(" ").reverse().join(" ");s.push(r);a=o in c;if(!a){s.push(o)}c[r]=true;c[o]=true}while(!a);const i=s.filter(((e,t)=>t%2===0)).map((e=>e.split(" ")[1])).map((e=>parseInt(e,10)));o.push(...i)}return o}))};const $s=e=>{if(!e.vertices_coords||!e.vertices_coords.length){return[]}const t=e.vertices_coords.filter((()=>true)).shift().length;switch(t){case 3:return Bs(e);default:return zs(e)}};const Rs=({vertices_edges:e,edges_vertices:t})=>{if(!e){e=Ts({edges_vertices:t})}return e.map(((e,n)=>e.flatMap((e=>t[e].filter((e=>e!==n))))))};const Ls=({vertices_coords:e,vertices_edges:t,faces_vertices:n})=>{const s=e||t;if(!n){return(s||[]).map((()=>[]))}const r=s!==undefined?s.map((()=>[])):Array.from(Array(_s.vertices({faces_vertices:n}))).map((()=>[]));n.forEach(((e,t)=>{const n=[];e.forEach((e=>{n[e]=t}));n.forEach(((e,t)=>r[t].push(e)))}));return r};const Is=({vertices_coords:e,vertices_vertices:t,faces_vertices:n})=>{if(!n){return e.map((()=>[]))}if(!t){return Ls({vertices_coords:e,faces_vertices:n})}const s=Ds({faces_vertices:n});return t.map(((e,t)=>e.map(((e,n,s)=>[s[(n+1)%s.length],t,e].join(" "))))).map((e=>e.map((e=>s[e]))))};const Us=({edges_vertices:e})=>{const t={};e.map((e=>e.join(" "))).forEach(((e,n)=>{t[e]=n}));e.map((e=>`${e[1]} ${e[0]}`)).forEach(((e,n)=>{t[e]=n}));return t};const Qs=({edges_vertices:e})=>{const t={};e.map((e=>e.join(" "))).forEach(((e,n)=>{t[e]=n}));return t};const Ds=({faces_vertices:e})=>{const t={};e.forEach(((e,n)=>e.map(((t,n)=>[0,1,2].map((t=>(n+t)%e.length)).map((t=>e[t])).join(" "))).forEach((e=>{t[e]=n}))));return t};const qs=({vertices_coords:e,vertices_vertices:t,vertices_edges:n,vertices_faces:s,edges_vertices:r,edges_vector:o,faces_vertices:c})=>{if(!o){o=nr({vertices_coords:e,edges_vertices:r})}if(!t){t=$s({vertices_coords:e,vertices_edges:n,vertices_faces:s,edges_vertices:r,faces_vertices:c})}const a=Qs({edges_vertices:r});return t.map(((e,n)=>t[n].map((e=>{const t=a[`${n} ${e}`];const s=a[`${e} ${n}`];if(t!==undefined){return o[t]}if(s!==undefined){return re(o[s])}}))))};const Ws=({vertices_coords:e,vertices_vertices:t,edges_vertices:n,edges_vector:s})=>qs({vertices_coords:e,vertices_vertices:t,edges_vertices:n,edges_vector:s}).map((e=>e.length===1?[x]:ls(e)));const Gs=({edges_vertices:e,vertices_edges:t})=>e.map(((e,n)=>{const s=t[e[0]].filter((e=>e!==n));const r=t[e[1]].filter((e=>e!==n));return s.concat(r)}));const Hs=({edges_vertices:e,faces_edges:t})=>{const n=e!==undefined?e.map((()=>[])):Array.from(Array(_s.edges({faces_edges:t}))).map((()=>[]));t.forEach(((e,t)=>{const s=[];e.forEach((e=>{s[e]=t}));s.forEach(((e,t)=>n[t].push(e)))}));return n};const Js=({vertices_coords:e,edges_vertices:t,edges_vector:n,faces_vertices:s,faces_edges:r,faces_center:o})=>{if(!t||!s&&!r){return Hs({faces_edges:r})}if(!s){s=cr({edges_vertices:t,faces_edges:r})}if(!r){r=ar({edges_vertices:t,faces_vertices:s})}if(!n){n=nr({vertices_coords:e,edges_vertices:t})}const c=t.map((t=>e[t[0]]));if(!o){o=ur({vertices_coords:e,faces_vertices:s})}const a=t.map((()=>[]));r.forEach(((e,t)=>{const n=[];e.forEach((e=>{n[e]=t}));n.forEach(((e,t)=>a[t].push(e)))}));a.forEach(((e,t)=>{const s=e.map((e=>o[e])).map((e=>U(e,c[t]))).map((e=>K(e,n[t])));e.sort(((e,t)=>s[e]-s[t]))}));return a};const Zs={M:-180,m:-180,V:180,v:180};const Ys=({edges_foldAngle:e})=>e.map((e=>{if(e===0){return"F"}return e<0?"M":"V"}));const Xs=({edges_vertices:e,edges_foldAngle:t,edges_faces:n,faces_vertices:s,faces_edges:r})=>{if(e&&!n){if(!r&&s){r=ar({edges_vertices:e,faces_vertices:s})}if(r){n=Hs({edges_vertices:e,faces_edges:r})}}if(t){return n?t.map(((e,t)=>{if(n[t].length<2){return"B"}if(e===0){return"F"}return e<0?"M":"V"})):Ys({edges_foldAngle:t})}return e.map((()=>"U"))};const Ks=({edges_assignment:e})=>e.map((e=>Zs[e]||0));const er=({vertices_coords:e,edges_vertices:t,edges_faces:s,edges_assignment:r,faces_vertices:o,faces_edges:c,faces_normal:a,faces_center:i})=>{if(!s){if(!c){c=ar({edges_vertices:t,faces_vertices:o})}s=Hs({edges_vertices:t,faces_edges:c})}if(!a){a=Cs({vertices_coords:e,faces_vertices:o})}if(!i){i=ur({vertices_coords:e,faces_vertices:o})}return s.map(((e,t)=>{if(e.length>2){throw new Error(n.manifold)}if(e.length<2){return 0}const s=a[e[0]];const o=a[e[1]];const c=V(I(i[e[1]],i[e[0]]));let f=Math.sign(D(s,c));if(f===0){if(r&&r[t]){if(r[t]==="F"||r[t]==="F"){f=0}if(r[t]==="M"||r[t]==="m"){f=-1}if(r[t]==="V"||r[t]==="v"){f=1}}else{throw new Error(n.flatFoldAngles)}}return Math.acos(D(s,o))*(180/Math.PI)*f}))};const tr=({vertices_coords:e,edges_vertices:t})=>t.map((t=>t.map((t=>e[t]))));const nr=({vertices_coords:e,edges_vertices:t})=>tr({vertices_coords:e,edges_vertices:t}).map((e=>I(e[1],e[0])));const sr=({vertices_coords:e,edges_vertices:t})=>nr({vertices_coords:e,edges_vertices:t}).map((e=>O(e)));const rr=({vertices_coords:e,edges_vertices:t,edges_coords:n},s=0)=>{if(!n){n=tr({vertices_coords:e,edges_vertices:t})}return n.map((e=>ct(e,s)))};const or=({vertices_coords:e,vertices_vertices:t,vertices_edges:n,vertices_sectors:s,edges_vertices:r,edges_vector:o})=>{if(!t){t=$s({vertices_coords:e,edges_vertices:r,vertices_edges:n})}if(!s){s=Ws({vertices_coords:e,vertices_vertices:t,edges_vertices:r,edges_vector:o})}const c=Us({edges_vertices:r});const a=bs(vs({vertices_vertices:t,vertices_sectors:s})).map((e=>({...e,edges:e.edges.map((e=>c[e]))})));return{faces_vertices:a.map((e=>e.vertices)),faces_edges:a.map((e=>e.edges)),faces_sectors:a.map((e=>e.angles))}};const cr=({edges_vertices:e,faces_edges:t})=>t.map((t=>t.map((t=>e[t])).map(((e,t,n)=>{const s=n[(t+1)%n.length];return e[0]===s[0]||e[0]===s[1]?e[1]:e[0]}))));const ar=({edges_vertices:e,faces_vertices:t})=>{const n=Us({edges_vertices:e});return t.map((e=>e.map(((e,t,n)=>[e,n[(t+1)%n.length]].join(" "))))).map((e=>e.map((e=>n[e]))))};const ir=({faces_vertices:e})=>{const t=e.map((()=>[]));const n={};e.forEach(((e,t)=>e.forEach(((s,r,o)=>{let c=o[(r+1)%e.length];if(c<s){[s,c]=[c,s]}const a=`${s} ${c}`;if(n[a]===undefined){n[a]={}}n[a][t]=true}))));Object.values(n).map((e=>Object.keys(e))).filter((e=>e.length>1)).forEach((e=>{t[e[0]].push(parseInt(e[1],10));t[e[1]].push(parseInt(e[0],10))}));return t};const fr=({vertices_coords:e,faces_vertices:t},n)=>t.map((t=>t.map((t=>e[t])))).map((e=>nt(e,n)));const lr=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t]))));const dr=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))).map((e=>rt(e)));const ur=({vertices_coords:e,faces_vertices:t})=>{const n=e.filter((()=>true)).shift();if(!n){return t.map((()=>[]))}const s=n.length;return t.map((t=>t.map((t=>e[t])).reduce(((e,t)=>$(e,t)),Array(s).fill(0)).map((e=>e/t.length))))};const mr=Object.freeze({__proto__:null,makeEdgesAssignment:Xs,makeEdgesAssignmentSimple:Ys,makeEdgesBoundingBox:rr,makeEdgesCoords:tr,makeEdgesEdges:Gs,makeEdgesFaces:Js,makeEdgesFacesUnsorted:Hs,makeEdgesFoldAngle:Ks,makeEdgesFoldAngleFromFaces:er,makeEdgesLength:sr,makeEdgesVector:nr,makeFacesCenter2D:dr,makeFacesConvexCenter:ur,makeFacesEdgesFromVertices:ar,makeFacesFaces:ir,makeFacesPolygon:fr,makeFacesPolygonQuick:lr,makeFacesVerticesFromEdges:cr,makePlanarFaces:or,makeVerticesEdges:Ns,makeVerticesEdgesUnsorted:Ts,makeVerticesFaces:Is,makeVerticesFacesUnsorted:Ls,makeVerticesSectors:Ws,makeVerticesToEdge:Qs,makeVerticesToEdgeBidirectional:Us,makeVerticesToFace:Ds,makeVerticesVertices:$s,makeVerticesVertices2D:zs,makeVerticesVerticesFromFaces:Bs,makeVerticesVerticesUnsorted:Rs,makeVerticesVerticesVector:qs});const gr=({edges_vertices:e})=>{if(!e){return[]}const t=[];const n={};for(let s=0;s<e.length;s+=1){const r=`${e[s][0]} ${e[s][1]}`;const o=`${e[s][1]} ${e[s][0]}`;if(n[r]!==undefined){t[s]=n[r]}else{n[r]=s;n[o]=s}}return t};const pr=(e,t)=>{if(!t){t=gr(e)}const n=Object.keys(t).map((e=>parseInt(e,10)));const s=Pn(e,"edges",t);if(n.length){if(e.vertices_edges||e.vertices_vertices||e.vertices_faces){e.vertices_edges=Ts(e);e.vertices_vertices=$s(e);e.vertices_edges=Ns(e);e.vertices_faces=Is(e)}}return{map:s,remove:n}};const _r=Object.freeze({__proto__:null,duplicateEdges:gr,removeDuplicateEdges:pr});const hr=({edges_vertices:e})=>{if(!e){return[]}const t=[];for(let n=0;n<e.length;n+=1){if(e[n][0]===e[n][1]){t.push(n)}}return t};const vr=(e,t,n)=>{const s={};n.forEach((e=>{s[e]=true}));Pt(e,t).forEach((t=>e[t].forEach(((n,r)=>{for(let o=n.length-1;o>=0;o-=1){if(s[n[o]]===true){e[t][r].splice(o,1)}}}))))};const br=(e,t)=>{if(!t){t=hr(e)}if(t.length){vr(e,"edges",t)}return{map:$n(e,"edges",t),remove:t}};const yr=Object.freeze({__proto__:null,circularEdges:hr,removeCircularEdges:br});const Er=(e,t)=>{const n=Nn(e,t);const s=br(e);const r=pr(e);const o=Un(e);const c=wn(n.map);const a=o.remove.map((e=>c[e]));const i=wn(s.map);const f=r.remove.map((e=>i[e]));return{vertices:{map:En(n.map,o.map),remove:n.remove.concat(a)},edges:{map:En(s.map,r.map),remove:s.remove.concat(f)}}};const Mr=({vertices_coords:e,edges_vertices:t,edges_assignment:n,edges_foldAngle:s,faces_vertices:r,faces_edges:o})=>{if(!r){return undefined}let c=0;let a=0;const i={faces_vertices:r.map((e=>e.map((()=>a++))))};if(!e){return i}i.vertices_coords=structuredClone(r.flatMap((t=>t.map((t=>e[t])))));if(!t){return i}if(!o){o=ar({edges_vertices:t,faces_vertices:r})}i.edges_vertices=o.flatMap((e=>e.map(((e,t,n)=>t===n.length-1?[c,++c-n.length]:[c,++c]))));const f=o.flatMap((e=>e));if(n){i.edges_assignment=structuredClone(f.map((e=>n[e])))}if(s){i.edges_foldAngle=structuredClone(f.map((e=>s[e])))}return i};const Ar=({vertices_coords:e,edges_vertices:t,edges_assignment:n,edges_foldAngle:s})=>{if(!t){return undefined}let r=0;const o={edges_vertices:t.map((e=>e.map((()=>r++))))};if(n){o.edges_assignment=n}if(s){o.edges_foldAngle=s}if(e){o.vertices_coords=structuredClone(t.flatMap((t=>t.map((t=>e[t])))))}return o};const xr=Object.freeze({__proto__:null,explodeEdges:Ar,explodeFaces:Mr});const wr=e=>e;const kr=e=>e<-E?0:e;const Or=e=>{if(e<-E){return 0}if(e>1+E){return 1}return e};const jr=(e,t,n,s=E)=>{const r=[[e,t],[t,n]].map((e=>I(e[1],e[0]))).map((e=>V(e)));return it(1,Math.abs(D(...r)),s)};const Fr=(e,t,n,s=false,r=E)=>{const o=[e,n].map((e=>lt(t,e,r))).reduce(((e,t)=>e||t),false);if(o){return s}const c=[[e,t],[t,n]].map((e=>I(e[1],e[0]))).map((e=>V(e)));return it(1,D(...c),E)};const Sr=(e,t,n)=>{const s=X(e.vector,t.vector,n);const r=X(e.origin,t.origin,n);return{vector:s,origin:r}};const Cr=(e,t,n)=>{const s=D(e.vector,t.vector)<0;const r=e.vector;const o=s?re(t.vector):t.vector;const c=Array.from(Array(n-1)).map(((s,r)=>X(e.origin,t.origin,(r+1)/n)));const a=Array.from(Array(n-1)).map(((e,t)=>X(r,o,(t+1)/n)));const i=a.map(((e,t)=>({vector:e,origin:[...c[t]]})));const f=[i,i];f[s?0:1]=[];return f};const Vr=(e,t,n,s=E)=>{const r=K(e.vector,t.vector);const o=K(U(t.origin,e.origin),t.vector);const c=o/r;const a=[e.vector,t.vector].map((e=>V(e)));const i=Math.abs(K(...a))<s;if(i){return Cr(e,t,n)}const f=r>-s?[[e.vector,t.vector],[re(t.vector),e.vector]]:[[t.vector,e.vector],[re(e.vector),t.vector]];const l=f.map((e=>cs(e[0],e[1],n)));const d=R(e.origin,z(e.vector,c));const u=Array.from(Array(n-1)).map((()=>d));return l.map((e=>e.map(((e,t)=>({vector:e,origin:[...u[t]]})))))};const Pr=(e,t,n=E)=>{const s=Vr(e,t,2,n).map((e=>e[0]));s.forEach(((e,t)=>{if(e===undefined){delete s[t]}}));return s};const Tr=Object.freeze({__proto__:null,bisectLines2:Pr,clampLine:wr,clampRay:kr,clampSegment:Or,collinearBetween:Fr,isCollinear:jr,lerpLines:Sr,pleat:Vr});const Nr=(e,t)=>{const n=hn(e,(e=>ne(e,t)));return n===undefined?undefined:e[n]};const zr=(e,t)=>{const n=hn(e,(e=>te(e,t)));return n===undefined?undefined:e[n]};const Br=({vector:e,origin:t},n,s=wr,r=E)=>{t=de(e.length,t);n=de(e.length,n);const o=C(e);const c=I(n,t);const a=D(e,c);const i=a/o;const f=s(i,r);return $(t,N(e,f))};const $r=(e,t)=>e.map(((e,t,n)=>I(n[(t+1)%n.length],e))).map(((t,n)=>({vector:t,origin:e[n]}))).map((e=>Br(e,t,Or))).map(((e,n)=>({point:e,edge:n,distance:te(e,t)}))).sort(((e,t)=>e.distance-t.distance)).shift();const Rr=({radius:e,origin:t},n)=>$(t,N(V(I(n,t)),e));const Lr=Object.freeze({__proto__:null,nearestPoint:zr,nearestPoint2:Nr,nearestPointOnCircle:Rr,nearestPointOnLine:Br,nearestPointOnPolygon:$r});const Ir=({vector:e,origin:t},n,s=mt,r=E)=>{const o=U(n,t);const c=C(e);const a=Math.sqrt(c);if(a<r){return false}const i=K(o,e.map((e=>e/a)));const f=q(o,e)/c;return Math.abs(i)<r&&s(f,r/a)};const Ur=(e,t,n=mt,s=mt,r=E)=>{const o=K(e.vector,t.vector);const c=-o;const a=U(t.origin,e.origin);const i=[-a[0],-a[1]];if(Math.abs(o)<r){if(Math.abs(K(a,e.vector))>r){return false}const o=i;const c=R(o,e.vector);const f=H(o,c);const l=a;const d=R(l,t.vector);const u=H(l,d);const m=q(e.vector,e.vector);const g=q(t.vector,t.vector);const p=q(o,t.vector)/g;const _=q(c,t.vector)/g;const h=q(f,t.vector)/g;const v=q(l,e.vector)/m;const b=q(d,e.vector)/m;const y=q(u,e.vector)/m;return n(v,r)||n(b,r)||s(p,r)||s(_,r)||n(y,r)||s(h,r)}const f=K(a,t.vector)/o;const l=K(i,e.vector)/c;return n(f,r/j(e.vector))&&s(l,r/j(t.vector))};const Qr=({radius:e,origin:t},n,s=ut,r=E)=>s(e-ne(t,n),r);const Dr=(e,t,n=ut,s=E)=>e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>K(P(U(e[1],e[0])),U(t,e[0])))).map((e=>n(e,s))).map(((e,t,n)=>e===n[0])).reduce(((e,t)=>e&&t),true);const qr=(e,t,n=ut,s=E)=>{const r=e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((([e,n])=>[U(n,e),U(t,e)])).map((([e,t])=>K(e,t)));const o=Math.sign(r.reduce(((e,t)=>e+t),0));const c=r.map((e=>e*o)).map((e=>n(e,s))).map(((e,t,n)=>e===n[0])).reduce(((e,t)=>e&&t),true);return{overlap:c,t:r}};const Wr=(e,t,n=E)=>{for(let s=0;s<2;s+=1){const r=s===0?e:t;const o=s===0?t:e;for(let e=0;e<r.length;e+=1){const t=r[e];const s=oe(U(r[(e+1)%r.length],r[e]));const c=o.map((e=>U(e,t))).map((e=>q(s,e)));const a=r[(e+2)%r.length];const i=q(s,U(a,t));const f=i>0;const l=c.map((e=>f?e<n:e>-n)).reduce(((e,t)=>e&&t),true);if(l){return false}}}return true};const Gr=(e,t,n=E)=>{const s=Math.min(e.min.length,t.min.length);for(let r=0;r<s;r+=1){if(e.min[r]>t.max[r]+n||e.max[r]<t.min[r]-n){return false}}return true};const Hr=Object.freeze({__proto__:null,overlapBoundingBoxes:Gr,overlapCirclePoint:Qr,overlapConvexPolygonPoint:Dr,overlapConvexPolygonPointNew:qr,overlapConvexPolygons:Wr,overlapLineLine:Ur,overlapLinePoint:Ir});const Jr=({vertices_coords:e},t)=>{if(!e){return undefined}const n=Ut({vertices_coords:e});if(n===undefined){return undefined}const s=de(n,t);const r=e.map(((e,t)=>({d:te(s,e),i:t}))).sort(((e,t)=>e.d-t.d)).shift();return r?r.i:undefined};const Zr=({vertices_coords:e,edges_vertices:t},n)=>{if(!e||!t){return undefined}const s=t.map((t=>t.map((t=>e[t])))).map((e=>Br({vector:I(e[1],e[0]),origin:e[0]},n,Or)));return hn(s,(e=>te(e,n)))};const Yr=({vertices_coords:e,faces_vertices:t},n,s=ut)=>!e||!t?[]:t.map(((t,n)=>({face:t.map((t=>e[t])),i:n}))).filter((e=>Dr(e.face,n,s))).map((e=>e.i));const Xr=({vertices_coords:e,faces_vertices:t},n)=>{const s=Yr({vertices_coords:e,faces_vertices:t},n);return s.length?s.shift():undefined};const Kr=(e,t)=>{const n=Xr(e,t);if(n!==undefined){return n}if(e.edges_faces){const n=Zr(e,t);if(n===undefined){return undefined}const s=e.edges_faces[n];if(s.length===1){return s[0]}if(s.length>1){const n=ur({vertices_coords:e.vertices_coords,faces_vertices:s.map((t=>e.faces_vertices[t]))});const r=n.map((e=>te(e,t)));let o=0;for(let e=0;e<r.length;e+=1){if(r[e]<r[o]){o=e}}return s[o]}}return undefined};const eo=(e,...t)=>{const n={vertices:Jr,edges:Zr,faces:Kr};const s=l(...t);const r=Object.create(null);["vertices","edges","faces"].forEach((t=>{Object.defineProperty(r,yt[t],{enumerable:true,get:()=>n[t](e,s)});Vt(e,t).forEach((n=>Object.defineProperty(r,n,{enumerable:true,get:()=>e[n][r[yt[t]]]})))}));return r};const to=Object.freeze({__proto__:null,faceContainingPoint:Xr,facesContainingPoint:Yr,nearest:eo,nearestEdge:Zr,nearestFace:Kr,nearestVertex:Jr});const no=(e,t,n=mt,s=mt,r=E)=>{const o=K(P(e.vector),P(t.vector));if(Math.abs(o)<r){return{a:undefined,b:undefined,point:undefined}}const c=K(e.vector,t.vector);const a=-c;const i=[t.origin[0]-e.origin[0],t.origin[1]-e.origin[1]];const f=[-i[0],-i[1]];const l=K(i,t.vector)/c;const d=K(f,e.vector)/a;if(n(l,r/j(e.vector))&&s(d,r/j(t.vector))){return{a:l,b:d,point:R(e.origin,z(e.vector,l))}}return{a:undefined,b:undefined,point:undefined}};const so=(e,t,n=dt,s=mt,r=E)=>{const o=t.vector[0]**2+t.vector[1]**2;const c=Math.sqrt(o);const a=c===0?t.vector:t.vector.map((e=>e/c));const i=oe(a);const f=U(t.origin,e.origin);const l=K(f,a);if(Math.abs(l)>e.radius+r){return undefined}const d=Math.sqrt(e.radius**2-l**2);const u=(t,n)=>e.origin[n]-i[n]*l+a[n]*t;const m=Math.abs(e.radius-Math.abs(l))<r?[d].map((e=>[e,e].map(u))):[-d,d].map((e=>[e,e].map(u)));const g=m.map((e=>e.map(((e,n)=>e-t.origin[n])))).map((e=>e[0]*t.vector[0]+t.vector[1]*e[1])).map((e=>e/o));return m.filter(((e,t)=>s(g[t],r)))};const ro=e=>{if(e>=1)return 0;if(e<=-1)return Math.PI;return Math.acos(e)};const oo=(e,t,n)=>{const s=t[0]-e[0];const r=t[1]-e[1];const o=s*Math.cos(n)+r*Math.sin(n);const c=r*Math.cos(n)-s*Math.sin(n);return[e[0]+o,e[1]+c]};const co=(e,t,n=dt,s=dt,r=E)=>{const o=e.radius<t.radius?e.radius:t.radius;const c=e.radius<t.radius?t.radius:e.radius;const a=e.radius<t.radius?e.origin:t.origin;const i=e.radius<t.radius?t.origin:e.origin;const f=[a[0]-i[0],a[1]-i[1]];const l=Math.sqrt(f[0]**2+f[1]**2);if(l<r){return undefined}const d=f.map(((e,t)=>e/l*c+i[t]));if(Math.abs(c+o-l)<r||Math.abs(c-(o+l))<r){return[d]}if(l+o<c||c+o<l){return undefined}const u=ro((o*o-l*l-c*c)/(-2*l*c));const m=oo(i,d,+u);const g=oo(i,d,-u);return[m,g]};const ao=e=>{for(let t=1;t<e.length;t+=1){if(!lt(e[0],e[t])){return[e[0],e[t]]}}return undefined};const io=(e,{vector:t,origin:n},s=ht,r=mt,o=E)=>{const c=e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>no({vector:U(e[1],e[0]),origin:e[0]},{vector:t,origin:n},s,r,o).point)).filter((e=>e!==undefined));switch(c.length){case 0:return undefined;case 1:return[c];default:return ao(c)||[c[0]]}};const fo=(e,{vector:t,origin:n},s=ht,r=gt,o=E)=>{const c=io(e,{vector:t,origin:n},s,r,o);let a;switch(r){case _t:a=pt;break;case vt:a=ht;break;default:return c}const i=io(e,{vector:t,origin:n},ht,a,o);if(i===undefined){return undefined}const f=ao(i);if(f===undefined){switch(r){case _t:return Dr(e,n,ut,.001)?i:undefined;case vt:return Dr(e,R(n,t),ut,.001)||Dr(e,n,ut,.001)?i:undefined;case gt:return undefined;default:return undefined}}return Dr(e,H(...f),ut,.001)?f:c};const lo=Object.freeze({__proto__:null,intersectCircleCircle:co,intersectCircleLine:so,intersectConvexPolygonLine:fo,intersectLineLine:no});const uo=(e,t)=>{let n=[0];for(let s=1;s<e.length;s+=1){switch(t(e[n[0]],e[s])){case 0:n.push(s);break;case 1:n=[s];break}}return n};const mo=(e,t)=>{if(!e.length){return[]}const n=e.map(((e,t)=>t));const s=[[n[0]]];for(let r=1;r<n.length;r+=1){const o=n[r];if(o===undefined){continue}const c=s.length-1;const a=s[c][s[c].length-1];if(t(e[a],e[o])){s[c].push(o)}else{s.push([o])}}return s};const go=(e,t=E)=>{const n=e.map(((e,t)=>({v:e,i:t}))).sort(((e,t)=>e.v-t.v)).map((e=>e.i));const s=n.map((t=>e[t]));const r=(e,n)=>Math.abs(e-n)<t;return mo(s,r).map((e=>e.map((e=>n[e]))))};const po=(e,t=E)=>{const n=[[0]];for(let s=1;s<e.length;s+=1){let r=false;for(let o=0;o<n.length;o+=1){const c=n[o][0];if(fe(e[s],e[c],t)){n[o].push(s);r=true;break}}if(!r){n.push([s])}}return n};const _o=Object.freeze({__proto__:null,clusterParallelVectors:po,clusterScalars:go,clusterSortedGeneric:mo,minimumCluster:uo});const ho=({vertices_coords:e,faces_vertices:t},n=0)=>t.map((t=>[t.reduce(((t,s)=>e[t][n]<e[s][n]?t:s)),t.reduce(((t,s)=>e[t][n]>e[s][n]?t:s))]));const vo=({vertices_coords:e},t=0,n=E)=>go(e.map((e=>e[t])),n).map((n=>({vertices:n,t:n.reduce(((n,s)=>n+e[s][t]),0)/n.length})));const bo=(e,{edges_vertices:t,vertices_edges:n},s=E)=>{if(!n){n=Ts({edges_vertices:t})}const r=t.map((t=>t.map((t=>e[t]))));const o=r.map((e=>it(...e,s)));const c=r.map((([e,t])=>Math.sign(e-t)));const a=t.map((([e,t],n)=>o[n]?{[e]:0,[t]:0}:{[e]:c[n],[t]:-c[n]}));return go(e,s).map((e=>e.filter((e=>n[e])))).filter((e=>e.length)).map((t=>({vertices:t,t:t.reduce(((t,n)=>t+e[n]),0)/t.length,start:ln(t.flatMap((e=>n[e].filter((t=>a[t][e]<=0))))),end:ln(t.flatMap((e=>n[e].filter((t=>a[t][e]>=0)))))})))};const yo=({vertices_coords:e,edges_vertices:t,vertices_edges:n},s=0,r=E)=>bo(e.map((e=>e[s])),{edges_vertices:t,vertices_edges:n},r);const Eo=({vertices_coords:e,faces_vertices:t},n=0,s=E)=>bo(e.map((e=>e[n])),{edges_vertices:ho({vertices_coords:e,faces_vertices:t},n)},s);const Mo=({vertices_coords:e,edges_vertices:t,faces_vertices:n},s=0,r=E)=>{const o=e.map((e=>e[s]));const c=ho({vertices_coords:e,faces_vertices:n},s);const a=Ts({edges_vertices:t});const i=Ts({edges_vertices:c});const f=t.map((e=>e.map((e=>o[e]))));const l=c.map((e=>e.map((e=>o[e]))));const d=f.map((e=>it(...e,r)));const u=l.map((e=>it(...e,r)));const m=f.map((([e,t])=>Math.sign(e-t)));const g=l.map((([e,t])=>Math.sign(e-t)));const p=t.map((([e,t],n)=>d[n]?{[e]:0,[t]:0}:{[e]:m[n],[t]:-m[n]}));const _=n.map((([e,t],n)=>u[n]?{[e]:0,[t]:0}:{[e]:g[n],[t]:-g[n]}));return go(o,r).map((e=>({vertices:e,t:e.reduce(((e,t)=>e+o[t]),0)/e.length,edges:{start:ln(e.filter((e=>a[e]!==undefined)).flatMap((e=>a[e].filter((t=>p[t][e]<=0))))),end:ln(e.filter((e=>a[e]!==undefined)).flatMap((e=>a[e].filter((t=>p[t][e]>=0)))))},faces:{start:ln(e.filter((e=>i[e]!==undefined)).flatMap((e=>i[e].filter((t=>_[t][e]<=0))))),end:ln(e.filter((e=>i[e]!==undefined)).flatMap((e=>i[e].filter((t=>_[t][e]>=0)))))}})))};const Ao=Object.freeze({__proto__:null,sweep:Mo,sweepEdges:yo,sweepFaces:Eo,sweepValues:bo,sweepVertices:vo});const xo=({edges_vertices:e},t,n)=>n.map((n=>e[n][0]===t?e[n][1]:e[n][0]));const wo=Object.freeze({__proto__:null,getOtherVerticesInEdges:xo});const ko=({vertices_coords:e,vertices_edges:t,edges_vertices:n},s,r=E)=>{if(!e||!n){return false}if(!t){t=Ts({edges_vertices:n})}const o=t[s];if(o===undefined||o.length!==2){return false}const c=xo({edges_vertices:n},s,o);const a=[c[0],s,c[1]].map((t=>e[t]));return Fr(...a,false,r)};const Oo=Object.freeze({__proto__:null,isVertexCollinear:ko});const jo=({vertices_coords:e,edges_vertices:t},n)=>Wn(e[t[n][0]],e[t[n][1]]);const Fo=({vertices_coords:e,edges_vertices:t},n=E)=>{if(!e||!t||!t.length){return{edges_line:[],lines:[]}}const s=tr({vertices_coords:e,edges_vertices:t});const r=s.map((e=>I(e[1],e[0]))).map(V);const o=r.map(((e,t)=>({vector:e,origin:s[t][0]})));const c=o.map((e=>Br(e,[0,0,0],wr))).map((e=>O(e)));const a=go(c,n);const i=a.map((e=>e.map((e=>r[e])))).map((e=>po(e,.001))).map(((e,t)=>e.map((e=>e.map((e=>a[t][e]))))));const f=i.map((s=>s.map((s=>{if(Math.abs(c[s[0]])<n){return[s]}const r=o[s[0]].vector;const a=s.map((n=>e[t[n][0]])).map((e=>Es(e,r)));const i=ks(a,r);const f=(e,t)=>lt(a[e],a[t],n);const l=e=>e.map((e=>i[e])).map((e=>s[e]));const d=mo(i,f);if(d.length===1){return d.map(l)}const u=d[0][0];const m=d[d.length-1];const g=m[m.length-1];const p=[u,g].map((e=>i[e]));if(f(...p)){const e=d.pop();d[0]=e.concat(d[0])}return d.map(l)}))));const l=f.flatMap((e=>e.flatMap((e=>e))));const d=jn(l);const u=l.map((e=>e.flatMap((e=>t[e])))).map(ln);const m=l.map((e=>r[e[0]]));const g=u.map(((t,n)=>t.map((t=>D(m[n],e[t])))));const p=g.map(((e,t)=>u[t][vn(e)]));const _=g.map(((e,t)=>u[t][bn(e)]));const h=u.map(((t,n)=>I(e[_[n]],e[p[n]])));const v=p.map((t=>e[t]));const b=h.map(((e,t)=>({vector:e,origin:v[t]})));return{lines:b,edges_line:d}};const So=Object.freeze({__proto__:null,edgeToLine:jo,getEdgesLine:Fo});const Co=(e,t=E)=>{const n=e.map((()=>[]));for(let s=0;s<e.length-1;s+=1){for(let r=s+1;r<e.length;r+=1){const{a:o,b:c,point:a}=no(e[s],e[r],ht,ht,t);if(a===undefined){continue}n[s].push(o);n[r].push(c)}}return n};const Vo=({edges_vertices:e,vertices_edges:t},n)=>{const s=t[n].sort(((e,t)=>e-t));const r=s.flatMap((t=>e[t])).filter((e=>e!==n)).slice(0,2);e[s[0]]=r;e[s[1]]=undefined;r.forEach((e=>{const n=t[e].indexOf(s[1]);if(n===-1){return}t[e][n]=s[0]}));return s[1]};const Po=({vertices_coords:e,edges_vertices:t,edges_assignment:n,edges_foldAngle:s},r=E)=>{const{lines:o,edges_line:c}=Fo({vertices_coords:e,edges_vertices:t},r);const a=o.map((({vector:e})=>S(e)));const i=On(c);const f=t.map(((t,n)=>t.map((t=>e[t])).map((e=>q(U(e,o[c[n]].origin),o[c[n]].vector)))));const l=i.map((e=>e.flatMap((e=>f[e])))).map((e=>mn(e,r)));const d=Co(o,r).map((e=>mn(e,r))).map(((e,t)=>e.map((e=>e*a[t])))).map(((e,t)=>pn(e,l[t],r)));const u=i.map((e=>e.flatMap((e=>f[e]))));const m=i.map((e=>wn(e).map((e=>[e*2,e*2+1]))));const g=i.map(((e,t)=>bo(u[t],{edges_vertices:m[t]},r)));const p=g.map((e=>e.map((e=>e.t))));const _=g.map((e=>{const t={};const n=e.map((e=>{e.start.forEach((e=>{t[e]=true}));e.end.forEach((e=>{delete t[e]}));return Object.keys(t).map((e=>parseInt(e,10)))}));n.pop();return n}));d.forEach(((e,t)=>{const n=p[t];const s=_[t];let r=0;let o=0;while(r<e.length&&o<n.length-1){if(e[r]<=n[o]){throw new Error("bad algorithm")}if(e[r]>n[o+1]){o+=1;continue}n.splice(o+1,0,e[r]);s.splice(o+1,0,s[o]);r+=1}}));const h=p.flatMap(((e,t)=>e.map((e=>e/a[t])).map((e=>R(o[t].origin,z(o[t].vector,e))))));let v=0;const b=_.map((e=>{const t=e.map((()=>[v,++v]));v+=1;return t})).flatMap(((e,t)=>e.filter(((e,n)=>_[t][n].length))));const y={vertices_coords:h,edges_vertices:b};if(n||s){const e=_.flatMap((e=>e.filter((e=>e.length))));if(n){y.edges_assignment=e.map((e=>n[e[0]]))}if(s){y.edges_foldAngle=e.map((e=>s[e[0]]))}}Un(y,Rn(y));Nn(y,r);br(y);y.vertices_edges=Ts(y);const M=y.vertices_edges.map(((e,t)=>e.length===2?t:undefined)).filter((e=>e!==undefined)).filter((e=>ko(y,e,r))).reverse();const A=M.map((e=>Vo(y,e)));$n(y,"edges",A);$n(y,"vertices",M);const x=gr(y);if(x.length){pr(y,x)}if(hr(y).length){console.error("planarize: found circular edges")}delete y.vertices_edges;return y};const To=e=>{const t=e.edges_vertices.length;if(!e.edges_assignment){e.edges_assignment=[]}if(!e.edges_foldAngle){e.edges_foldAngle=[]}if(e.edges_assignment.length>e.edges_foldAngle.length){for(let t=e.edges_foldAngle.length;t<e.edges_assignment.length;t+=1){e.edges_foldAngle[t]=Ot(e.edges_assignment[t])}}if(e.edges_foldAngle.length>e.edges_assignment.length){for(let t=e.edges_assignment.length;t<e.edges_foldAngle.length;t+=1){e.edges_assignment[t]=jt(e.edges_foldAngle[t])}}for(let n=e.edges_assignment.length;n<t;n+=1){e.edges_assignment[n]="U";e.edges_foldAngle[n]=0}};const No=(e,t)=>{if(t===undefined&&!e.faces_vertices&&!e.faces_edges&&e.vertices_coords&&It(e)===2){t=true}if(t&&e.vertices_coords){const t=or(e);e.faces_vertices=t.faces_vertices;e.faces_edges=t.faces_edges;return}if(e.faces_vertices&&e.faces_edges){return}if(e.faces_vertices&&!e.faces_edges){e.faces_edges=ar(e)}else if(e.faces_edges&&!e.faces_vertices){e.faces_vertices=cr(e)}else{e.faces_vertices=[];e.faces_edges=[]}};const zo=(e,t)=>{if(typeof e!=="object"){return e}if(!e.edges_vertices){return e}e.vertices_edges=Ts(e);e.vertices_vertices=$s(e);e.vertices_edges=Ns(e);To(e);No(e,t);e.vertices_faces=Is(e);e.edges_faces=Hs(e);e.faces_faces=ir(e);return e};const Bo=({vertices_vertices:e},t,n)=>{if(!e){return}e[t]=[...n];n.forEach(((n,s,r)=>{const o=r[(s+1)%r.length];const c=e[n].indexOf(o);e[n][c]=t}))};const $o=({vertices_coords:e,vertices_vertices:t,vertices_sectors:n},s)=>{if(!n){return}n[s]=t[s].length===1?[x]:ls(t[s].map((t=>U(e[t],e[s]))))};const Ro=({vertices_edges:e},t,n,s,r)=>{if(!e){return}e[n]=[...r];s.map((n=>e[n].indexOf(t))).forEach(((t,n)=>{e[s[n]][t]=r[n]}))};const Lo=({vertices_faces:e},t,n)=>{if(!e){return}e[t]=[...n]};const Io=({edges_faces:e},t,n)=>{if(!e){return}t.forEach((t=>{e[t]=[...n]}))};const Uo=({faces_vertices:e},t,n,s)=>{if(!e){return}s.map((t=>e[t])).forEach((e=>e.map(((e,t,s)=>{const r=(t+1)%s.length;return e===n[0]&&s[r]===n[1]||e===n[1]&&s[r]===n[0]?r:undefined})).filter((e=>e!==undefined)).sort(((e,t)=>t-e)).forEach((n=>e.splice(n,0,t)))))};const Qo=({edges_vertices:e,faces_vertices:t,faces_edges:n},s)=>{const r=Us({edges_vertices:e});s.map((e=>t[e].map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>r[e.join(" ")])))).forEach(((e,t)=>{n[s[t]]=e}))};const Do=({vertices_faces:e,edges_vertices:t,edges_faces:n,faces_edges:s,faces_vertices:r},o)=>{if(n&&n[o]){return n[o]}const c=t[o];if(e!==undefined){const t=[];for(let n=0;n<e[c[0]].length;n+=1){for(let s=0;s<e[c[1]].length;s+=1){if(e[c[0]][n]===e[c[1]][s]){if(e[c[0]][n]===undefined){continue}t.push(e[c[0]][n])}}}return t}if(s){const e=[];for(let t=0;t<s.length;t+=1){for(let n=0;n<s[t].length;n+=1){if(s[t][n]===o){e.push(t)}}}return e}if(r){console.warn("todo: findAdjacentFacesToEdge")}};const qo=(e,t,n)=>{const s=e.edges_vertices[t];const r=[{edges_vertices:[s[0],n]},{edges_vertices:[n,s[1]]}];r.forEach((n=>["edges_assignment","edges_foldAngle"].filter((n=>e[n]&&e[n][t]!==undefined)).forEach((s=>{n[s]=e[s][t]}))));return r};const Wo=(e,t,n,s=E)=>{if(e.edges_vertices.length<t){return{}}const r=e.edges_vertices[t];if(!n){n=G(...r.map((t=>e.vertices_coords[t])))}const o=r.map((t=>e.vertices_coords[t])).map((e=>te(e,n)<s));if(o[0]){return{vertex:r[0],edges:{}}}if(o[1]){return{vertex:r[1],edges:{}}}const c=e.vertices_coords.length;e.vertices_coords[c]=n;const a=[0,1].map((t=>t+e.edges_vertices.length));qo(e,t,c).forEach(((t,n)=>Object.keys(t).forEach((s=>{e[s][a[n]]=t[s]}))));Bo(e,c,r);$o(e,c);Ro(e,t,c,r,a);const i=Do(e,t);if(i){Lo(e,c,i);Io(e,a,i);Uo(e,c,r,i);Qo(e,i)}const f=$n(e,"edges",[t]);a.forEach(((e,t)=>{a[t]=f[a[t]]}));f.splice(-2);f[t]=a;return{vertex:c,edges:{map:f,new:a,remove:t}}};const Go=({vertices_coords:e},t,n)=>{const s=t.map((t=>e[t])).reverse();return{edges_vertices:[...t],edges_foldAngle:0,edges_assignment:"U",edges_length:te(...s),edges_vector:I(...s),edges_faces:[n,n]}};const Ho=(e,t,n)=>{const s=e.edges_vertices.length;const r=Go(e,n,t);Object.keys(r).filter((t=>e[t]!==undefined)).forEach((t=>{e[t][s]=r[t]}));return s};const Jo=({edges_vertices:e,faces_vertices:t,faces_edges:n},s,r)=>{const o=r.map((e=>t[s].indexOf(e)));const c=fn(t[s],o).map((e=>({faces_vertices:e})));if(n){const t=Us({edges_vertices:e});c.map((e=>e.faces_vertices.map(((e,t,n)=>`${e} ${n[(t+1)%n.length]}`)).map((e=>t[e])))).forEach(((e,t)=>{c[t].faces_edges=e}))}return c};const Zo=(e,t,n)=>{const s=[0,1].map((t=>e.faces_vertices.length+t));Jo(e,t,n).forEach(((t,n)=>Object.keys(t).forEach((r=>{e[r][s[n]]=t[r]}))));return s};const Yo=(e,{vertices:t,edges:n})=>{let s;const r=n.map((t=>{const n=Wo(e,s?s[t.edge]:t.edge,t.coords);s=s?Mn(s,n.edges.map):n.edges.map;return n}));t.push(...r.map((e=>e.vertex)));let o;r.forEach((e=>{e.edges.remove=o?o[e.edges.remove]:e.edges.remove;const t=wn(e.edges.map);o=o?xn(o,t):t}));return{vertices:t,edges:{map:s,remove:r.map((e=>e.edges.remove))}}};const Xo=({vertices_coords:e,vertices_vertices:t,edges_vertices:n},s)=>{const r=n[s][0];const o=n[s][1];t[r]=js({vertices_coords:e},t[r].concat(o),r);t[o]=js({vertices_coords:e},t[o].concat(r),o)};const Ko=({edges_vertices:e,vertices_edges:t,vertices_vertices:n},s)=>{if(!t||!n){return}const r=e[s];r.map((e=>n[e])).map(((e,t)=>e.indexOf(r[(t+1)%r.length]))).forEach(((e,n)=>t[r[n]].splice(e,0,s)))};const ec=(e,t,s)=>{const r={};s.forEach((t=>e.faces_vertices[t].forEach((e=>{if(!r[e]){r[e]=[]}r[e].push(t)}))));e.faces_vertices[t].forEach((s=>{const o=e.vertices_faces[s].indexOf(t);const c=r[s];if(o===-1||!c){throw new Error(n.convexFace)}e.vertices_faces[s].splice(o,1,...c)}))};const tc=(e,t,s,r)=>{const o={};r.forEach((t=>e.faces_edges[t].forEach((e=>{if(!o[e]){o[e]=[]}o[e].push(t)}))));const c=[...e.faces_edges[t],s];c.forEach((s=>{const r=o[s];const c=[];for(let n=0;n<e.edges_faces[s].length;n+=1){if(e.edges_faces[s][n]===t){c.push(n)}}if(c.length===0||!r){throw new Error(n.convexFace)}c.reverse().forEach((t=>e.edges_faces[s].splice(t,1)));const a=c[c.length-1];e.edges_faces[s].splice(a,0,...r)}))};const nc=({faces_vertices:e,faces_faces:t},n,s)=>{const r=t[n];const o=s.map((t=>e[t]));const c=r.map((t=>{const n=e[t];const r=[0,0];for(let e=0;e<o.length;e+=1){let t=0;for(let s=0;s<n.length;s+=1){if(o[e].indexOf(n[s])!==-1){t+=1}}r[e]=t}if(r[0]>=2){return s[0]}if(r[1]>=2){return s[1]}}));s.forEach(((e,n,r)=>{t[e]=[r[(n+1)%s.length]]}));r.forEach(((e,s)=>{for(let r=0;r<t[e].length;r+=1){if(t[e][r]===n){t[e][r]=c[s];t[c[s]].push(e)}}}))};const sc=()=>0;const rc=(e,t)=>e<-t?-1:0;const oc=(e,t)=>e<-t?-1:e>1+t?1:0;const cc=({vertices_coords:e,faces_vertices:t},{vector:n,origin:s},r=sc,o=E)=>{const c=q(n,n);const a=P(n);const i=e.map((e=>U(e,s))).map((e=>P(e))).map((e=>K(a,e))).map((e=>Math.abs(e)<o?0:Math.sign(e)));const f=e.map((e=>U(e,s))).map((e=>q(e,n))).map((e=>e/c)).map((e=>r(e,o)));const l=t.map((e=>e.map((e=>i[e])).map(((e,t,n)=>e===n[0])).reduce(((e,t)=>e&&t),true))).map((e=>!e));const d=t.map((e=>e.map((e=>f[e])).map(((e,t,n)=>e===n[0])).reduce(((e,t)=>e&&t),true))).map((e=>!e)).map(((e,n)=>e||f[t[n][0]]===0));return t.map(((e,t)=>t)).filter((e=>l[e]&&d[e]))};const ac=(e,{vector:t,origin:n},s=E)=>cc(e,{vector:t,origin:n},sc,s);const ic=(e,{vector:t,origin:n},s=E)=>cc(e,{vector:t,origin:n},rc,s);const fc=(e,t,n=E)=>{const s=U(t[1],t[0]);const r=t[0];return cc(e,{vector:s,origin:r},oc,n)};const lc=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},r,{vector:o,origin:c},a=E)=>{const i=n[r].map((t=>e[t])).map((e=>Ir({vector:o,origin:c},e,(()=>true),a))).map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined));const f=i.map((e=>n[r][e]));const l=i.concat(i.map((e=>e+n[r].length))).map(((e,t,n)=>n[t+1]-e===1)).reduce(((e,t)=>e||t),false);if(l){return undefined}if(f.length>1){return{vertices:f,edges:[]}}const d=s[r].map((n=>t[n].map((t=>e[t])))).map((e=>no({vector:o,origin:c},{vector:U(e[1],e[0]),origin:e[0]},mt,vt,a).point)).map(((e,t)=>({coords:e,edge:s[r][t]}))).filter((e=>e.coords!==undefined)).filter((e=>!f.map((n=>t[e.edge].includes(n))).reduce(((e,t)=>e||t),false)));return d.length+f.length===2?{vertices:f,edges:d}:undefined};const dc=Object.freeze({__proto__:null,facesLineTypeOverlap:cc,getFacesLineOverlap:ac,getFacesRayOverlap:ic,getFacesSegmentOverlap:fc,intersectConvexFaceLine:lc});const uc=(e,t,n,s)=>{const r=lc(e,t,n,s);if(r===undefined){return undefined}const o=Yo(e,r);o.edges.new=Ho(e,t,o.vertices);Xo(e,o.edges.new);Ko(e,o.edges.new);const c=Zo(e,t,o.vertices);ec(e,t,c);tc(e,t,o.edges.new,c);nc(e,t,c);const a=$n(e,"faces",[t]);c.forEach(((e,t)=>{c[t]=a[c[t]]}));a.splice(-2);a[t]=c;o.faces={map:a,new:c,remove:t};return o};const mc=(e,t)=>{const n={};t.forEach((e=>{n[e]=true}));const s=[];t.forEach((t=>{s[t]=e[t].filter((e=>n[e]))}));return s};const gc=(e,t={})=>{const n={vertices:[],edges:[],faces:[],...t};const s=Object.keys(n);const r={...e};_.graph.forEach((e=>delete r[e]));delete r.file_frames;const o={};s.forEach((e=>{o[e]={}}));s.forEach((e=>n[e].forEach((t=>{o[e][t]=true}))));const c={};s.forEach((t=>{Vt(e,t).forEach((e=>{c[e]={}}));Pt(e,t).forEach((e=>{c[e]={}}))}));s.forEach((t=>{Vt(e,t).forEach((e=>{c[e].prefix=t}));Pt(e,t).forEach((e=>{c[e].suffix=t}))}));Object.keys(c).forEach((e=>{r[e]=[]}));Object.keys(c).forEach((t=>{const{prefix:s,suffix:a}=c[t];if(s&&a){n[s].forEach((n=>{r[t][n]=e[t][n].filter((e=>o[a][e]))}))}else if(s){n[s].forEach((n=>{r[t][n]=e[t][n]}))}else if(a){r[t]=e[t].map((e=>e.filter((e=>o[a][e]))))}else{r[t]=e[t]}}));return r};const pc=(e,t={})=>{const n={vertices:[],edges:[],faces:[],...t};const s={vertices:{},edges:{},faces:{}};n.vertices.forEach((e=>{s.vertices[e]=true}));n.edges.forEach((e=>{s.edges[e]=true}));n.edges.forEach((t=>e.edges_vertices[t].forEach((e=>{s.vertices[e]=true}))));n.faces.forEach((e=>{s.faces[e]=true}));n.faces.forEach((t=>e.faces_vertices[t].forEach((e=>{s.vertices[e]=true}))));e.faces_vertices.map(((e,t)=>t)).filter((t=>e.faces_vertices[t].map((e=>s.vertices[e])).reduce(((e,t)=>e&&t),true))).forEach((e=>{s.faces[e]=true}));e.edges_vertices.map(((e,t)=>t)).filter((t=>e.edges_vertices[t].map((e=>s.vertices[e])).reduce(((e,t)=>e&&t),true))).forEach((e=>{s.edges[e]=true}));return gc(e,{vertices:Object.keys(s.vertices),edges:Object.keys(s.edges),faces:Object.keys(s.faces)})};const _c=(e,t)=>{let n=[];if(e.faces_vertices){n=un(t.flatMap((t=>e.faces_vertices[t])))}let s=[];if(e.faces_edges){s=un(t.flatMap((t=>e.faces_edges[t])))}else if(e.edges_vertices){const t={};n.forEach((e=>{t[e]=true}));s=e.edges_vertices.map(((e,n)=>t[e[0]]&&t[e[1]]?n:undefined)).filter((e=>e!==undefined))}return gc(e,{vertices:n,edges:s,faces:t})};const hc=(e,t=[])=>{const n={vertices:[],edges:[]};t.forEach((e=>{n.vertices[e]=true}));if(e.vertices_edges){n.vertices.forEach(((t,s)=>e.vertices_edges[s].forEach((e=>{n.edges[e]=true}))))}if(e.edges_vertices){n.edges.forEach(((t,s)=>e.edges_vertices[s].forEach((e=>{n.vertices[e]=true}))))}return gc(e,{vertices:n.vertices.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined)),edges:n.edges.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined))})};const vc=Object.freeze({__proto__:null,selfRelationalArraySubset:mc,subgraph:pc,subgraphExclusive:gc,subgraphWithFaces:_c,subgraphWithVertices:hc});const bc=(e,t)=>{const n={};e.forEach((e=>{n[e]=1}));t.forEach((e=>{n[e]=n[e]===1?2:1}));return Object.keys(n).filter((e=>n[e]===2))};const yc=(e=[])=>{if(e.length<2){return[]}const t={};e[0].forEach(((e,n)=>{t[n]=true}));return Array.from(Array(e.length-1)).map(((t,n)=>e[n+1])).flatMap(((e,n)=>e.map(((e,s)=>t[s]?undefined:[0,n+1,s])).filter((e=>e!==undefined))))};const Ec=e=>{const t=Tt(e).filter((e=>e!=="file"&&e!=="frame"));const n=Nt(e);const s=t.map((t=>Vt(e,t)));const r=s.map((t=>t.map((t=>e[t])).filter((e=>e.constructor===Array)))).map(yc).flatMap(((e,t)=>e.map((e=>[s[t][e[0]],s[t][e[1]],e[2]])))).map((([e,t,n])=>`array indices differ ${e}, ${t} at index ${n}`));const o=bc(t,n).flatMap((n=>{const r=s[t.indexOf(n)];const o=e[r[0]];return Pt(e,n).flatMap((t=>e[t].flatMap(((e,s)=>e.map(((e,c)=>e===null||e===undefined||o[e]!==undefined?undefined:`${t}[${s}][${c}] references ${n} ${e}, missing in ${r[0]}`)).filter((e=>e!==undefined))))))}));return r.concat(o)};const Mc=(e,t)=>{const n=Ec(e);const s=gr(e);const r=hr(e);const o=In(e);const c=Tn(e,t);if(r.length!==0){n.push(`contains circular edges: ${r.join(", ")}`)}if(o.length!==0){n.push(`contains isolated vertices: ${o.join(", ")}`)}if(s.length!==0){n.push("contains duplicate edges")}if(c.length!==0){n.push(`contains duplicate vertices`)}return n};const Ac=Object.freeze({__proto__:null,validate:Ec,validateComprehensive:Mc});const xc=(e,t)=>{const n={};t.forEach((e=>{n[e]=true}));const s=e.map((e=>!!n[e]));const r=[];const o=s.indexOf(false);const c={};for(let t=o+1;t<s.length;t+=1){if(s[t]&&!c[e[t]]){r.push(e[t]);c[e[t]]=true}}for(let t=0;t<o;t+=1){if(s[t]&&!c[e[t]]){r.push(e[t]);c[e[t]]=true}}return r};const wc=Object.freeze({__proto__:null,getFaceFaceSharedVertices:xc});const kc=(e=[],t=0)=>{if(e.length===0){return[]}const n=[];const s={};e.forEach(((e,t)=>{s[t]=true}));do{const r=t!==undefined&&s[t]?t:parseInt(Object.keys(s).shift(),10);t=undefined;const o=[];delete s[r];let c=[{index:r}];do{o.push(c);const t=c.flatMap((t=>e[t.index].filter((e=>s[e])).map((e=>({index:e,parent:t.index})))));const n={};t.forEach(((e,t)=>{if(!s[e.index]){n[t]=true}delete s[e.index]}));c=t.filter(((e,t)=>!n[t]))}while(c.length);n.push(o)}while(Object.keys(s).length);return n};const Oc=(e,t)=>kc(e,t).shift();const jc=Object.freeze({__proto__:null,minimumSpanningTree:Oc,minimumSpanningTrees:kc});const Fc=({vertices_coords:e,vertices_faces:t,faces_vertices:n},s)=>{if(!t){t=Is({faces_vertices:n})}const r=t.map((e=>e.filter((e=>e!=null)).shift())).map((e=>e===undefined?ve:s[e]));return e.map(((e,t)=>be(r[t],e)))};const Sc={U:true,u:true};const Cc=({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_faces:o},c=0)=>{if(!s&&n){s=Ys({edges_foldAngle:n})}if(!n){if(s){n=Ks({edges_assignment:s})}else{n=Array(t.length).fill(0)}}if(!o){o=ir({faces_vertices:r})}const a=Us({edges_vertices:t});const i=r.map((()=>Ce));kc(o,c).forEach((t=>t.slice(1).forEach((t=>t.forEach((t=>{const o=xc(r[t.index],r[t.parent]).slice(0,2);const c=o.map((t=>e[t]));const f=o.join(" ");const l=a[f];const d=Sc[s[l]]?Math.PI:n[l]*Math.PI/180;const u=Qe(d,I(...ue(c[1],c[0])),c[0]);i[t.index]=Ne(i[t.parent],u)}))))));return i};const Vc=({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_faces:o},c=0)=>{if(!n){if(s){n=Ks({edges_assignment:s})}else{n=Array(t.length).fill(0)}}if(!o){o=ir({faces_vertices:r})}const a=Qt({edges_vertices:t,edges_foldAngle:n,edges_assignment:s});const i=Us({edges_vertices:t});const f=r.map((()=>ve));kc(o,c).forEach((t=>t.slice(1).forEach((t=>t.forEach((t=>{const n=xc(r[t.index],r[t.parent]).slice(0,2);const s=n.map((t=>e[t]));const o=n.join(" ");const c=i[o];const l=U(s[1],s[0]);const d=s[0];const u=a[c]?je(l,d):ve;f[t.index]=Ee(f[t.parent],u)}))))));return f};const Pc=Object.freeze({__proto__:null,makeFacesMatrix:Cc,makeFacesMatrix2:Vc,multiplyVerticesFacesMatrix2:Fc});const Tc=({vertices_coords:e},{vector:t,origin:n},s=E)=>{const r=V(t);const o=e=>{const t=I(e,n);const o=O(t);if(Math.abs(o)<s){return true}const c=t.map((e=>e/o));const a=Math.abs(D(c,r));return Math.abs(1-a)<s};return e.map(o).map(((e,t)=>({a:e,i:t}))).filter((e=>e.a)).map((e=>e.i))};const Nc=Object.freeze({__proto__:null,getVerticesCollinearToLine:Tc});const zc=({vertices_coords:e,edges_vertices:t,vertices_edges:n},{vector:s,origin:r},o=E)=>{if(!n){n=Ts({edges_vertices:t})}const c=Tc({vertices_coords:e},{vector:s,origin:r},o);const a=t.map((()=>0));c.forEach((e=>n[e].forEach((e=>{a[e]+=1}))));return a.map(((e,t)=>({count:e,i:t}))).filter((e=>e.count===2)).map((e=>e.i))};const Bc=({vertices_coords:e,edges_vertices:t},{min:n,max:s},r=E)=>{const o=tr({vertices_coords:e,edges_vertices:t});const c=n.map((e=>e-r));const a=s.map((e=>e+r));return t.map(((e,t)=>t)).filter((e=>!(o[e][0][0]<c[0]&&o[e][1][0]<c[0]))).filter((e=>!(o[e][0][0]>a[0]&&o[e][1][0]>a[0]))).filter((e=>!(o[e][0][1]<c[1]&&o[e][1][1]<c[1]))).filter((e=>!(o[e][0][1]>a[1]&&o[e][1][1]>a[1])))};const $c=({vertices_coords:e,edges_vertices:t},n,s,r=E)=>{const o=ct([n,s]);const c=U(s,n);const a={vector:c,origin:n};const i=Bc({vertices_coords:e,edges_vertices:t},o,r);const f=[];i.forEach((n=>{const s=t[n].map((t=>e[t]));const o=U(s[1],s[0]);const c={vector:o,origin:s[0]};const i=no(a,c,ht,ht,r).point;if(!i){return}f[n]=i}));return f};const Rc=({vertices_coords:e,edges_vertices:t},{vector:n,origin:s},r=E,o=ht)=>t.map((t=>{const c=t.map((t=>e[t]));const a=U(c[1],c[0]);const i={vector:a,origin:c[0]};return no(i,{vector:n,origin:s},o,mt,r)}));const Lc=Object.freeze({__proto__:null,getEdgesCollinearToLine:zc,getEdgesLineIntersection:Rc,getEdgesRectOverlap:Bc,getEdgesSegmentIntersection:$c});const Ic=e=>e.map((e=>e[0]*e[4]-e[1]*e[3])).map((e=>e>=0));const Uc=e=>e.map((e=>e[0]*e[3]-e[1]*e[2])).map((e=>e>=0));const Qc=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])).map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>(e[1][0]-e[0][0])*(e[1][1]+e[0][1]))).reduce(((e,t)=>e+t),0))).map((e=>e<0));const Dc=Object.freeze({__proto__:null,makeFacesWinding:Qc,makeFacesWindingFromMatrix:Ic,makeFacesWindingFromMatrix2:Uc});const qc=(e,t)=>{const n=[];const s=e.map(((e,t)=>t));const r=s.filter((e=>t[e]));const o=s.filter((e=>!t[e]));o.sort(((t,n)=>e[t]-e[n])).forEach(((e,t)=>{n[e]=t}));r.sort(((t,n)=>e[n]-e[t])).forEach(((e,t)=>{n[e]=o.length+t}));return n};const Wc=(e,t,n,s=E)=>{const r=Yr(e,t);if(r.length===0){return undefined}if(r.length===1){return r[0]}return r[0]};const Gc=(e,t,n,s)=>{const r=U(n,t);const o=K(e,r);return s?o>0:o<0};const Hc=(e,t)=>!e.faces_vertices[t]?[0,0]:e.faces_vertices[t].map((t=>e.vertices_coords[t])).reduce(((e,t)=>[e[0]+t[0],e[1]+t[1]]),[0,0]).map((n=>n/e.faces_vertices[t].length));const Jc={F:true,f:true,U:true,u:true};const Zc={M:"V",m:"V",V:"M",v:"M"};const Yc=e=>Zc[e]||e;const Xc=(e,t)=>({center:e.faces_center[t],matrix:e.faces_matrix2[t],winding:e.faces_winding[t],crease:e.faces_crease[t],side:e.faces_side[t],layer:e.faces_layer[t]});const Kc=(e,{vector:t,origin:n},s="V",r=E)=>{const o=Yc(s);zo(e);if(!e.faces_layer){e.faces_layer=Array(e.faces_vertices.length).fill(0)}e.faces_center=e.faces_vertices.map(((t,n)=>Hc(e,n)));if(!e.faces_matrix2){e.faces_matrix2=Vc(e,Wc(e,n,t,r))}e.faces_winding=Uc(e.faces_matrix2);e.faces_crease=e.faces_matrix2.map(Ae).map((e=>ye(e,t,n)));e.faces_side=e.faces_vertices.map(((t,n)=>Gc(e.faces_crease[n].vector,e.faces_crease[n].origin,e.faces_center[n],e.faces_winding[n])));const c=Fc(e,e.faces_matrix2);const a=zc({vertices_coords:c,edges_vertices:e.edges_vertices},{vector:t,origin:n},r).filter((t=>Jc[e.edges_assignment[t]]));a.map((t=>e.edges_faces[t].find((e=>e!=null)))).map((t=>e.faces_winding[t])).map((e=>e?s:o)).forEach(((t,n)=>{e.edges_assignment[a[n]]=t;e.edges_foldAngle[a[n]]=Ot(t)}));const i=Xc(e,0);const f=e.faces_vertices.map(((e,t)=>t)).reverse().map((t=>{const n=Xc(e,t);const c=uc(e,t,n.crease,r);if(c===undefined){return undefined}e.edges_assignment[c.edges.new]=n.winding?s:o;e.edges_foldAngle[c.edges.new]=Ot(e.edges_assignment[c.edges.new]);const a=c.faces.map[c.faces.remove];a.forEach((t=>{e.faces_center[t]=Hc(e,t);e.faces_side[t]=Gc(n.crease.vector,n.crease.origin,e.faces_center[t],n.winding);e.faces_layer[t]=n.layer}));return c})).filter((e=>e!==undefined));const l=Mn(...f.map((e=>e.faces.map)));const d=Mn(...f.map((e=>e.edges.map)).filter((e=>e!==undefined)));const u=f.map((e=>e.faces.remove)).reverse();e.faces_layer=qc(e.faces_layer,e.faces_side);const m=l&&l[0]&&l[0].length===2;const g=m?l[0].filter((t=>e.faces_side[t])).shift():0;let p=i.matrix;if(s!==o){p=!m&&!e.faces_side[0]?i.matrix:Ee(i.matrix,je(i.crease.vector,i.crease.origin))}e.faces_matrix2=Vc(e,g).map((e=>Ee(p,e)));delete e.faces_center;delete e.faces_winding;delete e.faces_crease;delete e.faces_side;return{faces:{map:l,remove:u},edges:{map:d}}};const ea=e=>{const t=[];const n=(s,r)=>{if(t[s]!==undefined){return 0}t[s]=r;e[s].forEach((e=>n(e,r)));return 1};for(let t=0,s=0;t<e.length;t+=1){if(!(t in e)){continue}s+=n(t,s)}return t};const ta=e=>{const t=[];const n=[];e.forEach(((e,s)=>e.forEach((e=>{if(s<e){n.push([s,e])}if(s===e&&!t[s]){t[s]=true;n.push([s,e])}}))));return n};const na=Object.freeze({__proto__:null,connectedComponents:ea,connectedComponentsPairs:ta});const sa=e=>{const t=e.edges_vertices||[];const n=e.faces_vertices||[];const s=e.vertices_edges?e.vertices_edges:Ts({edges_vertices:t});const r=e.vertices_vertices?e.vertices_vertices:Rs({vertices_edges:s,edges_vertices:t});const o=e.vertices_faces?e.vertices_faces:Ls({vertices_edges:s,faces_vertices:n});const c=On(ea(r));const a=c.map((e=>e.flatMap((e=>s[e])))).map(ln);const i=c.map((e=>e.flatMap((e=>o[e])))).map(ln);return Array.from(Array(c.length)).map(((e,t)=>({vertices:c[t]||[],edges:a[t]||[],faces:i[t]||[]})))};const ra=e=>{const t=sa(e);const n=Vt(e,"vertices");const s=Vt(e,"edges");const r=Vt(e,"faces");return t.map((({vertices:t,edges:o,faces:c})=>{const a={};n.forEach((n=>{a[n]=[];t.forEach((t=>{a[n][t]=e[n][t]}))}));s.forEach((t=>{a[t]=[];o.forEach((n=>{a[t][n]=e[t][n]}))}));r.forEach((t=>{a[t]=[];c.forEach((n=>{a[t][n]=e[t][n]}))}));return a}))};const oa=Object.freeze({__proto__:null,disjointGraphs:ra,disjointGraphsIndices:sa});const ca=({vertices_coords:e},t)=>ct(e,t);const aa=({edges_vertices:e,edges_assignment:t=[]})=>ln(e.filter(((e,n)=>kt[t[n]])).flat());const ia=()=>({vertices:[],edges:[],polygon:[]});const fa=({vertices_coords:e,vertices_edges:t,edges_vertices:n,edges_assignment:s})=>{if(!s||!n){return ia()}if(!t){t=Ts({edges_vertices:n})}const r=s.map((e=>e==="B"||e==="b"));const o=[];const c=[];let a=-1;for(let e=0;e<r.length;e+=1){if(r[e]){a=e;break}}if(a===-1){return ia()}r[a]=false;o.push(a);c.push(n[a][0]);let i=n[a][1];while(c[0]!==i){c.push(i);a=t[i].filter((e=>r[e])).shift();if(a===undefined){return ia()}if(n[a][0]===i){[,i]=n[a]}else{[i]=n[a]}r[a]=false;o.push(a)}return{vertices:c,edges:o,polygon:e?c.map((t=>e[t])):[]}};const la=()=>console.error("todo");const da=({vertices_coords:e,vertices_edges:t,vertices_vertices:n,edges_vertices:s})=>{if(!n){n=zs({vertices_coords:e,vertices_edges:t,edges_vertices:s})}const r=Us({edges_vertices:s});const o=[];const c=[];const a={vertices:c,edges:o};let i=-Infinity;let f=-1;e.forEach(((e,t)=>{if(e[0]>i){i=e[0];f=t}}));if(f===-1){return a}c.push(f);const l=e[f];const d=n[f];if(!d){return a}const u=d.map((t=>e[t])).map((e=>[e[0]-l[0],e[1]-l[1]])).map((e=>Math.atan2(e[1],e[0]))).map((e=>e<0?e+Math.PI*2:e)).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).shift().i;const m=d[u];const g=f<m?`${f} ${m}`:`${m} ${f}`;const p=r[g];o.push(p);let _=f;let h=m;const v={[`${_} ${h}`]:true};while(true){const e=n[h];const t=e.indexOf(_);const s=(t+1)%e.length;const i=e[s];const f=h<i?`${h} ${i}`:`${i} ${h}`;const l=r[f];if(v[`${h} ${i}`]){if(l!==o[0]){console.warn("bad boundary")}return a}v[`${h} ${i}`]=true;c.push(h);o.push(l);_=h;h=i}};const ua=({vertices_coords:e,vertices_edges:t,vertices_vertices:n,edges_vertices:s})=>{if(!n){n=zs({vertices_coords:e,vertices_edges:t,edges_vertices:s})}return ra({vertices_coords:e,vertices_vertices:n,edges_vertices:s}).map(da)};const ma=Object.freeze({__proto__:null,boundaries:la,boundary:fa,boundaryVertices:aa,boundingBox:ca,planarBoundaries:ua,planarBoundary:da});const ga=({vertices_coords:e,vertices_faces:t,edges_vertices:n,edges_foldAngle:s,edges_assignment:r,faces_vertices:o,faces_faces:c,faces_matrix:a},i)=>{if(!e||!e.length){return[]}if(!o||!o.length){return e}a=Cc({vertices_coords:e,edges_vertices:n,edges_foldAngle:s,edges_assignment:r,faces_vertices:o,faces_faces:c},i);if(!t){t=Is({faces_vertices:o})}const f=t.map((e=>e.filter((e=>e!=null)).shift())).map((e=>e===undefined?Ce:a[e]));return e.map((e=>de(3,e))).map(((e,t)=>Pe(f[t],e)))};const pa=({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_faces:o},c=0)=>{if(!e||!e.length){return[]}if(!r||!r.length){return e}if(!o){o=ir({faces_vertices:r})}const a=Qt({edges_vertices:t,edges_foldAngle:n,edges_assignment:s});const i=[];const f=[];const l=Us({edges_vertices:t});kc(o,c).forEach((n=>{const s=n.shift();if(!s||!s.length){return}const o=s[0];f[o.index]=false;r[o.index].forEach((t=>{i[t]=[...e[t]]}));n.forEach((n=>n.forEach((n=>{const s=xc(r[n.index],r[n.parent]).slice(0,2).join(" ");const o=l[s];const c=t[o].map((e=>i[e]));if(c[0]===undefined||c[1]===undefined){return}const d=t[o].map((t=>e[t]));const u=d[0];const m=P(U(d[1],d[0]));const g=oe(m);f[n.index]=a[o]?!f[n.parent]:f[n.parent];const p=P(U(c[1],c[0]));const _=c[0];const h=f[n.index]?ce(p):oe(p);r[n.index].filter((e=>i[e]===undefined)).forEach((t=>{const n=U(e[t],u);const s=D(n,g);const r=D(n,m);const o=z(p,r);const c=z(h,s);const a=R(R(_,o),c);i[t]=a}))}))))}));return i};const _a=Object.freeze({__proto__:null,makeVerticesCoordsFlatFolded:pa,makeVerticesCoordsFolded:ga});const ha=function(e){let t;let n;if(typeof e!=="object"){return e}if(!e){return e}if(Object.prototype.toString.apply(e)==="[object Array]"){t=[];for(n=0;n<e.length;n+=1){t[n]=ha(e[n])}return t}t={};for(n in e){if(e.hasOwnProperty(n)){t[n]=ha(e[n])}}return t};const va=typeof structuredClone==="function"?structuredClone:ha;const ba="class";const ya="function";const Ea="undefined";const Ma="boolean";const Aa="number";const xa="string";const wa="object";const ka="svg";const Oa="path";const ja="id";const Fa="style";const Sa="viewBox";const Ca="transform";const Va="points";const Pa="stroke";const Ta="fill";const Na="none";const za="arrow";const Ba="head";const $a="tail";const Ra=typeof window!==Ea&&typeof window.document!==Ea;typeof process!==Ea&&process.versions!=null&&process.versions.node!=null;const La={window:"window not set; svg.window = @xmldom/xmldom"};const Ia={window:undefined};const Ua=e=>(new e.DOMParser).parseFromString("<!DOCTYPE html><title>.</title>","text/html");const Qa=e=>{if(!e.document){e.document=Ua(e)}Ia.window=e;return Ia.window};if(Ra){Ia.window=window}const Da=()=>{if(Ia.window===undefined){throw La.window}return Ia.window};const qa="http://www.w3.org/2000/svg";const Wa={presentation:["color","color-interpolation","cursor","direction","display","fill","fill-opacity","fill-rule","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","image-rendering","letter-spacing","opacity","overflow","paint-order","pointer-events","preserveAspectRatio","shape-rendering","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","tabindex","transform-origin","user-select","vector-effect","visibility"],animation:["accumulate","additive","attributeName","begin","by","calcMode","dur","end","from","keyPoints","keySplines","keyTimes","max","min","repeatCount","repeatDur","restart","to","values"],effects:["azimuth","baseFrequency","bias","color-interpolation-filters","diffuseConstant","divisor","edgeMode","elevation","exponent","filter","filterRes","filterUnits","flood-color","flood-opacity","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","lighting-color","limitingConeAngle","mode","numOctaves","operator","order","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","primitiveUnits","radius","result","seed","specularConstant","specularExponent","stdDeviation","stitchTiles","surfaceScale","targetX","targetY","type","xChannelSelector","yChannelSelector"],text:["dx","dy","alignment-baseline","baseline-shift","dominant-baseline","lengthAdjust","method","overline-position","overline-thickness","rotate","spacing","startOffset","strikethrough-position","strikethrough-thickness","text-anchor","text-decoration","text-rendering","textLength","underline-position","underline-thickness","word-spacing","writing-mode"],gradient:["gradientTransform","gradientUnits","spreadMethod"]};const Ga={svg:["svg"],defs:["defs"],header:["desc","filter","metadata","style","script","title","view"],cdata:["cdata"],group:["g"],visible:["circle","ellipse","line","path","polygon","polyline","rect","arc","arrow","curve","parabola","roundRect","wedge","origami"],text:["text"],invisible:["marker","symbol","clipPath","mask"],patterns:["linearGradient","radialGradient","pattern"],childrenOfText:["textPath","tspan"],gradients:["stop"],filter:["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]};const Ha={svg:[Sa],line:["x1","y1","x2","y2"],rect:["x","y","width","height"],circle:["cx","cy","r"],ellipse:["cx","cy","rx","ry"],polygon:[Va],polyline:[Va],path:["d"],text:["x","y"],mask:[ja],symbol:[ja],clipPath:[ja,"clip-rule"],marker:[ja,"markerHeight","markerUnits","markerWidth","orient","refX","refY"],linearGradient:["x1","x2","y1","y2"],radialGradient:["cx","cy","r","fr","fx","fy"],stop:["offset","stop-color","stop-opacity"],pattern:["patternContentUnits","patternTransform","patternUnits"]};const Ja=[{nodes:[ka,"defs","g"].concat(Ga.visible,Ga.text),attr:Wa.presentation},{nodes:["filter"],attr:Wa.effects},{nodes:Ga.childrenOfText.concat("text"),attr:Wa.text},{nodes:Ga.filter,attr:Wa.effects},{nodes:Ga.gradients,attr:Wa.gradient}];Ja.forEach((e=>e.nodes.forEach((t=>{if(!Ha[t]){Ha[t]=[]}Ha[t].push(...e.attr)}))));const Za=[Ga.header,Ga.invisible,Ga.patterns].flat();const Ya=[Ga.group,Ga.visible,Ga.text].flat();const Xa={svg:[["svg","defs"],Za,Ya].flat(),defs:Za,filter:Ga.filter,g:Ya,text:Ga.childrenOfText,marker:Ya,symbol:Ya,clipPath:Ya,mask:Ya,linearGradient:Ga.gradients,radialGradient:Ga.gradients};const Ka=Object.values(Ga).flat();const ei={black:"#000000",silver:"#c0c0c0",gray:"#808080",white:"#ffffff",maroon:"#800000",red:"#ff0000",purple:"#800080",fuchsia:"#ff00ff",green:"#008000",lime:"#00ff00",olive:"#808000",yellow:"#ffff00",navy:"#000080",blue:"#0000ff",teal:"#008080",aqua:"#00ffff",orange:"#ffa500",aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",blanchedalmond:"#ffebcd",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",oldlace:"#fdf5e6",olivedrab:"#6b8e23",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",whitesmoke:"#f5f5f5",yellowgreen:"#9acd32"};const ti=e=>Math.round(e*100)/100;const ni=(e,t,n,s)=>{const r=t/100;const o=n/100;const c=t=>(t+e/30)%12;const a=r*Math.min(o,1-o);const i=e=>o-a*Math.max(-1,Math.min(c(e)-3,Math.min(9-c(e),1)));return s===undefined?[i(0)*255,i(8)*255,i(4)*255]:[i(0)*255,i(8)*255,i(4)*255,s]};const si=(e,t)=>{const n=Array.from(Array(t.length)).map(((t,n)=>e[n]||"0"));return e.length<=4?t.map((e=>n[e])).join(""):n.join("")};const ri=e=>{const t=e.replace(/#(?=\S)/g,"");const n=t.length===4||t.length===8;const s=n?si(t,[0,0,1,1,2,2,3,3]):si(t,[0,0,1,1,2,2]);const r=parseInt(s,16);return n?[r>>24&255,r>>16&255,r>>8&255,ti((r&255)/256)]:[r>>16&255,r>>8&255,r&255]};const oi=(e,t,n,s)=>{const r=e=>`00${Math.max(0,Math.min(Math.round(e),255)).toString(16)}`.slice(-2);const o=`#${[e,t,n].map(r).join("")}`;return s===undefined?o:`${o}${r(s*255)}`};const ci=Object.freeze({__proto__:null,hexToRgb:ri,hslToRgb:ni,rgbToHex:oi});const ai=e=>{const t=e.match(/\(([^\)]+)\)/g);if(t==null||!t.length){return[]}return t[0].substring(1,t[0].length-1).split(/[\s,]+/).map(parseFloat)};const ii=e=>{if(ei[e]){return ri(ei[e])}if(e[0]==="#"){return ri(e)}if(e.substring(0,4)==="rgba"||e.substring(0,3)==="rgb"){const t=ai(e);[0,1,2].filter((e=>t[e]===undefined)).forEach((e=>{t[e]=0}));return t}if(e.substring(0,4)==="hsla"||e.substring(0,3)==="hsl"){const t=ai(e);[0,1,2].filter((e=>t[e]===undefined)).forEach((e=>{t[e]=0}));return ni(...t)}return undefined};const fi=e=>{if(ei[e]){return ei[e].toUpperCase()}if(e[0]==="#"){return oi(...ri(e))}if(e.substring(0,4)==="rgba"||e.substring(0,3)==="rgb"){return oi(...ai(e))}if(e.substring(0,4)==="hsla"||e.substring(0,3)==="hsl"){const t=ai(e);[0,1,2].filter((e=>t[e]===undefined)).forEach((e=>{t[e]=0}));const n=ni(...t);if(t.length===4){n.push(t[3])}return oi(...n)}return undefined};const li=Object.freeze({__proto__:null,parseColorToHex:fi,parseColorToRgb:ii});const di={cssColors:ei,...ci,...li};const ui=(e,t)=>[e[0]+t[0],e[1]+t[1]];const mi=(e,t)=>[e[0]-t[0],e[1]-t[1]];const gi=(e,t)=>[e[0]*t,e[1]*t];const pi=e=>e[0]**2+e[1]**2;const _i=e=>Math.sqrt(pi(e));const hi=(e,t)=>pi(mi(e,t));const vi=(e,t)=>Math.sqrt(hi(e,t));const bi=(e,t)=>[Math.cos(e)*t,Math.sin(e)*t];const yi=(e,t)=>[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1],e[0]*t[2]+e[2]*t[3],e[1]*t[2]+e[3]*t[3],e[0]*t[4]+e[2]*t[5]+e[4],e[1]*t[4]+e[3]*t[5]+e[5]];const Ei=Object.freeze({__proto__:null,svg_add2:ui,svg_distance2:vi,svg_distanceSq2:hi,svg_magnitude2:_i,svg_magnitudeSq2:pi,svg_multiplyMatrices2:yi,svg_polar_to_cart:bi,svg_scale2:gi,svg_sub2:mi});const Mi=function(e){const t=e.match(/(\w+\((\-?\d+\.?\d*e?\-?\d*,?\s*)+\))+/g);if(!t){return[]}const n=t.map((e=>e.match(/[\w\.\-]+/g)));return n.map((e=>({transform:e.shift(),parameters:e.map((e=>parseFloat(e)))})))};const Ai=function(e){switch(e.length){case 1:return[1,0,0,1,e[0],0];case 2:return[1,0,0,1,e[0],e[1]];default:console.warn(`improper translate, ${e}`)}return undefined};const xi=function(e){const t=Math.cos(e[0]/(180*Math.PI));const n=Math.sin(e[0]/(180*Math.PI));switch(e.length){case 1:return[t,n,-n,t,0,0];case 3:return[t,n,-n,t,-e[1]*t+e[2]*n+e[1],-e[1]*n-e[2]*t+e[2]];default:console.warn(`improper rotate, ${e}`)}return undefined};const wi=function(e){switch(e.length){case 1:return[e[0],0,0,e[0],0,0];case 2:return[e[0],0,0,e[1],0,0];default:console.warn(`improper scale, ${e}`)}return undefined};const ki=function(e){return[1,0,Math.tan(e[0]/(180*Math.PI)),1,0,0]};const Oi=function(e){return[1,Math.tan(e[0]/(180*Math.PI)),0,1,0,0]};const ji=function(e,t){switch(e){case"translate":return Ai(t);case"rotate":return xi(t);case"scale":return wi(t);case"skewX":return ki(t);case"skewY":return Oi(t);case"matrix":return t;default:console.warn(`unknown transform type ${e}`)}return undefined};const Fi=function(e){return Mi(e).map((e=>ji(e.transform,e.parameters))).filter((e=>e!==undefined)).reduce(((e,t)=>yi(e,t)),[1,0,0,1,0,0])};const Si=Object.freeze({__proto__:null,parseTransform:Mi,transformStringToMatrix:Fi});const Ci=(e,t="text/xml")=>{const n=(new(Da().DOMParser)).parseFromString(e,t);return n?n.documentElement:null};const Vi=e=>{let t=e;while(t.parentNode!=null){t=t.parentNode}return t};const Pi=(e,t)=>{if((e.nodeName||"")===t){return e}return e.parentNode?Pi(e.parentNode,t):undefined};const Ti=(e,...t)=>{const n={};const s=e.getAttribute("class");const r=s?s.split(" "):[];r.push(...t);r.forEach((e=>{n[e]=true}));const o=Object.keys(n).join(" ");e.setAttribute("class",o)};const Ni=(e,...t)=>{if(!e||!t.length){return undefined}return e.classList?e.classList.add(...t):Ti(e,...t)};const zi=e=>e.childNodes==null||!e.childNodes.length?[e]:Array.from(e.childNodes).flatMap((e=>zi(e)));const Bi={svg:["viewBox","xmlns","version"],line:["x1","y1","x2","y2"],rect:["x","y","width","height"],circle:["cx","cy","r"],ellipse:["cx","cy","rx","ry"],polygon:["points"],polyline:["points"],path:["d"]};const $i=e=>{const t=e.attributes;if(t==null){return[]}const n=Array.from(t);return Bi[e.nodeName]?n.filter((t=>!Bi[e.nodeName].includes(t.name))):n};const Ri=e=>{const t={};e.forEach((e=>{t[e.nodeName]=e.value}));return t};const Li=(e,t)=>{const n=Ri($i(t));if(!n.transform&&!e.transform){return{...e,...n}}const s=n.transform||"";const r=e.transform||"";const o=Fi(s);const c=Fi(r);const a=yi(c,o);const i=`matrix(${a.join(", ")})`;return{...e,...n,transform:i}};const Ii=(e,t={})=>e.childNodes==null||!e.childNodes.length?[{element:e,attributes:t}]:Array.from(e.childNodes).flatMap((e=>Ii(e,Li(t,e))));const Ui=Object.freeze({__proto__:null,addClass:Ni,findElementTypeInParents:Pi,flattenDomTree:zi,flattenDomTreeWithStyle:Ii,getRootParent:Vi,xmlStringToElement:Ci});const Qi=e=>(new(Da().DOMParser)).parseFromString("<root></root>","text/xml").createCDATASection(e);const Di=/[MmLlSsQqLlHhVvCcSsQqTtAaZz]/g;const qi=/-?[0-9]*\.?\d+/g;const Wi={m:"move",l:"line",v:"vertical",h:"horizontal",a:"ellipse",c:"curve",s:"smoothCurve",q:"quadCurve",t:"smoothQuadCurve",z:"close"};Object.keys(Wi).forEach((e=>{const t=Wi[e];Wi[e.toUpperCase()]=t.charAt(0).toUpperCase()+t.slice(1)}));const Gi=(e,t)=>[e[0]+(t[0]||0),e[1]+(t[1]||0)];const Hi=(e,t,n=[0,0])=>{const s=e.toUpperCase();let r=e===s?[0,0]:n;if(e==="V"){r=[n[0],0]}if(e==="H"){r=[0,n[1]]}switch(s){case"V":return Gi(r,[0,t[0]]);case"H":return Gi(r,[t[0],0]);case"M":case"L":case"T":return Gi(r,t);case"A":return Gi(r,[t[5],t[6]]);case"C":return Gi(r,[t[4],t[5]]);case"S":case"Q":return Gi(r,[t[2],t[3]]);case"Z":return undefined;default:return r}};const Ji=e=>{const t=[];let n;while((n=Di.exec(e))!==null){t.push(n)}return t.map(((t,n,s)=>[t[0],t.index,n===s.length-1?e.length-1:s[(n+1)%s.length].index-1])).map((t=>{const n=t[0];const s=e.substring(t[1]+1,t[2]+1);const r=s.match(qi);const o=r?r.map(parseFloat):[];return{command:n,values:o}}))};const Zi=e=>{let t=[0,0];const n=Ji(e);if(!n.length){return n}n.forEach(((e,s)=>{n[s].end=Hi(e.command,e.values,t);n[s].start=s===0?t:n[s-1].end;t=n[s].end}));const s=n[n.length-1];const r=n.filter((e=>e.command.toUpperCase()!=="M"&&e.command.toUpperCase()!=="Z")).shift();if(s.command.toUpperCase()==="Z"){s.end=[...r.start]}return n};const Yi=Object.freeze({__proto__:null,parsePathCommands:Ji,parsePathCommandsWithEndpoints:Zi,pathCommandNames:Wi});const Xi=(...e)=>e.filter((e=>typeof e===Aa)).concat(e.filter((e=>typeof e===wa&&e!==null)).map((e=>{if(typeof e.x===Aa){return[e.x,e.y]}if(typeof e[0]===Aa){return[e[0],e[1]]}return undefined})).filter((e=>e!==undefined)).reduce(((e,t)=>e.concat(t)),[]));const Ki=function(e,t,n,s,r=0){const o=1;const c=n/o-n;const a=e-c-r;const i=t-c-r;const f=n+c*2+r*2;const l=s+c*2+r*2;return[a,i,f,l].join(" ")};const ef=(...e)=>{const t=Xi(...e.flat());if(t.length===2){t.unshift(0,0)}return t.length===4?Ki(...t):undefined};const tf=(e,...t)=>{const n=t.length===1&&typeof t[0]===xa?t[0]:ef(...t);if(n){e.setAttribute(Sa,n)}return e};const nf=function(e){const t=e.getAttribute(Sa);return t==null?undefined:t.split(" ").map((e=>parseFloat(e)))};const sf=function(e,t,n){const s=e.createSVGPoint();s.x=t;s.y=n;const r=s.matrixTransform(e.getScreenCTM().inverse());return[r.x,r.y]};const rf=({vertices_coords:e})=>{if(!e){return undefined}const t=[Infinity,Infinity];const n=[-Infinity,-Infinity];e.forEach((e=>[0,1].forEach((s=>{t[s]=Math.min(e[s],t[s]);n[s]=Math.max(e[s],n[s])}))));return[t[0],t[1],n[0]-t[0],n[1]-t[1]].join(" ")};const of=Object.freeze({__proto__:null,convertToViewBox:sf,foldToViewBox:rf,getViewBox:nf,setViewBox:tf});const cf={...Ei,...Ui,makeCDATASection:Qi,...Yi,...Si,...of};const af=function(e){const t=nf(e);if(t!==undefined){return t}if(typeof e.getBoundingClientRect===ya){const t=e.getBoundingClientRect();return[t.x,t.y,t.width,t.height]}return[]};const ff="svg-background-rectangle";const lf=function(e,t){let n=Array.from(e.childNodes).filter((e=>e.getAttribute(ba)===ff)).shift();if(n==null){n=Da().document.createElementNS(qa,"rect");af(e).forEach(((e,t)=>n.setAttribute(Ha.rect[t],e)));n.setAttribute(ba,ff);n.setAttribute(Pa,Na);e.insertBefore(n,e.firstChild)}n.setAttribute(Ta,t);return e};const df=e=>{const t=e.getAttribute(Ca);return t==null||t===""?undefined:t};const uf={clearTransform:e=>{e.removeAttribute(Ca);return e}};["translate","rotate","scale","matrix"].forEach((e=>{uf[e]=(t,...n)=>{t.setAttribute(Ca,[df(t),`${e}(${n.join(" ")})`].filter((e=>e!==undefined)).join(" "));return t}}));const mf=e=>e.replace(/([-_][a-z])/gi,(e=>e.toUpperCase().replace("-","").replace("_","")));const gf=e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z])([A-Z])(?=[a-z])/g,"$1-$2").toLowerCase();const pf=e=>e.charAt(0).toUpperCase()+e.slice(1);const _f=e=>{while(e.lastChild){e.removeChild(e.lastChild)}return e};const hf=(e,t)=>{if(t&&t.appendChild){t.appendChild(e)}return e};const vf=(e,t)=>{Object.keys(t).forEach((n=>e.setAttribute(gf(n),t[n])));return e};const bf=Object.freeze({__proto__:null,appendTo:hf,removeChildren:_f,setAttributes:vf});const yf=function(e,t){const n=nf(e);if(n!==undefined){tf(e,...[-t,-t,t*2,t*2].map(((e,t)=>n[t]+e)))}return e};const Ef=function(e,t){const n=e.getElementsByTagName(t);return n.length?n[0]:null};const Mf=function(e,t){let n=Ef(e,Fa);if(n==null){n=Da().document.createElementNS(qa,Fa);n.setTextContent=e=>{n.textContent="";n.appendChild(Qi(e));return n};e.insertBefore(n,e.firstChild)}n.textContent="";n.appendChild(Qi(t));return n};const Af=e=>{Array.from(e.attributes).filter((e=>e.name!=="xmlns"&&e.name!=="version")).forEach((t=>e.removeAttribute(t.name)));return _f(e)};const xf={clear:Af,size:tf,setViewBox:tf,getViewBox:nf,padding:yf,background:lf,getWidth:e=>af(e)[2],getHeight:e=>af(e)[3],stylesheet:function(e,t){return Mf.call(this,e,t)},...uf,...bf};const wf={move:["mousemove","touchmove"],press:["mousedown","touchstart"],release:["mouseup","touchend"],leave:["mouseleave","touchcancel"]};const kf=(e,t)=>Object.values(wf).flat().forEach((n=>{t[n].forEach((t=>e.removeEventListener(n,t)));t[n]=[]}));const Of=(e,t,n)=>Object.defineProperty(e,t,{get:()=>n,enumerable:true,configurable:true});const jf=function(e){const t=[];Object.keys(wf).forEach((e=>{wf[e].forEach((e=>{t[e]=[]}))}));const n=n=>wf[n].forEach((n=>t[n].forEach((t=>e.removeEventListener(n,t)))));Object.keys(wf).forEach((s=>{Object.defineProperty(e,`on${pf(s)}`,{set:r=>{if(!e.addEventListener){return}if(r==null){n(s);return}wf[s].forEach((n=>{const s=t=>{const n=t.touches!=null?t.touches[0]:t;if(n!==undefined){const{clientX:s,clientY:r}=n;const[o,c]=sf(e,s,r);Of(t,"x",o);Of(t,"y",c)}r(t)};t[n].push(s);e.addEventListener(n,s)}))},enumerable:true})}));Object.defineProperty(e,"off",{value:()=>kf(e,t)})};const Ff=()=>Math.random().toString(36).replace(/[^a-z]+/g,"").concat("aaaaa").substr(0,5);const Sf=function(e){let t;let n=0;let s;const r={};const o=()=>{if(Da().cancelAnimationFrame){Da().cancelAnimationFrame(s)}Object.keys(r).forEach((e=>delete r[e]))};const c=e=>{o();if(!e||!Da().requestAnimationFrame){return}t=performance.now();n=0;const c=Ff();r[c]=o=>{const a=(o-t)*.001;e({time:a,frame:n});n+=1;if(r[c]){s=Da().requestAnimationFrame(r[c])}};s=Da().requestAnimationFrame(r[c])};Object.defineProperty(e,"play",{set:c,enumerable:true});Object.defineProperty(e,"stop",{value:o,enumerable:true})};const Cf=e=>e&&e.parentNode?e.parentNode.removeChild(e):undefined;const Vf=[["cx","cy"],["x","y"]];const Pf=function(e,t={}){const n=[0,0];const s={selected:false,svg:undefined,updatePosition:e=>e};const r=()=>{if(!s.svg){return}if(!s.svg.parentNode){e.appendChild(s.svg)}Vf.filter((e=>s.svg[e[0]]!=null)).forEach((e=>e.forEach(((e,t)=>{s.svg.setAttribute(e,n[t])}))))};const o=new Proxy(n,{set:(e,t,n)=>{e[t]=n;r();return true}});const c=function(...e){Xi(...e.flat()).forEach(((e,t)=>{n[t]=e}));r();if(typeof n.delegate===ya){n.delegate.apply(n.pointsContainer,[o,n.pointsContainer])}};n.delegate=undefined;n.setPosition=c;n.onMouseMove=e=>s.selected?c(s.updatePosition(e)):undefined;n.onMouseUp=()=>{s.selected=false};n.distance=e=>Math.sqrt(hi(e,n));["x","y"].forEach(((e,t)=>Object.defineProperty(n,e,{get:()=>n[t],set:e=>{n[t]=e}})));[ka,"updatePosition","selected"].forEach((e=>Object.defineProperty(n,e,{get:()=>s[e],set:t=>{s[e]=t}})));Object.defineProperty(n,"remove",{value:()=>{Cf(s.svg);n.delegate=undefined}});return o};const Tf=function(e,t,n){let s;let r;const o=Array.from(Array(t)).map((()=>Pf(e,n)));const c=e=>typeof r===ya?r.call(o,e,s,o):undefined;o.forEach((e=>{e.delegate=c;e.pointsContainer=o}));const a=function(e){if(!(o.length>0)){return}s=o.map(((t,n)=>({i:n,d:hi(t,[e.x,e.y])}))).sort(((e,t)=>e.d-t.d)).shift().i;o[s].selected=true};const i=function(e){o.forEach((t=>t.onMouseMove(e)))};const f=function(){o.forEach((e=>e.onMouseUp()));s=undefined};e.onPress=a;e.onMove=i;e.onRelease=f;Object.defineProperty(o,"selectedIndex",{get:()=>s});Object.defineProperty(o,"selected",{get:()=>o[s]});Object.defineProperty(o,"add",{value:t=>{o.push(Pf(e,t))}});o.removeAll=()=>{while(o.length>0){o.pop().remove()}};const l={onChange:(e,t)=>{r=e;if(t===true){const t=o.length-1;e.call(o,o[t],t,o)}},position:e=>o.forEach(((t,n)=>t.setPosition(e.call(o,t,n,o)))),svg:e=>o.forEach(((t,n)=>{t.svg=e.call(o,t,n,o)}))};Object.keys(l).forEach((e=>{o[e]=function(){if(typeof arguments[0]===ya){l[e](...arguments)}return o}}));o.parent=function(e){if(e!=null&&e.appendChild!=null){o.forEach((t=>{e.appendChild(t.svg)}))}return o};return o};const Nf=e=>{e.controls=(...t)=>Tf.call(e,e,...t)};const zf={svg:{args:(...e)=>[ef(Xi(...e))].filter((e=>e!=null)),methods:xf,init:(...e)=>{const t=Da().document.createElementNS(qa,"svg");t.setAttribute("version","1.1");t.setAttribute("xmlns",qa);e.filter((e=>e!=null)).filter((e=>e.appendChild)).forEach((e=>e.appendChild(t)));jf(t);Sf(t);Nf(t);return t}}};const Bf=function(e){if(e==null){return""}if(typeof e===xa){return e.slice(0,3)==="url"?e:`url(#${e})`}if(e.getAttribute!=null){const t=e.getAttribute(ja);return`url(#${t})`}return""};const $f={};["clip-path","mask","symbol","marker-end","marker-mid","marker-start"].forEach((e=>{$f[mf(e)]=(t,n)=>{t.setAttribute(e,Bf(n));return t}}));const Rf={g:{methods:{...uf,...$f,...bf}}};const Lf=(e,t)=>{e.setAttribute(Ha.circle[2],t);return e};const If=(e,t,n)=>{[...Xi(...[t,n].flat()).slice(0,2)].forEach(((t,n)=>e.setAttribute(Ha.circle[n],t)));return e};const Uf=(e,t,n,s)=>[e,t,vi([e,t],[n,s])];const Qf={circle:{args:(e,t,n,s)=>{const r=Xi(...[e,t,n,s].flat());switch(r.length){case 0:case 1:return[,,...r];case 2:case 3:return r;default:return Uf(...r)}},methods:{radius:Lf,setRadius:Lf,origin:If,setOrigin:If,center:If,setCenter:If,position:If,setPosition:If,...uf,...$f,...bf}}};const Df=(e,t,n)=>{[,,t,n].forEach(((t,n)=>e.setAttribute(Ha.ellipse[n],t)));return e};const qf=(e,t,n)=>{[...Xi(...[t,n].flat()).slice(0,2)].forEach(((t,n)=>e.setAttribute(Ha.ellipse[n],t)));return e};const Wf={ellipse:{args:(e,t,n,s)=>{const r=Xi(...[e,t,n,s].flat()).slice(0,4);switch(r.length){case 0:case 1:case 2:return[,,...r];default:return r}},methods:{radius:Df,setRadius:Df,origin:qf,setOrigin:qf,center:qf,setCenter:qf,position:qf,setPosition:qf,...uf,...$f,...bf}}};const Gf=e=>e!=null&&typeof e[Symbol.iterator]===ya;const Hf=function(){switch(arguments.length){case 0:return Array.from(arguments);case 1:return Gf(arguments[0])&&typeof arguments[0]!==xa?Hf(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>Gf(e)?[...Hf(e)]:e))}};const Jf=(...e)=>Xi(...Hf(...e)).slice(0,4);const Zf=(e,...t)=>{Jf(...t).forEach(((t,n)=>e.setAttribute(Ha.line[n],t)));return e};const Yf={line:{args:Jf,methods:{setPoints:Zf,...uf,...$f,...bf}}};const Xf=e=>{const t=e.getAttribute("d");return t==null?"":t};const Kf=e=>{e.removeAttribute("d");return e};const el=(e,t,...n)=>{e.setAttribute("d",`${Xf(e)}${t}${n.flat().join(" ")}`);return e};const tl=e=>Ji(Xf(e));const nl={addCommand:el,appendCommand:el,clear:Kf,getCommands:tl,get:tl,getD:e=>e.getAttribute("d"),...uf,...$f,...bf};Object.keys(Wi).forEach((e=>{nl[Wi[e]]=(t,...n)=>el(t,e,...n)}));const sl={path:{methods:nl}};const rl=(e,t,n)=>{[,,t,n].forEach(((t,n)=>e.setAttribute(Ha.rect[n],t)));return e};const ol=(e,t,n)=>{[...Xi(...[t,n].flat()).slice(0,2)].forEach(((t,n)=>e.setAttribute(Ha.rect[n],t)));return e};const cl=function(e){[0,1].forEach((t=>{if(e[2+t]<0){if(e[0+t]===undefined){e[0+t]=0}e[0+t]+=e[2+t];e[2+t]=-e[2+t]}}));return e};const al={rect:{args:(e,t,n,s)=>{const r=Xi(...[e,t,n,s].flat()).slice(0,4);switch(r.length){case 0:case 1:case 2:case 3:return cl([,,...r]);default:return cl(r)}},methods:{origin:ol,setOrigin:ol,center:ol,setCenter:ol,size:rl,setSize:rl,...uf,...$f,...bf}}};const il={style:{init:e=>{const t=Da().document.createElementNS(qa,"style");t.setAttribute("type","text/css");t.textContent="";t.appendChild(Qi(e));return t},methods:{setTextContent:(e,t)=>{e.textContent="";e.appendChild(Qi(t));return e}}}};const fl={text:{args:(e,t,n)=>Xi(...[e,t,n].flat()).slice(0,2),init:(e,t,n,s)=>{const r=Da().document.createElementNS(qa,"text");const o=[e,t,n,s].filter((e=>typeof e===xa)).shift();r.appendChild(Da().document.createTextNode(o||""));return r},methods:{...uf,...$f,appendTo:hf,setAttributes:vf}}};const ll=function(){return Array.from(arguments).filter((e=>typeof e===xa||e instanceof String)).shift()||Ff()};const dl=(...e)=>[ll(...e)];const ul={mask:{args:dl,methods:{...uf,...$f,...bf}},clipPath:{args:dl,methods:{...uf,...$f,...bf}},symbol:{args:dl,methods:{...uf,...$f,...bf}},marker:{args:dl,methods:{size:tf,setViewBox:tf,...uf,...$f,...bf}}};const ml=e=>{const t=e.getAttribute(Va);return t==null?"":t};const gl=function(){return Array.from(Array(Math.floor(arguments.length/2))).map(((e,t)=>`${arguments[t*2+0]},${arguments[t*2+1]}`)).join(" ")};const pl=(...e)=>[gl(...Xi(...Hf(...e)))];const _l=(e,...t)=>{e.setAttribute(Va,pl(...t)[0]);return e};const hl=(e,...t)=>{e.setAttribute(Va,[ml(e),pl(...t)[0]].filter((e=>e!=="")).join(" "));return e};const vl=function(...e){return e.length===1&&typeof e[0]===xa?[e[0]]:pl(...e)};const bl={polyline:{args:vl,methods:{setPoints:_l,addPoint:hl,...uf,...$f,...bf}},polygon:{args:vl,methods:{setPoints:_l,addPoint:hl,...uf,...$f,...bf}}};const yl=(e,t,n,s,r,o=false)=>{if(r==null){return""}const c=bi(s,n);const a=bi(r,n);const i=[a[0]-c[0],a[1]-c[1]];const f=c[0]*a[1]-c[1]*a[0];const l=c[0]*a[0]+c[1]*a[1];const d=Math.atan2(f,l)>0?0:1;let u=o?`M ${e},${t} l ${c[0]},${c[1]} `:`M ${e+c[0]},${t+c[1]} `;u+=["a ",n,n,0,d,1,i[0],i[1]].join(" ");if(o){u+=" Z"}return u};const El=(e,t,n,s,r)=>[yl(e,t,n,s,r,false)];const Ml={arc:{nodeName:Oa,attributes:["d"],args:El,methods:{setArc:(e,...t)=>e.setAttribute("d",El(...t)),...uf}}};const Al=[$a,Ba];const xl=e=>e.join(",");const wl=e=>"M"+e.map((e=>e.join(","))).join("L")+"Z";const kl=function(e){let t=[[0,1],[2,3]].map((t=>t.map((t=>e.points[t]||0))));let n=mi(t[1],t[0]);let s=ui(t[0],gi(n,.5));const r=_i(n);const o=Al.map((t=>e[t].visible?(1+e[t].padding)*e[t].height*2.5:0)).reduce(((e,t)=>e+t),0);if(r<o){const e=r===0?[o,0]:gi(n,o/r);t=[mi,ui].map((t=>t(s,gi(e,.5))));n=mi(t[1],t[0])}let c=[n[1],-n[0]];let a=ui(s,gi(c,e.bend));const i=t.map((e=>mi(a,e)));const f=i.map((e=>_i(e)));const l=i.map(((e,t)=>f[t]===0?e:gi(e,1/f[t])));const d=l.map((e=>gi(e,-1)));const u=d.map((e=>[e[1],-e[0]]));const m=Al.map(((t,n)=>e[t].padding?e[t].padding:e.padding?e.padding:0));const g=Al.map(((t,n)=>e[t].height*(e[t].visible?1:0))).map(((e,t)=>e+m[t]));const p=t.map(((e,t)=>ui(e,gi(l[t],g[t]))));n=mi(p[1],p[0]);c=[n[1],-n[0]];s=ui(p[0],gi(n,.5));a=ui(s,gi(c,e.bend));const _=p.map(((t,n)=>ui(t,gi(mi(a,t),e.pinch))));const h=Al.map(((t,n)=>[ui(p[n],gi(d[n],e[t].height)),ui(p[n],gi(u[n],e[t].width/2)),ui(p[n],gi(u[n],-e[t].width/2))]));return{line:`M${xl(p[0])}C${xl(_[0])},${xl(_[1])},${xl(p[1])}`,tail:wl(h[0]),head:wl(h[1])}};const Ol=(e,t,n)=>{if(typeof t===Ma){e.options[n].visible=t}else if(typeof t===wa){Object.assign(e.options[n],t);if(t.visible==null){e.options[n].visible=true}}else if(t==null){e.options[n].visible=true}};const jl=(e,t={},n=Ba)=>{const s=e.getElementsByClassName(`${za}-${n}`)[0];Object.keys(t).map((e=>({key:e,fn:s[mf(e)]}))).filter((e=>typeof e.fn===ya&&e.key!=="class")).forEach((e=>e.fn(t[e.key])));Object.keys(t).filter((e=>e==="class")).forEach((e=>s.classList.add(t[e])))};const Fl=e=>{const t=kl(e.options);Object.keys(t).map((t=>({path:t,element:e.getElementsByClassName(`${za}-${t}`)[0]}))).filter((e=>e.element)).map((e=>{e.element.setAttribute("d",t[e.path]);return e})).filter((t=>e.options[t.path])).forEach((t=>t.element.setAttribute("visibility",e.options[t.path].visible?"visible":"hidden")));return e};const Sl=(e,...t)=>{e.options.points=Xi(...Hf(...t)).slice(0,4);return Fl(e)};const Cl=(e,t)=>{e.options.bend=t;return Fl(e)};const Vl=(e,t)=>{e.options.pinch=t;return Fl(e)};const Pl=(e,t)=>{e.options.padding=t;return Fl(e)};const Tl=(e,t)=>{Ol(e,t,Ba);jl(e,t,Ba);return Fl(e)};const Nl=(e,t)=>{Ol(e,t,$a);jl(e,t,$a);return Fl(e)};const zl=e=>e.getElementsByClassName(`${za}-line`)[0];const Bl=e=>e.getElementsByClassName(`${za}-${Ba}`)[0];const $l=e=>e.getElementsByClassName(`${za}-${$a}`)[0];const Rl={setPoints:Sl,points:Sl,bend:Cl,pinch:Vl,padding:Pl,head:Tl,tail:Nl,getLine:zl,getHead:Bl,getTail:$l,...uf};const Ll=()=>({visible:false,width:8,height:10,padding:0});const Il=()=>({head:Ll(),tail:Ll(),bend:0,padding:0,pinch:.618,points:[]});const Ul=Object.keys(Il());const Ql=(...e)=>{for(let t=0;t<e.length;t+=1){if(typeof e[t]!==wa){continue}const n=Object.keys(e[t]);for(let s=0;s<n.length;s+=1){if(Ul.includes(n[s])){return e[t]}}}return undefined};const Dl=function(...e){const t=Da().document.createElementNS(qa,"g");t.setAttribute(ba,za);const n=["line",$a,Ba].map((e=>{const n=Da().document.createElementNS(qa,Oa);n.setAttribute(ba,`${za}-${e}`);t.appendChild(n);return n}));n[0].setAttribute(Fa,"fill:none;");n[1].setAttribute(Pa,Na);n[2].setAttribute(Pa,Na);t.options=Il();Rl.setPoints(t,...e);const s=Ql(...e);if(s){Object.keys(s).filter((e=>Rl[e])).forEach((e=>Rl[e](t,s[e])))}return t};const ql={arrow:{nodeName:"g",attributes:[],args:()=>[],methods:Rl,init:Dl}};const Wl=(e=[],t=0,n=.5)=>{const s=[e[0]||0,e[1]||0];const r=[e[2]||0,e[3]||0];const o=mi(r,s);const c=ui(s,gi(o,.5));const a=[o[1],-o[0]];const i=ui(c,gi(a,t));const f=ui(s,gi(mi(i,s),n));const l=ui(r,gi(mi(i,r),n));return`M${s[0]},${s[1]}C${f[0]},${f[1]} ${l[0]},${l[1]} ${r[0]},${r[1]}`};const Gl=(...e)=>[Wl(Xi(...e.flat()))];const Hl=e=>e.slice(1).split(/[, ]+/).map((e=>parseFloat(e)));const Jl=e=>e.match(/[Cc][(0-9), .-]+/).map((e=>Hl(e)));const Zl=e=>e.match(/[Mm][(0-9), .-]+/).map((e=>Hl(e)));const Yl=e=>{const t=Zl(e).shift();const n=Jl(e).shift();const s=t?[t[t.length-2],t[t.length-1]]:[0,0];const r=n?[n[n.length-2],n[n.length-1]]:[0,0];return[...s,...r]};const Xl=(e,...t)=>{const n=Xi(...t.flat()).slice(0,4);e.setAttribute("d",Wl(n,e._bend,e._pinch));return e};const Kl=(e,t)=>{e._bend=t;return Xl(e,...Yl(e.getAttribute("d")))};const ed=(e,t)=>{e._pinch=t;return Xl(e,...Yl(e.getAttribute("d")))};const td={setPoints:Xl,bend:Kl,pinch:ed,...uf};const nd={curve:{nodeName:Oa,attributes:["d"],args:Gl,methods:td}};const sd=(e,t,n,s,r)=>[yl(e,t,n,s,r,true)];const rd={wedge:{nodeName:Oa,args:sd,attributes:["d"],methods:{setArc:(e,...t)=>e.setAttribute("d",sd(...t)),...uf}}};const od={};const cd=(e,...t)=>{const n=Da().document.createElementNS(qa,"g");od.ear.convert.foldToSvg.render(e,n,...t);return n};const ad={...uf,...$f,...bf};const id={origami:{nodeName:"g",init:cd,args:()=>[],methods:ad}};const fd={...zf,...Rf,...Qf,...Wf,...Yf,...sl,...al,...il,...fl,...ul,...bl,...Ml,...ql,...nd,...rd,...id};const ld=(...e)=>e;const dd=(e,t,...n)=>{const s=fd[e]&&fd[e].nodeName?fd[e].nodeName:e;const{init:r,args:o,methods:c}=fd[e]||{};const a=Ha[s]||[];const i=Xa[s]||[];const f=r?r(...n):Da().document.createElementNS(qa,s);if(t){t.appendChild(f)}const l=o||ld;l(...n).forEach(((e,t)=>{f.setAttribute(Ha[s][t],e)}));if(c){Object.keys(c).forEach((e=>Object.defineProperty(f,e,{value:function(){return c[e](f,...arguments)}})))}a.forEach((e=>{const t=mf(e);if(f[t]){return}Object.defineProperty(f,t,{value:function(){f.setAttribute(e,...arguments);return f}})}));i.forEach((e=>{if(f[e]){return}const t=function(){return dd(e,f,...arguments)};Object.defineProperty(f,e,{value:t})}));return f};const ud=(...e)=>{const t=dd(ka,null,...e);const n=()=>e.filter((e=>typeof e===ya)).forEach((e=>e.call(t,t)));if(Da().document.readyState==="loading"){Da().document.addEventListener("DOMContentLoaded",n)}else{n()}return t};Object.assign(ud,{NS:qa,nodes_attributes:Ha,nodes_children:Xa,extensions:fd,...di,...cf});Ka.forEach((e=>{ud[e]=(...t)=>dd(e,null,...t)}));Object.defineProperty(ud,"window",{enumerable:false,set:Qa});const md=e=>[e.min,e.span].flatMap((e=>[e[0],e[1]])).join(" ");const gd=e=>{const t=ca(e);return t===undefined?"":md(t)};const pd=({vertices_coords:e,edges_vertices:t,edges_length:n},s=.1)=>{if(!e||!t){return undefined}if(!n){n=sr({vertices_coords:e,edges_vertices:t})}const r=n.slice().sort(((e,t)=>e-t));const o=Math.max(0,Math.min(Math.floor(r.length*s),r.length-1));return r[o]};const _d={min:[0,0],span:[1,1]};const hd=1/100;const vd=(e,{vmax:t}={})=>{if(!t){const n=ca(e)||_d;t=Math.max(...n.span)}const n=pd(e,.1);return n?n*hd*10:t*hd};const bd=(e,t={})=>{const n=t&&t.vertices?t.vertices:{};const s=ud.g();if(!e||!e.vertices_coords){return s}e.vertices_coords.map((e=>ud.circle(e[0],e[1],.01))).forEach((e=>s.appendChild(e)));s.setAttributeNS(null,"fill","none");Object.keys(n).forEach((e=>s.setAttributeNS(null,e,n[e])));return s};const yd={B:"black",M:"crimson",V:"royalblue",F:"lightgray",J:"gold",C:"limegreen",U:"orchid"};Object.keys(yd).forEach((e=>{yd[e.toLowerCase()]=yd[e]}));const Ed=4;const Md={M:[1,0,0],V:[0,0,1],J:[1,1,0],U:[1,0,1],C:[0,1,0]};const Ad=(e=0,t=0,n=0)=>{const s=B([e,t,n],1/255);const r=F(s);if(r<.05){return"B"}const o=s.reduce(((e,t)=>e+t),0)/3;const c=se(s,[o,o,o]);const a=Object.keys(Md).map((e=>({key:e,dist:se(s,Md[e])}))).sort(((e,t)=>e.dist-t.dist)).shift();if(a.dist<c*Ed){return a.key}return r<.1?"B":"F"};const xd=Object.freeze({__proto__:null,assignmentColor:yd,rgbToAssignment:Ad});const wd={};const kd={stroke:"black"};const Od={};const jd={};Object.keys(yd).forEach((e=>{jd[e]={stroke:yd[e]}}));const Fd=(e,t,n)=>e.setAttribute(`data-${t}`,n);const Sd=e=>{const t={u:[],c:[],j:[],f:[],v:[],m:[],b:[]};const n=e.edges_assignment.map((e=>e.toLowerCase()));e.edges_vertices.map(((e,t)=>n[t]||"u")).forEach(((e,n)=>t[e].push(n)));return t};const Cd=({vertices_coords:e,edges_vertices:t})=>{if(!e||!t){return[]}return t.map((t=>t.map((t=>e[t]))))};const Vd=e=>`M${e[0][0]} ${e[0][1]}L${e[1][0]} ${e[1][1]}`;const Pd=e=>Cd(e).map((e=>Vd(e))).join("");const Td=({vertices_coords:e,edges_vertices:t,edges_assignment:n})=>{if(!e||!t){return{}}if(!n){return{u:Pd({vertices_coords:e,edges_vertices:t})}}const s=Sd({vertices_coords:e,edges_vertices:t,edges_assignment:n});Object.keys(s).forEach((n=>{s[n]=Pd({vertices_coords:e,edges_vertices:s[n].map((e=>t[e]))})}));Object.keys(s).forEach((e=>{if(s[e]===""){delete s[e]}}));return s};const Nd=({vertices_coords:e,edges_vertices:t,edges_assignment:n})=>{const s=Td({vertices_coords:e,edges_vertices:t,edges_assignment:n});Object.keys(s).forEach((e=>{const t=ud.path(s[e]);Ni(t,At[e]);s[e]=t}));return s};const zd=(e,t={})=>Object.keys(t).forEach((n=>e.setAttributeNS(null,n,t[n])));const Bd=(e,t={})=>{const n=t&&t.edges?t.edges:{};const s=ud.g();if(!e){return s}const r=Lt(e);const o=JSON.parse(JSON.stringify(r?wd:kd));const c=JSON.parse(JSON.stringify(r?Od:jd));const a={};if(n.stroke){a.stroke=n.stroke}Object.assign(o,a);Object.keys(c).forEach((e=>{c[e]={...c[e],...a}}));const i=Nd(e);Object.keys(i).forEach((e=>{Ni(i[e],At[e]);zd(i[e],c[e]);zd(i[e],n[e]);zd(i[e],n[At[e]]);s.appendChild(i[e]);Object.defineProperty(s,At[e],{get:()=>i[e]})}));zd(s,o);Object.keys(i).forEach((e=>Fd(i[e],"assignment",e)));Object.keys(i).forEach((e=>Fd(i[e],"foldAngle",xt[e])));return s};const $d=e=>Math.abs(e)/180;const Rd=(e,t={})=>{const n=t&&t.edges?t.edges:{};const s=ud.g();if(!e){return s}const r=Lt(e);const o=JSON.parse(JSON.stringify(r?wd:kd));const c=JSON.parse(JSON.stringify(r?Od:jd));const a={};if(n.stroke){a.stroke=n.stroke}Object.assign(o,a);Mt.forEach((e=>{if(c[e]===undefined){c[e]={}}c[e]={...c[e],...a}}));const i={};Array.from(new Set(Mt.map((e=>e.toLowerCase())))).forEach((e=>{const t=ud.g();s.appendChild(t);Ni(t,At[e]);zd(t,c[e]);zd(t,n[At[e]]);Object.defineProperty(s,At[e],{get:()=>t});i[e]=t}));const f=e.edges_vertices.map((t=>t.map((t=>e.vertices_coords[t])))).map((e=>ud.line(e[0][0],e[0][1],e[1][0],e[1][1])));if(e.edges_foldAngle){e.edges_foldAngle.forEach(((e,t)=>Fd(f[t],"foldAngle",e)))}if(e.edges_assignment){e.edges_assignment.forEach(((e,t)=>Fd(f[t],"assignment",e)))}if(e.edges_foldAngle){f.forEach(((t,n)=>{const s=e.edges_foldAngle[n];if(s===0||s===180||s===-180){return}t.setAttributeNS(null,"opacity",$d(s))}))}const l=(e.edges_assignment?e.edges_assignment:Xs(e)).map((e=>e.toLowerCase()));f.forEach(((e,t)=>i[l[t]].appendChild(e)));zd(s,o);return s};const Ld=(e,t)=>St(e)?Bd(e,t):Rd(e,t);const Id=e=>{const t=un(e.flat());const n=[];t.forEach((e=>{n[e]=[]}));e.forEach((e=>{n[e[1]].push(e[0])}));const s=[];const r={};const o=e=>{if(r[e]){return}r[e]=true;n[e].forEach(o);s.push(e)};t.forEach(o);return s};const Ud=Object.freeze({__proto__:null,topologicalSort:Id});const Qd=(e,t)=>{const n={};t.forEach((e=>{n[e]=true}));return e.filter((e=>n[e[0]]&&n[e[1]]))};const Dd=({faceOrders:e,faces_normal:t},n)=>{if(!e||!e.length){return[]}if(!t){throw new Error("linearizeFaceOrders: faces_normal required")}const s=un(e.flatMap((e=>[e[0],e[1]])));const r=n!==undefined&&s.includes(n)?t[n]:t[s[0]];const o=[];s.forEach((e=>{o[e]=D(t[e],r)>0}));const c=e.map((e=>e[2]===-1^!o[e[1]]?[e[0],e[1]]:[e[1],e[0]]));return Id(c)};const qd=({faces_vertices:e},t)=>{if(!e){return t}const n=e.map(((e,t)=>t)).filter((e=>t[e]==null));return n.concat(jn(t))};const Wd=({vertices_coords:e,faces_vertices:t,faceOrders:n,faces_layer:s,faces_normal:r},o)=>{if(!r){r=Cs({vertices_coords:e,faces_vertices:t})}if(n){return qd({faces_vertices:t},jn(Dd({faceOrders:n,faces_normal:r},o)))}if(s){return qd({faces_vertices:t},s)}return t.map(((e,t)=>t)).filter((()=>true))};const Gd=({vertices_coords:e,faces_vertices:t,faceOrders:n,faces_normal:s})=>{if(!s){s=Cs({vertices_coords:e,faces_vertices:t})}const r=ea(Rs({edges_vertices:n.map((e=>[e[0],e[1]]))}));const o=On(r);const c=o.map((e=>Qd(n,e))).map((e=>Dd({faceOrders:e,faces_normal:s})));const a=o.map((e=>s[e[0]]));const i=[];c.forEach(((e,t)=>e.forEach(((e,n)=>{i[e]={vector:a[t],layer:n}}))));return i};const Hd=({faces_layer:e})=>{const t=[];const n=jn(e);n.forEach(((e,n)=>{t[e]={vector:[0,0,1],layer:n}}));return t};const Jd=({vertices_coords:e,faces_vertices:t,faceOrders:n,faces_normal:s})=>{if(!s){s=Cs({vertices_coords:e,faces_vertices:t})}return jn(Dd({faceOrders:n,faces_normal:s}))};const Zd=Object.freeze({__proto__:null,faceOrdersSubset:Qd,linearize2DFaces:Wd,linearizeFaceOrders:Dd,makeFacesLayer:Jd,nudgeFacesWithFaceOrders:Gd,nudgeFacesWithFacesLayer:Hd});const Yd={back:{fill:"white"},front:{fill:"#ddd"}};const Xd={back:{opacity:.1},front:{opacity:.1}};const Kd={};const eu={stroke:"black","stroke-linejoin":"bevel"};const tu={stroke:"none",fill:"black","stroke-linejoin":"bevel"};const nu={fill:"none"};const su=(e,t,n)=>e.setAttribute(`data-${t}`,n);const ru=(e,t={})=>Object.keys(t).forEach((n=>e.setAttributeNS(null,n,t[n])));const ou=(e,t,n,s={})=>{const r=s&&s.faces?s.faces:{};const o=Lt(e);const c=!!(e.faceOrders||e.faces_layer);const a=[["front"],["back"]];const i=Qc(e);i.map((e=>e?a[0]:a[1])).forEach(((e,n)=>{Ni(t[n],e);su(t[n],"side",e);ru(t[n],o?c?Yd[e]:Xd[e]:Kd[e]);ru(t[n],r[e])}));Wd(e).forEach((e=>n.appendChild(t[e])));Object.defineProperty(n,"front",{get:()=>t.filter(((e,t)=>i[t]))});Object.defineProperty(n,"back",{get:()=>t.filter(((e,t)=>!i[t]))});ru(n,o?c?eu:tu:nu);return n};const cu=(e,t)=>{const n=ud.g();if(!e||!e.vertices_coords||!e.faces_vertices){return n}const s=e.faces_vertices.map((t=>t.map((t=>[0,1].map((n=>e.vertices_coords[t][n])))))).map((e=>ud.polygon(e)));s.forEach(((e,t)=>e.setAttributeNS(null,"index",t)));n.setAttributeNS(null,"fill","white");return ou(e,s,n,t)};const au=function(e,t){const n=ud.g();if(!e||"faces_edges"in e===false||"edges_vertices"in e===false||"vertices_coords"in e===false){return n}const s=e["faces_edges"].map((t=>t.map((t=>e["edges_vertices"][t])).map(((e,t,n)=>{const s=n[(t+1)%n.length];return e[1]===s[0]||e[1]===s[1]?e[0]:e[1]})).map((t=>[0,1].map((n=>e["vertices_coords"][t][n])))))).map((e=>ud.polygon(e)));s.forEach(((e,t)=>e.setAttributeNS(null,"index",t)));n.setAttributeNS(null,"fill","white");return ou(e,s,n,t)};const iu=(e,t)=>{if(e&&e["faces_vertices"]){return cu(e,t)}if(e&&e["faces_edges"]){return au(e,t)}return ud.g()};const fu={fill:"none"};const lu={stroke:"black",fill:"white"};const du=(e,t={})=>Object.keys(t).forEach((n=>e.setAttributeNS(null,n,t[n])));const uu=(e,t={})=>{const n=t&&t.boundaries?t.boundaries:{};const s=ud.g();if(!e){return s}const r=fa(e).polygon;if(!r.length){return s}const o=ud.polygon(r);Ni(o,"boundary");s.appendChild(o);du(s,Lt(e)?fu:lu);Object.keys(n).forEach((e=>s.setAttributeNS(null,e,n[e])));return s};const mu={vertices:bd,edges:Ld,faces:iu,boundaries:uu,edgesPaths:Bd,edgesLines:Rd,facesVerticesPolygon:cu,facesEdgesPolygon:au};const gu=1/50;const pu={min:[0,0],span:[1,1]};const _u=["boundaries","faces","edges","vertices"];const hu=(e,t)=>{for(let n=0;n<e.childNodes.length;n+=1){e.childNodes[n].setAttributeNS(null,"r",t)}};const vu=(e,t,n,s)=>{const r=t[3]&&t[3].childNodes.length;if(!(s.strokeWidth||s.viewBox||r)){return}const o=ca(n)||pu;const c=Math.max(...o.span);const a=Pi(e,"svg");if(a&&s.viewBox){const e=md(o);a.setAttributeNS(null,"viewBox",e)}if(a&&s.padding){const e=a.getAttribute("viewBox");if(e!=null){const t=s.padding*c;const n=e.split(" ").map((e=>parseFloat(e)));const r=[-t,-t,t*2,t*2].map(((e,t)=>n[t]+e)).join(" ");a.setAttributeNS(null,"viewBox",r)}}if(s.strokeWidth||s["stroke-width"]){const t=s.strokeWidth?s.strokeWidth:s["stroke-width"];const r=typeof t==="number"?c*t:vd(n);e.setAttributeNS(null,"stroke-width",r)}if(r){const e=s.vertices&&s.vertices.radius!=null?s.vertices.radius:s.radius;const n=typeof e==="string"?parseFloat(e):e;const r=typeof n==="number"&&!Number.isNaN(n)?c*n:c*gu;hu(t[3],r)}};const bu=(e,t={})=>_u.map((n=>t[n]===false?ud.g():mu[n](e,t))).map(((e,t)=>{Ni(e,_u[t]);return e}));const yu=(e,t,n={})=>{if(!Lt(e)){if(n.faces===undefined){n.faces=false}}const s=bu(e,n);s.filter((e=>e.childNodes.length>0)).forEach((e=>t.appendChild(e)));vu(t,s,e,n);Ni(t,...[e.file_classes||[],e.frame_classes||[]].flat());return t};const Eu=(e,t={})=>{const n=yu(typeof e==="string"?JSON.parse(e):e,ud.svg(),{viewBox:true,strokeWidth:true,...t});return t&&t.string?(new(c().XMLSerializer)).serializeToString(n):n};Object.assign(Eu,{...mu,render:yu,getViewBox:gd,getStrokeWidth:vd,boundingBoxToViewBox:md});const Mu=e=>{const t=["file_title","file_author","file_description","frame_title","frame_author","frame_description"];return t.filter((t=>e[t])).map((t=>`# ${t.split("_")[1]}: ${e[t]}`)).join("\n")};const Au=e=>{const t=typeof e==="string"?JSON.parse(e):e;const n=Mu(t);const s=(t.vertices_coords||[]).map((e=>e.join(" "))).map((e=>`v ${e}`)).join("\n");const r=(t.faces_vertices||[]).map((e=>e.map((e=>e+1)).join(" "))).map((e=>`f ${e}`)).join("\n");const o=[n,s,r].filter((e=>e!=="")).join("\n");return`${o}\n`};const xu={};xu.prototype=Object.create(Object.prototype);xu.prototype.constructor=xu;Object.entries({clean:Er,populate:zo,subgraph:pc,boundary:fa,boundaries:la,planarBoundary:da,planarBoundaries:ua,boundingBox:ca,nearest:eo,splitEdge:Wo,splitFace:uc,invertAssignments:Wt,svg:Eu,obj:Au,...xr,...tn,...Ac}).forEach((([e,t])=>{xu.prototype[e]=function(){return t(this,...arguments)}}));xu.prototype.clone=function(){return Object.assign(Object.create(Object.getPrototypeOf(this)),va(this))};xu.prototype.planarize=function(){const e=Po(this);this.clear();Object.assign(this,e);return this};xu.prototype.clear=function(){_.graph.forEach((e=>delete this[e]));_.orders.forEach((e=>delete this[e]));delete this.file_frames;return this};xu.prototype.folded=function(){const e=this.faces_matrix2?Fc(this,this.faces_matrix2):ga(this,...arguments);Object.assign(this,{vertices_coords:e,frame_classes:["foldedForm"]});return this};xu.prototype.flatFolded=function(){const e=this.faces_matrix2?Fc(this,this.faces_matrix2):pa(this,...arguments);Object.assign(this,{vertices_coords:e,frame_classes:["foldedForm"]});return this};xu.prototype.flatFold=function(){Kc(this,g(arguments));return this};const wu=xu.prototype;const ku=(e,t,n,s,r=ht,o=E)=>{const c=K(P(e),P(n));if(Math.abs(c)<o){return undefined}const a=K(e,n);const i=-a;const f=U(s,t);const l=re(f);const d=K(f,n)/a;const u=K(l,e)/i;if(r(u,o/j(n))){return d}return undefined};const Ou=(e,t,n)=>R(t,z(e,n));const ju=(e,t,n,s,r)=>e.map(((e,t,n)=>[U(n[(t+1)%n.length],e),e])).map((e=>ku(t,n,e[0],e[1],s,r))).filter((e=>e!==undefined)).sort(((e,t)=>e-t));const Fu=(e,t,n)=>{let s=0;let r=e.length-1;while(s<r){if(t(e[s+1]-e[s],n)){break}s+=1}while(r>s){if(t(e[r]-e[r-1],n)){break}r-=1}if(s>=r){return undefined}return[e[s],e[r]]};const Su=(e,{vector:t,origin:n},s=dt,r=mt,o=E)=>{const c=ju(e,t,n,ht,o);if(c.length<2){return undefined}const a=o*2/j(t);const i=Fu(c,s,a);if(i===undefined){return undefined}const f=e=>{if(r(e)){return e}return e<.5?0:1};const l=i.map(f);if(Math.abs(l[0]-l[1])<o*2/j(t)){return undefined}const d=Ou(t,n,(l[0]+l[1])/2);return Dr(e,d,s,o)?l.map((e=>Ou(t,n,e))):undefined};const Cu=(e,t,n=E)=>{const s=(e,t,s)=>(s[0]-t[0])*(e[1]-t[1])>(s[1]-t[1])*(e[0]-t[0])+n;const r=(e,t,n,s)=>{const r=U(e,t);const o=U(s,n);const c=K(e,t);const a=K(s,n);const i=1/K(r,o);return z(U(z(o,c),z(r,a)),i)};let o=e;let c=t[t.length-1];for(let e=0;e<t.length;e+=1){const n=t[e];const a=o;o=[];let i=a[a.length-1];for(let e=0;e<a.length;e+=1){const t=a[e];if(s(t,c,n)){if(!s(i,c,n)){o.push(r(c,n,t,i))}o.push(t)}else if(s(i,c,n)){o.push(r(c,n,t,i))}i=t}c=n}return o.length===0?undefined:o};const Vu=Object.freeze({__proto__:null,clipLineConvexPolygon:Su,clipPolygonPolygon:Cu});const Pu=(e,{vector:t,origin:n},s)=>{if(e.length<2){return e}const r=e.map((e=>U(e[1],e[0]))).map((e=>q(e,t)<s));e.map(((e,t)=>t)).filter((e=>r[e])).forEach((t=>{e[t]=[e[t][1],e[t][0]]}));const o=P(t);const c=e.map((e=>e.map((e=>q(U(e,n),o))))).sort(((e,t)=>e[0]-t[0]));const a=[[c[0][0],c[0][1]]];for(let e=1;e<c.length;e+=1){const t=c[e];if(t[0]-s<a[a.length-1][1]+s){a[a.length-1][1]=Math.max(t[1],a[a.length-1][1])}else{a.push([t])}}return a.map((e=>e.map((e=>R(n,z(o,e))))))};const Tu=(e,t,n,s=mt,r=E)=>{const o=t.map((t=>e.faces_vertices[t].map((t=>e.vertices_coords[t])))).map((e=>Su(e,n,dt,s,r))).filter((e=>e!==undefined));return Pu(o,n,r)};const Nu=(e,t,n=E)=>{const s=ac(e,t,n);return Tu(e,s,t,mt,n)};const zu=(e,t,n=E)=>{const s=ic(e,t,n);return Tu(e,s,t,pt,n)};const Bu=(e,t,n=E)=>{const s=U(t[1],t[0]);const r=t[0];const o=fc(e,t,n);return Tu(e,o,{vector:s,origin:r},ht,n)};const $u=Object.freeze({__proto__:null,clipLine:Nu,clipRay:zu,clipSegment:Bu});const Ru=(e,t,n=E)=>{if(!e.vertices_coords){e.vertices_coords=[]}if(typeof t[0]==="number"){t=[t]}const s=t.map((t=>e.vertices_coords.map((e=>te(e,t)<n)).map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined)).shift()));let r=e.vertices_coords.length;const o=t.filter(((e,t)=>s[t]===undefined));e.vertices_coords.push(...o);return s.map((e=>e===undefined?r++:e))};const Lu=(e,t,n)=>{const s=Array.from(Array(t.length-1)).map(((e,n)=>[t[n],t[n+1]]));const r=s.map((e=>e.join(" "))).map((e=>n[e]===undefined));const o=s.filter(((e,t)=>r[t]));const c=Array.from(Array(o.length)).map(((t,n)=>e.edges_vertices.length+n));c.forEach(((t,n)=>{e.edges_vertices[t]=o[n]}));if(e.edges_assignment){c.forEach((t=>{e.edges_assignment[t]="U"}))}if(e.edges_foldAngle){c.forEach((t=>{e.edges_foldAngle[t]=0}))}for(let n=0;n<t.length;n+=1){const s=t[n];const o=r[n-1]?t[n-1]:undefined;const c=r[n]?t[n+1]:undefined;const a=[o,c].filter((e=>e!==undefined));const i=e.vertices_vertices[s]?e.vertices_vertices[s]:[];const f=i.concat(a);e.vertices_vertices[s]=js(e,f,t[n])}const a=Us(e);for(let n=0;n<t.length;n+=1){const s=t[n];e.vertices_edges[s]=e.vertices_vertices[s].map((e=>a[`${s} ${e}`]))}t.map((t=>e.vertices_vertices[t].length===1?[x]:ls(e.vertices_vertices[t].map((n=>U(e.vertices_coords[n],e.vertices_coords[t])))))).forEach(((n,s)=>{e.vertices_sectors[t[s]]=n}));return c};const Iu=(e,t,n,s=E)=>{if(!e.vertices_sectors){e.vertices_sectors=Ws(e)}const r=[t,n].map((e=>[e[0],e[1]]));const o=U(r[1],r[0]);const c=$c(e,r[0],r[1],s);const a=c.map(((e,t)=>t)).filter(mt);const i={};a.forEach((t=>e.edges_faces[t].forEach((e=>{i[e]=true}))));const f=Object.keys(i).map((e=>parseInt(e,10))).sort(((e,t)=>e-t));const l=a.reverse().map((t=>Wo(e,t,c[t],s)));const d=l.map((e=>e.vertex));const u=Ru(e,r,s);const m={};d.forEach((e=>{m[e]=true}));u.forEach((e=>{m[e]=true}));const g=Object.keys(m).map((e=>parseInt(e,10)));const p=Fs(e,g,o);const _=Us(e);const h=Lu(e,p,_);h.forEach((t=>{const n=e.edges_vertices[t];_[`${n[0]} ${n[1]}`]=t;_[`${n[1]} ${n[0]}`]=t}));const v=p.map((t=>e.vertices_vertices[t].map((e=>[[e,t],[t,e]])))).reduce(((e,t)=>e.concat(t)),[]).reduce(((e,t)=>e.concat(t)),[]);const b={};const y=v.map((t=>hs(e,t[0],t[1],b))).filter((e=>e!==undefined));const M=bs(y);$n(e,"faces",f);const A=M.map(((t,n)=>e.faces_vertices.length+n));if(e.faces_vertices){A.forEach(((t,n)=>{e.faces_vertices[t]=M[n].vertices}))}if(e.faces_edges){A.forEach(((t,n)=>{e.faces_edges[t]=M[n].edges.map((e=>_[e]))}))}if(e.faces_angles){A.forEach(((t,n)=>{e.faces_angles[t]=M[n].faces_angles}))}if(e.vertices_faces){e.vertices_faces=Is(e)}if(e.edges_faces){e.edges_faces=Hs(e)}if(e.faces_faces){e.faces_faces=ir(e)}if(e.vertices_coords.length!==e.vertices_vertices.length||e.vertices_coords.length!==e.vertices_edges.length||e.vertices_coords.length!==e.vertices_faces.length){console.warn("vertices mismatch",JSON.parse(JSON.stringify(e)))}if(e.edges_vertices.length!==e.edges_faces.length||e.edges_vertices.length!==e.edges_assignment.length){console.warn("edges mismatch",JSON.parse(JSON.stringify(e)))}if(e.faces_vertices.length!==e.faces_edges.length||e.faces_vertices.length!==e.faces_faces.length){console.warn("faces mismatch",JSON.parse(JSON.stringify(e)))}return h};const Uu=({vertices_vertices:e},t)=>{const n=[t[1],t[0]];t.map(((t,s)=>e[t].indexOf(n[s]))).forEach(((n,s)=>e[t[s]].splice(n,1)))};const Qu=({vertices_edges:e},t,n)=>{n.map(((n,s)=>e[n].indexOf(t))).forEach(((t,s)=>e[n[s]].splice(t,1)))};const Du=(e,t,n,s)=>{const r=t.map((t=>e.faces_edges[t].indexOf(n)));const o=[];t.forEach(((t,n)=>e.faces_vertices[t].forEach(((e,t,r)=>{const c=r[(t+1)%r.length];if(e===s[0]&&c===s[1]||e===s[1]&&c===s[0]){o[n]=t}}))));if(o[0]===undefined||o[1]===undefined){console.warn("removePlanarEdge error joining faces")}const c=t.map((t=>e.faces_edges[t].length));const a=t.map((t=>e.faces_vertices[t].length));const i=c.map((e=>e-1));const f=a.map((e=>e-1));const l=r.map(((e,t)=>(e+1)%c[t]));const d=o.map(((e,t)=>(e+1)%a[t]));const u=t.map(((t,n)=>Array.from(Array(i[n])).map(((e,t)=>(l[n]+t)%c[n])).map((n=>e.faces_edges[t][n]))));const m=t.map(((t,n)=>Array.from(Array(f[n])).map(((e,t)=>(d[n]+t)%a[n])).map((n=>e.faces_vertices[t][n]))));const g=t.map((t=>e.faces_faces[t])).reduce(((e,t)=>e.concat(t)),[]).filter((e=>e!==t[0]&&e!==t[1]));return{vertices:m[0].concat(m[1]),edges:u[0].concat(u[1]),faces:g}};const qu=(e,t)=>{const n=[...e.edges_vertices[t]].sort(((e,t)=>t-e));const s=[...e.edges_faces[t]];Uu(e,n);Qu(e,t,n);const r=n.map((t=>e.vertices_vertices[t].length===0));const o=n.filter(((e,t)=>r[t]));if(s.length===2&&s[0]!==s[1]){const r=e.faces_vertices.length;const o=Du(e,s,t,n);e.faces_vertices.push(o.vertices);e.faces_edges.push(o.edges);e.faces_faces.push(o.faces);e.vertices_faces.forEach(((t,n)=>{let o=false;t.forEach(((c,a)=>{if(c===s[0]||c===s[1]){e.vertices_faces[n][a]=r;const s=o?[n,1]:[n,1,r];t.splice(...s);o=true}}))}));e.edges_faces.forEach(((t,n)=>t.forEach(((t,o)=>{if(t===s[0]||t===s[1]){e.edges_faces[n][o]=r}}))));e.faces_faces.forEach(((t,n)=>t.forEach(((t,o)=>{if(t===s[0]||t===s[1]){e.faces_faces[n][o]=r}}))));e.faces_vertices.forEach((t=>t.forEach((t=>{if(t===undefined){console.log("FOUND ONE before remove",e.faces_vertices)}}))));$n(e,"faces",s)}if(s.length===2&&s[0]===s[1]&&o.length){const n=s[0];e.faces_vertices[n]=e.faces_vertices[n].filter((e=>!o.includes(e))).filter(((e,t,n)=>e!==n[(t+1)%n.length]));e.faces_edges[n]=e.faces_edges[n].filter((e=>e!==t))}$n(e,"edges",[t]);$n(e,"vertices",o)};const Wu=(e,t)=>{const n=e.vertices_edges[t];const s=un(e.vertices_faces[t].filter((e=>e!=null)));if(n.length!==2||s.length>2){console.warn("cannot remove non 2-degree vertex yet (e,f)",n,s);return}const r=xo(e,t,n);const o=r.slice().reverse();n.sort(((e,t)=>e-t));r.forEach((t=>{const s=e.vertices_edges[t].indexOf(n[1]);if(s===-1){return}e.vertices_edges[t][s]=n[0]}));r.forEach(((n,s)=>{const r=e.vertices_vertices[n].indexOf(t);if(r===-1){console.warn("removePlanarVertex unknown vertex issue");return}e.vertices_vertices[n][r]=o[s]}));e.edges_vertices[n[0]]=[...r];s.forEach((n=>{const s=e.faces_vertices[n].indexOf(t);if(s===-1){console.warn("removePlanarVertex unknown face_vertex issue");return}e.faces_vertices[n].splice(s,1)}));s.forEach((t=>{const s=e.faces_edges[t].indexOf(n[1]);if(s===-1){console.warn("removePlanarVertex unknown face_edge issue");return}e.faces_edges[t].splice(s,1)}));$n(e,"vertices",[t]);$n(e,"edges",[n[1]])};const Gu=e=>[0,1].map((t=>e.filter(((e,n)=>n%2===t)).reduce(((e,t)=>e+t),0)));const Hu=e=>{const t=e.reduce(((e,t)=>e+t),0)/2;return Gu(e).map((e=>e-t))};const Ju=e=>e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>Xn(...e))).map(((e,t,n)=>n.slice(t+1,n.length).concat(n.slice(0,t)))).map((e=>Gu(e).map((e=>Math.PI-e)))).map(((t,n)=>e[n]+t[0])).map(((t,n)=>Zn(t,e[n],e[(n+1)%e.length])?t:undefined));const Zu=e=>{const t=e.map((e=>Math.atan2(e[1],e[0])));return Ju(t).map((e=>e===undefined?undefined:[Math.cos(e),Math.sin(e)]))};const Yu=({vertices_coords:e,vertices_edges:t,edges_assignment:n,edges_vertices:s},r)=>{if(!t){t=Ts({edges_vertices:s})}const o=n?t[r].filter((e=>wt[n[e]])):t[r];if(o.length%2===0){return[]}const c=o.map((e=>s[e][0]===r?s[e]:[s[e][1],s[e][0]]));const a=c.map((t=>t.map((t=>e[t]))));const i=a.map((e=>U(e[1],e[0])));const f=is(i).map((e=>i[e]));const l=Zu(f);const d=f.map(P);const u=l.filter((e=>e!==undefined)).filter((e=>!d.map((t=>q(e,t))).map((e=>Math.abs(1-e)<.001)).reduce(((e,t)=>e||t),false)));return u};const Xu=Object.freeze({__proto__:null,alternatingSum:Gu,alternatingSumDifference:Hu,kawasakiSolutions:Yu,kawasakiSolutionsRadians:Ju,kawasakiSolutionsVectors:Zu});const Ku=({vertices_edges:e,edges_assignment:t})=>e.map((e=>e.map((e=>!wt[t[e]])).reduce(((e,t)=>e&&t),true))).map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined));const em=({edges_vertices:e,vertices_edges:t,edges_assignment:n})=>{if(!t){t=Ts({edges_vertices:e})}const s=t.map((e=>e.map((e=>xt[n[e]])).filter((e=>e!==0)).map(Math.sign).reduce(((e,t)=>e+t),0))).map((e=>e===2||e===-2));aa({edges_vertices:e,edges_assignment:n}).forEach((e=>{s[e]=true}));Ku({vertices_edges:t,edges_assignment:n}).forEach((e=>{s[e]=true}));return s.map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined))};const tm=({vertices_coords:e,vertices_vertices:t,vertices_edges:n,edges_vertices:s,edges_assignment:r},o=E)=>{if(!t){t=$s({vertices_coords:e,vertices_edges:n,edges_vertices:s})}if(!n){n=Ts({edges_vertices:s})}const c=qs({vertices_coords:e,vertices_vertices:t,edges_vertices:s}).map(((e,t)=>e.filter(((e,s)=>wt[r[n[t][s]]])))).map((e=>e.length>1?ls(e):[0,0])).map((e=>Gu(e))).map((e=>Math.abs(e[0]-e[1])<o));aa({edges_vertices:s,edges_assignment:r}).forEach((e=>{c[e]=true}));Ku({vertices_edges:n,edges_assignment:r}).forEach((e=>{c[e]=true}));return c.map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined))};const nm=Object.freeze({__proto__:null,validateKawasaki:tm,validateMaekawa:em});const sm={};sm.prototype=Object.create(wu);sm.prototype.constructor=sm;const rm=function(e){e.valley=t=>this.setValley(e,t);e.mountain=t=>this.setMountain(e,t);e.flat=()=>this.setFlat(e);e.unassigned=()=>this.setUnassigned(e);e.cut=()=>this.setCut(e);return e};sm.prototype.line=function(...e){const t=g(...e);if(!t){return undefined}const n=Nu(this,t);const s=n.flatMap((e=>Iu(this,e[0],e[1])));return rm.call(this,s)};sm.prototype.ray=function(...e){const t=g(...e);if(!t){return undefined}const n=zu(this,t);const s=n.flatMap((e=>Iu(this,e[0],e[1])));return rm.call(this,s)};sm.prototype.segment=function(...e){const t=u(...e);if(!t){return undefined}const n=Bu(this,t);const s=n.flatMap((e=>Iu(this,e[0],e[1])));return rm.call(this,s)};sm.prototype.polygon=function(...e){const t=d(...e);if(!t){return undefined}const n=t.map(((e,t,n)=>[e,n[(t+1)%n.length]]));const s=n.flatMap((e=>Bu(this,e)));const r=s.flatMap((e=>Iu(this,e[0],e[1])));return rm.call(this,r)};sm.prototype.removeEdge=function(e){const t=this.edges_vertices[e];qu(this,e);t.map((e=>ko(this,e))).map(((e,n)=>e?t[n]:undefined)).filter((e=>e!==undefined)).sort(((e,t)=>t-e)).forEach((e=>Wu(this,e)));return true};sm.prototype.validate=function(e){const t=Ec(this);t.vertices.kawasaki=tm(this,e);t.vertices.maekawa=em(this);if(this.edges_foldAngle){t.edges.not_flat=this.edges_foldAngle.map(((e,t)=>Ft(e)?undefined:t)).filter((e=>e!==undefined))}if(t.summary==="valid"){if(t.vertices.kawasaki.length||t.vertices.maekawa.length){t.summary="invalid"}else if(t.edges.not_flat.length){t.summary="not flat"}}return t};const om=(e,t,n,s)=>{t.forEach((t=>{e.edges_assignment[t]=n;e.edges_foldAngle[t]=s}));return t};sm.prototype.setValley=function(e=[],t=180){return om(this,e,"V",Math.abs(t))};sm.prototype.setMountain=function(e=[],t=-180){return om(this,e,"M",-Math.abs(t))};sm.prototype.setFlat=function(e=[]){return om(this,e,"F",0)};sm.prototype.setUnassigned=function(e=[]){return om(this,e,"U",0)};sm.prototype.setCut=function(e=[]){return om(this,e,"C",0)};sm.prototype.defer=false;const cm=sm.prototype;const am=1.1;const im="Rabbit Ear";const fm=(e,t)=>[[0,0],[e,0],[e,t],[0,t]];const lm=e=>zo({vertices_coords:e,edges_vertices:e.map(((e,t,n)=>[t,(t+1)%n.length])),edges_assignment:Array(e.length).fill("B")});const dm=(e=1)=>lm(fm(e,e));const um=(e=1,t=1)=>lm(fm(e,t));const mm=(e=3,t=1)=>lm(Ze(e,t));const gm=()=>zo({vertices_coords:[[0,0],[1,0],[1,Math.SQRT2-1],[1,1],[Math.SQRT2-1,1],[0,1]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,2],[0,4],[0,3]],edges_assignment:Array.from("BBBBBBVVF")});const pm=()=>zo({vertices_coords:[[0,0],[Math.SQRT1_2,0],[1,0],[1,1-Math.SQRT1_2],[1,1],[1-Math.SQRT1_2,1],[0,1],[0,Math.SQRT1_2],[.5,.5],[Math.SQRT1_2,1-Math.SQRT1_2],[1-Math.SQRT1_2,Math.SQRT1_2]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[9,0],[9,2],[9,4],[10,0],[10,6],[10,4],[9,1],[10,7],[9,3],[10,5],[8,0],[8,9],[8,4],[8,10]],edges_assignment:Array.from("BBBBBBBBVVVVVVMMFFFFFF")});const _m=()=>zo({vertices_coords:[[0,0],[.5,0],[1,0],[1,.5],[1,1],[.5,1],[0,1],[0,.5],[.5,.5],[.5,(Math.SQRT2-1)/2],[(3-Math.SQRT2)/2,.5],[.5,(3-Math.SQRT2)/2],[(Math.SQRT2-1)/2,.5],[Math.SQRT1_2/2,Math.SQRT1_2/2],[1-Math.SQRT1_2/2,1-Math.SQRT1_2/2]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[0,9],[9,2],[2,10],[10,4],[4,11],[11,6],[6,12],[12,0],[1,9],[9,8],[3,10],[10,8],[5,11],[11,8],[7,12],[12,8],[2,8],[6,8],[0,13],[13,8],[13,9],[13,12],[4,14],[14,8],[14,10],[14,11]],edges_assignment:Array.from("BBBBBBBBVVVVVVVVMVMVMVMVMMFFFFFFFF")});const hm=()=>zo({vertices_coords:[[0,1],[0,Math.SQRT1_2],[0,.5],[0,1-Math.SQRT1_2],[0,0],[.5,.5],[1,1],[(1-Math.SQRT1_2)/2,Math.SQRT1_2/2],[Math.SQRT1_2/2,(1-Math.SQRT1_2)/2],[1-Math.SQRT1_2,0],[.5,0],[Math.SQRT1_2,0],[1,0],[.5,(1-Math.SQRT1_2)/2],[1-Math.SQRT1_2/2,(1-Math.SQRT1_2)/2],[(1-Math.SQRT1_2)/2,1-Math.SQRT1_2/2],[(1-Math.SQRT1_2)/2,.5],[(1+Math.SQRT1_2)/2,1-Math.SQRT1_2/2],[1,Math.SQRT1_2],[Math.SQRT1_2,1],[1-Math.SQRT1_2/2,(1+Math.SQRT1_2)/2],[Math.SQRT1_2/2,(1+Math.SQRT1_2)/2],[.5,1],[1,.5],[(1+Math.SQRT1_2)/2,Math.SQRT1_2/2],[.5,(1+Math.SQRT1_2)/2],[(1+Math.SQRT1_2)/2,.5],[1-Math.SQRT1_2,1],[1,1-Math.SQRT1_2]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[4,7],[4,8],[4,9],[9,10],[10,11],[11,12],[8,13],[13,14],[15,16],[16,7],[3,7],[7,5],[5,17],[17,18],[19,20],[20,5],[5,8],[8,9],[2,15],[14,10],[21,22],[23,24],[10,8],[7,2],[12,14],[0,15],[22,25],[25,5],[5,13],[13,10],[2,16],[16,5],[5,26],[26,23],[6,17],[6,20],[11,14],[14,5],[5,21],[21,27],[28,24],[24,5],[5,15],[15,1],[12,5],[5,0],[20,25],[25,21],[24,26],[26,17],[12,24],[0,21],[12,28],[28,23],[23,18],[18,6],[6,19],[19,22],[22,27],[27,0],[22,20],[17,23]],edges_assignment:Array.from("BBBBFFVVBBBBMMMMFVVFFVVFVVVVVVVVVMMVVMMVVVFVVFFVVFMMMMMMVVBBBBBBBBVV")});const vm=()=>zo({vertices_coords:[[0,0],[.25,0],[.5,0],[.75,0],[1,0],[0,1],[0,.75],[0,.5],[0,.25],[.25,.25],[.5,.5],[.75,.75],[1,1],[.25,1],[.25,.75],[.25,.5],[1,.25],[.75,.25],[.5,.25],[.5,1],[1,.5],[.5,.75],[.75,.5],[.75,1],[1,.75]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[5,6],[6,7],[7,8],[8,0],[0,9],[9,10],[10,11],[11,12],[13,14],[14,15],[15,9],[9,1],[16,17],[17,18],[18,9],[9,8],[7,14],[14,19],[20,17],[17,2],[2,9],[9,7],[19,21],[21,10],[10,18],[18,2],[20,22],[22,10],[10,15],[15,7],[4,17],[17,10],[10,14],[14,5],[23,11],[11,22],[22,17],[17,3],[6,14],[14,21],[21,11],[11,24],[12,23],[23,19],[19,13],[13,5],[4,16],[16,20],[20,24],[24,12],[19,11],[11,20]],edges_assignment:Array.from("BBBBBBBBVFFVFVVFFVVFMFMFMFFFFFFFFFVFFVFVVFFVVFBBBBBBBBMF")});const bm=()=>zo({vertices_coords:[[0,0],[2-Math.SQRT2,0],[1,0],[0,1],[0,2-Math.SQRT2],[.5,.5],[Math.SQRT1_2,Math.SQRT1_2],[1,1],[Math.SQRT1_2,1-Math.SQRT1_2],[1,Math.SQRT2-1],[1-Math.SQRT1_2,Math.SQRT1_2],[Math.SQRT2-1,1],[Math.SQRT1_2,1],[1,Math.SQRT1_2]],edges_vertices:[[0,1],[1,2],[3,4],[4,0],[0,5],[5,6],[6,7],[0,8],[8,9],[0,10],[10,11],[8,1],[10,4],[8,6],[6,12],[3,10],[10,5],[5,8],[8,2],[10,6],[6,13],[7,12],[12,11],[11,3],[11,6],[6,9],[2,9],[9,13],[13,7]],edges_assignment:Array.from("BBBBFFFVFVFMMVVVFFVVVBBBMMBBB")});const ym=Object.freeze({__proto__:null,bird:_m,fish:pm,frog:hm,kite:gm,polygon:mm,rectangle:um,square:dm,squareFish:bm,windmill:vm});const Em=(...e)=>zo(Object.assign(Object.create(wu),{...e.reduce(((e,t)=>({...e,...t})),{}),file_spec:am,file_creator:im}));const Mm=(...e)=>zo(Object.assign(Object.create(cm),{...e.length?e.reduce(((e,t)=>({...e,...t})),{}):dm(),file_spec:am,file_creator:im,frame_classes:["creasePattern"]}));Em.prototype=wu;Em.prototype.constructor=Em;Mm.prototype=cm;Mm.prototype.constructor=Mm;Object.keys(ym).forEach((e=>{Em[e]=(...t)=>Em(ym[e](...t));Mm[e]=(...t)=>Mm(ym[e](...t))}));const Am=(e,t)=>{const n=K(e.normal,t.normal);if(Math.abs(n)<E){return undefined}const s=e.distance*t.normal[1]-t.distance*e.normal[1];const r=t.distance*e.normal[0]-e.distance*t.normal[0];return[s/n,r/n]};const xm=(e,t)=>{const n=P(oe(U(t,e)));return[{normal:n,distance:q(R(e,t),n)/2}]};const wm=(e,t)=>{const n=P(U(t,e));return[{normal:n,distance:q(R(e,t),n)/2}]};const km=(e,t)=>{const n=Am(e,t);return n===undefined?[{normal:e.normal,distance:(e.distance+t.distance*q(e.normal,t.normal))/2}]:[R,U].map((n=>P(n(e.normal,t.normal)))).map((e=>({normal:e,distance:q(n,e)})))};const Om=(e,t)=>{const n=oe(e.normal);const s=q(t,n);return[{normal:n,distance:s}]};const jm=(e,t,n)=>{const s=q(t,e.normal);const r=e.distance-s;const o=ne(t,n);if(r>o){return[]}const c=Math.sqrt(o*o-r*r);const a=z(e.normal,r);const i=R(t,a);const f=z(oe(e.normal),c);const l=c<E?[i]:[R(i,f),U(i,f)];return l.map((e=>P(U(n,e)))).map((e=>({normal:e,distance:q(t,e)})))};const Fm=e=>e<0?-((-e)**(1/3)):e**(1/3);const Sm=(e,t,n,s,r)=>{switch(e){case 1:return[-r/s];case 2:{const e=s**2-4*n*r;if(e<-E){return[]}const t=-s/(2*n);if(e<E){return[t]}const o=Math.sqrt(e)/(2*n);return[t+o,t-o]}case 3:{const e=n/t;const o=s/t;const c=r/t;const a=(3*o-e**2)/9;const i=(9*e*o-27*c-2*e**3)/54;const f=a**3+i**2;const l=-e/3;if(f>0){const e=Math.sqrt(f);const t=Fm(i+e);const n=Fm(i-e);return[l+t+n]}if(Math.abs(f)<E){const e=i**(1/3);if(i<0){return[]}return[l+2*e,l-e]}const d=Math.sqrt(-f);const u=Math.atan2(d,i)/3;const m=(i**2-f)**(1/6);const g=m*Math.cos(u);const p=m*Math.sin(u);return[l+2*g,l-g-Math.sqrt(3)*p,l-g+Math.sqrt(3)*p]}default:return[]}};const Cm=(e,t,n,s)=>{if(Math.abs(1-q(e.normal,n)/e.distance)<.02){return[]}const r=oe(e.normal);const o=U(R(n,z(e.normal,e.distance)),z(s,2));const c=U(z(e.normal,e.distance),n);const a=q(s,t.normal)-t.distance;const i=2*q(c,r);const f=q(c,c);const l=q(R(o,c),r);const d=q(o,c);const u=q(r,t.normal);const m=q(c,t.normal);const g=u;const p=a+l*u+m;const _=a*i+d*u+l*m;const h=a*f+d*m;let v=0;if(Math.abs(_)>E){v=1}if(Math.abs(p)>E){v=2}if(Math.abs(g)>E){v=3}return Sm(v,g,p,_,h).map((t=>R(z(e.normal,e.distance),z(r,t)))).map((e=>({p:e,normal:P(U(e,n))}))).map((e=>({normal:e.normal,distance:q(e.normal,H(e.p,n))})))};const Vm=(e,t,n)=>{const s=oe(e.normal);const r=q(s,t.normal);if(Math.abs(r)<E){return undefined}const o=q(n,s);const c=q(n,t.normal);const a=(t.distance+2*o*r-c)/(2*r);return[{normal:s,distance:a}]};const Pm=(e,...t)=>[null,xm,wm,km,Om,jm,Cm,Vm][e](...t);const Tm=Object.freeze({__proto__:null,normalAxiom:Pm,normalAxiom1:xm,normalAxiom2:wm,normalAxiom3:km,normalAxiom4:Om,normalAxiom5:jm,normalAxiom6:Cm,normalAxiom7:Vm});const Nm=(e,t)=>[{vector:P(U(...ue(t,e))),origin:e}];const zm=(e,t)=>[{vector:P(oe(U(...ue(t,e)))),origin:H(e,t)}];const Bm=(e,t)=>Pr(e,t);const $m=(e,t)=>[{vector:oe(P(e.vector)),origin:t}];const Rm=(e,t,n)=>(so({radius:ne(t,n),origin:t},e)||[]).map((e=>({vector:P(oe(U(...ue(e,n)))),origin:H(n,e)})));const Lm=(e,t,n,s)=>Cm(Gn(e),Gn(t),n,s).map(Hn);const Im=(e,t,n)=>{const s=no(e,{vector:t.vector,origin:n},mt,mt).point;return s===undefined?[]:[{vector:P(oe(U(...ue(s,n)))),origin:H(n,s)}]};const Um=(e,...t)=>[null,Nm,zm,Bm,$m,Rm,Lm,Im][e](...t);const Qm=Object.freeze({__proto__:null,axiom:Um,axiom1:Nm,axiom2:zm,axiom3:Bm,axiom4:$m,axiom5:Rm,axiom6:Lm,axiom7:Im});const Dm=(e,t)=>{const n=je(e.vector,e.origin);return be(n,t)};const qm=(e,t,n,s)=>[[n,s].map((t=>Dr(e,t,dt))).reduce(((e,t)=>e&&t),true)];const Wm=qm;const Gm=(e,t,n,s)=>{const r=[n,s].map((t=>Su(e,t,dt,mt)));if(r[0]===undefined||r[1]===undefined){return[false,false]}const o=t.map((t=>t===undefined?undefined:Su(e,t,dt,mt)));const c=[0,1].map((e=>o[e]!==undefined));const a=t.map((e=>e===undefined?undefined:[Dm(e,r[0][0]),Dm(e,r[0][1])]));const i=a.map((e=>e===undefined?false:Ir({vector:I(r[1][1],r[1][0]),origin:r[1][0]},e[0],ht)||Ir({vector:I(r[1][1],r[1][0]),origin:r[1][0]},e[1],ht)||Ir({vector:I(e[1],e[0]),origin:e[0]},r[1][0],ht)||Ir({vector:I(e[1],e[0]),origin:e[0]},r[1][1],ht)));return[0,1].map((e=>i[e]===true&&c[e]===true))};const Hm=(e,t,n,s)=>{const r=no(n,{vector:oe(n.vector),origin:s},mt,mt).point;return[[s,r].filter((e=>e!==undefined)).map((t=>Dr(e,t,dt))).reduce(((e,t)=>e&&t),true)]};const Jm=(e,t,n,s,r)=>{if(t.length===0){return[]}const o=[s,r].map((t=>Dr(e,t,dt))).reduce(((e,t)=>e&&t),true);const c=t.map((e=>Dm(e,r))).map((t=>Dr(e,t,dt)));return c.map((e=>e&&o))};const Zm=function(e,t,n,s,r,o){if(t.length===0){return[]}const c=[r,o].map((t=>Dr(e,t,dt))).reduce(((e,t)=>e&&t),true);if(!c){return t.map((()=>false))}const a=t.map((e=>Dm(e,r))).map((t=>Dr(e,t,dt)));const i=t.map((e=>Dm(e,o))).map((t=>Dr(e,t,dt)));return t.map(((e,t)=>a[t]&&i[t]))};const Ym=(e,t,n,s,r)=>{const o=Dr(e,r,dt);if(!t.length){return[false]}const c=Dm(t[0],r);const a=Dr(e,c,dt);const i=fo(e,s,ht,mt)!==undefined;const f=no(s,t[0],mt,mt).point;const l=f?Dr(e,f,dt):false;return[o&&a&&i&&l]};const Xm=(e,t,n,...s)=>[null,qm,Wm,Gm,Hm,Jm,Zm,Ym][e](t,n,...s);const Km=Object.freeze({__proto__:null,validateAxiom:Xm,validateAxiom1:qm,validateAxiom2:Wm,validateAxiom3:Gm,validateAxiom4:Hm,validateAxiom5:Jm,validateAxiom6:Zm,validateAxiom7:Ym});const eg=e=>e.map((e=>typeof e==="object"&&e.vector?Hn(e):e));const tg=(e,t,...n)=>{const s=Um(e,...n);Xm(e,t,s,...n).map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined)).forEach((e=>delete s[e]));return s};const ng=(e,t,...n)=>{const s=Pm(e,...n).map(Hn);Xm(e,t,s,...eg(n)).map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined)).forEach((e=>delete s[e]));return s};const sg=Object.freeze({__proto__:null,axiomWithBoundary:tg,normalAxiomWithBoundary:ng});const rg={...Qm,...Tm,...sg,...Km};const og=()=>{const e={};e.file_spec=am;e.file_creator=im;e.file_classes=["singleModel"];e.frame_classes=[];e.frame_attributes=[];e.vertices_coords=[];e.faces_vertices=[];return e};const cg=e=>{if(!e.edges_foldAngle||!e.edges_foldAngle.length){return}let t=true;for(let n=0;n<e.edges_foldAngle.length;n+=1){if(e.edges_foldAngle[n]!==0&&e.edges_foldAngle[n]!==-180&&e.edges_foldAngle[n]!==180){t=false;break}}e.frame_classes.push(t?"creasePattern":"foldedForm");e.frame_attributes.push(t?"2D":"3D")};const ag=e=>e.map(((e,t,n)=>[e,n[(t+1)%n.length]]));const ig=({faces_vertices:e})=>{const t={};const n=[];e.flatMap(ag).forEach((e=>{const s=[e.join(" "),`${e[1]} ${e[0]}`];if(s[0]in t||s[1]in t){return}n.push(e);t[s[0]]=true}));return n};const fg=e=>e.slice(1).map((e=>parseInt(e,10)-1));const lg=e=>e.slice(1).map((e=>parseFloat(e)));const dg=e=>{const t=e.split("\n").map((e=>e.trim().split(/\s+/)));const n=og();for(let e=0;e<t.length;e+=1){switch(t[e][0].toLowerCase()){case"f":n.faces_vertices.push(fg(t[e]));break;case"v":n.vertices_coords.push(lg(t[e]));break}}n.faces_normal=Cs(n);n.faces_center=ur(n);n.edges_vertices=ig(n);n.faces_edges=ar(n);n.edges_faces=Hs(n);n.edges_foldAngle=er(n);n.edges_assignment=Xs(n);n.vertices_vertices=Bs(n);delete n.faces_normal;delete n.faces_center;delete n.edges_faces;cg(n);return n};const ug=(e,t)=>{const n=Po(e,t);n.vertices_vertices=$s(n);const s=or(n);n.faces_vertices=s.faces_vertices;n.faces_edges=s.faces_edges;delete n.vertices_edges;return n};const mg=({vertices_coords:e,edges_vertices:t})=>{const n=t.map((t=>t.map((t=>e[t])))).map((e=>te(...e))).filter((e=>e>1e-4));const s=n.reduce(((e,t)=>Math.min(e,t)),Infinity);return s===Infinity?undefined:s};const gg=({vertices_coords:e,edges_vertices:t})=>{const n=mg({vertices_coords:e,edges_vertices:t});const s=ca({vertices_coords:e});const r=s&&s.span?Math.max(...s.span):1;const o=r*.01;const c=n/20;return n===undefined?o:Math.min(o,c)};const pg=function(e){const t=`${e}`.match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);return Math.max(0,(t[1]?t[1].length:0)-(t[2]?+t[2]:0))};const _g=function(e,t=15){const n=typeof e==="number"?e:parseFloat(e);if(Number.isNaN(n)){return e}const s=parseFloat(n.toFixed(t));if(pg(s)===Math.min(t,pg(n))){return n}return s};const hg=Object.freeze({__proto__:null,cleanNumber:_g});const vg=(e,t,n="epsilon")=>{if(typeof t==="object"&&typeof t[n]==="number"){return t[n]}return typeof t==="number"?t:gg(e)};const bg=e=>{const t=ca({vertices_coords:e});const n=t.min[1]+t.span[1]/2;const s=Math.min(-t.min[1],-t.max[1]);const r=Math.max(-t.min[1],-t.max[1]);const o=r-s;const c=s+o/2;const a=n-c;const i=_g(a,8);for(let t=0;t<e.length;t+=1){e[t][1]=-e[t][1]+i}};const yg=(e,t)=>e==null?null:Array.from(e.childNodes).filter((e=>e.attributes&&e.attributes.length)).filter((e=>Array.from(e.attributes).filter((e=>e.nodeValue===t)).shift()!==undefined)).shift();const Eg=(e,t)=>{const n=yg(e,t);const s=n?Array.from(n.childNodes).shift():null;return s?s.textContent:undefined};const Mg=e=>{const t=yg(e,"lines");const n=t?Array.from(t.childNodes).filter((e=>e.getAttribute)).filter((e=>e.getAttribute("class").split(" ").includes("oripa.OriLineProxy"))).shift():undefined;return n?Array.from(n.childNodes):[]};const Ag=e=>e.filter((e=>e.nodeName==="void")).filter((e=>e.childNodes)).map((e=>yg(e,"oripa.OriLineProxy"))).filter((e=>e)).map((e=>["type","x0","x1","y0","y1"].map((t=>yg(e,t))).map((e=>e?Array.from(e.childNodes):[])).map((e=>e.filter((e=>e.nodeName==="double"||e.nodeName==="int")).shift())).map((e=>e&&e.childNodes[0]?e.childNodes[0].data:"0")).map(parseFloat)));const xg=["F","B","M","V","U"];const wg=e=>{const t={};t.vertices_coords=e.flatMap((e=>[[e[1],e[3]],[e[2],e[4]]]));t.edges_vertices=e.map(((e,t)=>[t*2,t*2+1]));t.edges_assignment=e.map((e=>xg[e[0]]));t.edges_foldAngle=Ks(t);return t};const kg=e=>{const t=Ci(e,"text/xml");const n=Array.from(t.childNodes).filter((e=>e.getAttribute)).filter((e=>e.getAttribute("class").split(" ").includes("oripa.DataSet"))).shift();return wg(Ag(Mg(n)))};const Og=(e,t)=>{const n={file_description:"memo",file_author:"originalAuthorName",file_title:"title"};Object.keys(n).forEach((t=>{n[t]=Eg(e,n[t])}));Object.keys(n).filter((e=>n[e])).forEach((e=>{t[e]=n[e]}));t.file_classes=["singleModel"];t.frame_classes=["creasePattern"]};const jg=(e,t)=>{const n=Ci(e,"text/xml");const s=n&&n.childNodes?Array.from(n.childNodes):[];const r=s.filter((e=>e.getAttribute)).filter((e=>e.getAttribute("class").split(" ").includes("oripa.DataSet"))).shift();const o=wg(Ag(Mg(r)));if(t&&t.invertVertical&&o.vertices_coords){bg(o.vertices_coords)}const c=vg(o,t);const a=ug(o,c);Og(r,a);return a};Object.assign(jg,{opxEdgeGraph:kg});const Fg=(e,t)=>{const n=fi(e).toUpperCase();return t&&t[n]?t[n]:Ad(...ii(e))};const Sg=(e,t)=>{switch(t){case"M":case"m":return-180*e;case"V":case"v":return 180*e;default:return 0}};const Cg=(e,t)=>{const n=c().getComputedStyle!=null?c().getComputedStyle(e).stroke:"";if(n!==""&&n!=="none"){return n}if(t.stroke!==undefined){return t.stroke}return undefined};const Vg=(e,t)=>{const n=c().getComputedStyle!=null?c().getComputedStyle(e).opacity:"";if(n!==""){const e=parseFloat(n);if(!Number.isNaN(e)){return e}}if(t.opacity!==undefined){const e=parseFloat(t.opacity);if(!Number.isNaN(e)){return e}}return undefined};const Pg=Object.freeze({__proto__:null,colorToAssignment:Fg,getEdgeOpacity:Vg,getEdgeStroke:Cg,opacityToFoldAngle:Sg});const Tg=(e,t)=>t.map((t=>e.getAttribute(t))).map((e=>e==null?0:e)).map(parseFloat);const Ng=e=>[Tg(e,["x1","y1","x2","y2"])];const zg=function(e){const[t,n,s,r]=Tg(e,["x","y","width","height"]);return[[t,n,t+s,n],[t+s,n,t+s,n+r],[t+s,n+r,t,n+r],[t,n+r,t,n]]};const Bg=e=>{const t=e.split(/[\s,]+/).map(parseFloat);return Array.from(Array(Math.floor(t.length/2))).map(((e,n)=>[t[n*2+0],t[n*2+1]]))};const $g=e=>Bg(e.getAttribute("points")||"").map(((e,t,n)=>[n[t][0],n[t][1],n[(t+1)%n.length][0],n[(t+1)%n.length][1]]));const Rg=function(e){const t=$g(e);t.pop();return t};const Lg={L:true,V:true,H:true,Z:true};const Ig=e=>Zi(e.getAttribute("d")||"").filter((e=>Lg[e.command.toUpperCase()])).map((e=>[e.start,e.end])).filter((e=>!lt(...e))).map((e=>e.flat()));const Ug={line:Ng,rect:zg,polygon:$g,polyline:Rg,path:Ig};const Qg=(e,t)=>{const n=[[e[0],e[1]],[e[2],e[3]]];if(!t){return n}const s=Fi(t);return s?n.map((e=>be(s,e))):n};const Dg=e=>Ii(e).filter((e=>Ug[e.element.nodeName])).flatMap((e=>Ug[e.element.nodeName](e.element).map((t=>Qg(t,e.attributes.transform))).map((t=>({...e,segment:t})))));const qg=e=>{if(!c().document.body){return undefined}const t=c().document.createElement("div");t.setAttribute("display","none");c().document.body.appendChild(t);t.appendChild(e);return t};const Wg=e=>zi(e).map((e=>e.nodeName==="style")).reduce(((e,t)=>e||t),false);const Gg=e=>{const s=typeof e==="string"?Ci(e,"image/svg+xml"):e;if(Wg(s)&&t){console.warn(n.backendStylesheet)}const r=Vi(s)===c().document?undefined:qg(s);const o=Dg(s);o.map((e=>({data:{assignment:e.attributes["data-assignment"],foldAngle:e.attributes["data-foldAngle"]},stroke:Cg(e.element,e.attributes),opacity:Vg(e.element,e.attributes)}))).forEach(((e,t)=>{o[t]={...o[t],...e}}));if(r&&r.parentNode){r.parentNode.removeChild(r)}return o};const Hg=e=>{if(!e||!e.assignments){return undefined}const t={};Object.keys(e.assignments).forEach((n=>{const s=fi(n).toUpperCase();t[s]=e.assignments[n]}));return t};const Jg=(e,t="#f0f",n=undefined)=>{if(e){return e}return Fg(t,n)};const Zg=(e,t=1,n=undefined)=>{if(e){return parseFloat(e)}return Sg(t,n)};const Yg=(e,t)=>{const n=Hg(t);if(n){e.forEach((e=>{delete e.data.assignment;delete e.data.foldAngle}))}const s=e.map((e=>Jg(e.data.assignment,e.stroke,n)));const r=e.map(((e,t)=>Zg(e.data.foldAngle,e.opacity,s[t])));return{edges_assignment:s,edges_foldAngle:r}};const Xg=(e,t)=>{const n=Gg(e);const{edges_assignment:s,edges_foldAngle:r}=Yg(n,t);const o=t&&t.fast?e=>e:_g;const c=n.flatMap((e=>e.segment)).map((e=>e.map((e=>o(e,12)))));const a=n.map(((e,t)=>[t*2,t*2+1]));return{vertices_coords:c,edges_vertices:a,edges_assignment:s,edges_foldAngle:r}};const Kg=(e,t)=>{const n=Xg(e,t);const s=vg(n,t);if(t&&t.invertVertical&&n.vertices_coords){bg(n.vertices_coords)}const r=ug(n,s);const o=t&&t.fast?e=>e:_g;r.vertices_coords=r.vertices_coords.map((e=>e.map((e=>o(e,12)))));if(typeof t!=="object"||t.boundary!==false){r.edges_assignment.map(((e,t)=>t)).filter((e=>r.edges_assignment[e]==="B"||r.edges_assignment[e]==="b")).forEach((e=>{r.edges_assignment[e]="F"}));const{edges:e}=da(r);e.forEach((e=>{r.edges_assignment[e]="B"}))}return{file_spec:1.1,file_creator:"Rabbit Ear",frame_classes:["creasePattern"],...r}};Object.assign(Kg,{...Pg,svgSegments:Gg,svgEdgeGraph:Xg,planarizeGraph:ug,makeEpsilon:gg});const ep={objToFold:dg,opxToFold:jg,svgToFold:Kg,foldToSvg:Eu,foldToObj:Au};const tp=e=>e.replace(/([-_][a-z])/gi,(e=>e.toUpperCase().replace("-","").replace("_","")));const np=e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z])([A-Z])(?=[a-z])/g,"$1-$2").toLowerCase();const sp=e=>e.charAt(0).toUpperCase()+e.slice(1);const rp=Object.freeze({__proto__:null,capitalized:sp,toCamel:tp,toKebab:np});const op={...yn,..._o,...p,...hg,...Os,...rp};const cp=e=>!e.file_frames?1:e.file_frames.length+1;const ap=(e,t=1)=>{if(!e.file_frames||e.file_frames.length<t){return e}const s=["frame_parent","frame_inherit"];const r={visited_frames:[]};const o={};Vt(e,"file").filter((e=>e!=="file_frames")).forEach((t=>{o[t]=e[t]}));const c=(e,t,s)=>{if(r.visited_frames.indexOf(t)!==-1){throw new Error(n.graphCycle)}r.visited_frames.push(t);s=[t].concat(s);if(t===0){return s}if(e.file_frames[t-1].frame_inherit&&e.file_frames[t-1].frame_parent!=null){return c(e,e.file_frames[t-1].frame_parent,s)}return s};return c(e,t,[]).map((t=>{if(t===0){const t=e.file_frames;e.file_frames=null;const n=va(e);e.file_frames=t;delete n.file_frames;s.forEach((e=>delete n[e]));return n}const n=va(e.file_frames[t-1]);s.forEach((e=>delete n[e]));return n})).reduce(((e,t)=>Object.assign(e,t)),o)};const ip=e=>{const t={...e};delete t.file_frames;return t};const fp=e=>{if(!e){return[]}if(!e.file_frames||!e.file_frames.length){return[e]}return[ip(e),...e.file_frames]};const lp=(e,t)=>Array.from(Array(cp(e))).map(((t,n)=>ap(e,n))).filter((e=>e.frame_classes&&e.frame_classes.includes(t)));const dp=Object.freeze({__proto__:null,countFrames:cp,flattenFrame:ap,getFramesAsFlatArray:fp,getFramesByClassName:lp});const up=({vertices_coords:e,edges_vertices:t},n,s=E)=>{const r=t=>t.map((t=>e[t])).map((e=>U(e,n.origin))).map((e=>K(n.vector,e))).sort(((e,t)=>Math.abs(t)-Math.abs(e))).map(Math.sign).shift();const o=Rc({vertices_coords:e,edges_vertices:t},n,s,vt);const c={};zc({vertices_coords:e,edges_vertices:t},n,s).forEach((e=>{c[e]=true}));return t.map(((e,t)=>{if(c[t]===true){return 2}if(o[t].point!==undefined){return 0}return r(e)}))};const mp=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},r,o=E)=>{if(!s){s=ar({edges_vertices:t,faces_vertices:n})}const c=up({vertices_coords:e,edges_vertices:t},r,o);const a=s.map((e=>e.map((e=>c[e])).filter((e=>e!==2))));const i=a.map((e=>e.includes(0)));const f=a.map(((e,t)=>i[t]?false:e.reduce(((t,n)=>t&&n===e[0]),true)));return f.map(((e,t)=>e?a[t][0]:0))};const gp=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s,faceOrders:r},o,c=E)=>{if(!r){throw new Error("faceOrders required")}const a=mp({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},o,c);const i=[-1,1].map((e=>a.map(((e,t)=>({s:e,f:t}))).filter((t=>t.s===e||t.s===0)).map((e=>e.f))));const f=i.map((e=>Qd(r,e)));console.log("facesSide",a);console.log("sidesFaces",i);console.log("sidesFaceOrders",f);const l=Cs({vertices_coords:e,faces_vertices:n});const d=f.map((e=>Dd({faceOrders:e,faces_normal:l})));console.log("sidesLayersFace",d)};const pp=Object.freeze({__proto__:null,getEdgesSide:up,getFacesSide:mp,getFlapsThroughLine:gp});const _p=({vertices_coords:e},{vector:t,origin:n},s=mt,r=E)=>{const o=C(t);const c=Math.sqrt(o);if(c<r){return e.map((()=>false))}return e.map((e=>U(e,n))).map((e=>Math.abs(K(e,t))<r&&s(q(e,t)/o,r/c)))};const hp=({vertices_coords:e,edges_vertices:t},n,s=mt,r=E)=>{if(!e||!t){return{vertices:[],edges:{collinear:[],intersected:[]}}}const o=_p({vertices_coords:e},n,s,r);const c=t.map((e=>o[e[0]]+o[e[1]]));const a=t.map((t=>t.map((t=>e[t])))).map(((e,t)=>c[t]===0?no(Wn(...e),n,ht,s):{}));a.map(((e,t)=>t)).filter((e=>!a[e].point)).forEach((e=>delete a[e]));const i=c.map((e=>e===2));return{vertices:o,edges:{collinear:i,intersected:a}}};const vp=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},r,o=mt,c=E)=>{const{vertices:a,edges:{collinear:i,intersected:f}}=hp({vertices_coords:e,edges_vertices:t},r,o,c);if(!n){return{vertices:a,edges:{collinear:i,intersected:f},faces:{edges:[],vertices:[]}}}if(!s){s=ar({edges_vertices:t,faces_vertices:n})}const l=s.map((e=>e.filter((e=>i[e]))));const d=s.map((e=>e.filter((e=>f[e]))));const u=n.map((e=>e.filter((e=>a[e]))));const m=n.map(((e,t)=>{if(l[t].length){return undefined}const n=d[t];const s=u[t];return n.length+s.length?{edges:n,vertices:s}:undefined}));Object.keys(m).filter((e=>m[e]===undefined)).forEach((e=>delete m[e]));return{faces:m,edges:{intersected:f,collinear:i.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined))},vertices:a.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined))}};const bp=(e,t,n=E)=>vp(e,t,mt,n);const yp=(e,t,n=E)=>vp(e,t,pt,n);const Ep=(e,t,n=E)=>vp(e,Wn(...t),ht,n);const Mp=Object.freeze({__proto__:null,intersectEdgesLineFunc:hp,intersectGraphLine:bp,intersectGraphLineFunc:vp,intersectGraphRay:yp,intersectGraphSegment:Ep,intersectVerticesLineFunc:_p});const Ap=(e,t)=>{const n=Object.keys(yt);const s=Ut(t);const r=Ut(e);const o={};n.forEach((e=>{const n=Vt(t,e).shift();o[e]=n!==undefined?t[n]:[]}));const c={};n.forEach((t=>{c[t]=on(e,t)}));const a={vertices:[],edges:[],faces:[]};n.forEach((e=>o[e].forEach(((t,n)=>{a[e][n]=c[e]++}))));const i=va(t);n.forEach((e=>Fn(i,e,a[e])));Object.keys(i).filter((e=>i[e].constructor===Array)).filter((t=>!(t in e))).forEach((t=>{e[t]=[]}));Object.keys(i).filter((e=>i[e].constructor===Array)).forEach((t=>i[t].forEach(((n,s)=>{e[t][s]=n}))));const f={};const l={};n.forEach((t=>{const n=Vt(e,t).shift();l[t]=n!==undefined?e[n]:[]}));n.forEach((e=>{const t=l[e].map((()=>0));a[e].forEach((e=>{t[e]=1}));f[e]=On(t)}));const d=s!==r?(e.vertices_coords||[]).map(((e,t)=>e.length===2?t:undefined)).filter((e=>e!==undefined)):[];d.forEach((t=>{e.vertices_coords[t][2]=0}));return f};const xp=Object.freeze({__proto__:null,join:Ap});const wp=({vertices_coords:e,edges_vertices:t},n)=>Wn(...t[n].map((t=>e[t])));const kp=({vertices_coords:e,edges_vertices:t},n,s,r,o=E)=>{const c=wp({vertices_coords:e,edges_vertices:t},n);const a=wp({vertices_coords:e,edges_vertices:t},s);const i=nr({vertices_coords:e,edges_vertices:t}).map(((n,s)=>({vector:n,origin:e[t[s][0]]})));return Vr(c,a,r,o).map((e=>e.map((e=>{const t=i.map((t=>no(e,t,mt,ht,o).a)).filter((e=>e!==undefined));if(t.length<2){return undefined}const n=Math.min(...t);const s=Math.max(...t);return Math.abs(s-n)<o?undefined:[R(e.origin,z(e.vector,n)),R(e.origin,z(e.vector,s))]})).filter((e=>e!==undefined))))};const Op=Object.freeze({__proto__:null,pleat:kp});const jp=(e,t=E)=>rr(e,t).map((t=>e.vertices_coords.map((e=>e[0]>t.min[0]&&e[1]>t.min[1]&&e[0]<t.max[0]&&e[1]<t.max[1]))));const Fp=({vertices_coords:e,edges_vertices:t,edges_coords:n},s=E)=>{const r=rr({vertices_coords:e,edges_vertices:t,edges_coords:n},s);const o=t.map((()=>[]));for(let e=0;e<t.length-1;e+=1){for(let n=e+1;n<t.length;n+=1){const t=(r[e].max[0]<r[n].min[0]||r[n].max[0]<r[e].min[0])&&(r[e].max[1]<r[n].min[1]||r[n].max[1]<r[e].min[1]);o[e][n]=!t;o[n][e]=!t}}for(let e=0;e<t.length;e+=1){o[e][e]=true}return o};const Sp=Object.freeze({__proto__:null,getEdgesEdgesOverlapingSpans:Fp,getEdgesVerticesOverlappingSpan:jp});const Cp=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},r,o=[],c=mt,a=E)=>{if(!e||!t||!n){return undefined}const{faces:i,edges:f}=vp({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},r,c,a);if(o.length){i.forEach(((t,s)=>{const r=n[s].map((t=>e[t]));const c=o.map((e=>({...qr(r,e),point:e}))).filter((e=>e.overlap));i[s].points=c}))}i.forEach(((e,t)=>{const n=i[t].points?i[t].vertices.length+i[t].edges.length+i[t].points.length:i[t].vertices.length+i[t].edges.length;if(n!==2){delete i[t]}}));let l=e.length;const d=[];const u=[];const m=[];const g=[];f.intersected.forEach((({a:e,b:t,point:n},s)=>{m[l]=s;u[l]={a:e,b:t,point:n,edge:s};d[l++]=n}));i.forEach((({points:e},t)=>e.forEach((e=>{g[l]=t;u[l]={...e,face:t};d[l++]=e.point}))));const p=wn(m);const _=On(g);let h=t.length;const v=[];i.forEach(((e,t)=>{const n=e.edges.map((e=>p[e]));const s=_[t];v[h++]=n.concat(s).concat(e.vertices).filter((e=>e!==undefined))}));return{vertices_coords:d,vertices_overlapInfo:u,edges_vertices:v,collinear_edges:f.collinear}};const Vp=(e,t,n=E)=>Cp(e,t,[],mt,n);const Pp=(e,t,n=E)=>Cp(e,t,[t.origin],pt,n);const Tp=(e,t,n=E)=>Cp(e,Wn(...t),t,ht,n);const Np=Object.freeze({__proto__:null,splitGraphLineFunction:Cp,splitLineWithGraph:Vp,splitRayWithGraph:Pp,splitSegmentWithGraph:Tp});const zp=({normal:e,distance:t})=>t<0?{normal:re(e),distance:-t}:{normal:e,distance:t};const Bp=(e,t=E)=>{const{lines:n}=Fo(e,t);const s=n.map(Gn).map(zp);const r=n.map((({vector:e,origin:t})=>je(e,t)));const o=r.map((e=>n.map((({vector:t,origin:n})=>ye(e,t,n)))));const c=o.map((e=>e.map((e=>e.vector[0]<0?{vector:re(e.vector),origin:e.origin}:e)))).map((e=>e.map(Gn).map(zp))).map((e=>e.concat(s)));const a=c.map((e=>go(e.map((e=>e.distance)))));const i=a.map(((e,n)=>e.map((e=>e.map((e=>c[n][e].normal)))).map((e=>po(e,t)))));const f=i.map(((e,t)=>e.flatMap(((e,n)=>e.map((e=>e.map((e=>a[t][n][e]))))))));const l=f.map((e=>(e.length-n.length)/n.length));return l.map(((e,t)=>({error:e,i:t}))).map((e=>({line:n[e.i],error:e.error}))).sort(((e,t)=>e.error-t.error))};const $p=(e,t=E)=>Bp(e,t)[0];const Rp=Object.freeze({__proto__:null,findSymmetryLine:$p,findSymmetryLines:Bp});const Lp=(e,t)=>{if(e[0]===undefined||e[1]===undefined||e[2]===undefined){return undefined}const n=z(U(e[1],e[0]),1/ne(e[1],e[0]));const s=q(n,U(e[2],e[0]));const r=z(n,s);const o=U(U(e[2],e[0]),r);const c=z(o,1/j(o));const a=ne(e[1],e[0]);const i=q(c,U(e[2],e[0]));const f=(t[0]**2-t[1]**2+a**2)/(2*a);const l=(t[0]**2-t[2]**2+s**2+i**2)/(2*i)-s*f/i;return R(R(e[0],z(n,f)),z(c,l))};const Ip=(e,t,n)=>{const s=t[0]-e[0];const r=t[1]-e[1];const o=n[0]-e[0];const c=n[1]-e[1];const a=s*(e[0]+t[0])+r*(e[1]+t[1]);const i=o*(e[0]+n[0])+c*(e[1]+n[1]);const f=2*(s*(n[1]-t[1])-r*(n[0]-t[0]));if(Math.abs(f)<E){const s=Math.min(e[0],t[0],n[0]);const r=Math.min(e[1],t[1],n[1]);const o=(Math.max(e[0],t[0],n[0])-s)*.5;const c=(Math.max(e[1],t[1],n[1])-r)*.5;return{origin:[s+o,r+c],radius:Math.sqrt(o*o+c*c)}}const l=[(c*a-r*i)/f,(s*i-o*a)/f];const d=l[0]-e[0];const u=l[1]-e[1];return{origin:l,radius:Math.sqrt(d*d+u*u)}};const Up=Object.freeze({__proto__:null,circumcircle:Ip,trilateration:Lp});const Qp=(e,t,n,s)=>{const r=e.faces_vertices[n];if(r.length<3){return s}let o=r.map((t=>e.vertices_coords[t]));let c=r.map((e=>t.vertices_coords[e]));if(jr(o[0],o[1],o[2])){o=nt(o)}if(jr(c[0],c[1],c[2])){c=nt(c)}const a=o.map((e=>ne(e,s)));return Lp(c,a)};const Dp=(e,t,n,s)=>{const r=t.edges_vertices[n].map((e=>t.vertices_coords[e]));const o=Wn(...r);return R(o.origin,z(o.vector,s))};const qp=Object.freeze({__proto__:null,transferPointBetweenGraphs:Qp,transferPointOnEdgeBetweenGraphs:Dp});const Wp=e=>Array.from(Array(e.length-2)).map(((t,n)=>[e[0],e[n+1],e[n+2]]));const Gp=({faces_vertices:e})=>e.flatMap((e=>e.length<4?[e]:Wp(e)));const Hp=e=>e.length===3?[e]:Array.from(Array(Math.floor(e.length/3))).map(((t,n)=>[n*3+0,n*3+1,n*3+2].map((t=>e[t]))));const Jp=({vertices_coords:e,faces_vertices:t},s)=>{if(!e||!e.length){throw new Error(n.nonConvexTriangulation)}const r=e.filter((()=>true)).shift().length;return t.map((t=>t.flatMap((t=>e[t])))).map((e=>s(e,null,r))).map(((e,n)=>e.map((e=>t[n][e])))).flatMap((e=>Hp(e)))};const Zp=e=>{if(!e.edges_vertices){e.edges_vertices=[]}const t=Us(e);let n=e.edges_vertices.length;const s=[];e.faces_edges=e.faces_vertices.map((e=>e.map(((e,r,o)=>{const c=[e,o[(r+1)%o.length]];const a=c.join(" ");if(a in t){return t[a]}s.push(c);t[a]=n;t[c.reverse().join(" ")]=n;return n++}))));const r=s.length;e.edges_vertices.push(...s);if(e.edges_assignment){e.edges_assignment.push(...Array(r).fill("J"))}if(e.edges_foldAngle){e.edges_foldAngle.push(...Array(r).fill(0))}if(e.vertices_vertices){delete e.vertices_vertices}if(e.vertices_edges){delete e.vertices_edges}if(e.vertices_faces){delete e.vertices_faces}if(e.edges_faces){delete e.edges_faces}if(e.faces_faces){delete e.faces_faces}if(e.faceOrders){delete e.faceOrders}return e};const Yp=({faces_vertices:e})=>{let t=0;return e.map((e=>Math.max(3,e.length))).map((e=>Array.from(Array(e-2)).map((()=>t++))))};const Xp=(e,t)=>{if(!e.faces_vertices){return{}}const n=e.edges_vertices?e.edges_vertices.length:0;const s=Yp(e);e.faces_vertices=t?Jp(e,t):Gp(e);Zp(e);const r=Array.from(Array(e.edges_vertices.length-n)).map(((e,t)=>n+t));return{faces:{map:s},edges:{new:r}}};const Kp=Object.freeze({__proto__:null,triangulate:Xp,triangulateConvexFacesVertices:Gp,triangulateNonConvexFacesVertices:Jp});const e_=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);const t_=e=>e_.map(((t,n)=>Math.abs(t-e[n])<E)).reduce(((e,t)=>e&&t),true);const n_=(e,t)=>[e[0]*t[0]+e[4]*t[1]+e[8]*t[2]+e[12],e[1]*t[0]+e[5]*t[1]+e[9]*t[2]+e[13],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]+e[14]];const s_=(e,t,n)=>({vector:[e[0]*t[0]+e[4]*t[1]+e[8]*t[2],e[1]*t[0]+e[5]*t[1]+e[9]*t[2],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]],origin:[e[0]*n[0]+e[4]*n[1]+e[8]*n[2]+e[12],e[1]*n[0]+e[5]*n[1]+e[9]*n[2]+e[13],e[2]*n[0]+e[6]*n[1]+e[10]*n[2]+e[14]]});const r_=(e,t)=>[e[0]*t[0]+e[4]*t[1]+e[8]*t[2]+e[12]*t[3],e[1]*t[0]+e[5]*t[1]+e[9]*t[2]+e[13]*t[3],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]+e[14]*t[3],e[3]*t[0]+e[7]*t[1]+e[11]*t[2]+e[15]*t[3],e[0]*t[4]+e[4]*t[5]+e[8]*t[6]+e[12]*t[7],e[1]*t[4]+e[5]*t[5]+e[9]*t[6]+e[13]*t[7],e[2]*t[4]+e[6]*t[5]+e[10]*t[6]+e[14]*t[7],e[3]*t[4]+e[7]*t[5]+e[11]*t[6]+e[15]*t[7],e[0]*t[8]+e[4]*t[9]+e[8]*t[10]+e[12]*t[11],e[1]*t[8]+e[5]*t[9]+e[9]*t[10]+e[13]*t[11],e[2]*t[8]+e[6]*t[9]+e[10]*t[10]+e[14]*t[11],e[3]*t[8]+e[7]*t[9]+e[11]*t[10]+e[15]*t[11],e[0]*t[12]+e[4]*t[13]+e[8]*t[14]+e[12]*t[15],e[1]*t[12]+e[5]*t[13]+e[9]*t[14]+e[13]*t[15],e[2]*t[12]+e[6]*t[13]+e[10]*t[14]+e[14]*t[15],e[3]*t[12]+e[7]*t[13]+e[11]*t[14]+e[15]*t[15]];const o_=e=>{const t=e[10]*e[15]-e[11]*e[14];const n=e[9]*e[15]-e[11]*e[13];const s=e[9]*e[14]-e[10]*e[13];const r=e[8]*e[15]-e[11]*e[12];const o=e[8]*e[14]-e[10]*e[12];const c=e[8]*e[13]-e[9]*e[12];return e[0]*(e[5]*t-e[6]*n+e[7]*s)-e[1]*(e[4]*t-e[6]*r+e[7]*o)+e[2]*(e[4]*n-e[5]*r+e[7]*c)-e[3]*(e[4]*s-e[5]*o+e[6]*c)};const c_=e=>{const t=o_(e);if(Math.abs(t)<1e-12||Number.isNaN(t)||!Number.isFinite(e[12])||!Number.isFinite(e[13])||!Number.isFinite(e[14])){return undefined}const n=e[10]*e[15]-e[11]*e[14];const s=e[9]*e[15]-e[11]*e[13];const r=e[9]*e[14]-e[10]*e[13];const o=e[8]*e[15]-e[11]*e[12];const c=e[8]*e[14]-e[10]*e[12];const a=e[8]*e[13]-e[9]*e[12];const i=e[6]*e[15]-e[7]*e[14];const f=e[5]*e[15]-e[7]*e[13];const l=e[5]*e[14]-e[6]*e[13];const d=e[6]*e[11]-e[7]*e[10];const u=e[5]*e[11]-e[7]*e[9];const m=e[5]*e[10]-e[6]*e[9];const g=e[4]*e[15]-e[7]*e[12];const p=e[4]*e[14]-e[6]*e[12];const _=e[4]*e[11]-e[7]*e[8];const h=e[4]*e[10]-e[6]*e[8];const v=e[4]*e[13]-e[5]*e[12];const b=e[4]*e[9]-e[5]*e[8];const y=[+(e[5]*n-e[6]*s+e[7]*r),-(e[1]*n-e[2]*s+e[3]*r),+(e[1]*i-e[2]*f+e[3]*l),-(e[1]*d-e[2]*u+e[3]*m),-(e[4]*n-e[6]*o+e[7]*c),+(e[0]*n-e[2]*o+e[3]*c),-(e[0]*i-e[2]*g+e[3]*p),+(e[0]*d-e[2]*_+e[3]*h),+(e[4]*s-e[5]*o+e[7]*a),-(e[0]*s-e[1]*o+e[3]*a),+(e[0]*f-e[1]*g+e[3]*v),-(e[0]*u-e[1]*_+e[3]*b),-(e[4]*r-e[5]*c+e[6]*a),+(e[0]*r-e[1]*c+e[2]*a),-(e[0]*l-e[1]*p+e[2]*v),+(e[0]*m-e[1]*h+e[2]*b)];const E=1/t;return y.map((e=>e*E))};const a_=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0]);const i_=(e=0,t=0,n=0)=>[...a_,e,t,n,1];const f_=(e,t,n,s,r)=>{const o=Math.cos(e);const c=Math.sin(e);const a=[...e_];a[n*4+n]=o;a[n*4+s]=(r?+1:-1)*c;a[s*4+n]=(r?-1:+1)*c;a[s*4+s]=o;const i=[0,1,2].map((e=>t[e]||0));const f=[...e_];const l=[...e_];[12,13,14].forEach(((e,t)=>{f[e]=-i[t];l[e]=i[t]}));return r_(l,r_(a,f))};const l_=(e,t=[0,0,0])=>f_(e,t,1,2,true);const d_=(e,t=[0,0,0])=>f_(e,t,0,2,false);const u_=(e,t=[0,0,0])=>f_(e,t,0,1,true);const m_=(e,t=[0,0,1],n=[0,0,0])=>{const s=[0,1,2].map((e=>n[e]||0));const[r,o,c]=de(3,V(t));const a=Math.cos(e);const i=Math.sin(e);const f=1-a;const l=i_(-s[0],-s[1],-s[2]);const d=i_(s[0],s[1],s[2]);return r_(d,r_([f*r*r+a,f*o*r+c*i,f*c*r-o*i,0,f*r*o-c*i,f*o*o+a,f*c*o+r*i,0,f*r*c+o*i,f*o*c-r*i,f*c*c+a,0,0,0,0,1],l))};const g_=(e=[1,1,1],t=[0,0,0])=>[e[0],0,0,0,0,e[1],0,0,0,0,e[2],0,e[0]*-t[0]+t[0],e[1]*-t[1]+t[1],e[2]*-t[2]+t[2],1];const p_=(e=1,t=[0,0,0])=>g_([e,e,e],t);const __=(e,t=[0,0])=>{const n=je(e,t);return[n[0],n[1],0,0,n[2],n[3],0,0,0,0,1,0,n[4],n[5],0,1]};const h_=(e,t,n,s)=>{const r=Math.tan(Math.PI*.5-.5*e);const o=1/(n-s);const c=t<1?r:r/t;const a=t<1?r*t:r;return[c,0,0,0,0,a,0,0,0,0,(n+s)*o,-1,0,0,n*s*o*2,0]};const v_=(e,t,n,s,r,o)=>[2/(t-s),0,0,0,0,2/(e-n),0,0,0,0,2/(r-o),0,(s+t)/(s-t),(n+e)/(n-e),(r+o)/(r-o),1];const b_=(e,t,n)=>{const s=T(Q(e,t));const r=T(ee(n,s));const o=T(ee(s,r));return[r[0],r[1],r[2],0,o[0],o[1],o[2],0,s[0],s[1],s[2],0,e[0],e[1],e[2],1]};const y_=Object.freeze({__proto__:null,determinant4:o_,identity4x4:e_,invertMatrix4:c_,isIdentity4x4:t_,makeLookAtMatrix4:b_,makeMatrix4ReflectZ:__,makeMatrix4Rotate:m_,makeMatrix4RotateX:l_,makeMatrix4RotateY:d_,makeMatrix4RotateZ:u_,makeMatrix4Scale:g_,makeMatrix4Translate:i_,makeMatrix4UniformScale:p_,makeOrthographicMatrix4:v_,makePerspectiveMatrix4:h_,multiplyMatrices4:r_,multiplyMatrix4Line3:s_,multiplyMatrix4Vector3:n_});const E_=(e,t)=>{const n=ee(e,t);const s=[n[0],n[1],n[2],D(e,t)];s[3]+=O(s);return V(s)};const M_=e=>r_([+e[3],+e[2],-e[1],+e[0],-e[2],+e[3],+e[0],+e[1],+e[1],-e[0],+e[3],+e[2],-e[0],-e[1],-e[2],+e[3]],[+e[3],+e[2],-e[1],-e[0],-e[2],+e[3],+e[0],-e[1],+e[1],-e[0],+e[3],-e[2],+e[0],+e[1],+e[2],+e[3]]);const A_=Object.freeze({__proto__:null,matrix4FromQuaternion:M_,quaternionFromTwoVectors:E_});const x_=({vertices_coords:e,faces_vertices:t},n=E)=>{const s=Cs({vertices_coords:e,faces_vertices:t});const r=t.map((()=>[]));for(let e=0;e<t.length-1;e+=1){for(let o=e+1;o<t.length;o+=1){if(e===o){continue}if(ie(s[e],s[o],n)){r[e].push(o);r[o].push(e)}}}const o=ea(r);const c=jn(o).map((e=>typeof e==="number"?[e]:e));const a=c.map((e=>s[e[0]]));const i=[];c.forEach(((e,t)=>e.forEach((e=>{i[e]=W(s[e],a[t])>0}))));const f=t.map((t=>e[t[0]])).map((e=>de(3,e)));const l=c.map(((e,t)=>e.map((e=>W(a[t],f[e])))));const d=l.map(((e,t)=>go(e).map((e=>e.map((e=>c[t][e]))))));const u=d.flatMap(((e,t)=>e.map((()=>[...a[t]]))));const m=d.flat();const g=m.map((e=>e[0])).map((e=>f[e])).map(((e,t)=>W(u[t],e))).map(((e,t)=>B(u[t],e)));const p=m.map(((e,t)=>({normal:u[t],origin:g[t]})));return m.map(((e,t)=>({faces:e,facesAligned:e.map((e=>i[e])),plane:p[t]})))};const w_=(e,t,n,s)=>{const r=e.vertices_coords.map((e=>de(3,e)));const o=t.map((t=>t.faces.map(((n,s)=>t.facesAligned[s]?e.faces_vertices[n]:e.faces_vertices[n].slice().reverse())).map((e=>e.map((e=>r[e])))).map((e=>nt(e,s)))));const c=[];const a=o.map(((e,t)=>e.map((e=>e.map((e=>n_(n[t],e))).map((e=>[e[0],e[1]]))))));t.map((e=>e.faces)).forEach(((e,t)=>e.forEach(((e,n)=>{c[e]=a[t][n]}))));return c};const k_=({vertices_coords:e,faces_vertices:t,faces_faces:n},s=E)=>{if(!n){n=ir({faces_vertices:t})}const r=x_({vertices_coords:e,faces_vertices:t},s);const o=[];r.forEach((e=>e.facesAligned.forEach(((t,n)=>{o[e.faces[n]]=t}))));const c=[0,0,1];const a=r.map((e=>e.plane.normal)).map((e=>{const t=D(e,c);return Math.abs(t+1)<.01?m_(Math.PI,[1,0,0]):M_(E_(e,c))}));const i=w_({vertices_coords:e,faces_vertices:t},r,a,s);const f=r.map((e=>e.faces)).map((e=>mc(n,e)));const l=f.map((e=>ea(e)));const d=l.map((e=>jn(e).map((e=>e.constructor===Array?e:[e]))));const u=l.map((e=>{const t=e.map(((e,t)=>t));return e.map((n=>t.filter((t=>e[t]!==n))))}));const m=t.map((()=>[]));u.forEach((e=>e.forEach(((e,t)=>{for(let n=0;n<e.length;n+=1){const r=e[n];const o=[t,r].map((e=>i[e]));const c=Wr(...o,s);if(c){m[t][r]=true;m[r][t]=true}}}))));const g=u.map((e=>e.map(((e,t)=>e.filter((e=>m[t][e]))))));const p=[];g.forEach(((e,t)=>{p[t]=[];e.forEach(((e,n)=>{const s=l[t][n];const r=e.map((e=>l[t][e]));if(!p[t][s]){p[t][s]=new Set}r.forEach((e=>{if(!p[t][e]){p[t][e]=new Set}}));r.forEach((e=>{p[t][s].add(e);p[t][e].add(s)}))}))}));p.forEach(((e,t)=>e.forEach(((e,n)=>{p[t][n]=[...e]}))));const _=p.map((e=>jn(ea(e)).map((e=>e.constructor===Array?e:[e]))));const h=_.flatMap(((e,t)=>e.map((()=>t))));const v=r.map(((e,t)=>_[t].map((e=>e.flatMap((e=>d[t][e]))))));const b=v.flatMap(((e,t)=>e.map((e=>({faces:e,facesAligned:e.map((e=>o[e])),plane:r[t].plane})))));const y=h.map((e=>r[e].plane));const M=h.map((e=>a[e]));const A=b.map((e=>e.faces));const x=jn(A);return{sets_faces:A,sets_plane:y,sets_transformXY:M,faces_set:x,faces_winding:o}};const O_=Object.freeze({__proto__:null,coplanarFacesGroups:x_,coplanarOverlappingFacesGroups:k_});const j_=({vertices_coords:e,edges_vertices:t,edges_vector:n},s=E)=>{if(!n){n=nr({vertices_coords:e,edges_vertices:t})}const r=n.map((e=>V(e)));const o=t.map((()=>[]));r.forEach(((e,t)=>{r.forEach(((e,n)=>{if(n>=t){return}if(1-Math.abs(D(r[t],r[n]))<s){o[t].push(n);o[n].push(t)}}))}));return o};const F_=({vertices_coords:e,edges_vertices:t,edges_vector:n},s)=>{if(!n){n=nr({vertices_coords:e,edges_vertices:t})}const r=t.map((t=>e[t[0]]));const o=n.map(((e,t)=>({vector:e,origin:r[t]})));return j_({vertices_coords:e,edges_vertices:t,edges_vector:n},.001).map(((e,t)=>e.filter((e=>Ur(o[t],o[e],vt,vt,s)))))};const S_=Object.freeze({__proto__:null,makeEdgesEdgesParallelOverlap:F_});const C_=e=>e.map((e=>e.map(((e,t)=>e===true?t:undefined)).filter((e=>e!==undefined))));const V_=({vertices_coords:e,edges_vertices:t,edges_coords:n,edges_boundingBox:s},r=E)=>{if(!n){n=tr({vertices_coords:e,edges_vertices:t})}if(!s){s=rr({vertices_coords:e,edges_vertices:t,edges_coords:n})}const o=t.map(((e,t)=>t)).shift();const c=Array.from(Array(n.length)).map((()=>[]));if(o===undefined){return C_(c)}const a=s[o].min.length;for(let e=0;e<n.length-1;e+=1){if(!s[e]){continue}for(let t=e+1;t<n.length;t+=1){if(!s[t]){continue}let n=true;for(let o=0;o<a;o+=1){if(!it(s[e].min[o],s[t].min[o],r)||!it(s[e].max[o],s[t].max[o],r)){n=false}}c[e][t]=n;c[t][e]=n}}for(let e=0;e<n.length-1;e+=1){for(let t=e+1;t<n.length;t+=1){if(!c[e][t]){continue}const s=lt(n[e][0],n[t][0],r)&&lt(n[e][1],n[t][1],r);const o=lt(n[e][0],n[t][1],r)&&lt(n[e][1],n[t][0],r);const a=s||o;c[e][t]=a;c[t][e]=a}}return C_(c)};const P_=({vertices_coords:e,edges_vertices:t,edges_vector:n,edges_faces:s,faces_vertices:r},o=E)=>{if(!n){n=nr({vertices_coords:e,edges_vertices:t})}const c=t.map((t=>e[t[0]]));const a=t.map((()=>Array.from(Array(r.length))));s.forEach(((e,t)=>e.forEach((e=>{a[t][e]=false}))));const i=t.map((t=>t.map((t=>e[t]))));const f=r.map((t=>t.map((t=>e[t]))));Qc({vertices_coords:e,faces_vertices:r}).map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined)).forEach((e=>f[e].reverse()));const l=rr({edges_coords:i});const d=f.map((e=>ct(e)));for(let e=0;e<a.length;e+=1){if(!l[e]){continue}for(let t=0;t<a[e].length;t+=1){if(a[e][t]===false){continue}if(!d[t]){continue}if(!Gr(d[t],l[e],o)){a[e][t]=false;continue}}}const u=V_({vertices_coords:e,edges_vertices:t,edges_coords:i,edges_boundingBox:l});const m={};for(let e=0;e<a.length;e+=1){if(m[e]){continue}if(!i[e]){continue}for(let t=0;t<a[e].length;t+=1){if(a[e][t]!==undefined){continue}if(!f[t]){continue}const s=i[e].map((e=>Dr(f[t],e,ut,.001))).reduce(((e,t)=>e||t),false);if(s){a[e][t]=true;continue}const r=fo(f[t],{vector:n[e],origin:c[e]},vt,vt,o);if(r){a[e][t]=true;continue}a[e][t]=false}u[e].forEach((t=>{a[t]=a[e].slice();m[t]=true}))}return a.map((e=>e.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined))))};const T_=Object.freeze({__proto__:null,getEdgesFacesOverlap:P_});const N_=({vertices_coords:e,faces_vertices:t},n=E)=>{const s=fr({vertices_coords:e,faces_vertices:t});const r=s.map((e=>ct(e)));const o=[];const c=[];Eo({vertices_coords:e,faces_vertices:t},0,n).forEach((e=>{e.start.forEach((e=>{c[e]=true}));c.forEach(((t,c)=>e.start.forEach((e=>{if(c===e){return}if(!Gr(r[c],r[e],n)||!Wr(s[c],s[e],n)){return}if(!o[c]){o[c]=[]}if(!o[e]){o[e]=[]}o[c][e]=true;o[e][c]=true}))));e.end.forEach((e=>delete c[e]))}));return o.map((e=>Object.keys(e).map((e=>parseInt(e,10)))))};const z_=Object.freeze({__proto__:null,getFacesFacesOverlap:N_});const B_=(e,t)=>{if(!e.vertices_coords){e.vertices_coords=[]}const n=e.vertices_coords.length;Vt(e,"vertices").forEach((t=>{e[t][n]=[]}));e.vertices_coords[n]=t;return n};const $_=(e,t=[])=>{if(!e.vertices_coords){e.vertices_coords=[]}const n=e.vertices_coords.length;Vt(e,"vertices").forEach((s=>{t.forEach(((t,r)=>{e[s][n+r]=[]}))}));t.forEach(((t,s)=>{e.vertices_coords[n+s]=t}));return t.map(((e,t)=>n+t))};const R_=(e,t)=>{if(t.length!==2){return undefined}if(!e.edges_vertices){e.edges_vertices=[]}const n=e.edges_vertices.length;Vt(e,"edges").forEach((t=>{e[t][n]=[]}));e.edges_vertices[n]=t;if(e.edges_assignment){e.edges_assignment[n]="U"}if(e.edges_foldAngle){e.edges_foldAngle[n]=0}if(e.vertices_edges){t.forEach((t=>{e.vertices_edges[t]=e.vertices_edges[t].filter((e=>e!==n));e.vertices_edges[t].push(n)}))}if(e.vertices_vertices){const n=[t[1],t[0]];t.forEach(((t,s)=>{e.vertices_vertices[t]=e.vertices_vertices[t].filter((e=>e!==n[s]));e.vertices_vertices[t].push(n[s])}))}return n};const L_=(e,{vector:t,origin:n},s=E)=>{const r=Rc(e,{vector:t,origin:n},s).map((e=>e.point)).filter(Boolean);const o=r.map((e=>I(e,n))).map((e=>D(e,t)));const c=mn(o);const a=c.map((e=>$(N(t,e),n)));const i=Array.from(Array(a.length-1)).map(((e,t)=>[a[t],a[t+1]])).map((t=>Iu(e,t[0],t[1],s)));return i};const I_=(e,t,n,s=E)=>{e.faces_vertices[t].map((t=>e.vertices_coords[t])).map((e=>n.map((t=>lt(e,t,s)))));e.faces_vertices[t].map((t=>e.vertices_coords[t])).map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>Wn(...e))).map((e=>n.map((t=>Ir(e,t,vt,s)))))};const U_=(e,t,n=E)=>{const s=U(t[1],t[0]);const r=t[0];const o=fc(e,t,n);const c=o.map((t=>e.faces_vertices[t].map((t=>e.vertices_coords[t])))).map((e=>Su(e,{vector:s,origin:r},dt,ht,n)));const a=[];o.forEach(((e,t)=>{if(c[t]){a[e]=c[t]}}));return a};const Q_=(e,t,n=E)=>{const s=U_(e,t,n);console.log("facesSegment",s);const r=s.map(((t,s)=>I_(e,s,t,n)));return r};const D_=e=>{const t={vertices:[],edges:[],faces:[]};let n=0;let s=0;let r=0;e.vertices_coords.forEach(((e,s)=>{t.vertices[s]=n++}));e.edges_vertices.forEach(((e,n)=>{t.edges[n]=s++}));e.faces_vertices.forEach(((e,n)=>{t.faces[n]=r++}));Sn(e,"vertices",t.vertices);Sn(e,"edges",t.edges);Sn(e,"faces",t.faces);return e};const q_=({vertices_coords:e,faces_vertices:t},n,s)=>{const r=Yr({vertices_coords:e,faces_vertices:t},n,dt);switch(r.length){case 0:return undefined;case 1:return r[0]}if(!s){return r[0]}const o=R(n,z(s,.01));const c=r.map((n=>t[n].map((t=>e[t]))));const a=r.filter(((e,t)=>Dr(c[t],o,ut)));switch(a.length){case 0:return r.filter(((e,t)=>Dr(c[t],o,dt))).shift();case 1:return a[0];default:return a[0]}};const W_=({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_edges:o,faces_faces:c},{vector:a,origin:i},f="V",l=E)=>{if(!o){o=ar({edges_vertices:t,faces_vertices:r})}const d=q_({vertices_coords:e,faces_vertices:r},i,a);const u=qt(f);const m=pa({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_faces:c},d);const g=Qc({vertices_coords:m,faces_vertices:r});if(!g[d]){g.forEach(((e,t)=>{g[t]=!e}))}const p=Rc({vertices_coords:m,edges_vertices:t},{vector:a,origin:i},l).map(((e,t)=>e.point===undefined?undefined:{...e,edge:t}));const _=t.map((t=>e[t[0]]));const h=nr({vertices_coords:e,edges_vertices:t});const v=[];o.map((e=>e.map((e=>p[e])).filter((e=>e!==undefined)))).forEach(((e,t)=>{switch(e.length){case 0:case 1:break;default:v[t]=e;break}}));const b=(e,t)=>Math.abs(e.b-t.b)<l*2;const y=[];v.map((e=>e.sort(((e,t)=>e.b-t.b)))).map((e=>mo(e,b).map((t=>t.map((t=>e[t])))))).forEach(((e,t)=>{if(e.length===2){y[t]=[e[0][0],e[e.length-1][0]]}if(e.length>2){console.log("repeatFoldLine, non-convex polygons.")}}));return y.map(((e,t)=>({edges:e.map((e=>e.edge)),assignment:g[t]?f:u,points:e.map((e=>R(z(h[e.edge],e.a),_[e.edge])))})))};const G_={count:on,countImplied:_s,clean:Er,populate:zo,remove:$n,replace:Pn,removePlanarVertex:Wu,removePlanarEdge:qu,splitEdge:Wo,splitFace:uc,flatFold:Kc,normalize:D_,repeatFold:W_,addVertex:B_,addVertices:$_,addNonPlanarEdge:R_,addPlanarLine:L_,addPlanarSegment:Iu,addPlanarSegmentNew:Q_,planarize:Po,...na,...xd,...dp,...y,...Ht,...ma,...$u,...xr,...pp,...Mp,...xp,...mr,...Cn,...to,...Ps,...Zd,...Op,...Sp,...Np,...vc,...Ao,...Rp,...Ud,...oa,...qp,...tn,...jc,...Kp,...ys,...Ac,...sn,...Oo,...zn,..._a,...Qn,...Ss,...yr,..._r,...wo,...So,...O_,...wc,...Pc,...Dc,...Nc,...Lc,...S_,...T_,...dc,...z_};const H_=(e,t=E)=>{if(!e||!e.length){return undefined}const n=(e,n)=>ft(e[0],n[0],t);const s=uo(e,n);let r=0;for(let t=1;t<s.length;t+=1){if(e[s[t]][1]<e[s[r]][1]){r=t}}return s[r]};const J_=(e,t=E)=>{const n=H_(e,t);if(n===undefined){return[]}const s=e.map((t=>U(t,e[n]))).map((e=>P(e))).map((e=>q([0,1],e)));const r=s.map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).map((e=>e.i)).filter((e=>e!==n));return[[n]].concat(go(r.map((e=>s[e])),t).map((e=>e.map((e=>r[e])))).map((t=>t.length===1?t:t.map((t=>({i:t,len:ne(e[t],e[n])}))).sort(((e,t)=>e.len-t.len)).map((e=>e.i)))))};const Z_=(e=[],t=false,n=E)=>{if(e.length<2){return[]}const s=J_(e,n).map((e=>e.length===1?e:cn(e))).flat();s.push(s[0]);const r=[s[0]];let o=1;const c={"-1":()=>r.pop(),1:e=>{r.push(e);o+=1},undefined:()=>{o+=1}};c[0]=t?c["1"]:c["-1"];while(o<s.length){if(r.length<2){r.push(s[o]);o+=1;continue}const t=r[r.length-2];const a=r[r.length-1];const i=s[o];const f=ds(...[t,a,i].map((t=>e[t])),n);c[f](i)}r.pop();return r};const Y_=Object.freeze({__proto__:null,convexHull:Z_,convexHullRadialSortPoints:J_,smallestVector2:H_});const X_=(e,t,n)=>{const s=e.map(((e,t)=>({vector:n[t],origin:e}))).map(((e,t,n)=>no(e,n[(t+1)%n.length],_t,_t).point));const r=t.map(((e,t)=>Br(e,s[t],(e=>e))));if(e.length===3){return e.map((e=>({type:"skeleton",points:[e,s[0]]}))).concat([{type:"perpendicular",points:[r[0],s[0]]}])}const o=s.map(((e,t)=>te(e,r[t])));let c=0;o.forEach(((e,t)=>{if(e<o[c]){c=t}}));const a=[{type:"skeleton",points:[e[c],s[c]]},{type:"skeleton",points:[e[(c+1)%e.length],s[c]]},{type:"perpendicular",points:[r[c],s[c]]}];const i=ts(re(t[(c+t.length-1)%t.length].vector),t[(c+1)%t.length].vector);const f=c===e.length-1;e.splice(c,2,s[c]);t.splice(c,1);n.splice(c,2,i);if(f){e.splice(0,1);n.splice(0,1);t.push(t.shift())}return a.concat(X_(e,t,n))};const K_=e=>{const t=e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>({vector:I(e[1],e[0]),origin:e[0]})));const n=e.map(((e,t,n)=>[(t-1+n.length)%n.length,t,(t+1)%n.length].map((e=>n[e])))).map((e=>[I(e[0],e[1]),I(e[2],e[1])])).map((e=>ts(...e)));return X_([...e],t,n)};const eh=(e,t,n=E)=>{for(let s=0;s<e.length;s+=1){if(e[s]<t.min[s]-n||e[s]>t.max[s]+n){return false}}return true};const th=(e,t,n=E)=>{const s=Math.min(e.min.length,t.min.length);for(let r=0;r<s;r+=1){if(t.min[r]<e.min[r]-n||t.max[r]>e.max[r]+n){return false}}return true};const nh=Object.freeze({__proto__:null,enclosingBoundingBoxes:th,pointInBoundingBox:eh});const sh=(e,t)=>{const n=e.map(((e,n)=>{const s=Ir(t,e,mt);return{point:s?e:null,at_index:n}})).filter((e=>e.point!=null));const s=e.map(((e,t,n)=>({vector:I(e,n[(t+1)%n.length]),origin:n[(t+1)%n.length]}))).map(((e,n)=>({point:no(t,e,gt,vt).point,at_index:n}))).filter((e=>e.point!=null));if(s.length===2){const t=s.slice().sort(((e,t)=>e.at_index-t.at_index));const n=e.slice(t[1].at_index+1).concat(e.slice(0,t[0].at_index+1));n.push(t[0].point);n.push(t[1].point);const r=e.slice(t[0].at_index+1,t[1].at_index+1);r.push(t[1].point);r.push(t[0].point);return[n,r]}if(s.length===1&&n.length===1){n[0].type="v";s[0].type="e";const t=n.concat(s).sort(((e,t)=>e.at_index-t.at_index));const r=e.slice(t[1].at_index+1).concat(e.slice(0,t[0].at_index+1));if(t[0].type==="e"){r.push(t[0].point)}r.push(t[1].point);const o=e.slice(t[0].at_index+1,t[1].at_index+1);if(t[1].type==="e"){o.push(t[1].point)}o.push(t[0].point);return[r,o]}if(n.length===2){const t=n.slice().sort(((e,t)=>e.at_index-t.at_index));const s=e.slice(t[1].at_index).concat(e.slice(0,t[0].at_index+1));const r=e.slice(t[0].at_index,t[1].at_index+1);return[s,r]}return[e.slice()]};const rh=Object.freeze({__proto__:null,splitConvexPolygon:sh});const oh=e=>{if(typeof e!=="object"){return typeof e}if(e.radius!==undefined){return"circle"}if(e.min&&e.max&&e.span){return"box"}if(typeof e[0]==="number"){return"vector"}if(e.vector!==undefined&&e.origin!==undefined){return"line"}if(e[0]!==undefined&&e[0].length&&typeof e[0][0]==="number"){return e.length===2?"segment":"polygon"}return"object"};const ch=e=>e.charAt(0).toUpperCase()+e.slice(1);const ah={polygon:ht,circle:dt,line:mt,ray:pt,segment:ht};const ih=(e,t,n=E)=>{const s=e=>e==="polygon"?"ConvexPolygon":ch(e);const r=[e,t].map(oh);const o=[r,r.slice().reverse()].map((e=>e.map(s).join(""))).map((e=>lo[`intersect${e}`]));const c=[e.domain,t.domain].map(((e,t)=>e||ah[r[t]]));const a=[[e,t,...c],[t,e,...c.slice().reverse()]];const i=o.map(((e,t)=>({fn:e,params:a[t]}))).filter((e=>e.fn)).shift();return i?i.fn(...i.params,n):undefined};const fh={...w,...Jn,...bt,..._e,...Fe,...Ge,...y_,...A_,...Y_,...Tr,...Lr,...Ms,...at,...us,straightSkeleton:K_,...Up,...nh,...Hr,...lo,...Vu,...rh,intersect:ih};const lh=e=>{const t=e.map((e=>e.toUpperCase()));const n=t.filter((e=>e==="M")).length;const s=t.filter((e=>e==="V")).length;return n>s?t.indexOf("V"):t.indexOf("M")};const dh=(e,t,n=0)=>{const s=lh(t);if(s===-1){return undefined}const r=e[(s+1)%e.length];const o=e[(s+2)%e.length];const c=Math.max(-Math.PI,Math.min(Math.PI,n));const a=-Math.cos(r)*Math.cos(o)+Math.sin(r)*Math.sin(o)*Math.cos(Math.PI-c);const i=Math.cos(Math.PI-c)-Math.sin(Math.PI-c)**2*Math.sin(r)*Math.sin(o)/(1-a);const f=-Math.acos(i)+Math.PI;return s%2===0?[f,c,f,c].map(((e,t)=>s===t?-e:e)):[c,f,c,f].map(((e,t)=>s===t?-e:e))};const uh=Object.freeze({__proto__:null,foldDegree4:dh});const mh=({vertices_coords:e,vertices_vertices:t,vertices_edges:n,vertices_faces:s,edges_vertices:r,edges_foldAngle:o,edges_vector:c,faces_vertices:a},i=E)=>{if(!t){t=$s({vertices_coords:e,vertices_edges:n,vertices_faces:s,edges_vertices:r,faces_vertices:a})}if(!n){n=Ns({edges_vertices:r,vertices_vertices:t})}if(!s){s=Is({vertices_coords:e,vertices_vertices:t,faces_vertices:a})}const f=qs({vertices_coords:e,vertices_vertices:t,vertices_edges:n,vertices_faces:s,edges_vertices:r,edges_vector:c,faces_vertices:a});return e.map(((e,t)=>{if(s[t].includes(undefined)||s[t].includes(null)){return true}const r=f[t].map((e=>Math.atan2(e[1],e[0])));const c=n[t].map((e=>o[e])).map((e=>e*A));const a=r.map((e=>Ue(e)));const l=a.map((e=>Be(e)));const d=c.map((e=>Le(e)));const u=f[t].map(((e,t)=>Ne(a[t],Ne(d[t],l[t]))));let m=Ce;u.forEach((e=>{m=Ne(m,e)}));return Array.from(Array(9)).map(((e,t)=>Math.abs(m[t]-Ce[t])<i)).reduce(((e,t)=>e&&t),true)}))};const gh=Object.freeze({__proto__:null,verticesFoldable:mh});const ph={U:true,u:true};const _h=e=>e.map(((e,t)=>t)).filter((t=>ph[e[t]]));const hh=e=>{const t=_h(e);const n=Array.from(Array(2**t.length)).map(((e,t)=>t.toString(2))).map((e=>Array(t.length-e.length+1).join("0")+e)).map((e=>Array.from(e).map((e=>e==="0"?"V":"M"))));const s=n.map((n=>{const s=e.slice();t.forEach(((e,t)=>{s[e]=n[t]}));return s}));const r=e.filter((e=>kt[e])).length;if(r>0){return s}const o=s.map((e=>e.filter((e=>e==="M"||e==="m")).length));const c=s.map((e=>e.filter((e=>e==="V"||e==="v")).length));return s.filter(((e,t)=>Math.abs(o[t]-c[t])===2))};const vh=Object.freeze({__proto__:null,maekawaSolver:hh});const bh={...uh,...gh,...Xu,...vh,...nm};const yh=(e,t,n)=>{const s=e.createShader(n);e.shaderSource(s,t);e.compileShader(s);if(!e.getShaderParameter(s,e.COMPILE_STATUS)){throw new Error(e.getShaderInfoLog(s))}return s};const Eh=(e,t,n)=>{const s=e.createProgram();e.attachShader(s,t);e.attachShader(s,n);e.linkProgram(s);if(!e.getProgramParameter(s,e.LINK_STATUS)){throw new Error(e.getProgramInfoLog(s))}e.deleteShader(t);e.deleteShader(n);return s};const Mh=(e,t,n)=>{const s=yh(e,t,e.VERTEX_SHADER);const r=yh(e,n,e.FRAGMENT_SHADER);return Eh(e,s,r)};const Ah=(e,t)=>{const s=[null,"webgl","webgl2"];const r=window.devicePixelRatio||1;e.width=e.clientWidth*r;e.height=e.clientHeight*r;if(t){return{gl:e.getContext(s[t]),version:t}}const o=e.getContext(s[2]);if(o){return{gl:o,version:2}}const c=e.getContext(s[1]);if(c){return{gl:c,version:1}}throw new Error(n.noWebGL)};const xh=(e,t)=>{if(!e){return}const n=window.devicePixelRatio||1;const s=[t.clientWidth,t.clientHeight].map((e=>e*n));if(t.width!==s[0]||t.height!==s[1]){t.width=s[0];t.height=s[1]}e.viewport(0,0,e.canvas.width,e.canvas.height)};const wh=(e,t="perspective",n=45)=>{if(!e){return e_}const s=.1;const r=20;const o=-100;const c=100;const a=[e.clientWidth,e.clientHeight];const i=Math.min(...a);const f=[0,1].map((e=>(a[e]-i)/i/2));const l=f.map((e=>e+.5));return t==="orthographic"?v_(l[1],l[0],-l[1],-l[0],o,c):h_(n*(Math.PI/180),a[0]/a[1],s,r)};const kh=e=>{if(!e){return e_}const t=ca(e);if(!t){return e_}const n=Math.max(...t.span);if(n===0){return e_}const s=de(3,G(t.min,t.max));const r=[n,0,0,0,0,n,0,0,0,0,n,0,...s,1];return c_(r)||e_};const Oh=Object.freeze({__proto__:null,makeModelMatrix:kh,makeProjectionMatrix:wh,rebuildViewport:xh});const jh=(e,t,n,s)=>{switch(n){case"uniformMatrix4fv":e[n](t,false,s);break;default:e[n](t,s);break}};const Fh=(e,t,n,s={})=>{e.useProgram(n.program);n.flags.forEach((t=>e.enable(t)));const r=e.getProgramParameter(n.program,e.ACTIVE_UNIFORMS);for(let t=0;t<r;t+=1){const r=e.getActiveUniform(n.program,t).name;const o=s[r];if(o){const t=e.getUniformLocation(n.program,r);jh(e,t,o.func,o.value)}}n.vertexArrays.forEach((t=>{e.bindBuffer(e.ARRAY_BUFFER,t.buffer);e.bufferData(e.ARRAY_BUFFER,t.data,e.STATIC_DRAW);e.vertexAttribPointer(t.location,t.length,t.type,false,0,0);e.enableVertexAttribArray(t.location)}));n.elementArrays.forEach((n=>{e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n.buffer);e.bufferData(e.ELEMENT_ARRAY_BUFFER,n.data,e.STATIC_DRAW);e.drawElements(n.mode,n.data.length,t===2?e.UNSIGNED_INT:e.UNSIGNED_SHORT,n.buffer)}));n.flags.forEach((t=>e.disable(t)))};const Sh=(e,t)=>{t.vertexArrays.forEach((t=>e.disableVertexAttribArray(t.location)));t.vertexArrays.forEach((t=>e.deleteBuffer(t.buffer)));t.elementArrays.forEach((t=>e.deleteBuffer(t.buffer)));e.deleteProgram(t.program)};const Ch=Object.freeze({__proto__:null,deallocProgram:Sh,drawProgram:Fh});const Vh={B:[.5,.5,.5],b:[.5,.5,.5],V:[.2,.4,.6],v:[.2,.4,.6],M:[.75,.25,.15],m:[.75,.25,.15],F:[.3,.3,.3],f:[.3,.3,.3],J:[.3,.2,0],j:[.3,.2,0],C:[.5,.8,.1],c:[.5,.8,.1],U:[.6,.25,.9],u:[.6,.25,.9]};const Ph={B:[0,0,0],b:[0,0,0],V:[.2,.5,.8],v:[.2,.5,.8],M:[.75,.25,.15],m:[.75,.25,.15],F:[.75,.75,.75],f:[.75,.75,.75],J:[1,.75,.25],j:[1,.75,.25],C:[.5,.8,.1],c:[.5,.8,.1],U:[.6,.25,.9],u:[.6,.25,.9]};const Th=e=>e!==undefined&&e.constructor===Array?e.slice(0,3):ii(e).slice(0,3).map((e=>e/255));const Nh=({vertices_coords:e,edges_assignment:t,faces_vertices:n,faces_edges:s,faces_normal:r},o={})=>{const c=e.map((e=>[...e].concat(Array(3-e.length).fill(0))));const a=Vs({vertices_coords:c,faces_vertices:n,faces_normal:r});const i=c.map(((e,t)=>t%3)).map((e=>[e===0?1:0,e===1?1:0,e===2?1:0]));const f=s.map((e=>e.map((e=>t[e])).map((e=>e==="J"||e==="j"))));if(!o.showTrianglulation){for(let e=0;e<f.length;e+=1){if(f[e][0]){i[e*3+0][2]=i[e*3+1][2]=100}if(f[e][1]){i[e*3+1][0]=i[e*3+2][0]=100}if(f[e][2]){i[e*3+0][1]=i[e*3+2][1]=100}}}return{vertices_coords:c,vertices_normal:a,vertices_barycentric:i}};const zh=(e,t)=>{if(!e||!e.vertices_coords||!e.edges_vertices){return[]}const n=t&&t.dark?Vh:Ph;const s={...n,...t};const r=e.vertices_coords.map((e=>[...e].concat(Array(3-e.length).fill(0))));const o=e.edges_vertices.flatMap((e=>e.map((e=>r[e])))).flatMap((e=>[e,e,e,e]));const c=nr(e);const a=e.edges_assignment?e.edges_assignment.flatMap((e=>Array(8).fill(s[e]))):e.edges_vertices.flatMap((()=>Array(8).fill(s.U)));const i=c.flatMap((e=>[e,e,e,e,e,e,e,e]));const f=e.edges_vertices.flatMap((()=>[[1,0],[0,1],[-1,0],[0,-1],[1,0],[0,1],[-1,0],[0,-1]]));return{vertices_coords:o,vertices_color:a,verticesEdgesVector:i,vertices_vector:f}};const Bh=Object.freeze({__proto__:null,makeFacesVertexData:Nh,makeThickEdgesVertexData:zh});const $h=(e,t,{vertices_coords:n,edges_vertices:s,edges_assignment:r,faces_vertices:o,faces_edges:c,faces_normal:a}={},i={})=>{if(!n||!o){return[]}if(!c){c=ar({edges_vertices:s,faces_vertices:o})}const{vertices_coords:f,vertices_normal:l,vertices_barycentric:d}=Nh({vertices_coords:n,edges_assignment:r,faces_vertices:o,faces_edges:c,faces_normal:a},i);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:f.length?f[0].length:3,data:new Float32Array(f.flat())},{location:e.getAttribLocation(t,"v_normal"),buffer:e.createBuffer(),type:e.FLOAT,length:l.length?l[0].length:3,data:new Float32Array(l.flat())},{location:e.getAttribLocation(t,"v_barycentric"),buffer:e.createBuffer(),type:e.FLOAT,length:3,data:new Float32Array(d.flat())}].filter((e=>e.location!==-1))};const Rh=(e,t=1,n={})=>{if(!n||!n.vertices_coords||!n.faces_vertices){return[]}return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:t===2?new Uint32Array(n.faces_vertices.flat()):new Uint16Array(n.faces_vertices.flat())}]};const Lh=(e,t,n,s={})=>{if(!n||!n.vertices_coords||!n.edges_vertices){return[]}const{vertices_coords:r,vertices_color:o,verticesEdgesVector:c,vertices_vector:a}=zh(n,s.assignment_color);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:r.length?r[0].length:3,data:new Float32Array(r.flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:o.length?o[0].length:3,data:new Float32Array(o.flat())},{location:e.getAttribLocation(t,"edge_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:c.length?c[0].length:3,data:new Float32Array(c.flat())},{location:e.getAttribLocation(t,"vertex_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:a.length?a[0].length:3,data:new Float32Array(a.flat())}].filter((e=>e.location!==-1))};const Ih=(e,t=1,n={})=>{if(!n||!n.edges_vertices){return[]}const s=n.edges_vertices.map(((e,t)=>t*8)).flatMap((e=>[e+0,e+1,e+4,e+4,e+1,e+5,e+1,e+2,e+5,e+5,e+2,e+6,e+2,e+3,e+6,e+6,e+3,e+7,e+3,e+0,e+7,e+7,e+0,e+4]));return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:t===2?new Uint32Array(s):new Uint16Array(s)}]};const Uh=Object.freeze({__proto__:null,makeFoldedElementArrays:Rh,makeFoldedVertexArrays:$h,makeThickEdgesElementArrays:Ih,makeThickEdgesVertexArrays:Lh});const Qh=5e-6;const Dh=(e,t=Qh)=>{const n=va(e);if(!n.edges_assignment){const e=on.edges(n)||_s.edges(n);n.edges_assignment=Array(e).fill("U")}let s=[];if(n.faceOrders){s=Gd(n)}else if(n.faces_layer){s=Hd(n)}const r=Xp(n);const o=Mr(n);if(r.faces){const e=jn(r.faces.map);e.forEach(((e,n)=>{const r=s[e];if(!r){return}o.faces_vertices[n].forEach((e=>{const n=N(r.vector,r.layer*t);o.vertices_coords[e]=$(de(3,o.vertices_coords[e]),n)}))}))}return o};const qh=(e,{projectionMatrix:t,modelViewMatrix:n,frontColor:s,backColor:r,outlineColor:o,strokeWidth:c,opacity:a})=>({u_matrix:{func:"uniformMatrix4fv",value:r_(t||e_,n||e_)},u_projection:{func:"uniformMatrix4fv",value:t||e_},u_modelView:{func:"uniformMatrix4fv",value:n||e_},u_frontColor:{func:"uniform3fv",value:Th(s||"gray")},u_backColor:{func:"uniform3fv",value:Th(r||"white")},u_outlineColor:{func:"uniform3fv",value:Th(o||"black")},u_strokeWidth:{func:"uniform1f",value:c!==undefined?c:.05},u_opacity:{func:"uniform1f",value:a!==undefined?a:1}});const Wh=`#version 300 es\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nin vec3 v_position;\nin vec3 v_normal;\nout vec3 front_color;\nout vec3 back_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tvec3 light = abs(normalize((vec4(v_normal, 1) * u_modelView).xyz));\n\tfloat brightness = 0.5 + light.x * 0.15 + light.z * 0.35;\n\tfront_color = u_frontColor * brightness;\n\tback_color = u_backColor * brightness;\n}\n`;const Gh=`#version 300 es\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\nin vec3 v_position;\nin vec3 v_color;\nin vec3 edge_vector;\nin vec2 vertex_vector;\nout vec3 blend_color;\nvoid main () {\n\tvec3 edge_norm = normalize(edge_vector);\n\t// axis most dissimilar to edge_vector\n\tvec3 absNorm = abs(edge_norm);\n\tvec3 xory = absNorm.x < absNorm.y ? vec3(1,0,0) : vec3(0,1,0);\n\tvec3 axis = absNorm.x > absNorm.z && absNorm.y > absNorm.z ? vec3(0,0,1) : xory;\n\t// two perpendiculars. with edge_vector these make basis vectors\n\tvec3 one = cross(axis, edge_norm);\n\tvec3 two = cross(one, edge_norm);\n\tvec3 displaceNormal = normalize(\n\t\tone * vertex_vector.x + two * vertex_vector.y\n\t);\n\tvec3 displace = displaceNormal * (u_strokeWidth * 0.5);\n\tgl_Position = u_matrix * vec4(v_position + displace, 1);\n\tblend_color = v_color;\n}\n`;const Hh=`#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nuniform float u_opacity;\nin vec3 front_color;\nin vec3 back_color;\nin vec3 outline_color;\nin vec3 barycentric;\nout vec4 outColor;\nfloat edgeFactor(vec3 barycenter) {\n\tvec3 d = fwidth(barycenter);\n\tvec3 a3 = smoothstep(vec3(0.0), d*3.5, barycenter);\n\treturn min(min(a3.x, a3.y), a3.z);\n}\nvoid main () {\n\tgl_FragDepth = gl_FragCoord.z;\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\t// vec4 color4 = gl_FrontFacing\n\t// \t? vec4(front_color, u_opacity)\n\t// \t: vec4(back_color, u_opacity);\n\t// vec4 outline4 = vec4(outline_color, 1);\n\t// outColor = vec4(mix(vec3(0.0), color, edgeFactor(barycentric)), u_opacity);\n\toutColor = vec4(mix(outline_color, color, edgeFactor(barycentric)), u_opacity);\n\t// outColor = mix(outline4, color4, edgeFactor(barycentric));\n}\n`;const Jh=`#version 100\nprecision mediump float;\nuniform float u_opacity;\nvarying vec3 barycentric;\nvarying vec3 front_color;\nvarying vec3 back_color;\nvarying vec3 outline_color;\nvoid main () {\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\t// vec3 boundary = vec3(0.0, 0.0, 0.0);\n\tvec3 boundary = outline_color;\n\t// gl_FragDepth = 0.5;\n\tgl_FragColor = any(lessThan(barycentric, vec3(0.02)))\n\t\t? vec4(boundary, u_opacity)\n\t\t: vec4(color, u_opacity);\n}\n`;const Zh=`#version 100\nattribute vec3 v_position;\nattribute vec3 v_normal;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nvarying vec3 normal_color;\nvarying vec3 front_color;\nvarying vec3 back_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tvec3 light = abs(normalize((vec4(v_normal, 1) * u_modelView).xyz));\n\tfloat brightness = 0.5 + light.x * 0.15 + light.z * 0.35;\n\tfront_color = u_frontColor * brightness;\n\tback_color = u_backColor * brightness;\n}\n`;const Yh=`#version 100\nattribute vec3 v_position;\nattribute vec3 v_color;\nattribute vec3 edge_vector;\nattribute vec2 vertex_vector;\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\nvarying vec3 blend_color;\nvoid main () {\n\tvec3 edge_norm = normalize(edge_vector);\n\t// axis most dissimilar to edge_vector\n\tvec3 absNorm = abs(edge_norm);\n\tvec3 xory = absNorm.x < absNorm.y ? vec3(1,0,0) : vec3(0,1,0);\n\tvec3 axis = absNorm.x > absNorm.z && absNorm.y > absNorm.z ? vec3(0,0,1) : xory;\n\t// two perpendiculars. with edge_vector these make basis vectors\n\tvec3 one = cross(axis, edge_norm);\n\tvec3 two = cross(one, edge_norm);\n\tvec3 displaceNormal = normalize(\n\t\tone * vertex_vector.x + two * vertex_vector.y\n\t);\n\tvec3 displace = displaceNormal * (u_strokeWidth * 0.5);\n\tgl_Position = u_matrix * vec4(v_position + displace, 1);\n\tblend_color = v_color;\n}\n`;const Xh=`#version 100\nprecision mediump float;\nuniform float u_opacity;\nvarying vec3 front_color;\nvarying vec3 back_color;\nvoid main () {\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\tgl_FragColor = vec4(color, u_opacity);\n}\n`;const Kh=`#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nin vec3 blend_color;\nout vec4 outColor;\n \nvoid main() {\n\toutColor = vec4(blend_color.rgb, 1);\n}\n`;const ev=`#version 100\nattribute vec3 v_position;\nattribute vec3 v_normal;\nattribute vec3 v_barycentric;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nuniform vec3 u_outlineColor;\nvarying vec3 normal_color;\nvarying vec3 barycentric;\nvarying vec3 front_color;\nvarying vec3 back_color;\nvarying vec3 outline_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tbarycentric = v_barycentric;\n\tvec3 light = abs(normalize((vec4(v_normal, 1) * u_modelView).xyz));\n\tfloat brightness = 0.5 + light.x * 0.15 + light.z * 0.35;\n\tfront_color = u_frontColor * brightness;\n\tback_color = u_backColor * brightness;\n\toutline_color = u_outlineColor;\n}\n`;const tv=`#version 300 es\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nuniform vec3 u_outlineColor;\nin vec3 v_position;\nin vec3 v_normal;\nin vec3 v_barycentric;\nin float v_rawEdge;\nout vec3 front_color;\nout vec3 back_color;\nout vec3 outline_color;\nout vec3 barycentric;\n// flat out int rawEdge;\nflat out int provokedVertex;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tprovokedVertex = gl_VertexID;\n\tbarycentric = v_barycentric;\n\t// rawEdge = int(v_rawEdge);\n\tvec3 light = abs(normalize((vec4(v_normal, 1) * u_modelView).xyz));\n\tfloat brightness = 0.5 + light.x * 0.15 + light.z * 0.35;\n\tfront_color = u_frontColor * brightness;\n\tback_color = u_backColor * brightness;\n\toutline_color = u_outlineColor;\n}\n`;const nv=`#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nuniform float u_opacity;\nin vec3 front_color;\nin vec3 back_color;\nout vec4 outColor;\nvoid main () {\n\tgl_FragDepth = gl_FragCoord.z;\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\toutColor = vec4(color, u_opacity);\n}\n`;const sv=`#version 100\nprecision mediump float;\nvarying vec3 blend_color;\nvoid main () {\n\tgl_FragColor = vec4(blend_color.rgb, 1);\n}\n`;const rv=(e,t=1,n={},s={})=>{const r=Dh(n,s.layerNudge);const o=t===1?Mh(e,Zh,Xh):Mh(e,Wh,nv);return{program:o,vertexArrays:$h(e,o,r,s),elementArrays:Rh(e,t,r),flags:[e.DEPTH_TEST],makeUniforms:qh}};const ov=(e,t=1,n={},s={})=>{const r=t===1?Mh(e,Yh,sv):Mh(e,Gh,Kh);return{program:r,vertexArrays:Lh(e,r,n,s),elementArrays:Ih(e,t,n),flags:[e.DEPTH_TEST],makeUniforms:qh}};const cv=(e,t=1,n={},s={})=>{const r=Dh(n,s.layerNudge);const o=t===1?Mh(e,ev,Jh):Mh(e,tv,Hh);return{program:o,vertexArrays:$h(e,o,r,s),elementArrays:Rh(e,t,r),flags:[e.DEPTH_TEST],makeUniforms:qh}};const av=Object.freeze({__proto__:null,foldedFormEdges:ov,foldedFormFaces:rv,foldedFormFacesOutlined:cv});const iv=(e,t=1,n={},s={})=>{const r=[];if(s.faces!==false){if(s.outlines===false){r.push(rv(e,t,n,s))}else{r.push(cv(e,t,n,s))}}if(s.edges===true){r.push(ov(e,t,n,s))}return r};const fv=e=>e.map((e=>[0,1].map((t=>e[t]||0))));const lv=(e,t)=>{if(!e||!e.vertices_coords||!e.edges_vertices){return[]}const n=t&&t.dark?Vh:Ph;const s={...n,...t};const r=fv(e.edges_vertices.flatMap((t=>t.map((t=>e.vertices_coords[t])))).flatMap((e=>[e,e])));const o=fv(nr(e));const c=e.edges_assignment?e.edges_assignment.flatMap((e=>[s[e],s[e],s[e],s[e]])):e.edges_vertices.flatMap((()=>[s.U,s.U,s.U,s.U]));const a=o.flatMap((e=>[e,e,e,e]));const i=e.edges_vertices.flatMap((()=>[[1,0],[-1,0],[-1,0],[1,0]]));return{vertices_coords:r,vertices_color:c,verticesEdgesVector:a,vertices_vector:i}};const dv=Object.freeze({__proto__:null,makeCPEdgesVertexData:lv});const uv=(e,t,n,s)=>{if(!n||!n.vertices_coords||!n.edges_vertices){return[]}const{vertices_coords:r,vertices_color:o,verticesEdgesVector:c,vertices_vector:a}=lv(n,s);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:2,data:new Float32Array(r.flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:o.length?o[0].length:2,data:new Float32Array(o.flat())},{location:e.getAttribLocation(t,"edge_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:c.length?c[0].length:2,data:new Float32Array(c.flat())},{location:e.getAttribLocation(t,"vertex_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:a.length?a[0].length:2,data:new Float32Array(a.flat())}].filter((e=>e.location!==-1))};const mv=(e,t=1,n={})=>{if(!n||!n.edges_vertices){return[]}const s=n.edges_vertices.map(((e,t)=>t*4)).flatMap((e=>[e+0,e+1,e+2,e+2,e+3,e+0]));return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:t===2?new Uint32Array(s):new Uint16Array(s)}]};const gv=e=>e.map((e=>[0,1].map((t=>e[t]||0))));const pv=(e,t,n)=>{if(!n||!n.vertices_coords){return[]}return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:2,data:new Float32Array(gv(n.vertices_coords).flat())}].filter((e=>e.location!==-1))};const _v=(e,t=1,n={})=>{if(!n||!n.vertices_coords||!n.faces_vertices){return[]}return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:t===2?new Uint32Array(Gp(n).flat()):new Uint16Array(Gp(n).flat())}]};const hv=Object.freeze({__proto__:null,makeCPEdgesElementArrays:mv,makeCPEdgesVertexArrays:uv,makeCPFacesElementArrays:_v,makeCPFacesVertexArrays:pv});const vv=(e,{projectionMatrix:t,modelViewMatrix:n,cpColor:s,strokeWidth:r})=>({u_matrix:{func:"uniformMatrix4fv",value:r_(t||e_,n||e_)},u_projection:{func:"uniformMatrix4fv",value:t||e_},u_modelView:{func:"uniformMatrix4fv",value:n||e_},u_cpColor:{func:"uniform3fv",value:Th(s||"white")},u_strokeWidth:{func:"uniform1f",value:r||.05}});const bv=`#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nin vec3 blend_color;\nout vec4 outColor;\nvoid main() {\n\toutColor = vec4(blend_color.rgb, 1);\n}\n`;const yv=`#version 100\nprecision mediump float;\nvarying vec3 blend_color;\nvoid main () {\n\tgl_FragColor = vec4(blend_color.rgb, 1);\n}\n`;const Ev=`#version 300 es\nuniform mat4 u_matrix;\nuniform float u_strokeWidth;\nin vec2 v_position;\nin vec3 v_color;\nin vec2 edge_vector;\nin vec2 vertex_vector;\nout vec3 blend_color;\nvoid main () {\n\tfloat sign = vertex_vector[0];\n\tfloat halfWidth = u_strokeWidth * 0.5;\n\tvec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * halfWidth;\n\tgl_Position = u_matrix * vec4(side + v_position, 0, 1);\n\tblend_color = v_color;\n}\n`;const Mv=`#version 100\nuniform mat4 u_matrix;\nuniform float u_strokeWidth;\nattribute vec2 v_position;\nattribute vec3 v_color;\nattribute vec2 edge_vector;\nattribute vec2 vertex_vector;\nvarying vec3 blend_color;\nvoid main () {\n\tfloat sign = vertex_vector[0];\n\tfloat halfWidth = u_strokeWidth * 0.5;\n\tvec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * halfWidth;\n\tgl_Position = u_matrix * vec4(side + v_position, 0, 1);\n\tblend_color = v_color;\n}\n`;const Av=`#version 100\nuniform mat4 u_matrix;\nuniform vec3 u_cpColor;\nattribute vec2 v_position;\nvarying vec3 blend_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 0, 1);\n\tblend_color = u_cpColor;\n}\n`;const xv=`#version 300 es\nuniform mat4 u_matrix;\nuniform vec3 u_cpColor;\nin vec2 v_position;\nout vec3 blend_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 0, 1);\n\tblend_color = u_cpColor;\n}\n`;const wv=(e,t={},n=undefined)=>{const s=Mh(e,Av,yv);return{program:s,vertexArrays:pv(e,s,t),elementArrays:_v(e,1,t),flags:[],makeUniforms:vv}};const kv=(e,t={},n=undefined)=>{const s=Mh(e,Mv,yv);return{program:s,vertexArrays:uv(e,s,t,n),elementArrays:mv(e,1,t),flags:[],makeUniforms:vv}};const Ov=(e,t={},n=undefined)=>{const s=Mh(e,xv,bv);return{program:s,vertexArrays:pv(e,s,t),elementArrays:_v(e,2,t),flags:[],makeUniforms:vv}};const jv=(e,t={},n=undefined)=>{const s=Mh(e,Ev,bv);return{program:s,vertexArrays:uv(e,s,t,n),elementArrays:mv(e,2,t),flags:[],makeUniforms:vv}};const Fv=Object.freeze({__proto__:null,cpEdgesV1:kv,cpEdgesV2:jv,cpFacesV1:wv,cpFacesV2:Ov});const Sv=(e,t=1,n={},s=undefined)=>{switch(t){case 1:return[wv(e,n,s),kv(e,n,s)];case 2:default:return[Ov(e,n,s),jv(e,n,s)]}};const Cv=Object.assign(Object.create(null),{createProgram:Mh,initialize:Ah,foldedForm:iv,creasePattern:Sv},Oh,Ch,Uh,Bh,av,hv,dv,Fv);const Vv=({vertices_coords:e,edges_vertices:t})=>{const n=t.map((t=>t.map((t=>e[t])))).map((e=>te(...e)));const s=n.reduce(((e,t)=>Math.min(e,t)),Infinity);return s===Infinity?undefined:s};const Pv=({vertices_coords:e,edges_vertices:t})=>{const n=Vv({vertices_coords:e,edges_vertices:t});if(n){return Math.max(n*1e-4,1e-10)}const s=ca({vertices_coords:e});return s&&s.span?Math.max(1e-6*Math.max(...s.span),1e-10):1e-6};const Tv=e=>jn(jn(e).reverse());const Nv=(e,t)=>{const n=[];const s=Qc(e);const r=e.edges_faces?e.edges_faces:Js(e);r.forEach(((e,r)=>{if(e.length===1){n[r]="B"}if(e.length===2){const o=e.map((e=>s[e]));if(o[0]===o[1]){n[r]="F";return}const c=e.map((e=>t[e]));const a=c[0]<c[1];const i=o[0]?a:!a;n[r]=i?"V":"M"}}));return n};const zv=e=>{const t=[];e.forEach((e=>{t[e[0]]=undefined;t[e[1]]=undefined}));const n=t.map((()=>[]));e.forEach((([e,t,s])=>{n[e][t]=s;n[t][e]=-s}));return n};const Bv=Object.freeze({__proto__:null,faceOrdersToMatrix:zv,facesLayerToEdgesAssignments:Nv,flipFacesLayer:Tv,makeEpsilon:Pv});const $v={taco_taco:e=>[[e[0],e[2]],[e[1],e[3]],[e[1],e[2]],[e[0],e[3]],[e[0],e[1]],[e[2],e[3]]],taco_tortilla:e=>[[e[0],e[2]],[e[0],e[1]],[e[1],e[2]]],tortilla_tortilla:e=>[[e[0],e[2]],[e[1],e[3]]],transitivity:e=>[[e[0],e[1]],[e[1],e[2]],[e[2],e[0]]]};const Rv=e=>e[0]<e[1]?`${e[0]} ${e[1]}`:`${e[1]} ${e[0]}`;const Lv={taco_taco:e=>[Rv([e[0],e[2]]),Rv([e[1],e[3]]),Rv([e[1],e[2]]),Rv([e[0],e[3]]),Rv([e[0],e[1]]),Rv([e[2],e[3]])],taco_tortilla:e=>[Rv([e[0],e[2]]),Rv([e[0],e[1]]),Rv([e[1],e[2]])],tortilla_tortilla:e=>[Rv([e[0],e[2]]),Rv([e[1],e[3]])],transitivity:e=>[Rv([e[0],e[1]]),Rv([e[1],e[2]]),Rv([e[2],e[0]])]};const Iv={0:0,1:1,2:-1};const Uv=(e,t)=>{const n=Object.keys(e);const s=n.map((e=>e.split(" ").map((e=>parseInt(e,10)))));s.forEach(((s,r)=>{const o=Iv[e[n[r]]];const c=!t[s[1]]?-o:o;s.push(c)}));return s};const Qv=Object.freeze({__proto__:null,constraintToFacePairs:$v,constraintToFacePairsStrings:Lv,solverSolutionToFaceOrders:Uv});const Dv=({taco_taco:e,taco_tortilla:t,tortilla_tortilla:n,transitivity:s})=>{const r={};r.taco_taco=e.map((e=>[e[0][0],e[1][0],e[0][1],e[1][1]]));r.taco_tortilla=t.map((e=>[e.taco[0],e.tortilla,e.taco[1]]));r.tortilla_tortilla=n.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]]));r.transitivity=s.map((e=>[e[0],e[1],e[2]]));return r};const qv=e=>{const t={};Object.keys(e).forEach((e=>{t[e]={}}));Object.keys(e).forEach((n=>{e[n].forEach(((e,s)=>Lv[n](e).forEach((e=>{if(t[n][e]===undefined){t[n][e]=[]}t[n][e].push(s)}))))}));return t};const Wv=({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_center:s})=>{const r=t.map((t=>e[t[0]]));const o=t.map((t=>U(e[t[1]],e[t[0]])));return n.map(((e,t)=>e.map((e=>K(U(s[e],r[t]),o[t]))).map((e=>Math.sign(e)))))};const Gv=({vertices_coords:e,edges_vertices:t,faces_center:n},s,r)=>{const o=s.map((n=>t[n[0]].map((t=>e[t]))));const c=o.map((e=>e[0]));const a=o.map((e=>U(e[1],e[0])));const i=r.map((e=>e.map((e=>e.map((e=>n[e]))))));return i.map(((e,t)=>e.map((e=>e.map((e=>K(U(e,c[t]),a[t]))).map((e=>Math.sign(e)))))))};const Hv=e=>{if(e[0]===1&&e[1]===-1||e[0]===-1&&e[1]===1){return"both"}if(e[0]===1&&e[1]===1){return"right"}if(e[0]===-1&&e[1]===-1){return"left"}return undefined};const Jv=e=>e[0]===e[1]&&e[0]!=="both";const Zv=e=>e[0]===e[1]&&e[0]==="both";const Yv=e=>e[0]!==e[1]&&(e[0]==="both"||e[1]==="both");const Xv=(e,t,n)=>{const s=t[0]==="left"||t[1]==="left"?-1:1;const r=t[0]==="both"?[...e[1]]:[...e[0]];const o=t[0]==="both"?0:1;const c=n[o][0]===s?e[o][0]:e[o][1];return{taco:r,tortilla:c}};const Kv=(e,t)=>{if(e===undefined){return undefined}return t[0][0]===t[1][0]?e:[e[0],[e[1][1],e[1][0]]]};const eb=(e,t,n)=>{const s=t.map((e=>e.length===2&&e[0]!==e[1])).map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined));const r=[];s.forEach((e=>{r[e]=n[e]}));const o=r.map(((t,n)=>t.map((t=>[e[n],[t,t]])))).reduce(((e,t)=>e.concat(t)),[]);return o};const tb=({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:s,faces_center:r,edges_vector:o},c=E)=>{if(!r){r=ur({vertices_coords:e,faces_vertices:s})}const a=Wv({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_center:r});const i=F_({vertices_coords:e,edges_vertices:t,edges_vector:o},c);const f=P_({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:s},c);const l=ta(i).filter((e=>e.map((e=>n[e].length>1)).reduce(((e,t)=>e&&t),true)));const d=l.map((e=>e.map((e=>n[e]))));const u=Gv({vertices_coords:e,edges_vertices:t,faces_center:r},l,d);const m=u.map((e=>e.map(Hv)));const g=m.map(((e,t)=>Jv(e)?d[t]:undefined)).filter((e=>e!==undefined));const p=m.map(((e,t)=>Zv(e)?d[t]:undefined)).map(((e,t)=>Kv(e,u[t]))).filter((e=>e!==undefined));const _=eb(n,a,f);const h=p.concat(_);const v=m.map(((e,t)=>Yv(e)?Xv(d[t],m[t],u[t]):undefined)).filter((e=>e!==undefined));const b=f.map(((e,t)=>a[t].length>1&&a[t][0]===a[t][1]?e:[]));const y=b.map(((e,t)=>({taco:n[t],tortillas:e}))).filter((e=>e.tortillas.length));const M=y.flatMap((e=>e.tortillas.map((t=>({taco:[...e.taco],tortilla:t})))));const A=v.concat(M);return{taco_taco:g,tortilla_tortilla:h,taco_tortilla:A}};const nb=({faces_polygon:e},t,n=E)=>{const s=t.map((()=>[]));t.forEach(((e,t)=>e.forEach((e=>{s[t][e]=true;s[e][t]=true}))));const r=[];t.forEach(((t,s)=>t.forEach((t=>{const o=Cu(e[s],e[t],n);if(o){if(!r[s]){r[s]=[]}if(!r[t]){r[t]=[]}r[s][t]=o;r[t][s]=o}}))));const o=[];for(let t=0;t<r.length-1;t+=1){if(!r[t]){continue}for(let c=t+1;c<r.length;c+=1){if(!r[t][c]){continue}for(let a=c+1;a<r.length;a+=1){if(t===a||c===a){continue}if(!s[t][a]||!s[c][a]){continue}const i=Cu(r[t][c],e[a],n);if(i){o.push([t,c,a].sort(((e,t)=>e-t)))}}}}return o};const sb=(e,{taco_taco:t,taco_tortilla:n})=>{const s={};t.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]].sort(((e,t)=>e-t)))).forEach((e=>[`${e[0]} ${e[1]} ${e[2]}`,`${e[0]} ${e[1]} ${e[3]}`,`${e[0]} ${e[2]} ${e[3]}`,`${e[1]} ${e[2]} ${e[3]}`].forEach((e=>{s[e]=true}))));n.map((e=>[e.taco[0],e.taco[1],e.tortilla].sort(((e,t)=>e-t)).join(" "))).forEach((e=>{s[e]=true}));return e.filter((e=>s[e.join(" ")]===undefined))};const rb=Object.freeze({__proto__:null,filterTransitivity:sb,makeTransitivity:nb});const ob=({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:s,faces_edges:r,edges_vector:o},c=E)=>{const a=Qc({vertices_coords:e,faces_vertices:s});const i=fr({vertices_coords:e,faces_vertices:s},c);a.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined)).forEach((e=>i[e].reverse()));const f=N_({vertices_coords:e,faces_vertices:s},c);const{taco_taco:l,taco_tortilla:d,tortilla_tortilla:u}=tb({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:s,faces_edges:r,edges_vector:o},c);const m=nb({faces_polygon:i},f,c);const g=sb(m,{taco_taco:l,taco_tortilla:d});const p=ta(f).map((e=>e.join(" ")));const _=Dv({taco_taco:l,taco_tortilla:d,tortilla_tortilla:u,transitivity:g});const h=qv(_);return{constraints:_,lookup:h,facePairs:p,faces_winding:a}};const cb=Object.freeze({__proto__:null,setup:ob});const ab=({edges_faces:e,edges_assignment:t},n,s)=>{const r={0:0,1:2,2:1};const o={M:1,m:1,V:2,v:2};const c={};n.forEach((e=>{c[e]=true}));const a={};e.forEach(((e,n)=>{const i=t[n];const f=o[i];if(e.length<2||f===undefined){return}const l=s[e[0]];const d=l?f:r[f];const u=`${e[0]} ${e[1]}`;const m=`${e[1]} ${e[0]}`;if(u in c){a[u]=d}if(m in c){a[m]=r[d]}}));return a};const ib=["111112","111121","111222","112111","121112","121222","122111","122212","211121","211222","212111","212221","221222","222111","222212","222221"];const fb=["112","121","212","221"];const lb=["11","22"];const db=["112","121","122","211","212","221"];const ub=(e,t,n)=>{const s=Array.from(n).map((e=>parseInt(e,10)));if(s.filter((e=>e===0)).length!==t){return}e[t][n]=false;let r=false;for(let n=0;n<s.length;n+=1){const o=[];if(s[n]!==0){continue}for(let r=1;r<=2;r+=1){s[n]=r;if(e[t-1][s.join("")]!==false){o.push([n,r])}}s[n]=0;if(o.length>0&&r===false){r=[]}if(o.length===1){r.push(o[0])}}if(r!==false&&r.length===0){r=true}e[t][n]=r};const mb=e=>{const t=e[0].length;const n=Array.from(Array(t+1)).map((()=>({})));Array.from(Array(2**t)).map(((e,t)=>t.toString(2))).map((e=>Array.from(e).map((e=>parseInt(e,10)+1)).join(""))).map((e=>`11111${e}`.slice(-t))).forEach((e=>{n[0][e]=false}));e.forEach((e=>{n[0][e]=true}));Array.from(Array(t)).map(((e,t)=>t+1)).map((e=>Array.from(Array(3**t)).map(((e,t)=>t.toString(3))).map((e=>`000000${e}`.slice(-t))).forEach((t=>ub(n,e,t)))));let s=[];Array.from(Array(t+1)).map(((e,n)=>t-n)).forEach((e=>{const t=[];Object.keys(n[e]).forEach((s=>{let r=n[e][s];if(r.constructor===Array){r=r[0]}t.push([s,r])}));s=s.concat(t)}));s.sort(((e,t)=>parseInt(e[0],10)-parseInt(t[0],10)));const r={};s.forEach((e=>{r[e[0]]=Object.freeze(e[1])}));return Object.freeze(r)};const gb={taco_taco:mb(ib),taco_tortilla:mb(fb),tortilla_tortilla:mb(lb),transitivity:mb(db)};const pb=Object.freeze(Object.keys(gb));const _b=(e,t,...n)=>{const s={0:0,1:2,2:1};const r=$v[e](t);const o=r.map((e=>e[1]<e[0]));const c=r.map(((e,t)=>o[t]?`${e[1]} ${e[0]}`:`${e[0]} ${e[1]}`));const a=c.map(((e,t)=>{for(let r=0;r<n.length;r+=1){if(n[r][e]){return o[t]?s[n[r][e]]:n[r][e]}}return 0})).join("");if(gb[e][a]===true||gb[e][a]===false){return gb[e][a]}const i=gb[e][a];const f=c[i[0]];const l=o[i[0]]?s[i[1]]:i[1];return[f,l]};const hb=(e,t,n)=>{const s={};pb.forEach((r=>{const o=n.flatMap((e=>t[r][e]));s[r]=ln(o).filter((t=>e[r][t]))}));return s};const vb=(e,t,n,...s)=>{let r=n;const o={};do{const n=hb(e,t,r);const c={};for(let t=0;t<pb.length;t+=1){const r=pb[t];const a=n[r];for(let t=0;t<a.length;t+=1){const n=_b(r,e[r][a[t]],...s,o);if(n===true){continue}if(n===false){throw new Error(`invalid ${r} ${a[t]}:${e[r][a[t]]}`)}if(o[n[0]]){if(o[n[0]]!==n[1]){throw new Error(`conflict ${r} ${a[t]}:${e[r][a[t]]}`)}}else{const[e,t]=n;c[e]=true;o[n[0]]=t}}}r=Object.keys(c)}while(r.length);return o};const bb=(e,t,n)=>{const s=Object.keys(t);const r={};e.forEach((e=>{r[e]=true}));let o=0;const c=[];while(o<e.length){if(!r[e[o]]){o+=1;continue}const a=[];const i=[e[o]];const f={[e[o]]:true};do{const e=i.pop();delete r[e];a.push(e);const o={};s.forEach((s=>{const r=n[s][e];if(!r){return}r.map((e=>t[s][e])).map((e=>Lv[s](e).forEach((e=>{o[e]=true}))))}));const c=Object.keys(o).filter((e=>r[e])).filter((e=>!f[e]));i.push(...c);c.forEach((e=>{f[e]=true}))}while(i.length);o+=1;c.push(a)}return c};const yb=(e,t,n,...s)=>{if(!n.length){return[]}const r=n[0];const o=[];const c=[];[1,2].forEach((a=>{let i;try{i=vb(e,t,[r],...s,{[r]:a})}catch(e){return}i[r]=a;if(Object.keys(i).length===n.length){o.push(i)}else{c.push(i)}}));const a=c.map((r=>yb(e,t,n.filter((e=>!(e in r))),...s,r)));return o.map((e=>[...s,e])).concat(...a)};const Eb=({constraints:e,lookup:t,facePairs:s,orders:r})=>{let o;try{o=vb(e,t,Object.keys(r),r)}catch(e){throw new Error(n.noLayerSolution,{cause:e})}const c=s.filter((e=>!(e in r))).filter((e=>!(e in o)));let a;try{a=bb(c,e,t).map((n=>yb(e,t,n,r,o)))}catch(e){throw new Error(n.noLayerSolution,{cause:e})}const i={...r,...o};const f=a.map((e=>e.map((e=>Object.assign({},...e)))));return{root:i,branches:f}};const Mb=e=>{const t=e.reduce(((e,t)=>e*t),1);const n=e.slice();for(let e=n.length-2;e>=0;e-=1){n[e]*=n[e+1]}n.push(1);n.shift();return Array.from(Array(t)).map(((t,s)=>e.map(((e,t)=>Math.floor(s/n[t])%e))))};const Ab={count:function(){return this.branches.map((e=>e.length))},faceOrders:function(...e){return Uv(this.compile(...e),this.faces_winding)},facesLayer:function(...e){return jn(this.linearize(...e).reverse())},compile:function(...e){const t=Array(this.branches.length).fill(0).map(((t,n)=>e[n]!=null?e[n]:t));const n=this.branches?this.branches.map(((e,n)=>e[t[n]])):[];return Object.assign({},this.root,...n)},directedPairs:function(...e){const t=this.compile(...e);return Object.keys(t).map((e=>t[e]===1?e.split(" "):e.split(" ").reverse())).map((e=>e.map((e=>parseInt(e,10)))))},linearize:function(...e){return Id(this.directedPairs(...e))},allSolutions:function(){return Mb(this.count()).map((e=>this.compile(...e)))},allFacesLayers:function(){return Mb(this.count()).map((e=>this.facesLayer(...e)))}};const xb=()=>({root:{},branches:[],faces_winding:[]});const wb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,faces_vertices:r,faces_edges:o,edges_vector:c},a)=>{if(!e||!t||!r){return Object.assign(Object.create(Ab),xb())}if(!o){o=ar({edges_vertices:t,faces_vertices:r})}if(!n){n=Hs({edges_vertices:t,faces_edges:o})}if(a===undefined){a=Pv({vertices_coords:e,edges_vertices:t})}const{constraints:i,lookup:f,facePairs:l,faces_winding:d}=ob({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:r,faces_edges:o,edges_vector:c},a);const u=ab({edges_faces:n,edges_assignment:s},l,d);const{root:m,branches:g}=Eb({constraints:i,lookup:f,facePairs:l,orders:u});return Object.assign(Object.create(Ab),{root:m,branches:g,faces_winding:d})};const kb=(e,t,n=E)=>{const s=e[0]<e[1]?e:[e[1],e[0]];const r=t[0]<t[1]?t:[t[1],t[0]];const o=Math.min(s[1],r[1])-Math.max(s[0],r[0]);return o>n};const Ob=({vertices_coords:e,edges_vertices:t},n,s,r=E)=>{const o=n.map((n=>t[n].map((t=>e[t]))));const c=o.map((e=>e.map((e=>D(e,s)))));const a=kb(...c,r);return a};const jb=(e,t)=>{if(e.orders){e.orders=e.orders.flatMap((e=>Uv(e,t)))}if(e.leaves){e.leaves=e.leaves.map((e=>Uv(e,t)))}if(e.partitions){e.partitions.forEach((e=>jb(e,t)))}if(e.node){e.node.forEach((e=>jb(e,t)))}return e};const Fb=Object.freeze({__proto__:null,doEdgesOverlap:Ob,doRangesOverlap:kb,reformatSolution:jb});const Sb=({vertices_coords:e,edges_vertices:t},n=E)=>{const{lines:s,edges_line:r}=Fo({vertices_coords:e,edges_vertices:t},n);const o=r.map((e=>s[e].vector));const c=tr({vertices_coords:e,edges_vertices:t}).map(((e,t)=>e.map((e=>D(o[t],e)))));return jn(r).map((e=>e.constructor===Array?e:[e])).flatMap((e=>_n(e).filter((e=>kb(...e.map((e=>c[e])))))))};const Cb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s,faces_center:r},o,c,a,i=E)=>{const f=s.map(Ft);const l=Sb({vertices_coords:e,edges_vertices:t},i).map((e=>e[0]<e[1]?e:e.slice().reverse())).filter((e=>!(f[e[0]]&&f[e[1]]))).filter((e=>e.map((e=>n[e].length===2)).reduce(((e,t)=>e&&t),true))).filter((e=>e.map((e=>o[e]!==undefined)).reduce(((e,t)=>e&&t),true))).filter((e=>Array.from(new Set(e.flatMap((e=>o[e])))).length!==4));const d=l.map((e=>e.map((e=>o[e]))));const u=d.map((e=>Array.from(new Set(e.flat()))));const m=d.map(((e,t)=>{const n={};e.flat().forEach((e=>{n[e]=[]}));e.forEach(((e,s)=>e.forEach((e=>n[e].push(l[t][s])))));return n}));const g=l.map((e=>e.map((e=>n[e]))));const p=g.map(((e,t)=>{const n={};u[t].forEach((e=>{n[e]=[]}));e.flat().forEach((e=>n[c[e]].push(e)));return n}));const _=tr({vertices_coords:e,edges_vertices:t});const h=u.map(((e,t)=>{const n=_[l[t][0]];const s={};e.forEach((e=>{s[e]=n.map((t=>n_(a[e],t))).map((e=>[e[0],e[1]]))}));return s}));const v=p.map(((e,t)=>{const n={};u[t].forEach((s=>{const o=h[t][s][0];n[s]=e[s].map((e=>K(U(r[e],o),U(h[t][s][1],o)))).map((e=>Math.sign(e)))}));return n}));const b=v.map(((e,t)=>{const n={};u[t].forEach((t=>{n[t]=e[t].reduce(((n,s)=>n&&s===e[t][0]),true)}));return n}));const y=l.map(((e,t)=>{const n={};Object.keys(m[t]).forEach((e=>{n[e]={edges:m[t][e],faces:p[t][e],facesSides:v[t][e],facesSameSide:b[t][e]}}));return{edges:e,sets:n}}));const M=y.filter((e=>{const t=Object.values(e.sets).map((e=>e.faces.length===2)).reduce(((e,t)=>e&&t),true);const n=Object.values(e.sets).map((e=>e.facesSameSide)).reduce(((e,t)=>e&&t),true);return t&&n}));const A=y.filter((e=>{const t=Object.values(e.sets).length===3;const n=Object.values(e.sets).map((e=>e.facesSameSide)).reduce(((e,t)=>e&&t),true);return t&&n}));const x=y.filter((e=>{const t=Object.values(e.sets).map((e=>e.faces.length===2)).reduce(((e,t)=>e&&t),true);const n=Object.values(e.sets).map((e=>e.facesSameSide));const s=n[0]!==n[1];return t&&s}));const w=y.filter((e=>{const t=Object.values(e.sets).filter((e=>e.faces.length===3)).shift();const s=t!==undefined;if(!s){return false}const r=t.facesSides.reduce(((e,t)=>e+t),0);const o=Math.abs(r)===1;if(!o){return false}const c=t.faces.filter(((e,n)=>t.facesSides[n]===r));const a=t.edges.map((e=>n[e].map((e=>c.includes(e))).reduce(((e,t)=>e&&t),true))).reduce(((e,t)=>e||t),false);const i=!a;return s&&o&&i}));if(w.length){console.log("This model contains the third case",w)}return{tortillaTortillaEdges:M,solvable1:A,solvable2:x,solvable3:[]}};const Vb=({edges_faces:e},t,n,s)=>{const r=t.map((e=>e.edges)).map((t=>t.map((t=>e[t].slice()))));r.forEach(((e,t)=>{if(n[e[0][0]]!==n[e[1][0]]){r[t][1].reverse()}}));r.map((e=>[e[0][0],e[0][1]])).map((e=>e.map((e=>s[e])))).map(((e,t)=>e[0]!==e[1]?t:undefined)).filter((e=>e!==undefined)).forEach((e=>{const t=r[e][0][1];r[e][0][1]=r[e][1][1];r[e][1][1]=t}));return r};const Pb=(e,t,n=E)=>{const s=t.map((t=>Dr(e,t,ut,n))).reduce(((e,t)=>e||t),false);if(s){return true}const r=Su(e,{vector:U(t[1],t[0]),origin:t[0]},ut,vt,n);return r!==undefined};const Tb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s},r,o,c,a,i,f,l,d=E)=>{const u=c.slice();u.forEach(((e,t)=>{if(e.length<2){delete u[t]}}));const m=n.map((e=>{const t={};e.forEach((e=>{t[e]=true}));return t}));const g=l.map((e=>e.filter((e=>u[e]!==undefined)).map((e=>u[e]))));l.map(((e,t)=>t)).filter((e=>g[e].length<2)).forEach((e=>delete g[e]));const p=g.map(((e,t)=>e.map((e=>e.filter((e=>m[t][e]))))));const _=g.map(((e,t)=>e.map((e=>e.filter((e=>!m[t][e]))))));const h=g.map(((n,s)=>t[s].map((t=>e[t]))));const v=_.map(((e,t)=>e.map((e=>e.map((e=>{const n=h[t].map((t=>n_(o[a[e]],t)));const s=n.map((e=>[e[0],e[1]]));return Pb(i[e],s,d)?e:undefined})).filter((e=>e!==undefined))))));const b=g.flatMap(((e,t)=>v[t].flatMap(((e,n)=>{const s=1-n;const r=p[t];return e.map((e=>({edge:t,faces:[r[n][0],r[s][0]],overlap:e,set:a[e]})))}))));const y=b.map((e=>[e.faces[0],e.overlap]));const M=y.map((e=>e[0]<e[1]));M.forEach(((e,t)=>{if(!e){y[t].reverse()}}));const A=b.map((e=>f[e.faces[0]]));const x=b.map((e=>s[e.edge])).map(Math.sign).map((e=>e===1));const w=b.map(((e,t)=>A[t]^x[t]));const k=w.map(((e,t)=>M[t]?e:1-e)).map((e=>e+1));const O={};y.forEach(((e,t)=>{O[e.join(" ")]=k[t]}));return O};const Nb=({edges_foldAngle:e,faces_winding:t},n,s)=>{const r=n.map((t=>t.map((t=>e[t]))));const o=s.map((e=>e.map((e=>t[e]))));const c=r.map(((e,t)=>e.map(((e,n)=>o[t][n]?e:-e))));const a=c.map((e=>e[0]>e[1]));const i=s.map((e=>e[0]<e[1]));const f=s.map(((e,t)=>a[t]^i[t]));const l={};const d=s.map(((e,t)=>i[t]?e:e.slice().reverse())).map((e=>e.join(" ")));f.map((e=>e+1)).forEach(((e,t)=>{l[d[t]]=e}));return l};const zb=({edges_foldAngle:e,faces_winding:t},n)=>{const s=n.map((e=>Object.values(e.sets).sort(((e,t)=>t.faces.length-e.faces.length)).shift()));const r=s.map((e=>e.edges));const o=s.map((e=>e.faces));return Nb({edges_foldAngle:e,faces_winding:t},r,o)};const Bb=({edges_foldAngle:e,faces_winding:t},n)=>{const s=n.map((e=>Object.values(e.sets).filter((e=>e.facesSameSide)).shift()));const r=s.map((e=>e.edges));const o=s.map((e=>e.faces));return Nb({edges_foldAngle:e,faces_winding:t},r,o)};const $b=({edges_foldAngle:e,faces_winding:t},n)=>({});const Rb=({edges_foldAngle:e,faces_winding:t},n,s,r)=>{const o=zb({edges_foldAngle:e,faces_winding:t},n);const c=Bb({edges_foldAngle:e,faces_winding:t},s);const a=$b({edges_foldAngle:e,faces_winding:t});return{...o,...c,...a}};const Lb=(e,t,n)=>{const s=(e,t)=>{const n=n_(e,t);return[n[0],n[1]]};const r=e.vertices_coords.map((e=>de(3,e)));const o=t.map((t=>_c(e,t)));n.forEach(((e,t)=>{o[t].vertices_coords=o[t].vertices_coords.map(((t,n)=>s(e,r[n])))}));const c=e.edges_foldAngle.map(Ft).map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined));const a=Vt(e,"edges");o.forEach((e=>c.forEach((t=>a.forEach((n=>{delete e[n][t]}))))));return o};const Ib=Object.freeze({__proto__:null,graphGroupCopies:Lb});const Ub=({edges_vertices:e,faces_edges:t},n)=>{const s=e.map((()=>({})));n.forEach(((e,n)=>t[n].forEach((t=>{s[t][e]=true}))));const r=s.map((e=>Object.keys(e).map((e=>parseInt(e,10))).sort(((e,t)=>e-t))));return r};const Qb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s,faces_edges:r,faces_winding:o,faces_center:c},a,i,f,l,d,u,m)=>{const g=u.map((e=>f[e[0]]));const p=jn(g).map((e=>e.constructor===Array?e:[e]));const _=p.map((e=>e.map((e=>d[e]))));const h=Ub({edges_vertices:t,faces_edges:r},f);h.map(((e,t)=>e.length!==2?t:undefined)).filter((e=>e!==undefined)).forEach((e=>delete h[e]));const{tortillaTortillaEdges:v,solvable1:b,solvable2:y,solvable3:E}=Cb({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s,faces_center:c},h,f,i,m);const M=Vb({edges_faces:n},v,f,o);const A=Tb({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s},_,i,a,f,l,o,h,m);const x=Rb({edges_foldAngle:s,faces_winding:o},b,y);const w={...A,...x};return{tortillas3D:M,orders:w}};const Db=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,edges_foldAngle:r,faces_vertices:o,faces_edges:c,faces_faces:a},i=E)=>{if(!c){c=ar({edges_vertices:t,faces_vertices:o})}if(!n){n=Hs({edges_vertices:t,faces_edges:c})}if(!a){a=ir({faces_vertices:o})}if(!r&&s){r=Ks({edges_assignment:s})}if(!s){s=Ys({edges_foldAngle:r})}const{sets_faces:f,sets_transformXY:l,faces_set:d,faces_winding:u}=k_({vertices_coords:e,faces_vertices:o,faces_faces:a},i);const m=Lb({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,edges_foldAngle:r,faces_vertices:o,faces_edges:c,faces_faces:a},f,l);const g=an(...m.map((e=>fr(e,i))));u.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined)).forEach((e=>g[e].reverse()));const p=an(...m.map((e=>N_(e,i))));const _=g.map((e=>Y(...e)));m.forEach((e=>{e.faces_center=e.faces_vertices.map(((e,t)=>_[t]))}));const h=m.map((e=>tb(e,i)));const v=h.flatMap((e=>e.taco_taco));const b=h.flatMap((e=>e.taco_tortilla));const y=h.flatMap((e=>e.tortilla_tortilla));const M=nb({faces_polygon:g},p,i);const A=sb(M,{taco_taco:v,taco_tortilla:b});const x=ta(p);const w=x.map((e=>e.join(" ")));const{tortillas3D:k,orders:O}=Qb({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:r,faces_edges:c,faces_winding:u,faces_center:_},f,l,d,g,w,x,i);y.push(...k);const j=Dv({taco_taco:v,taco_tortilla:b,tortilla_tortilla:y,transitivity:A});const F=qv(j);m.map((e=>ab(e,w,u))).forEach((e=>Object.assign(O,e)));return{constraints:j,lookup:F,facePairs:w,faces_winding:u,orders:O}};const qb=Object.freeze({__proto__:null,setup:Db});const Wb=()=>({root:{},branches:[],faces_winding:[]});const Gb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,edges_foldAngle:r,faces_vertices:o,faces_edges:c,faces_faces:a},i)=>{if(!e||!t||!o){return Object.assign(Object.create(Ab),Wb())}if(i===undefined){i=Pv({vertices_coords:e,edges_vertices:t})}const{constraints:f,lookup:l,facePairs:d,faces_winding:u,orders:m}=Db({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,edges_foldAngle:r,faces_vertices:o,faces_edges:c,faces_faces:a},i);const{root:g,branches:p}=Eb({constraints:f,lookup:l,facePairs:d,orders:m});return Object.assign(Object.create(Ab),{root:g,branches:p,faces_winding:u})};const Hb=(e,t,n)=>{const s=e.map((e=>e?(e[0]+e[1])/2:undefined));const r=[];e.forEach(((o,c)=>{if(!o){return}if(!t&&c===e.length-1){return}const a=o[1];const i=a-n*2;const f=a+n*2;const l=[c,(c+1)%e.length];const d=l.map((e=>s[e])).map((e=>e>a));const u=(!d[0]&&!d[1])*1+(d[0]&&d[1])*2;const m=r.filter((e=>e.min<a&&e.max>a)).shift();const g={faces:l,taco_type:u};if(m){m.pairs.push(g)}else{r.push({min:i,max:f,pairs:[g]})}}));return r.map((e=>e.pairs)).filter((e=>e.length>1)).map((e=>({both:e.filter((e=>e.taco_type===0)).map((e=>e.faces)),left:e.filter((e=>e.taco_type===1)).map((e=>e.faces)),right:e.filter((e=>e.taco_type===2)).map((e=>e.faces))})))};const Jb=(e,t,n)=>t<n?e.slice(t+1,n):e.slice(n+1,t);const Zb=(e,t,n=true,s=E)=>{const r=jn(t);const o=e.map((e=>e?e[1]:undefined));const c=e.map((e=>e?Math.min(...e):undefined)).map((e=>e+s));const a=e.map((e=>e?Math.max(...e):undefined)).map((e=>e-s));const i=r.length+(n?0:-1);for(let e=0;e<i;e+=1){const n=(e+1)%r.length;if(r[e]===r[n]){continue}const s=Jb(t,r[e],r[n]).flat();const i=s.map((t=>o[e]<c[t])).reduce(((e,t)=>e&&t),true);const f=s.map((t=>o[e]>a[t])).reduce(((e,t)=>e&&t),true);if(!i&&!f){return false}}return true};const Yb=e=>{const t=dn(e);const n={};let s=0;for(let e=0;e<t.length;e+=1){if(n[t[e]]===undefined){s+=1;n[t[e]]=s}else if(n[t[e]]!==undefined){if(n[t[e]]!==s){return false}s-=1;n[t[e]]=undefined}}return true};const Xb=(e,t)=>e.map((e=>t[e])).filter((e=>e!==undefined));const Kb=(e,t,n,s,r)=>{const o=t.flat();if(!Zb(e,t,s,r)){return false}for(let e=0;e<n.length;e+=1){const t=Xb(o,n[e]);if(!Yb(t)){return false}}return true};const ey={V:true,v:true,M:true,m:true};const ty=e=>{let t=0;const n=e.slice(1);return[false].concat(n.map((e=>ey[e]?++t:t)).map((e=>e%2===1)))};const ny={V:1,v:1,M:-1,m:-1};const sy=(e,t)=>t%2===0?ny[e]||0:-(ny[e]||0);const ry=e=>{let t=0;return e.slice(1).concat([e[0]]).map((e=>{const n=sy(e,t);t+=ny[e]===undefined?0:1;return n}))};const oy=(e,t)=>{const n=ty(t).map(((t,n)=>e[n]*(t?-1:1)));const s=e.map((()=>undefined));s[0]=[0,n[0]];for(let r=1;r<e.length;r+=1){if(t[r]==="B"||t[r]==="b"){break}const o=(r-1+e.length)%e.length;const c=s[o][1];s[r]=[c,c+n[r]]}return s};const cy={B:true,b:true};const ay=(e,t,n=E)=>{const s=oy(e,t);const r=ry(t);const o=t.map((e=>!cy[e])).reduce(((e,t)=>e&&t),true);if(o){const e=s[0][0];const t=s[s.length-1][1];if(Math.abs(e-t)>n){return[]}}const c=Hb(s,o,n).map((e=>[e.left,e.right].map(jn).filter((e=>e.length>1)))).reduce(((e,t)=>e.concat(t)),[]);const a=(t=[0],i=0,f=0)=>{const l=i+1;const d=r[i];const u=i>=e.length-1;const m=o&&u;if(!Kb(s,t,c,m,n)){return[]}if(m){const e=jn(t);const n=e[0];const s=e[i];if(d>0&&s>n){return[]}if(d<0&&s<n){return[]}}if(u){return[t]}if(d===0){t[f]=[l].concat(t[f]);return a(t,l,f)}const g=d===1?Array.from(Array(t.length-f)).map(((e,t)=>f+t+1)):Array.from(Array(f+1)).map(((e,t)=>t));const p=g.map((()=>va(t)));p.forEach(((e,t)=>e.splice(g[t],0,l)));return p.map(((e,t)=>a(e,l,g[t]))).reduce(((e,t)=>e.concat(t)),[])};return a().map(jn)};const iy=(e,t,n)=>{if(t==null){t=e.map((()=>"U"))}const s=hh(t);const r=s.map((t=>ay(e,t,n)));return s.map(((e,t)=>t)).filter((e=>r[e].length>0)).map((e=>({assignment:s[e],layer:r[e]})))};Object.assign(wb,{table:gb,makeTacosAndTortillas:tb,...rb,...Bv,...Qv,...cb,layer3d:Gb,...qb,...Fb,...Ib,singleVertexSolver:ay,singleVertexAssignmentSolver:iy,foldStripWithAssignments:oy});Object.assign(Em,G_);const fy={graph:Em,cp:Mm,axiom:rg,convert:ep,general:op,math:fh,singleVertex:bh,svg:ud,webgl:Cv,layer:wb};od.ear=fy;Object.defineProperty(fy,"window",{enumerable:false,set:e=>{ud.window=o(e)}});export{fy as default};