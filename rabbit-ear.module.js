const e=typeof window!=="undefined"&&typeof window.document!=="undefined";const t=typeof process!=="undefined"&&process.versions!=null&&process.versions.node!=null;const n={planarize:"graph could not planarize",manifold:"valid manifold required",graphCycle:"cycle not allowed",planarBoundary:"planar boundary detection error, bad graph",circularEdge:"circular edges not allowed",replaceModifyParam:"replace() index < value. indices parameter modified",replaceUndefined:"replace() generated undefined",flatFoldAngles:"foldAngles cannot be determined from flat-folded faces without an assignment",noWebGL:"WebGl not Supported",convexFace:"only convex faces are supported",window:"window not set; if using node/deno include package @xmldom/xmldom and set ear.window = xmldom",nonConvexTriangulation:"non-convex triangulation requires vertices_coords",backendStylesheet:"svgToFold found <style> in <svg>. rendering will be incomplete unless run in a major browser.",noLayerSolution:"LayerSolver bad input. no solution possible"};const s={window:undefined};const r=e=>(new e.DOMParser).parseFromString("<!DOCTYPE html><title>.</title>","text/html");const o=e=>{if(!e.document){e.document=r(e)}s.window=e;return s.window};if(e){s.window=window}const c=()=>{if(s.window===undefined){throw new Error(n.window)}return s.window};const a=1e-6;const i=180/Math.PI;const f=Math.PI/180;const l=Math.PI*2;const d=Object.freeze({__proto__:null,D2R:f,EPSILON:a,R2D:i,TWO_PI:l});const u=(e,t)=>e+(t||0);const m=e=>Math.sqrt(e.map((e=>e*e)).reduce(u,0));const g=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]);const p=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);const _=e=>e[0]*e[0]+e[1]*e[1];const h=e=>e.map((e=>e*e)).reduce(u,0);const v=e=>{const t=m(e);return t===0?e:e.map((e=>e/t))};const b=e=>{const t=g(e);return t===0?e:[e[0]/t,e[1]/t]};const y=e=>{const t=p(e);return t===0?e:[e[0]/t,e[1]/t,e[2]/t]};const E=(e,t)=>e.map((e=>e*t));const M=(e,t)=>[e[0]*t,e[1]*t];const A=(e,t)=>[e[0]*t,e[1]*t,e[2]*t];const x=(e,t)=>e.map(((e,n)=>e+(t[n]||0)));const w=(e,t)=>[e[0]+t[0],e[1]+t[1]];const k=(e,t)=>[e[0]+t[0],e[1]+t[1],e[2]+t[2]];const O=(e,t)=>e.map(((e,n)=>e-(t[n]||0)));const j=(e,t)=>[e[0]-t[0],e[1]-t[1]];const F=(e,t)=>[e[0]-t[0],e[1]-t[1],e[2]-t[2]];const S=(e,t)=>e.map(((n,s)=>e[s]*t[s])).reduce(u,0);const C=(e,t)=>e[0]*t[0]+e[1]*t[1];const V=(e,t)=>e[0]*t[0]+e[1]*t[1]+e[2]*t[2];const P=(e,t)=>e.map(((e,n)=>(e+t[n])/2));const T=(e,t)=>M(w(e,t),.5);const N=(e,t)=>A(k(e,t),.5);const z=function(){if(arguments.length===0){return undefined}const e=arguments[0].length>0?arguments[0].length:0;const t=Array(e).fill(0);Array.from(arguments).forEach((e=>t.forEach(((n,s)=>{t[s]+=e[s]||0}))));return t.map((e=>e/arguments.length))};const B=(...e)=>{if(!e||!e.length){return undefined}const t=1/e.length;return e.reduce(((e,t)=>w(e,t)),[0,0]).map((e=>e*t))};const $=(e,t,n=0)=>{const s=1-n;return e.map(((e,r)=>e*s+(t[r]||0)*n))};const R=(e,t)=>e[0]*t[1]-e[1]*t[0];const L=(e,t)=>[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]];const I=(e,t)=>Math.sqrt(e.map(((n,s)=>(e[s]-t[s])**2)).reduce(u,0));const U=(e,t)=>{const n=e[0]-t[0];const s=e[1]-t[1];return Math.sqrt(n*n+s*s)};const Q=(e,t)=>{const n=e[0]-t[0];const s=e[1]-t[1];const r=e[2]-t[2];return Math.sqrt(n*n+s*s+r*r)};const D=e=>e.map((e=>-e));const q=e=>[-e[1],e[0]];const W=e=>[e[1],-e[0]];const G=(e,t=a)=>e.map((e=>Math.abs(e))).reduce(u,0)<t;const H=(e,t,n=a)=>1-Math.abs(S(e,t))<n;const J=(e,t,n=a)=>H(v(e),v(t),n);const Z=(e,t,n=a)=>Math.abs(R(e,t))<n;const Y=(e,t)=>t.length===e?t:Array(e).fill(0).map(((e,n)=>t[n]?t[n]:e));const X=(e,t)=>[e,t].map((n=>Y(Math.max(e.length,t.length),n)));const K=(e=[1,0])=>{const t=b(e);return[t,q(t)]};const ee=(e=[1,0,0])=>{const t=y(e);const n=[[1,0,0],[0,1,0],[0,0,1]].map((e=>L(e,t)));const s=n.map(p).map(((e,t)=>({n:e,i:t}))).sort(((e,t)=>t.n-e.n)).map((e=>e.i)).shift();const r=y(n[s]);return[t,r,L(t,r)]};const te=e=>e.length===2?K(e):ee(e);const ne=Object.freeze({__proto__:null,add:x,add2:w,add3:k,average:z,average2:B,basisVectors:te,basisVectors2:K,basisVectors3:ee,cross2:R,cross3:L,degenerate:G,distance:I,distance2:U,distance3:Q,dot:S,dot2:C,dot3:V,flip:D,lerp:$,magSquared:h,magSquared2:_,magnitude:m,magnitude2:g,magnitude3:p,midpoint:P,midpoint2:T,midpoint3:N,normalize:v,normalize2:b,normalize3:y,parallel:J,parallel2:Z,parallelNormalized:H,resize:Y,resizeUp:X,rotate270:W,rotate90:q,scale:E,scale2:M,scale3:A,subtract:O,subtract2:j,subtract3:F});const se=[1,0,0,1];const re=se.concat(0,0);const oe=(e,t)=>[e[0]*t[0]+e[2]*t[1]+e[4],e[1]*t[0]+e[3]*t[1]+e[5]];const ce=(e,t,n)=>({vector:[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1]],origin:[e[0]*n[0]+e[2]*n[1]+e[4],e[1]*n[0]+e[3]*n[1]+e[5]]});const ae=(e,t)=>[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1],e[0]*t[2]+e[2]*t[3],e[1]*t[2]+e[3]*t[3],e[0]*t[4]+e[2]*t[5]+e[4],e[1]*t[4]+e[3]*t[5]+e[5]];const ie=e=>e[0]*e[3]-e[1]*e[2];const fe=e=>{const t=ie(e);if(Math.abs(t)<1e-12||Number.isNaN(t)||!Number.isFinite(e[4])||!Number.isFinite(e[5])){return undefined}return[e[3]/t,-e[1]/t,-e[2]/t,e[0]/t,(e[2]*e[5]-e[3]*e[4])/t,(e[1]*e[4]-e[0]*e[5])/t]};const le=(e=0,t=0)=>se.concat(e,t);const de=(e=[1,1],t=[0,0])=>[e[0],0,0,e[1],e[0]*-t[0]+t[0],e[1]*-t[1]+t[1]];const ue=(e=1,t=[0,0])=>de([e,e],t);const me=(e,t=[0,0])=>{const n=Math.cos(e);const s=Math.sin(e);return[n,s,-s,n,t[0],t[1]]};const ge=(e,t=[0,0])=>{const n=Math.atan2(e[1],e[0]);const s=Math.cos(n);const r=Math.sin(n);const o=Math.cos(-n);const c=Math.sin(-n);const a=s*o+r*c;const i=s*-c+r*o;const f=r*o+-s*c;const l=r*-c+-s*o;const d=t[0]+a*-t[0]+-t[1]*f;const u=t[1]+i*-t[0]+-t[1]*l;return[a,i,f,l,d,u]};const pe=Object.freeze({__proto__:null,determinant2:ie,identity2x2:se,identity2x3:re,invertMatrix2:fe,makeMatrix2Reflect:ge,makeMatrix2Rotate:me,makeMatrix2Scale:de,makeMatrix2Translate:le,makeMatrix2UniformScale:ue,multiplyMatrices2:ae,multiplyMatrix2Line2:ce,multiplyMatrix2Vector2:oe});const _e=Object.freeze([1,0,0,0,1,0,0,0,1]);const he=Object.freeze(_e.concat(0,0,0));const ve=e=>he.map(((t,n)=>Math.abs(t-e[n])<a)).reduce(((e,t)=>e&&t),true);const be=(e,t)=>[e[0]*t[0]+e[3]*t[1]+e[6]*t[2]+e[9],e[1]*t[0]+e[4]*t[1]+e[7]*t[2]+e[10],e[2]*t[0]+e[5]*t[1]+e[8]*t[2]+e[11]];const ye=(e,t,n)=>({vector:[e[0]*t[0]+e[3]*t[1]+e[6]*t[2],e[1]*t[0]+e[4]*t[1]+e[7]*t[2],e[2]*t[0]+e[5]*t[1]+e[8]*t[2]],origin:[e[0]*n[0]+e[3]*n[1]+e[6]*n[2]+e[9],e[1]*n[0]+e[4]*n[1]+e[7]*n[2]+e[10],e[2]*n[0]+e[5]*n[1]+e[8]*n[2]+e[11]]});const Ee=(e,t)=>[e[0]*t[0]+e[3]*t[1]+e[6]*t[2],e[1]*t[0]+e[4]*t[1]+e[7]*t[2],e[2]*t[0]+e[5]*t[1]+e[8]*t[2],e[0]*t[3]+e[3]*t[4]+e[6]*t[5],e[1]*t[3]+e[4]*t[4]+e[7]*t[5],e[2]*t[3]+e[5]*t[4]+e[8]*t[5],e[0]*t[6]+e[3]*t[7]+e[6]*t[8],e[1]*t[6]+e[4]*t[7]+e[7]*t[8],e[2]*t[6]+e[5]*t[7]+e[8]*t[8],e[0]*t[9]+e[3]*t[10]+e[6]*t[11]+e[9],e[1]*t[9]+e[4]*t[10]+e[7]*t[11]+e[10],e[2]*t[9]+e[5]*t[10]+e[8]*t[11]+e[11]];const Me=e=>e[0]*e[4]*e[8]-e[0]*e[7]*e[5]-e[3]*e[1]*e[8]+e[3]*e[7]*e[2]+e[6]*e[1]*e[5]-e[6]*e[4]*e[2];const Ae=e=>{const t=Me(e);if(Math.abs(t)<1e-12||Number.isNaN(t)||!Number.isFinite(e[9])||!Number.isFinite(e[10])||!Number.isFinite(e[11])){return undefined}const n=[e[4]*e[8]-e[7]*e[5],-e[1]*e[8]+e[7]*e[2],e[1]*e[5]-e[4]*e[2],-e[3]*e[8]+e[6]*e[5],e[0]*e[8]-e[6]*e[2],-e[0]*e[5]+e[3]*e[2],e[3]*e[7]-e[6]*e[4],-e[0]*e[7]+e[6]*e[1],e[0]*e[4]-e[3]*e[1],-e[3]*e[7]*e[11]+e[3]*e[8]*e[10]+e[6]*e[4]*e[11]-e[6]*e[5]*e[10]-e[9]*e[4]*e[8]+e[9]*e[5]*e[7],e[0]*e[7]*e[11]-e[0]*e[8]*e[10]-e[6]*e[1]*e[11]+e[6]*e[2]*e[10]+e[9]*e[1]*e[8]-e[9]*e[2]*e[7],-e[0]*e[4]*e[11]+e[0]*e[5]*e[10]+e[3]*e[1]*e[11]-e[3]*e[2]*e[10]-e[9]*e[1]*e[5]+e[9]*e[2]*e[4]];const s=1/t;return n.map((e=>e*s))};const xe=(e=0,t=0,n=0)=>_e.concat(e,t,n);const we=(e,t,n,s,r)=>{const o=Math.cos(e);const c=Math.sin(e);const a=_e.concat([0,0,0]);a[n*3+n]=o;a[n*3+s]=(r?+1:-1)*c;a[s*3+n]=(r?-1:+1)*c;a[s*3+s]=o;const i=[0,1,2].map((e=>t[e]||0));const f=_e.concat(D(i));const l=_e.concat(i);return Ee(l,Ee(a,f))};const ke=(e,t=[0,0,0])=>we(e,t,1,2,true);const Oe=(e,t=[0,0,0])=>we(e,t,0,2,false);const je=(e,t=[0,0,0])=>we(e,t,0,1,true);const Fe=(e,t=[0,0,1],n=[0,0,0])=>{const s=[0,1,2].map((e=>n[e]||0));const[r,o,c]=Y(3,v(t));const a=Math.cos(e);const i=Math.sin(e);const f=1-a;const l=_e.concat(-s[0],-s[1],-s[2]);const d=_e.concat(s[0],s[1],s[2]);return Ee(d,Ee([f*r*r+a,f*o*r+c*i,f*c*r-o*i,f*r*o-c*i,f*o*o+a,f*c*o+r*i,f*r*c+o*i,f*o*c-r*i,f*c*c+a,0,0,0],l))};const Se=(e=[1,1,1],t=[0,0,0])=>[e[0],0,0,0,e[1],0,0,0,e[2],e[0]*-t[0]+t[0],e[1]*-t[1]+t[1],e[2]*-t[2]+t[2]];const Ce=(e=1,t=[0,0,0])=>Se([e,e,e],t);const Ve=(e,t=[0,0])=>{const n=ge(e,t);return[n[0],n[1],0,n[2],n[3],0,0,0,1,n[4],n[5],0]};const Pe=Object.freeze({__proto__:null,determinant3:Me,identity3x3:_e,identity3x4:he,invertMatrix3:Ae,isIdentity3x4:ve,makeMatrix3ReflectZ:Ve,makeMatrix3Rotate:Fe,makeMatrix3RotateX:ke,makeMatrix3RotateY:Oe,makeMatrix3RotateZ:je,makeMatrix3Scale:Se,makeMatrix3Translate:xe,makeMatrix3UniformScale:Ce,multiplyMatrices3:Ee,multiplyMatrix3Line3:ye,multiplyMatrix3Vector3:be});const Te=e=>e!=null&&typeof e[Symbol.iterator]==="function";const Ne=function(){switch(arguments.length){case 0:return Array.from(arguments);case 1:return Te(arguments[0])&&typeof arguments[0]!=="string"?Ne(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>Te(e)?[...Ne(e)]:e))}};const ze=function(){switch(arguments.length){case 0:return Array.from(arguments);case 1:return Te(arguments[0])&&typeof arguments[0]!=="string"?ze(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>Te(e)?[...ze(e)]:e)).flat()}};const Be=function(){let e=ze(arguments);const t=e[0];if(typeof t==="object"&&t!==null&&!Number.isNaN(t.x)){e=["x","y","z"].map((e=>t[e])).filter((e=>e!==undefined))}return e.filter((e=>typeof e==="number"))};const $e=function(){return Ne(arguments).map((e=>Be(e)))};const Re=function(){const e=Ne(arguments);return e.length===4?[[0,1],[2,3]].map((t=>t.map((t=>e[t])))):e.map((e=>Be(e)))};const Le=(e,t=[])=>({vector:e,origin:t});const Ie=function(){const e=Ne(arguments);if(e.length===0||e[0]==null){return Le([],[])}if(e[0].constructor===Object&&e[0].vector!==undefined){return Le(e[0].vector,e[0].origin||[])}return typeof e[0]==="number"?Le(Be(e)):Le(...e.map((e=>Be(e))))};const Ue=Object.freeze({__proto__:null,getArrayOfVectors:$e,getLine:Ie,getSegment:Re,getVector:Be});const Qe=e=>Array.from(Array(Math.floor(e))).map(((t,n)=>l*(n/e)));const De=(e,t)=>e.map((e=>[t*Math.cos(e),t*Math.sin(e)]));const qe=(e=3,t=1)=>De(Qe(e),t);const We=(e=3,t=1)=>{const n=Math.PI/e;const s=Qe(e).map((e=>e+n));return De(s,t)};const Ge=(e=3,t=1)=>qe(e,t/Math.cos(Math.PI/e));const He=(e=3,t=1)=>We(e,t/Math.cos(Math.PI/e));const Je=(e=3,t=1)=>qe(e,t/2/Math.sin(Math.PI/e));const Ze=(e=3,t=1)=>We(e,t/2/Math.sin(Math.PI/e));const Ye=(e,t=a)=>{const n=e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>O(e[1],e[0])));const s=n.map(((e,t,n)=>[e,n[(t+n.length-1)%n.length]])).map((e=>!J(e[1],e[0],t)));return e.filter(((e,t)=>s[t]))};const Xe=e=>.5*e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>R(...e))).reduce(((e,t)=>e+t),0);const Ke=e=>{const t=1/(6*Xe(e));return e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>M(w(...e),R(...e)))).reduce(((e,t)=>w(e,t)),[0,0]).map((e=>e*t))};const et=e=>{for(let t=0;t<e.length;t+=1){if(e[t]&&e[t].length){return e[t].length}}return 0};const tt=(e,t=0)=>{if(!e||!e.length){return undefined}const n=et(e);const s=Array(n).fill(Infinity);const r=Array(n).fill(-Infinity);e.filter((e=>e!==undefined)).forEach((e=>e.forEach(((e,n)=>{if(e<s[n]){s[n]=e-t}if(e>r[n]){r[n]=e+t}}))));const o=r.map(((e,t)=>e-s[t]));return{min:s,max:r,span:o}};const nt=Object.freeze({__proto__:null,boundingBox:tt,centroid:Ke,makePolygonCircumradius:qe,makePolygonCircumradiusSide:We,makePolygonInradius:Ge,makePolygonInradiusSide:He,makePolygonNonCollinear:Ye,makePolygonSideLength:Je,makePolygonSideLengthSide:Ze,signedArea:Xe});const st=(e,t,n=a)=>Math.abs(e-t)<n;const rt=(e,t,n=a)=>st(e,t,n)?0:Math.sign(e-t);const ot=(e,t,n=a)=>{for(let s=0;s<Math.max(e.length,t.length);s+=1){if(!st(e[s]||0,t[s]||0,n)){return false}}return true};const ct=(e,t=a)=>e>-t;const at=(e,t=a)=>e>t;const it=()=>true;const ft=()=>true;const lt=ct;const dt=at;const ut=(e,t=a)=>e>-t&&e<1+t;const mt=(e,t=a)=>e>t&&e<1-t;const gt=Object.freeze({__proto__:null,epsilonCompare:rt,epsilonEqual:st,epsilonEqualVectors:ot,exclude:at,excludeL:ft,excludeR:dt,excludeS:mt,include:ct,includeL:it,includeR:lt,includeS:ut});const pt={file:["file_spec","file_creator","file_author","file_title","file_description","file_classes","file_frames"],frame:["frame_author","frame_title","frame_description","frame_attributes","frame_classes","frame_unit","frame_parent","frame_inherit"],graph:["vertices_coords","vertices_vertices","vertices_faces","edges_vertices","edges_faces","edges_assignment","edges_foldAngle","edges_length","faces_vertices","faces_edges","vertices_edges","edges_edges","faces_faces"],orders:["edgeOrders","faceOrders"]};const _t=["singleModel","multiModel","animation","diagrams"];const ht=["creasePattern","foldedForm","graph","linkage"];const vt=["2D","3D","abstract","manifold","nonManifold","orientable","nonOrientable","selfTouching","nonSelfTouching","selfIntersecting","nonSelfIntersecting"];const bt=Object.freeze({__proto__:null,foldFileClasses:_t,foldFrameAttributes:vt,foldFrameClasses:ht,foldKeys:pt});const yt={vertices:"vertex",edges:"edge",faces:"face"};const Et={vertex:"vertices",edge:"edges",face:"faces"};const Mt=Array.from("BbMmVvFfJjCcUu");const At={B:"boundary",M:"mountain",V:"valley",F:"flat",J:"join",C:"cut",U:"unassigned"};Object.keys(At).forEach((e=>{At[e.toLowerCase()]=At[e]}));const xt={B:0,b:0,M:-180,m:-180,V:180,v:180,F:0,f:0,J:0,j:0,C:0,c:0,U:0,u:0};const wt={B:false,b:false,M:true,m:true,V:true,v:true,F:false,f:false,J:false,j:false,C:false,c:false,U:true,u:true};const kt={B:true,b:true,M:false,m:false,V:false,v:false,F:false,f:false,J:false,j:false,C:true,c:true,U:false,u:false};const Ot=e=>xt[e]||0;const jt=e=>{if(e>a){return"V"}if(e<-a){return"M"}return"U"};const Ft=e=>st(0,e)||st(-180,e)||st(180,e);const St=({edges_foldAngle:e})=>{if(!e){return true}for(let t=0;t<e.length;t+=1){if(!Ft(e[t])){return false}}return true};const Ct=(e,t)=>Object.keys(e).filter((e=>t(e)));const Vt=(e,t)=>Ct(e,(e=>e.substring(0,t.length+1)===`${t}_`));const Pt=(e,t)=>Ct(e,(e=>e.substring(e.length-t.length-1,e.length)===`_${t}`));const Tt=e=>{const t={};Object.keys(e).filter((e=>e.includes("_"))).map((e=>e.substring(0,e.indexOf("_")))).forEach((e=>{t[e]=true}));return Object.keys(t)};const Nt=e=>{const t={};Object.keys(e).filter((e=>e.includes("_"))).map((e=>e.substring(e.lastIndexOf("_")+1,e.length))).forEach((e=>{t[e]=true}));return Object.keys(t)};const zt=(e,t)=>{const n=Vt(e,t);if(n.length===0){return[]}const s=Math.max(...n.map((t=>e[t].length)));const r=Array.from(Array(s)).map((()=>({})));n.forEach((t=>r.forEach(((n,s)=>{r[s][t]=e[t][s]}))));return r};const Bt=(e,t,n)=>{const s=Vt(e,t);if(s.length===0){return undefined}const r={};s.forEach((t=>{r[t]=e[t][n]}));return r};const $t=Object.freeze([].concat(pt.file).concat(pt.frame).concat(pt.graph).concat(pt.orders));const Rt=(e={})=>Object.keys(e).length===0?0:$t.filter((t=>e[t])).length/Object.keys(e).length;const Lt=({frame_classes:e,file_classes:t})=>e&&e.includes("foldedForm")||t&&t.includes("foldedForm");const It=({vertices_coords:e},t=a)=>{for(let n=0;n<e.length;n+=1){if(e[n]&&e[n].length===3&&!st(0,e[n][2],t)){return 3}}return 2};const Ut=({vertices_coords:e})=>{if(e[0]!==undefined){return e[0].length}const t=e.filter((()=>true)).shift();if(!t){return undefined}return t.length};const Qt=({edges_vertices:e,edges_foldAngle:t,edges_assignment:n})=>{if(n===undefined){return t===undefined?e.map((()=>true)):t.map((e=>e<-a||e>a))}return n.map((e=>wt[e]))};const Dt={M:"V",m:"v",V:"M",v:"m"};const qt=e=>Dt[e]||e;const Wt=e=>{if(e.edges_assignment){e.edges_assignment=e.edges_assignment.map((e=>Dt[e]?Dt[e]:e))}if(e.edges_foldAngle){e.edges_foldAngle=e.edges_foldAngle.map((e=>-e))}return e};const Gt=(e={})=>{const t={};pt.file.filter((e=>e!=="file_frames")).filter((t=>e[t]!==undefined)).forEach((n=>{t[n]=e[n]}));return t};const Ht=Object.freeze({__proto__:null,assignmentCanBeFolded:wt,assignmentFlatFoldAngle:xt,assignmentIsBoundary:kt,edgeAssignmentToFoldAngle:Ot,edgeFoldAngleIsFlat:Ft,edgeFoldAngleToAssignment:jt,edgesAssignmentNames:At,edgesAssignmentValues:Mt,edgesFoldAngleAreAllFlat:St,filterKeysWithPrefix:Vt,filterKeysWithSuffix:Pt,getAllPrefixes:Tt,getAllSuffixes:Nt,getDimension:It,getDimensionQuick:Ut,getFileMetadata:Gt,invertAssignment:qt,invertAssignments:Wt,isFoldObject:Rt,isFoldedForm:Lt,makeEdgesIsFolded:Qt,pluralize:Et,singularize:yt,transposeGraphArrayAtIndex:Bt,transposeGraphArrays:zt});const Jt=function(e,t){Pt(e,"coords").forEach((n=>{e[n]=e[n].map((e=>Y(3,e))).map((e=>be(t,e)))}));Pt(e,"matrix").forEach((n=>{e[n]=e[n].map((e=>Ee(e,t)))}));return e};const Zt=(e,...t)=>{const n=t.flat();const s=n.length===1?[n[0],n[0],n[0]]:[1,1,1].map(((e,t)=>n[t]===undefined?e:n[t]));const r=Se(s);return Jt(e,r)};const Yt=(e,...t)=>{const n=Be(...t);const s=Y(3,n);const r=xe(...s);return Jt(e,r)};const Xt=(e,t,n,s)=>Jt(e,Fe(t,n,s));const Kt=(e,t,...n)=>{const s=Be(...n);const r=Y(3,s);const o=je(t,r);return Jt(e,o)};const en=function(e){if(!e.vertices_coords){return e}const t=tt(e.vertices_coords);const n=Math.max(...t.span);const s=n===0?1:1/n;const r=t.min;e.vertices_coords=e.vertices_coords.map((e=>O(e,r))).map((e=>e.map((e=>e*s))));return e};const tn=Object.freeze({__proto__:null,rotate:Xt,rotateZ:Kt,scale:Zt,transform:Jt,translate:Yt,unitize:en});const nn=({vertices_coords:e},t=a)=>{if(!e){return[]}const n=Ut({vertices_coords:e});const s=Array.from(Array(n));const r=[];const o=[];const c=e.map(((e,t)=>({i:t,d:e[0]}))).sort(((e,t)=>e.d-t.d)).map((e=>e.i));let i=0;const f=s.map((()=>[0,0]));const l=t=>s.map(((n,s)=>e[t][s]>f[s][0]&&e[t][s]<f[s][1])).reduce(((e,t)=>e&&t),true);const d=s=>{const r=s[s.length-1];while(e[r][0]-e[s[i]][0]>t){i+=1}const o=s.slice(i,s.length).map((t=>e[t]));f[0]=[o[0][0]-t,o[o.length-1][0]+t];for(let e=1;e<n;e+=1){const n=o.map((t=>t[e]));f[e]=[Math.min(...n)-t,Math.max(...n)+t]}};while(o.length!==e.length){const t=[];const n=c.shift();t.push(n);o.push(n);i=0;d(t);let s=0;while(s<c.length&&e[c[s]][0]<f[0][1]){if(l(c[s])){const e=c.splice(s,1).shift();t.push(e);o.push(e);d(t)}else{s+=1}}r.push(t)}return r};const sn=Object.freeze({__proto__:null,getVerticesClusters:nn});const rn=(...e)=>Math.max(0,...e.filter((e=>e!==undefined)).map((e=>e.length)));const on=(e,t)=>rn(...Vt(e,t).map((t=>e[t])));on.vertices=({vertices_coords:e,vertices_faces:t,vertices_vertices:n})=>rn(e,t,n);on.edges=({edges_vertices:e,edges_edges:t,edges_faces:n})=>rn(e,t,n);on.faces=({faces_vertices:e,faces_edges:t,faces_faces:n})=>rn(e,t,n);const cn=e=>e.concat(e.slice(0,-1).reverse());const an=(...e)=>{const t=[];e.forEach((e=>e.forEach(((e,n)=>{t[n]=e}))));return t};const fn=(e,t)=>{t.sort(((e,t)=>e-t));return[e.slice(t[1]).concat(e.slice(0,t[0]+1)),e.slice(t[0],t[1]+1)]};const ln=e=>Array.from(new Set(e));const dn=e=>{const t={};e.forEach((e=>{if(t[e]===undefined){t[e]=0}t[e]+=1}));return e.filter((e=>t[e]>1))};const un=e=>{const t={};e.forEach((e=>{t[e]=true}));return Object.keys(t).map(parseFloat)};const mn=(e,t=a)=>{const n=e.slice().sort(((e,t)=>e-t));if(n.length<2){return n}const s=[true];for(let e=1;e<n.length;e+=1){s[e]=!st(n[e],n[e-1],t)}return n.filter(((e,t)=>s[t]))};const gn=(e,t)=>{const n=[];let s=0;let r=0;while(s<e.length&&r<t.length){if(e[s]===t[r]){s+=1;continue}if(e[s]>t[r]){r+=1;continue}if(t[r]>e[s]){n.push(e[s]);s+=1;continue}}return n};const pn=(e,t,n=a)=>{const s=[];let r=0;let o=0;while(r<e.length&&o<t.length){if(st(e[r],t[o],n)){r+=1;continue}if(e[r]>t[o]){o+=1;continue}if(t[o]>e[r]){s.push(e[r]);r+=1;continue}}return s};const _n=e=>{const t=Array(e.length*(e.length-1)/2);let n=0;for(let s=0;s<e.length-1;s+=1){for(let r=s+1;r<e.length;r+=1,n+=1){t[n]=[e[s],e[r]]}}return t};const hn=(e,t)=>{const n=t===undefined?e.map(((e,t)=>({i:t,value:e}))):e.map(((e,n)=>({i:n,value:t(e)})));let s;let r=Infinity;for(let e=0;e<n.length;e+=1){if(n[e].value<r){s=e;r=n[e].value}}return s};const vn=e=>{let t=0;for(let n=1;n<e.length;n+=1){if(e[n]<e[t]){t=n}}return t};const bn=e=>{let t=0;for(let n=1;n<e.length;n+=1){if(e[n]>e[t]){t=n}}return t};const yn=Object.freeze({__proto__:null,arrayMaxIndex:bn,arrayMinIndex:vn,arrayMinimum:hn,chooseTwoPairs:_n,epsilonUniqueSortedNumbers:mn,mergeArraysWithHoles:an,mirrorArray:cn,nonUniqueElements:dn,setDifferenceSortedIntegers:gn,setDifferenceSortedNumbers:pn,splitCircularArray:fn,uniqueElements:ln,uniqueSortedNumbers:un});const En=(...e)=>{if(e.length===0){return[]}const t=e[0].map(((e,t)=>t));e.forEach((e=>t.forEach(((n,s)=>{t[s]=e[n]}))));return t};const Mn=(...e)=>{if(e.length===0){return[]}const t=e[0].map(((e,t)=>[t]));e.forEach((e=>{t.forEach(((n,s)=>n.forEach(((n,r)=>{t[s][r]=e[n]}))));t.forEach(((e,n)=>{t[n]=e.reduce(((e,t)=>e.concat(t)),[]).filter((e=>e!==undefined))}))}));return t};const An=(...e)=>{if(e.length===0){return[]}let t=e[0].map(((e,t)=>t));e.forEach((e=>{const n=e.map((e=>t[e]));t=n}));return t};const xn=(...e)=>{if(e.length===0){return[]}let t=e[0].reduce(((e,t)=>e.concat(t)),[]).map(((e,t)=>[t]));e.forEach((e=>{const n=[];e.forEach(((e,s)=>{if(typeof e==="number"){n[s]=t[e]}else{n[s]=e.map((e=>t[e])).reduce(((e,t)=>e.concat(t)),[])}}));t=n}));return t};const wn=e=>{const t=[];e.forEach(((e,n)=>{t[e]=n}));return t};const kn=e=>{const t=[];e.forEach(((e,n)=>{t[e]=t[e]===undefined?n:t[e]}));return t};const On=e=>{const t=[];const n=(e,n)=>{if(t[e]===undefined){t[e]=[]}t[e].push(n)};e.forEach(((e,t)=>{if(e==null){return}if(typeof e==="number"){n(e,t)}if(e.constructor===Array){e.forEach((e=>n(e,t)))}}));return t};const jn=e=>{const t=[];const n=(e,n)=>{if(t[e]!==undefined){if(typeof t[e]==="number"){t[e]=[t[e],n]}else{t[e].push(n)}}else{t[e]=n}};e.forEach(((e,t)=>{if(e==null){return}if(typeof e==="number"){n(e,t)}if(e.constructor===Array){e.forEach((e=>n(e,t)))}}));return t};const Fn=(e,t,n=[])=>{Pt(e,t).forEach((t=>e[t].forEach(((s,r)=>e[t][r].forEach(((s,o)=>{e[t][r][o]=n[s]}))))));const s=wn(n);Vt(e,t).forEach((t=>{e[t]=s.map((n=>e[t][n]))}))};const Sn=(e,t,n)=>{const s=kn(n);Pt(e,t).forEach((t=>e[t].forEach(((s,r)=>e[t][r].forEach(((s,o)=>{e[t][r][o]=n[s]}))))));Pt(e,t).forEach((t=>e[t].forEach(((n,s)=>{e[t][s]=e[t][s].filter((e=>e!==undefined))}))));Vt(e,t).forEach((t=>{e[t]=s.map((n=>e[t][n]))}))};const Cn=Object.freeze({__proto__:null,invertArrayMap:On,invertMap:jn,invertSimpleMap:wn,invertSimpleMapNoReplace:kn,mergeBackmaps:xn,mergeNextmaps:Mn,mergeSimpleBackmaps:An,mergeSimpleNextmaps:En,remapComponent:Fn,remapKey:Sn});const Vn=(e,t,s,r)=>{const o=on(e,t);const c=[];for(let e=0,t=0,a=0;e<o;e+=1,t+=1){while(e===r[a]){c[e]=c[s[r[a]]];if(c[e]===undefined){throw new Error(n.replaceUndefined)}e+=1;a+=1}if(e<o){c[e]=t}}return c};const Pn=(e,t,n)=>{Object.entries(n).filter((([e,t])=>e<t)).forEach((([e,t])=>{delete n[e];n[t]=e}));const s=Object.keys(n).map((e=>parseInt(e,10)));const r=un(s);const o=Vn(e,t,n,r);Sn(e,t,o);return o};const Tn=(e,t)=>nn(e,t).filter((e=>e.length>1));const Nn=(e,t=a,n=true)=>{const s=[];const r=[];const o=nn(e,t).filter((e=>e.length>1));o.forEach((e=>{if(Math.min(...e)!==e[0]){e.sort(((e,t)=>e-t))}for(let t=1;t<e.length;t+=1){s[e[t]]=e[0];r.push(e[t])}}));if(n){o.map((t=>t.map((t=>e.vertices_coords[t])))).map((e=>z(...e))).forEach(((t,n)=>{e.vertices_coords[o[n][0]]=t}))}return{map:Pn(e,"vertices",s),remove:r}};const zn=Object.freeze({__proto__:null,duplicateVertices:Tn,removeDuplicateVertices:Nn});const Bn=(e,t,n)=>{const s=un(n);const r=on(e,t);const o=[];for(let e=0,t=0,n=0;e<r;e+=1,t+=1){while(e===s[n]){o[e]=undefined;e+=1;n+=1}if(e<r){o[e]=t}}return o};const $n=(e,t,n)=>{const s=Bn(e,t,n);Sn(e,t,s);return s};const Rn=({vertices_coords:e,edges_vertices:t})=>{if(!e||!t){return[]}let n=e.length;const s=Array(n).fill(false);t.forEach((e=>{e.filter((e=>!s[e])).forEach((e=>{s[e]=true;n-=1}))}));return s.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined))};const Ln=({vertices_coords:e,faces_vertices:t})=>{if(!e||!t){return[]}let n=e.length;const s=Array(n).fill(false);t.forEach((e=>{e.filter((e=>!s[e])).forEach((e=>{s[e]=true;n-=1}))}));return s.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined))};const In=({vertices_coords:e,edges_vertices:t,faces_vertices:n})=>{if(!e){return[]}let s=e.length;const r=Array(s).fill(false);if(t){t.forEach((e=>{e.filter((e=>!r[e])).forEach((e=>{r[e]=true;s-=1}))}))}if(n){n.forEach((e=>{e.filter((e=>!r[e])).forEach((e=>{r[e]=true;s-=1}))}))}return r.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined))};const Un=(e,t)=>{if(!t){t=In(e)}return{map:$n(e,"vertices",t),remove:t}};const Qn=Object.freeze({__proto__:null,edgeIsolatedVertices:Rn,faceIsolatedVertices:Ln,isolatedVertices:In,removeIsolatedVertices:Un});const Dn=e=>Math.atan2(e[1],e[0]);const qn=e=>[Math.cos(e),Math.sin(e)];const Wn=(e,t)=>({vector:O(t,e),origin:e});const Gn=({vector:e,origin:t})=>{const n=m(e);const s=q(e);const r=S(t,s)/n;return{normal:E(s,1/n),distance:r}};const Hn=({normal:e,distance:t})=>({vector:W(e),origin:E(e,t)});const Jn=Object.freeze({__proto__:null,angleToVector:qn,pointsToLine:Wn,uniqueLineToVecLine:Hn,vecLineToUniqueLine:Gn,vectorToAngle:Dn});const Zn=(e,t,n)=>{while(n<t){n+=l}while(e>t){e-=l}while(e<t){e+=l}return e<n};const Yn=(e,t)=>{while(e<0){e+=l}while(t<0){t+=l}while(e>l){e-=l}while(t>l){t-=l}const n=e-t;return n>=0?n:l-(t-e)};const Xn=(e,t)=>{while(e<0){e+=l}while(t<0){t+=l}while(e>l){e-=l}while(t>l){t-=l}const n=t-e;return n>=0?n:l-(e-t)};const Kn=(e,t)=>{const n=t[0]*e[0]+t[1]*e[1];const s=t[0]*e[1]-t[1]*e[0];let r=Math.atan2(s,n);if(r<0){r+=l}return r};const es=(e,t)=>{const n=e[0]*t[0]+e[1]*t[1];const s=e[0]*t[1]-e[1]*t[0];let r=Math.atan2(s,n);if(r<0){r+=l}return r};const ts=(e,t)=>qn(Dn(e)-Kn(e,t)/2);const ns=(e,t)=>qn(Dn(e)+es(e,t)/2);const ss=(e,t,n)=>{const s=Yn(e,t)/n;return Array.from(Array(n-1)).map(((t,n)=>e+s*(n+1)))};const rs=(e,t,n)=>{const s=Xn(e,t)/n;return Array.from(Array(n-1)).map(((t,n)=>e+s*(n+1)))};const os=(e,t,n)=>{const s=Math.atan2(e[1],e[0]);const r=Math.atan2(t[1],t[0]);return ss(s,r,n).map(qn)};const cs=(e,t,n)=>{const s=Math.atan2(e[1],e[0]);const r=Math.atan2(t[1],t[0]);return rs(s,r,n).map(qn)};const as=e=>{const t=e.map(((e,t)=>t)).sort(((t,n)=>e[t]-e[n]));return t.slice(t.indexOf(0),t.length).concat(t.slice(0,t.indexOf(0)))};const is=e=>as(e.map(Dn));const fs=e=>as(e).map((t=>e[t])).map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>Xn(e[0],e[1])));const ls=e=>fs(e.map(Dn));const ds=(e,t,n,s=a)=>{const r=b(j(t,e));const o=b(j(n,e));const c=R(r,o);if(!st(c,0,s)){return Math.sign(c)}return st(U(e,t)+U(t,n),U(e,n))?0:undefined};const us=Object.freeze({__proto__:null,clockwiseAngle2:Kn,clockwiseAngleRadians:Yn,clockwiseBisect2:ts,clockwiseSubsect2:os,clockwiseSubsectRadians:ss,counterClockwiseAngle2:es,counterClockwiseAngleRadians:Xn,counterClockwiseBisect2:ns,counterClockwiseOrder2:is,counterClockwiseOrderRadians:as,counterClockwiseSectors2:ls,counterClockwiseSectorsRadians:fs,counterClockwiseSubsect2:cs,counterClockwiseSubsectRadians:rs,isCounterClockwiseBetween:Zn,threePointTurnDirection:ds});const ms=e=>{let t=-1;e.filter((e=>e!==undefined)).forEach((e=>e.forEach((e=>e.forEach((e=>{if(e>t){t=e}}))))));return t};const gs=e=>{let t=-1;e.forEach((e=>{if(e[0]>t){t=e[0]}if(e[1]>t){t=e[1]}}));return t};const ps={edges:"edgeOrders",faces:"faceOrders"};const _s=(e,t)=>Math.max(ms(Pt(e,t).map((t=>e[t]))),e[ps[t]]?gs(e[ps[t]]):-1)+1;_s.vertices=e=>_s(e,"vertices");_s.edges=e=>_s(e,"edges");_s.faces=e=>_s(e,"faces");const hs=({vertices_vertices:e,vertices_sectors:t},n,s,r={})=>{const o={};const c={vertices:[n],edges:[],angles:[]};let a=n;let i=s;while(true){const n=e[i];const s=n.indexOf(a);const f=(s+n.length-1)%n.length;const l=n[f];const d=`${i} ${l}`;if(o[d]){Object.assign(r,o);c.vertices.pop();return c}o[d]=true;if(r[d]){return undefined}c.vertices.push(i);c.edges.push(d);if(t){c.angles.push(t[i][f])}a=i;i=l}};const vs=({vertices_vertices:e,vertices_sectors:t})=>{const n={vertices_vertices:e,vertices_sectors:t};const s={};return e.map(((e,t)=>e.map((e=>hs(n,t,e,s))).filter((e=>e!==undefined)))).flat()};const bs=e=>e.filter((e=>e.angles.map((e=>Math.PI-e)).reduce(((e,t)=>e+t),0)>0));const ys=Object.freeze({__proto__:null,counterClockwiseWalk:hs,filterWalkedBoundaryFace:bs,planarVertexWalk:vs});const Es=(e,t=[1,0,0],n=[0,0,0])=>{const s=Y(3,e);const r=F(s,Y(3,n));const o=y(Y(3,t));const c=V(o,r);const a=A(o,c);return F(s,a)};const Ms=Object.freeze({__proto__:null,projectPointOnPlane:Es});const As=(e,t,n)=>e.map(((e,s)=>({i:s,n:n(e,t)}))).sort(((e,t)=>e.n-t.n)).map((e=>e.i));const xs=(e,t)=>As(e,t,S);const ws=e=>{const t=[e=>e[0]>=0&&e[1]>=0,e=>e[0]<0&&e[1]>=0,e=>e[0]<0&&e[1]<0,e=>e[0]>=0&&e[1]<0];const n=[(t,n)=>e[n][0]-e[t][0],(t,n)=>e[n][0]-e[t][0],(t,n)=>e[t][0]-e[n][0],(t,n)=>e[t][0]-e[n][0]];const s=e.map((e=>t.map(((t,n)=>t(e)?n:undefined)).filter((e=>e!==undefined)).shift()));const r=[[],[],[],[]];s.forEach(((e,t)=>{r[e].push(t)}));return r.flatMap(((e,t)=>e.sort(n[t])))};const ks=(e,t=[1,0,0],n=[0,0,0])=>{const s=ee(t);const r=[s[1],s[2],s[0]];const o=e.map((e=>Es(e,t,n)));const c=o.map((e=>O(e,n)));const a=c.map((e=>[S(e,r[0]),S(e,r[1])]));const i=a.map(b);return ws(i)};const Os=Object.freeze({__proto__:null,radialSortPointIndices3:ks,radialSortUnitVectors2:ws,sortAgainstItem:As,sortPointsAlongVector:xs});const js=({vertices_coords:e},t,n)=>t.map((t=>e[t])).map((t=>O(t,e[n]))).map((e=>Math.atan2(e[1],e[0]))).map((e=>e>-a?e:e+Math.PI*2)).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).map((e=>e.i)).map((e=>t[e]));const Fs=({vertices_coords:e},t,n)=>xs(t.map((t=>e[t])),n).map((e=>t[e]));const Ss=Object.freeze({__proto__:null,sortVerticesAlongVector:Fs,sortVerticesCounterClockwise:js});const Cs=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))).map((e=>{let t;let n;let s=0;do{t=O(e[(s+1)%e.length],e[s]);n=O(e[(s+2)%e.length],e[s]);s+=1}while(s<e.length&&J(t,n));return y(L(Y(3,t),Y(3,n)))}));const Vs=({vertices_coords:e,faces_vertices:t,faces_normal:n})=>{const s=(e,t)=>{e[0]+=t[0];e[1]+=t[1];e[2]+=t[2]};if(!n){n=Cs({vertices_coords:e,faces_vertices:t})}const r=e.map((()=>[0,0,0]));t.forEach(((e,t)=>e.forEach((e=>s(r[e],n[t])))));return r.map((e=>y(e)))};const Ps=Object.freeze({__proto__:null,makeFacesNormal:Cs,makeVerticesNormal:Vs});const Ts=({edges_vertices:e})=>{const t=[];e.forEach(((e,n)=>e.forEach((e=>{if(t[e]===undefined){t[e]=[]}t[e].push(n)}))));return t};const Ns=({edges_vertices:e,vertices_vertices:t})=>{const n=Us({edges_vertices:e});return t.map(((e,t)=>e.map((e=>n[`${t} ${e}`]))))};const zs=({vertices_coords:e,vertices_edges:t,edges_vertices:n})=>{if(!t){t=Ts({edges_vertices:n})}const s=t.map(((e,t)=>e.map((e=>n[e].filter((e=>e!==t)))).reduce(((e,t)=>e.concat(t)),[])));return e===undefined?s:s.map(((t,n)=>js({vertices_coords:e},t,n)))};const Bs=({vertices_coords:e,vertices_faces:t,faces_vertices:n})=>{if(!t){t=Ls({vertices_coords:e,faces_vertices:n})}const s=t.map((e=>e.map((e=>n[e]))));const r=s.map(((e,t)=>e.map((e=>e.indexOf(t)))));const o=s.map(((e,t)=>e.map(((e,n)=>[(r[t][n]+e.length-1)%e.length,r[t][n],(r[t][n]+1)%e.length]))));const c=o.map(((e,t)=>e.map(((e,n)=>e.map((e=>s[t][n][e]))))));const a=c.map((e=>{const t=e.map((e=>[[0,1],[1,2]].map((t=>t.map((t=>e[t])).join(" ")))));const n={};const s={};t.forEach(((e,t)=>{n[e[0]]=t;s[e[1]]=t}));return{facesVerts:t,to:s,from:n}}));return a.map((e=>{const t=Object.keys(e.to);const n=t.map((e=>e.split(" ").reverse().join(" ")));const s=t.filter(((t,s)=>!(n[s]in e.from)));if(s.length>2){console.warn("vertices_vertices found an unsolvable vertex");return[]}const r=s.length?s:[t[0]];const o=[];const c={};for(let t=0;t<r.length;t+=1){const n=r[t];const s=[n];c[n]=true;let a=false;do{const t=s[s.length-1];const n=e.to[t];if(!(n in e.facesVerts)){break}let r;if(e.facesVerts[n][0]===t){r=e.facesVerts[n][1]}if(e.facesVerts[n][1]===t){r=e.facesVerts[n][0]}if(r===undefined){return"not found"}const o=r.split(" ").reverse().join(" ");s.push(r);a=o in c;if(!a){s.push(o)}c[r]=true;c[o]=true}while(!a);const i=s.filter(((e,t)=>t%2===0)).map((e=>e.split(" ")[1])).map((e=>parseInt(e,10)));o.push(...i)}return o}))};const $s=e=>{if(!e.vertices_coords||!e.vertices_coords.length){return[]}const t=e.vertices_coords.filter((()=>true)).shift().length;switch(t){case 3:return Bs(e);default:return zs(e)}};const Rs=({vertices_edges:e,edges_vertices:t})=>{if(!e){e=Ts({edges_vertices:t})}return e.map(((e,n)=>e.flatMap((e=>t[e].filter((e=>e!==n))))))};const Ls=({vertices_coords:e,vertices_edges:t,faces_vertices:n})=>{const s=e||t;if(!n){return(s||[]).map((()=>[]))}const r=s!==undefined?s.map((()=>[])):Array.from(Array(_s.vertices({faces_vertices:n}))).map((()=>[]));n.forEach(((e,t)=>{const n=[];e.forEach((e=>{n[e]=t}));n.forEach(((e,t)=>r[t].push(e)))}));return r};const Is=({vertices_coords:e,vertices_vertices:t,faces_vertices:n})=>{if(!n){return e.map((()=>[]))}if(!t){return Ls({vertices_coords:e,faces_vertices:n})}const s=Ds({faces_vertices:n});return t.map(((e,t)=>e.map(((e,n,s)=>[s[(n+1)%s.length],t,e].join(" "))))).map((e=>e.map((e=>s[e]))))};const Us=({edges_vertices:e})=>{const t={};e.map((e=>e.join(" "))).forEach(((e,n)=>{t[e]=n}));e.map((e=>`${e[1]} ${e[0]}`)).forEach(((e,n)=>{t[e]=n}));return t};const Qs=({edges_vertices:e})=>{const t={};e.map((e=>e.join(" "))).forEach(((e,n)=>{t[e]=n}));return t};const Ds=({faces_vertices:e})=>{const t={};e.forEach(((e,n)=>e.map(((t,n)=>[0,1,2].map((t=>(n+t)%e.length)).map((t=>e[t])).join(" "))).forEach((e=>{t[e]=n}))));return t};const qs=({vertices_coords:e,vertices_vertices:t,vertices_edges:n,vertices_faces:s,edges_vertices:r,edges_vector:o,faces_vertices:c})=>{if(!o){o=nr({vertices_coords:e,edges_vertices:r})}if(!t){t=$s({vertices_coords:e,vertices_edges:n,vertices_faces:s,edges_vertices:r,faces_vertices:c})}const a=Qs({edges_vertices:r});return t.map(((e,n)=>t[n].map((e=>{const t=a[`${n} ${e}`];const s=a[`${e} ${n}`];if(t!==undefined){return o[t]}if(s!==undefined){return D(o[s])}}))))};const Ws=({vertices_coords:e,vertices_vertices:t,edges_vertices:n,edges_vector:s})=>qs({vertices_coords:e,vertices_vertices:t,edges_vertices:n,edges_vector:s}).map((e=>e.length===1?[l]:ls(e)));const Gs=({edges_vertices:e,vertices_edges:t})=>e.map(((e,n)=>{const s=t[e[0]].filter((e=>e!==n));const r=t[e[1]].filter((e=>e!==n));return s.concat(r)}));const Hs=({edges_vertices:e,faces_edges:t})=>{const n=e!==undefined?e.map((()=>[])):Array.from(Array(_s.edges({faces_edges:t}))).map((()=>[]));t.forEach(((e,t)=>{const s=[];e.forEach((e=>{s[e]=t}));s.forEach(((e,t)=>n[t].push(e)))}));return n};const Js=({vertices_coords:e,edges_vertices:t,edges_vector:n,faces_vertices:s,faces_edges:r,faces_center:o})=>{if(!t||!s&&!r){return Hs({faces_edges:r})}if(!s){s=cr({edges_vertices:t,faces_edges:r})}if(!r){r=ar({edges_vertices:t,faces_vertices:s})}if(!n){n=nr({vertices_coords:e,edges_vertices:t})}const c=t.map((t=>e[t[0]]));if(!o){o=ur({vertices_coords:e,faces_vertices:s})}const a=t.map((()=>[]));r.forEach(((e,t)=>{const n=[];e.forEach((e=>{n[e]=t}));n.forEach(((e,t)=>a[t].push(e)))}));a.forEach(((e,t)=>{const s=e.map((e=>o[e])).map((e=>j(e,c[t]))).map((e=>R(e,n[t])));e.sort(((e,t)=>s[e]-s[t]))}));return a};const Zs={M:-180,m:-180,V:180,v:180};const Ys=({edges_foldAngle:e})=>e.map((e=>{if(e===0){return"F"}return e<0?"M":"V"}));const Xs=({edges_vertices:e,edges_foldAngle:t,edges_faces:n,faces_vertices:s,faces_edges:r})=>{if(e&&!n){if(!r&&s){r=ar({edges_vertices:e,faces_vertices:s})}if(r){n=Hs({edges_vertices:e,faces_edges:r})}}if(t){return n?t.map(((e,t)=>{if(n[t].length<2){return"B"}if(e===0){return"F"}return e<0?"M":"V"})):Ys({edges_foldAngle:t})}return e.map((()=>"U"))};const Ks=({edges_assignment:e})=>e.map((e=>Zs[e]||0));const er=({vertices_coords:e,edges_vertices:t,edges_faces:s,edges_assignment:r,faces_vertices:o,faces_edges:c,faces_normal:a,faces_center:i})=>{if(!s){if(!c){c=ar({edges_vertices:t,faces_vertices:o})}s=Hs({edges_vertices:t,faces_edges:c})}if(!a){a=Cs({vertices_coords:e,faces_vertices:o})}if(!i){i=ur({vertices_coords:e,faces_vertices:o})}return s.map(((e,t)=>{if(e.length>2){throw new Error(n.manifold)}if(e.length<2){return 0}const s=a[e[0]];const o=a[e[1]];const c=v(O(i[e[1]],i[e[0]]));let f=Math.sign(S(s,c));if(f===0){if(r&&r[t]){if(r[t]==="F"||r[t]==="F"){f=0}if(r[t]==="M"||r[t]==="m"){f=-1}if(r[t]==="V"||r[t]==="v"){f=1}}else{throw new Error(n.flatFoldAngles)}}return Math.acos(S(s,o))*(180/Math.PI)*f}))};const tr=({vertices_coords:e,edges_vertices:t})=>t.map((t=>t.map((t=>e[t]))));const nr=({vertices_coords:e,edges_vertices:t})=>tr({vertices_coords:e,edges_vertices:t}).map((e=>O(e[1],e[0])));const sr=({vertices_coords:e,edges_vertices:t})=>nr({vertices_coords:e,edges_vertices:t}).map((e=>m(e)));const rr=({vertices_coords:e,edges_vertices:t,edges_coords:n},s=0)=>{if(!n){n=tr({vertices_coords:e,edges_vertices:t})}return n.map((e=>tt(e,s)))};const or=({vertices_coords:e,vertices_vertices:t,vertices_edges:n,vertices_sectors:s,edges_vertices:r,edges_vector:o})=>{if(!t){t=$s({vertices_coords:e,edges_vertices:r,vertices_edges:n})}if(!s){s=Ws({vertices_coords:e,vertices_vertices:t,edges_vertices:r,edges_vector:o})}const c=Us({edges_vertices:r});const a=bs(vs({vertices_vertices:t,vertices_sectors:s})).map((e=>({...e,edges:e.edges.map((e=>c[e]))})));return{faces_vertices:a.map((e=>e.vertices)),faces_edges:a.map((e=>e.edges)),faces_sectors:a.map((e=>e.angles))}};const cr=({edges_vertices:e,faces_edges:t})=>t.map((t=>t.map((t=>e[t])).map(((e,t,n)=>{const s=n[(t+1)%n.length];return e[0]===s[0]||e[0]===s[1]?e[1]:e[0]}))));const ar=({edges_vertices:e,faces_vertices:t})=>{const n=Us({edges_vertices:e});return t.map((e=>e.map(((e,t,n)=>[e,n[(t+1)%n.length]].join(" "))))).map((e=>e.map((e=>n[e]))))};const ir=({faces_vertices:e})=>{const t=e.map((()=>[]));const n={};e.forEach(((e,t)=>e.forEach(((s,r,o)=>{let c=o[(r+1)%e.length];if(c<s){[s,c]=[c,s]}const a=`${s} ${c}`;if(n[a]===undefined){n[a]={}}n[a][t]=true}))));Object.values(n).map((e=>Object.keys(e))).filter((e=>e.length>1)).forEach((e=>{t[e[0]].push(parseInt(e[1],10));t[e[1]].push(parseInt(e[0],10))}));return t};const fr=({vertices_coords:e,faces_vertices:t},n)=>t.map((t=>t.map((t=>e[t])))).map((e=>Ye(e,n)));const lr=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t]))));const dr=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))).map((e=>Ke(e)));const ur=({vertices_coords:e,faces_vertices:t})=>{const n=e.filter((()=>true)).shift();if(!n){return t.map((()=>[]))}const s=n.length;return t.map((t=>t.map((t=>e[t])).reduce(((e,t)=>x(e,t)),Array(s).fill(0)).map((e=>e/t.length))))};const mr=Object.freeze({__proto__:null,makeEdgesAssignment:Xs,makeEdgesAssignmentSimple:Ys,makeEdgesBoundingBox:rr,makeEdgesCoords:tr,makeEdgesEdges:Gs,makeEdgesFaces:Js,makeEdgesFacesUnsorted:Hs,makeEdgesFoldAngle:Ks,makeEdgesFoldAngleFromFaces:er,makeEdgesLength:sr,makeEdgesVector:nr,makeFacesCenter2D:dr,makeFacesConvexCenter:ur,makeFacesEdgesFromVertices:ar,makeFacesFaces:ir,makeFacesPolygon:fr,makeFacesPolygonQuick:lr,makeFacesVerticesFromEdges:cr,makePlanarFaces:or,makeVerticesEdges:Ns,makeVerticesEdgesUnsorted:Ts,makeVerticesFaces:Is,makeVerticesFacesUnsorted:Ls,makeVerticesSectors:Ws,makeVerticesToEdge:Qs,makeVerticesToEdgeBidirectional:Us,makeVerticesToFace:Ds,makeVerticesVertices:$s,makeVerticesVertices2D:zs,makeVerticesVerticesFromFaces:Bs,makeVerticesVerticesUnsorted:Rs,makeVerticesVerticesVector:qs});const gr=({edges_vertices:e})=>{if(!e){return[]}const t=[];const n={};for(let s=0;s<e.length;s+=1){const r=`${e[s][0]} ${e[s][1]}`;const o=`${e[s][1]} ${e[s][0]}`;if(n[r]!==undefined){t[s]=n[r]}else{n[r]=s;n[o]=s}}return t};const pr=(e,t)=>{if(!t){t=gr(e)}const n=Object.keys(t).map((e=>parseInt(e,10)));const s=Pn(e,"edges",t);if(n.length){if(e.vertices_edges||e.vertices_vertices||e.vertices_faces){e.vertices_edges=Ts(e);e.vertices_vertices=$s(e);e.vertices_edges=Ns(e);e.vertices_faces=Is(e)}}return{map:s,remove:n}};const _r=Object.freeze({__proto__:null,duplicateEdges:gr,removeDuplicateEdges:pr});const hr=({edges_vertices:e})=>{if(!e){return[]}const t=[];for(let n=0;n<e.length;n+=1){if(e[n][0]===e[n][1]){t.push(n)}}return t};const vr=(e,t,n)=>{const s={};n.forEach((e=>{s[e]=true}));Pt(e,t).forEach((t=>e[t].forEach(((n,r)=>{for(let o=n.length-1;o>=0;o-=1){if(s[n[o]]===true){e[t][r].splice(o,1)}}}))))};const br=(e,t)=>{if(!t){t=hr(e)}if(t.length){vr(e,"edges",t)}return{map:$n(e,"edges",t),remove:t}};const yr=Object.freeze({__proto__:null,circularEdges:hr,removeCircularEdges:br});const Er=(e,t)=>{const n=Nn(e,t);const s=br(e);const r=pr(e);const o=Un(e);const c=wn(n.map);const a=o.remove.map((e=>c[e]));const i=wn(s.map);const f=r.remove.map((e=>i[e]));return{vertices:{map:En(n.map,o.map),remove:n.remove.concat(a)},edges:{map:En(s.map,r.map),remove:s.remove.concat(f)}}};const Mr=({vertices_coords:e,edges_vertices:t,edges_assignment:n,edges_foldAngle:s,faces_vertices:r,faces_edges:o})=>{if(!r){return undefined}let c=0;let a=0;const i={faces_vertices:r.map((e=>e.map((()=>a++))))};if(!e){return i}i.vertices_coords=structuredClone(r.flatMap((t=>t.map((t=>e[t])))));if(!t){return i}if(!o){o=ar({edges_vertices:t,faces_vertices:r})}i.edges_vertices=o.flatMap((e=>e.map(((e,t,n)=>t===n.length-1?[c,++c-n.length]:[c,++c]))));const f=o.flatMap((e=>e));if(n){i.edges_assignment=structuredClone(f.map((e=>n[e])))}if(s){i.edges_foldAngle=structuredClone(f.map((e=>s[e])))}return i};const Ar=({vertices_coords:e,edges_vertices:t,edges_assignment:n,edges_foldAngle:s})=>{if(!t){return undefined}let r=0;const o={edges_vertices:t.map((e=>e.map((()=>r++))))};if(n){o.edges_assignment=n}if(s){o.edges_foldAngle=s}if(e){o.vertices_coords=structuredClone(t.flatMap((t=>t.map((t=>e[t])))))}return o};const xr=Object.freeze({__proto__:null,explodeEdges:Ar,explodeFaces:Mr});const wr=e=>e;const kr=e=>e<-a?0:e;const Or=e=>{if(e<-a){return 0}if(e>1+a){return 1}return e};const jr=(e,t,n,s=a)=>{const r=[[e,t],[t,n]].map((e=>O(e[1],e[0]))).map((e=>v(e)));return st(1,Math.abs(S(...r)),s)};const Fr=(e,t,n,s=false,r=a)=>{const o=[e,n].map((e=>ot(t,e,r))).reduce(((e,t)=>e||t),false);if(o){return s}const c=[[e,t],[t,n]].map((e=>O(e[1],e[0]))).map((e=>v(e)));return st(1,S(...c),a)};const Sr=(e,t,n)=>{const s=$(e.vector,t.vector,n);const r=$(e.origin,t.origin,n);return{vector:s,origin:r}};const Cr=(e,t,n)=>{const s=S(e.vector,t.vector)<0;const r=e.vector;const o=s?D(t.vector):t.vector;const c=Array.from(Array(n-1)).map(((s,r)=>$(e.origin,t.origin,(r+1)/n)));const a=cs(r,o,n);const i=a.map(((e,t)=>({vector:e,origin:[...c[t]]})));const f=[i,i];f[s?0:1]=[];return f};const Vr=(e,t,n,s=a)=>{S(e.vector,t.vector);const r=R(e.vector,t.vector);const o=R(j(t.origin,e.origin),t.vector);const c=o/r;const i=[e.vector,t.vector].map((e=>v(e)));const f=Math.abs(R(...i))<s;if(f){return Cr(e,t,n)}const l=r>-s?[[e.vector,t.vector],[D(t.vector),e.vector]]:[[t.vector,e.vector],[D(e.vector),t.vector]];const d=l.map((e=>cs(e[0],e[1],n)));const u=w(e.origin,M(e.vector,c));const m=Array.from(Array(n-1)).map((()=>u));return d.map((e=>e.map(((e,t)=>({vector:e,origin:[...m[t]]})))))};const Pr=(e,t,n=a)=>{const s=Vr(e,t,2,n).map((e=>e[0]));s.forEach(((e,t)=>{if(e===undefined){delete s[t]}}));return s};const Tr=Object.freeze({__proto__:null,bisectLines2:Pr,clampLine:wr,clampRay:kr,clampSegment:Or,collinearBetween:Fr,isCollinear:jr,lerpLines:Sr,pleat:Vr});const Nr=(e,t)=>{const n=hn(e,(e=>U(e,t)));return n===undefined?undefined:e[n]};const zr=(e,t)=>{const n=hn(e,(e=>I(e,t)));return n===undefined?undefined:e[n]};const Br=({vector:e,origin:t},n,s=wr,r=a)=>{t=Y(e.length,t);n=Y(e.length,n);const o=h(e);const c=O(n,t);const i=S(e,c);const f=i/o;const l=s(f,r);return x(t,E(e,l))};const $r=(e,t)=>e.map(((e,t,n)=>O(n[(t+1)%n.length],e))).map(((t,n)=>({vector:t,origin:e[n]}))).map((e=>Br(e,t,Or))).map(((e,n)=>({point:e,edge:n,distance:I(e,t)}))).sort(((e,t)=>e.distance-t.distance)).shift();const Rr=({radius:e,origin:t},n)=>x(t,E(v(O(n,t)),e));const Lr=Object.freeze({__proto__:null,nearestPoint:zr,nearestPoint2:Nr,nearestPointOnCircle:Rr,nearestPointOnLine:Br,nearestPointOnPolygon:$r});const Ir=({vector:e,origin:t},n,s=it,r=a)=>{const o=j(n,t);const c=h(e);const i=Math.sqrt(c);if(i<r){return false}const f=R(o,e.map((e=>e/i)));const l=C(o,e)/c;return Math.abs(f)<r&&s(l,r/i)};const Ur=(e,t,n=it,s=it,r=a)=>{const o=R(e.vector,t.vector);const c=-o;const i=j(t.origin,e.origin);const f=[-i[0],-i[1]];if(Math.abs(o)<r){if(Math.abs(R(i,e.vector))>r){return false}const o=f;const c=w(o,e.vector);const a=T(o,c);const l=i;const d=w(l,t.vector);const u=T(l,d);const m=C(e.vector,e.vector);const g=C(t.vector,t.vector);const p=C(o,t.vector)/g;const _=C(c,t.vector)/g;const h=C(a,t.vector)/g;const v=C(l,e.vector)/m;const b=C(d,e.vector)/m;const y=C(u,e.vector)/m;return n(v,r)||n(b,r)||s(p,r)||s(_,r)||n(y,r)||s(h,r)}const l=R(i,t.vector)/o;const d=R(f,e.vector)/c;return n(l,r/g(e.vector))&&s(d,r/g(t.vector))};const Qr=({radius:e,origin:t},n,s=at,r=a)=>s(e-U(t,n),r);const Dr=(e,t,n=at,s=a)=>e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>R(b(j(e[1],e[0])),j(t,e[0])))).map((e=>n(e,s))).map(((e,t,n)=>e===n[0])).reduce(((e,t)=>e&&t),true);const qr=(e,t,n=at,s=a)=>{const r=e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((([e,n])=>[j(n,e),j(t,e)])).map((([e,t])=>R(e,t)));const o=Math.sign(r.reduce(((e,t)=>e+t),0));const c=r.map((e=>e*o)).map((e=>n(e,s))).map(((e,t,n)=>e===n[0])).reduce(((e,t)=>e&&t),true);return{overlap:c,t:r}};const Wr=(e,t,n=a)=>{for(let s=0;s<2;s+=1){const r=s===0?e:t;const o=s===0?t:e;for(let e=0;e<r.length;e+=1){const t=r[e];const s=q(j(r[(e+1)%r.length],r[e]));const c=o.map((e=>j(e,t))).map((e=>C(s,e)));const a=r[(e+2)%r.length];const i=C(s,j(a,t));const f=i>0;const l=c.map((e=>f?e<n:e>-n)).reduce(((e,t)=>e&&t),true);if(l){return false}}}return true};const Gr=(e,t,n=a)=>{const s=Math.min(e.min.length,t.min.length);for(let r=0;r<s;r+=1){if(e.min[r]>t.max[r]+n||e.max[r]<t.min[r]-n){return false}}return true};const Hr=Object.freeze({__proto__:null,overlapBoundingBoxes:Gr,overlapCirclePoint:Qr,overlapConvexPolygonPoint:Dr,overlapConvexPolygonPointNew:qr,overlapConvexPolygons:Wr,overlapLineLine:Ur,overlapLinePoint:Ir});const Jr=({vertices_coords:e},t)=>{if(!e){return undefined}const n=Ut({vertices_coords:e});if(n===undefined){return undefined}const s=Y(n,t);const r=e.map(((e,t)=>({d:I(s,e),i:t}))).sort(((e,t)=>e.d-t.d)).shift();return r?r.i:undefined};const Zr=({vertices_coords:e,edges_vertices:t},n)=>{if(!e||!t){return undefined}const s=t.map((t=>t.map((t=>e[t])))).map((e=>Br({vector:O(e[1],e[0]),origin:e[0]},n,Or)));return hn(s,(e=>I(e,n)))};const Yr=({vertices_coords:e,faces_vertices:t},n,s=at)=>!e||!t?[]:t.map(((t,n)=>({face:t.map((t=>e[t])),i:n}))).filter((e=>Dr(e.face,n,s))).map((e=>e.i));const Xr=({vertices_coords:e,faces_vertices:t},n)=>{const s=Yr({vertices_coords:e,faces_vertices:t},n);return s.length?s.shift():undefined};const Kr=(e,t)=>{const n=Xr(e,t);if(n!==undefined){return n}if(e.edges_faces){const n=Zr(e,t);if(n===undefined){return undefined}const s=e.edges_faces[n];if(s.length===1){return s[0]}if(s.length>1){const n=ur({vertices_coords:e.vertices_coords,faces_vertices:s.map((t=>e.faces_vertices[t]))});const r=n.map((e=>I(e,t)));let o=0;for(let e=0;e<r.length;e+=1){if(r[e]<r[o]){o=e}}return s[o]}}return undefined};const eo=(e,...t)=>{const n={vertices:Jr,edges:Zr,faces:Kr};const s=Be(...t);const r=Object.create(null);["vertices","edges","faces"].forEach((t=>{Object.defineProperty(r,yt[t],{enumerable:true,get:()=>n[t](e,s)});Vt(e,t).forEach((n=>Object.defineProperty(r,n,{enumerable:true,get:()=>e[n][r[yt[t]]]})))}));return r};const to=Object.freeze({__proto__:null,faceContainingPoint:Xr,facesContainingPoint:Yr,nearest:eo,nearestEdge:Zr,nearestFace:Kr,nearestVertex:Jr});const no=(e,t,n=it,s=it,r=a)=>{const o=R(b(e.vector),b(t.vector));if(Math.abs(o)<r){return{a:undefined,b:undefined,point:undefined}}const c=R(e.vector,t.vector);const i=-c;const f=[t.origin[0]-e.origin[0],t.origin[1]-e.origin[1]];const l=[-f[0],-f[1]];const d=R(f,t.vector)/c;const u=R(l,e.vector)/i;if(n(d,r/g(e.vector))&&s(u,r/g(t.vector))){return{a:d,b:u,point:w(e.origin,M(e.vector,d))}}return{a:undefined,b:undefined,point:undefined}};const so=(e,t,n=ct,s=it,r=a)=>{const o=t.vector[0]**2+t.vector[1]**2;const c=Math.sqrt(o);const i=c===0?t.vector:t.vector.map((e=>e/c));const f=q(i);const l=j(t.origin,e.origin);const d=R(l,i);if(Math.abs(d)>e.radius+r){return undefined}const u=Math.sqrt(e.radius**2-d**2);const m=(t,n)=>e.origin[n]-f[n]*d+i[n]*t;const g=Math.abs(e.radius-Math.abs(d))<r?[u].map((e=>[e,e].map(m))):[-u,u].map((e=>[e,e].map(m)));const p=g.map((e=>e.map(((e,n)=>e-t.origin[n])))).map((e=>e[0]*t.vector[0]+t.vector[1]*e[1])).map((e=>e/o));return g.filter(((e,t)=>s(p[t],r)))};const ro=e=>{if(e>=1)return 0;if(e<=-1)return Math.PI;return Math.acos(e)};const oo=(e,t,n)=>{const s=t[0]-e[0];const r=t[1]-e[1];const o=s*Math.cos(n)+r*Math.sin(n);const c=r*Math.cos(n)-s*Math.sin(n);return[e[0]+o,e[1]+c]};const co=(e,t,n=ct,s=ct,r=a)=>{const o=e.radius<t.radius?e.radius:t.radius;const c=e.radius<t.radius?t.radius:e.radius;const i=e.radius<t.radius?e.origin:t.origin;const f=e.radius<t.radius?t.origin:e.origin;const l=[i[0]-f[0],i[1]-f[1]];const d=Math.sqrt(l[0]**2+l[1]**2);if(d<r){return undefined}const u=l.map(((e,t)=>e/d*c+f[t]));if(Math.abs(c+o-d)<r||Math.abs(c-(o+d))<r){return[u]}if(d+o<c||c+o<d){return undefined}const m=ro((o*o-d*d-c*c)/(-2*d*c));const g=oo(f,u,+m);const p=oo(f,u,-m);return[g,p]};const ao=e=>{for(let t=1;t<e.length;t+=1){if(!ot(e[0],e[t])){return[e[0],e[t]]}}return undefined};const io=(e,{vector:t,origin:n},s=ut,r=it,o=a)=>{const c=e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>no({vector:j(e[1],e[0]),origin:e[0]},{vector:t,origin:n},s,r,o).point)).filter((e=>e!==undefined));switch(c.length){case 0:return undefined;case 1:return[c];default:return ao(c)||[c[0]]}};const fo=(e,{vector:t,origin:n},s=ut,r=ft,o=a)=>{const c=io(e,{vector:t,origin:n},s,r,o);let i;switch(r){case dt:i=lt;break;case mt:i=ut;break;default:return c}const f=io(e,{vector:t,origin:n},ut,i,o);if(f===undefined){return undefined}const l=ao(f);if(l===undefined){switch(r){case dt:return Dr(e,n,at,.001)?f:undefined;case mt:return Dr(e,w(n,t),at,.001)||Dr(e,n,at,.001)?f:undefined;case ft:return undefined;default:return undefined}}return Dr(e,T(...l),at,.001)?l:c};const lo=Object.freeze({__proto__:null,intersectCircleCircle:co,intersectCircleLine:so,intersectConvexPolygonLine:fo,intersectLineLine:no});const uo=(e,t)=>{let n=[0];for(let s=1;s<e.length;s+=1){switch(t(e[n[0]],e[s])){case 0:n.push(s);break;case 1:n=[s];break}}return n};const mo=(e,t)=>{if(!e.length){return[]}const n=e.map(((e,t)=>t));const s=[[n[0]]];for(let r=1;r<n.length;r+=1){const o=n[r];if(o===undefined){continue}const c=s.length-1;const a=s[c][s[c].length-1];if(t(e[a],e[o])){s[c].push(o)}else{s.push([o])}}return s};const go=(e,t=a)=>{const n=e.map(((e,t)=>({v:e,i:t}))).sort(((e,t)=>e.v-t.v)).map((e=>e.i));const s=n.map((t=>e[t]));const r=(e,n)=>Math.abs(e-n)<t;return mo(s,r).map((e=>e.map((e=>n[e]))))};const po=(e,t=a)=>{const n=[[0]];for(let s=1;s<e.length;s+=1){let r=false;for(let o=0;o<n.length;o+=1){const c=n[o][0];if(J(e[s],e[c],t)){n[o].push(s);r=true;break}}if(!r){n.push([s])}}return n};const _o=Object.freeze({__proto__:null,clusterParallelVectors:po,clusterScalars:go,clusterSortedGeneric:mo,minimumCluster:uo});const ho=({vertices_coords:e,faces_vertices:t},n=0)=>t.map((t=>[t.reduce(((t,s)=>e[t][n]<e[s][n]?t:s)),t.reduce(((t,s)=>e[t][n]>e[s][n]?t:s))]));const vo=({vertices_coords:e},t=0,n=a)=>go(e.map((e=>e[t])),n).map((n=>({vertices:n,t:n.reduce(((n,s)=>n+e[s][t]),0)/n.length})));const bo=(e,{edges_vertices:t,vertices_edges:n},s=a)=>{if(!n){n=Ts({edges_vertices:t})}const r=t.map((t=>t.map((t=>e[t]))));const o=r.map((e=>st(...e,s)));const c=r.map((([e,t])=>Math.sign(e-t)));const i=t.map((([e,t],n)=>o[n]?{[e]:0,[t]:0}:{[e]:c[n],[t]:-c[n]}));return go(e,s).map((e=>e.filter((e=>n[e])))).filter((e=>e.length)).map((t=>({vertices:t,t:t.reduce(((t,n)=>t+e[n]),0)/t.length,start:ln(t.flatMap((e=>n[e].filter((t=>i[t][e]<=0))))),end:ln(t.flatMap((e=>n[e].filter((t=>i[t][e]>=0)))))})))};const yo=({vertices_coords:e,edges_vertices:t,vertices_edges:n},s=0,r=a)=>bo(e.map((e=>e[s])),{edges_vertices:t,vertices_edges:n},r);const Eo=({vertices_coords:e,faces_vertices:t},n=0,s=a)=>bo(e.map((e=>e[n])),{edges_vertices:ho({vertices_coords:e,faces_vertices:t},n)},s);const Mo=({vertices_coords:e,edges_vertices:t,faces_vertices:n},s=0,r=a)=>{const o=e.map((e=>e[s]));const c=ho({vertices_coords:e,faces_vertices:n},s);const i=Ts({edges_vertices:t});const f=Ts({edges_vertices:c});const l=t.map((e=>e.map((e=>o[e]))));const d=c.map((e=>e.map((e=>o[e]))));const u=l.map((e=>st(...e,r)));const m=d.map((e=>st(...e,r)));const g=l.map((([e,t])=>Math.sign(e-t)));const p=d.map((([e,t])=>Math.sign(e-t)));const _=t.map((([e,t],n)=>u[n]?{[e]:0,[t]:0}:{[e]:g[n],[t]:-g[n]}));const h=n.map((([e,t],n)=>m[n]?{[e]:0,[t]:0}:{[e]:p[n],[t]:-p[n]}));return go(o,r).map((e=>({vertices:e,t:e.reduce(((e,t)=>e+o[t]),0)/e.length,edges:{start:ln(e.filter((e=>i[e]!==undefined)).flatMap((e=>i[e].filter((t=>_[t][e]<=0))))),end:ln(e.filter((e=>i[e]!==undefined)).flatMap((e=>i[e].filter((t=>_[t][e]>=0)))))},faces:{start:ln(e.filter((e=>f[e]!==undefined)).flatMap((e=>f[e].filter((t=>h[t][e]<=0))))),end:ln(e.filter((e=>f[e]!==undefined)).flatMap((e=>f[e].filter((t=>h[t][e]>=0)))))}})))};const Ao=Object.freeze({__proto__:null,sweep:Mo,sweepEdges:yo,sweepFaces:Eo,sweepValues:bo,sweepVertices:vo});const xo=({edges_vertices:e},t,n)=>n.map((n=>e[n][0]===t?e[n][1]:e[n][0]));const wo=Object.freeze({__proto__:null,getOtherVerticesInEdges:xo});const ko=({vertices_coords:e,vertices_edges:t,edges_vertices:n},s,r=a)=>{if(!e||!n){return false}if(!t){t=Ts({edges_vertices:n})}const o=t[s];if(o===undefined||o.length!==2){return false}const c=xo({edges_vertices:n},s,o);const i=[c[0],s,c[1]].map((t=>e[t]));return Fr(...i,false,r)};const Oo=Object.freeze({__proto__:null,isVertexCollinear:ko});const jo=({vertices_coords:e,edges_vertices:t},n)=>Wn(e[t[n][0]],e[t[n][1]]);const Fo=({vertices_coords:e,edges_vertices:t},n=a)=>{if(!e||!t||!t.length){return{edges_line:[],lines:[]}}const s=tr({vertices_coords:e,edges_vertices:t});const r=s.map((e=>O(e[1],e[0]))).map(v);const o=r.map(((e,t)=>({vector:e,origin:s[t][0]})));const c=o.map((e=>Br(e,[0,0,0],wr))).map((e=>m(e)));const i=go(c,n);const f=i.map((e=>e.map((e=>r[e])))).map((e=>po(e,.001))).map(((e,t)=>e.map((e=>e.map((e=>i[t][e]))))));const l=f.map((s=>s.map((s=>{if(Math.abs(c[s[0]])<n){return[s]}const r=o[s[0]].vector;const a=s.map((n=>e[t[n][0]])).map((e=>Es(e,r)));const i=ks(a,r);const f=(e,t)=>ot(a[e],a[t],n);const l=e=>e.map((e=>i[e])).map((e=>s[e]));const d=mo(i,f);if(d.length===1){return d.map(l)}const u=d[0][0];const m=d[d.length-1];const g=m[m.length-1];const p=[u,g].map((e=>i[e]));if(f(...p)){const e=d.pop();d[0]=e.concat(d[0])}return d.map(l)}))));const d=l.flatMap((e=>e.flatMap((e=>e))));const u=jn(d);const g=d.map((e=>e.flatMap((e=>t[e])))).map(ln);const p=d.map((e=>r[e[0]]));const _=g.map(((t,n)=>t.map((t=>S(p[n],e[t])))));const h=_.map(((e,t)=>g[t][vn(e)]));const b=_.map(((e,t)=>g[t][bn(e)]));const y=g.map(((t,n)=>O(e[b[n]],e[h[n]])));const E=h.map((t=>e[t]));const M=y.map(((e,t)=>({vector:e,origin:E[t]})));return{lines:M,edges_line:u}};const So=Object.freeze({__proto__:null,edgeToLine:jo,getEdgesLine:Fo});const Co=(e,t=a)=>{const n=e.map((()=>[]));for(let s=0;s<e.length-1;s+=1){for(let r=s+1;r<e.length;r+=1){const{a:o,b:c,point:a}=no(e[s],e[r],ut,ut,t);if(a===undefined){continue}n[s].push(o);n[r].push(c)}}return n};const Vo=({edges_vertices:e,vertices_edges:t},n)=>{const s=t[n].sort(((e,t)=>e-t));const r=s.flatMap((t=>e[t])).filter((e=>e!==n)).slice(0,2);e[s[0]]=r;e[s[1]]=undefined;r.forEach((e=>{const n=t[e].indexOf(s[1]);if(n===-1){return}t[e][n]=s[0]}));return s[1]};const Po=({vertices_coords:e,edges_vertices:t,edges_assignment:n,edges_foldAngle:s},r=a)=>{const{lines:o,edges_line:c}=Fo({vertices_coords:e,edges_vertices:t},r);const i=o.map((({vector:e})=>_(e)));const f=On(c);const l=t.map(((t,n)=>t.map((t=>e[t])).map((e=>C(j(e,o[c[n]].origin),o[c[n]].vector)))));const d=f.map((e=>e.flatMap((e=>l[e])))).map((e=>mn(e,r)));const u=Co(o,r).map((e=>mn(e,r))).map(((e,t)=>e.map((e=>e*i[t])))).map(((e,t)=>pn(e,d[t],r)));const m=f.map((e=>e.flatMap((e=>l[e]))));const g=f.map((e=>wn(e).map((e=>[e*2,e*2+1]))));const p=f.map(((e,t)=>bo(m[t],{edges_vertices:g[t]},r)));const h=p.map((e=>e.map((e=>e.t))));const v=p.map((e=>{const t={};const n=e.map((e=>{e.start.forEach((e=>{t[e]=true}));e.end.forEach((e=>{delete t[e]}));return Object.keys(t).map((e=>parseInt(e,10)))}));n.pop();return n}));u.forEach(((e,t)=>{const n=h[t];const s=v[t];let r=0;let o=0;while(r<e.length&&o<n.length-1){if(e[r]<=n[o]){throw new Error("bad algorithm")}if(e[r]>n[o+1]){o+=1;continue}n.splice(o+1,0,e[r]);s.splice(o+1,0,s[o]);r+=1}}));const b=h.flatMap(((e,t)=>e.map((e=>e/i[t])).map((e=>w(o[t].origin,M(o[t].vector,e))))));let y=0;const E=v.map((e=>{const t=e.map((()=>[y,++y]));y+=1;return t})).flatMap(((e,t)=>e.filter(((e,n)=>v[t][n].length))));const A={vertices_coords:b,edges_vertices:E};if(n||s){const e=v.flatMap((e=>e.filter((e=>e.length))));if(n){A.edges_assignment=e.map((e=>n[e[0]]))}if(s){A.edges_foldAngle=e.map((e=>s[e[0]]))}}Un(A,Rn(A));Nn(A,r);br(A);A.vertices_edges=Ts(A);const x=A.vertices_edges.map(((e,t)=>e.length===2?t:undefined)).filter((e=>e!==undefined)).filter((e=>ko(A,e,r))).reverse();const k=x.map((e=>Vo(A,e)));$n(A,"edges",k);$n(A,"vertices",x);const O=gr(A);if(O.length){pr(A,O)}if(hr(A).length){console.error("planarize: found circular edges")}delete A.vertices_edges;return A};const To=e=>{const t=e.edges_vertices.length;if(!e.edges_assignment){e.edges_assignment=[]}if(!e.edges_foldAngle){e.edges_foldAngle=[]}if(e.edges_assignment.length>e.edges_foldAngle.length){for(let t=e.edges_foldAngle.length;t<e.edges_assignment.length;t+=1){e.edges_foldAngle[t]=Ot(e.edges_assignment[t])}}if(e.edges_foldAngle.length>e.edges_assignment.length){for(let t=e.edges_assignment.length;t<e.edges_foldAngle.length;t+=1){e.edges_assignment[t]=jt(e.edges_foldAngle[t])}}for(let n=e.edges_assignment.length;n<t;n+=1){e.edges_assignment[n]="U";e.edges_foldAngle[n]=0}};const No=(e,t)=>{if(t===undefined&&!e.faces_vertices&&!e.faces_edges&&e.vertices_coords&&It(e)===2){t=true}if(t&&e.vertices_coords){const t=or(e);e.faces_vertices=t.faces_vertices;e.faces_edges=t.faces_edges;return}if(e.faces_vertices&&e.faces_edges){return}if(e.faces_vertices&&!e.faces_edges){e.faces_edges=ar(e)}else if(e.faces_edges&&!e.faces_vertices){e.faces_vertices=cr(e)}else{e.faces_vertices=[];e.faces_edges=[]}};const zo=(e,t)=>{if(typeof e!=="object"){return e}if(!e.edges_vertices){return e}e.vertices_edges=Ts(e);e.vertices_vertices=$s(e);e.vertices_edges=Ns(e);To(e);No(e,t);e.vertices_faces=Is(e);e.edges_faces=Hs(e);e.faces_faces=ir(e);return e};const Bo=({vertices_vertices:e},t,n)=>{if(!e){return}e[t]=[...n];n.forEach(((n,s,r)=>{const o=r[(s+1)%r.length];const c=e[n].indexOf(o);e[n][c]=t}))};const $o=({vertices_coords:e,vertices_vertices:t,vertices_sectors:n},s)=>{if(!n){return}n[s]=t[s].length===1?[l]:ls(t[s].map((t=>j(e[t],e[s]))))};const Ro=({vertices_edges:e},t,n,s,r)=>{if(!e){return}e[n]=[...r];s.map((n=>e[n].indexOf(t))).forEach(((t,n)=>{e[s[n]][t]=r[n]}))};const Lo=({vertices_faces:e},t,n)=>{if(!e){return}e[t]=[...n]};const Io=({edges_faces:e},t,n)=>{if(!e){return}t.forEach((t=>{e[t]=[...n]}))};const Uo=({faces_vertices:e},t,n,s)=>{if(!e){return}s.map((t=>e[t])).forEach((e=>e.map(((e,t,s)=>{const r=(t+1)%s.length;return e===n[0]&&s[r]===n[1]||e===n[1]&&s[r]===n[0]?r:undefined})).filter((e=>e!==undefined)).sort(((e,t)=>t-e)).forEach((n=>e.splice(n,0,t)))))};const Qo=({edges_vertices:e,faces_vertices:t,faces_edges:n},s)=>{const r=Us({edges_vertices:e});s.map((e=>t[e].map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>r[e.join(" ")])))).forEach(((e,t)=>{n[s[t]]=e}))};const Do=({vertices_faces:e,edges_vertices:t,edges_faces:n,faces_edges:s,faces_vertices:r},o)=>{if(n&&n[o]){return n[o]}const c=t[o];if(e!==undefined){const t=[];for(let n=0;n<e[c[0]].length;n+=1){for(let s=0;s<e[c[1]].length;s+=1){if(e[c[0]][n]===e[c[1]][s]){if(e[c[0]][n]===undefined){continue}t.push(e[c[0]][n])}}}return t}if(s){const e=[];for(let t=0;t<s.length;t+=1){for(let n=0;n<s[t].length;n+=1){if(s[t][n]===o){e.push(t)}}}return e}if(r){console.warn("todo: findAdjacentFacesToEdge")}};const qo=(e,t,n)=>{const s=e.edges_vertices[t];const r=[{edges_vertices:[s[0],n]},{edges_vertices:[n,s[1]]}];r.forEach((n=>["edges_assignment","edges_foldAngle"].filter((n=>e[n]&&e[n][t]!==undefined)).forEach((s=>{n[s]=e[s][t]}))));return r};const Wo=(e,t,n,s=a)=>{if(e.edges_vertices.length<t){return{}}const r=e.edges_vertices[t];if(!n){n=P(...r.map((t=>e.vertices_coords[t])))}const o=r.map((t=>e.vertices_coords[t])).map((e=>I(e,n)<s));if(o[0]){return{vertex:r[0],edges:{}}}if(o[1]){return{vertex:r[1],edges:{}}}const c=e.vertices_coords.length;e.vertices_coords[c]=n;const i=[0,1].map((t=>t+e.edges_vertices.length));qo(e,t,c).forEach(((t,n)=>Object.keys(t).forEach((s=>{e[s][i[n]]=t[s]}))));Bo(e,c,r);$o(e,c);Ro(e,t,c,r,i);const f=Do(e,t);if(f){Lo(e,c,f);Io(e,i,f);Uo(e,c,r,f);Qo(e,f)}const l=$n(e,"edges",[t]);i.forEach(((e,t)=>{i[t]=l[i[t]]}));l.splice(-2);l[t]=i;return{vertex:c,edges:{map:l,new:i,remove:t}}};const Go=({vertices_coords:e},t,n)=>{const s=t.map((t=>e[t])).reverse();return{edges_vertices:[...t],edges_foldAngle:0,edges_assignment:"U",edges_length:I(...s),edges_vector:O(...s),edges_faces:[n,n]}};const Ho=(e,t,n)=>{const s=e.edges_vertices.length;const r=Go(e,n,t);Object.keys(r).filter((t=>e[t]!==undefined)).forEach((t=>{e[t][s]=r[t]}));return s};const Jo=({edges_vertices:e,faces_vertices:t,faces_edges:n},s,r)=>{const o=r.map((e=>t[s].indexOf(e)));const c=fn(t[s],o).map((e=>({faces_vertices:e})));if(n){const t=Us({edges_vertices:e});c.map((e=>e.faces_vertices.map(((e,t,n)=>`${e} ${n[(t+1)%n.length]}`)).map((e=>t[e])))).forEach(((e,t)=>{c[t].faces_edges=e}))}return c};const Zo=(e,t,n)=>{const s=[0,1].map((t=>e.faces_vertices.length+t));Jo(e,t,n).forEach(((t,n)=>Object.keys(t).forEach((r=>{e[r][s[n]]=t[r]}))));return s};const Yo=(e,{vertices:t,edges:n})=>{let s;const r=n.map((t=>{const n=Wo(e,s?s[t.edge]:t.edge,t.coords);s=s?Mn(s,n.edges.map):n.edges.map;return n}));t.push(...r.map((e=>e.vertex)));let o;r.forEach((e=>{e.edges.remove=o?o[e.edges.remove]:e.edges.remove;const t=wn(e.edges.map);o=o?xn(o,t):t}));return{vertices:t,edges:{map:s,remove:r.map((e=>e.edges.remove))}}};const Xo=({vertices_coords:e,vertices_vertices:t,edges_vertices:n},s)=>{const r=n[s][0];const o=n[s][1];t[r]=js({vertices_coords:e},t[r].concat(o),r);t[o]=js({vertices_coords:e},t[o].concat(r),o)};const Ko=({edges_vertices:e,vertices_edges:t,vertices_vertices:n},s)=>{if(!t||!n){return}const r=e[s];r.map((e=>n[e])).map(((e,t)=>e.indexOf(r[(t+1)%r.length]))).forEach(((e,n)=>t[r[n]].splice(e,0,s)))};const ec=(e,t,s)=>{const r={};s.forEach((t=>e.faces_vertices[t].forEach((e=>{if(!r[e]){r[e]=[]}r[e].push(t)}))));e.faces_vertices[t].forEach((s=>{const o=e.vertices_faces[s].indexOf(t);const c=r[s];if(o===-1||!c){throw new Error(n.convexFace)}e.vertices_faces[s].splice(o,1,...c)}))};const tc=(e,t,s,r)=>{const o={};r.forEach((t=>e.faces_edges[t].forEach((e=>{if(!o[e]){o[e]=[]}o[e].push(t)}))));const c=[...e.faces_edges[t],s];c.forEach((s=>{const r=o[s];const c=[];for(let n=0;n<e.edges_faces[s].length;n+=1){if(e.edges_faces[s][n]===t){c.push(n)}}if(c.length===0||!r){throw new Error(n.convexFace)}c.reverse().forEach((t=>e.edges_faces[s].splice(t,1)));const a=c[c.length-1];e.edges_faces[s].splice(a,0,...r)}))};const nc=({faces_vertices:e,faces_faces:t},n,s)=>{const r=t[n];const o=s.map((t=>e[t]));const c=r.map((t=>{const n=e[t];const r=[0,0];for(let e=0;e<o.length;e+=1){let t=0;for(let s=0;s<n.length;s+=1){if(o[e].indexOf(n[s])!==-1){t+=1}}r[e]=t}if(r[0]>=2){return s[0]}if(r[1]>=2){return s[1]}}));s.forEach(((e,n,r)=>{t[e]=[r[(n+1)%s.length]]}));r.forEach(((e,s)=>{for(let r=0;r<t[e].length;r+=1){if(t[e][r]===n){t[e][r]=c[s];t[c[s]].push(e)}}}))};const sc=()=>0;const rc=(e,t)=>e<-t?-1:0;const oc=(e,t)=>e<-t?-1:e>1+t?1:0;const cc=({vertices_coords:e,faces_vertices:t},{vector:n,origin:s},r=sc,o=a)=>{const c=C(n,n);const i=b(n);const f=e.map((e=>j(e,s))).map((e=>b(e))).map((e=>R(i,e))).map((e=>Math.abs(e)<o?0:Math.sign(e)));const l=e.map((e=>j(e,s))).map((e=>C(e,n))).map((e=>e/c)).map((e=>r(e,o)));const d=t.map((e=>e.map((e=>f[e])).map(((e,t,n)=>e===n[0])).reduce(((e,t)=>e&&t),true))).map((e=>!e));const u=t.map((e=>e.map((e=>l[e])).map(((e,t,n)=>e===n[0])).reduce(((e,t)=>e&&t),true))).map((e=>!e)).map(((e,n)=>e||l[t[n][0]]===0));return t.map(((e,t)=>t)).filter((e=>d[e]&&u[e]))};const ac=(e,{vector:t,origin:n},s=a)=>cc(e,{vector:t,origin:n},sc,s);const ic=(e,{vector:t,origin:n},s=a)=>cc(e,{vector:t,origin:n},rc,s);const fc=(e,t,n=a)=>{const s=j(t[1],t[0]);const r=t[0];return cc(e,{vector:s,origin:r},oc,n)};const lc=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},r,{vector:o,origin:c},i=a)=>{const f=n[r].map((t=>e[t])).map((e=>Ir({vector:o,origin:c},e,(()=>true),i))).map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined));const l=f.map((e=>n[r][e]));const d=f.concat(f.map((e=>e+n[r].length))).map(((e,t,n)=>n[t+1]-e===1)).reduce(((e,t)=>e||t),false);if(d){return undefined}if(l.length>1){return{vertices:l,edges:[]}}const u=s[r].map((n=>t[n].map((t=>e[t])))).map((e=>no({vector:o,origin:c},{vector:j(e[1],e[0]),origin:e[0]},it,mt,i).point)).map(((e,t)=>({coords:e,edge:s[r][t]}))).filter((e=>e.coords!==undefined)).filter((e=>!l.map((n=>t[e.edge].includes(n))).reduce(((e,t)=>e||t),false)));return u.length+l.length===2?{vertices:l,edges:u}:undefined};const dc=Object.freeze({__proto__:null,facesLineTypeOverlap:cc,getFacesLineOverlap:ac,getFacesRayOverlap:ic,getFacesSegmentOverlap:fc,intersectConvexFaceLine:lc});const uc=(e,t,n,s)=>{const r=lc(e,t,n,s);if(r===undefined){return undefined}const o=Yo(e,r);o.edges.new=Ho(e,t,o.vertices);Xo(e,o.edges.new);Ko(e,o.edges.new);const c=Zo(e,t,o.vertices);ec(e,t,c);tc(e,t,o.edges.new,c);nc(e,t,c);const a=$n(e,"faces",[t]);c.forEach(((e,t)=>{c[t]=a[c[t]]}));a.splice(-2);a[t]=c;o.faces={map:a,new:c,remove:t};return o};const mc=(e,t)=>{const n={};t.forEach((e=>{n[e]=true}));const s=[];t.forEach((t=>{s[t]=e[t].filter((e=>n[e]))}));return s};const gc=(e,t={})=>{const n={vertices:[],edges:[],faces:[],...t};const s=Object.keys(n);const r={...e};pt.graph.forEach((e=>delete r[e]));delete r.file_frames;const o={};s.forEach((e=>{o[e]={}}));s.forEach((e=>n[e].forEach((t=>{o[e][t]=true}))));const c={};s.forEach((t=>{Vt(e,t).forEach((e=>{c[e]={}}));Pt(e,t).forEach((e=>{c[e]={}}))}));s.forEach((t=>{Vt(e,t).forEach((e=>{c[e].prefix=t}));Pt(e,t).forEach((e=>{c[e].suffix=t}))}));Object.keys(c).forEach((e=>{r[e]=[]}));Object.keys(c).forEach((t=>{const{prefix:s,suffix:a}=c[t];if(s&&a){n[s].forEach((n=>{r[t][n]=e[t][n].filter((e=>o[a][e]))}))}else if(s){n[s].forEach((n=>{r[t][n]=e[t][n]}))}else if(a){r[t]=e[t].map((e=>e.filter((e=>o[a][e]))))}else{r[t]=e[t]}}));return r};const pc=(e,t={})=>{const n={vertices:[],edges:[],faces:[],...t};const s={vertices:{},edges:{},faces:{}};n.vertices.forEach((e=>{s.vertices[e]=true}));n.edges.forEach((e=>{s.edges[e]=true}));n.edges.forEach((t=>e.edges_vertices[t].forEach((e=>{s.vertices[e]=true}))));n.faces.forEach((e=>{s.faces[e]=true}));n.faces.forEach((t=>e.faces_vertices[t].forEach((e=>{s.vertices[e]=true}))));e.faces_vertices.map(((e,t)=>t)).filter((t=>e.faces_vertices[t].map((e=>s.vertices[e])).reduce(((e,t)=>e&&t),true))).forEach((e=>{s.faces[e]=true}));e.edges_vertices.map(((e,t)=>t)).filter((t=>e.edges_vertices[t].map((e=>s.vertices[e])).reduce(((e,t)=>e&&t),true))).forEach((e=>{s.edges[e]=true}));return gc(e,{vertices:Object.keys(s.vertices),edges:Object.keys(s.edges),faces:Object.keys(s.faces)})};const _c=(e,t)=>{let n=[];if(e.faces_vertices){n=un(t.flatMap((t=>e.faces_vertices[t])))}let s=[];if(e.faces_edges){s=un(t.flatMap((t=>e.faces_edges[t])))}else if(e.edges_vertices){const t={};n.forEach((e=>{t[e]=true}));s=e.edges_vertices.map(((e,n)=>t[e[0]]&&t[e[1]]?n:undefined)).filter((e=>e!==undefined))}return gc(e,{vertices:n,edges:s,faces:t})};const hc=(e,t=[])=>{const n={vertices:[],edges:[]};t.forEach((e=>{n.vertices[e]=true}));if(e.vertices_edges){n.vertices.forEach(((t,s)=>e.vertices_edges[s].forEach((e=>{n.edges[e]=true}))))}if(e.edges_vertices){n.edges.forEach(((t,s)=>e.edges_vertices[s].forEach((e=>{n.vertices[e]=true}))))}return gc(e,{vertices:n.vertices.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined)),edges:n.edges.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined))})};const vc=Object.freeze({__proto__:null,selfRelationalArraySubset:mc,subgraph:pc,subgraphExclusive:gc,subgraphWithFaces:_c,subgraphWithVertices:hc});const bc=(e,t)=>{const n={};e.forEach((e=>{n[e]=1}));t.forEach((e=>{n[e]=n[e]===1?2:1}));return Object.keys(n).filter((e=>n[e]===2))};const yc=(e=[])=>{if(e.length<2){return[]}const t={};e[0].forEach(((e,n)=>{t[n]=true}));return Array.from(Array(e.length-1)).map(((t,n)=>e[n+1])).flatMap(((e,n)=>e.map(((e,s)=>t[s]?undefined:[0,n+1,s])).filter((e=>e!==undefined))))};const Ec=e=>{const t=Tt(e).filter((e=>e!=="file"&&e!=="frame"));const n=Nt(e);const s=t.map((t=>Vt(e,t)));const r=s.map((t=>t.map((t=>e[t])).filter((e=>e.constructor===Array)))).map(yc).flatMap(((e,t)=>e.map((e=>[s[t][e[0]],s[t][e[1]],e[2]])))).map((([e,t,n])=>`array indices differ ${e}, ${t} at index ${n}`));const o=bc(t,n).flatMap((n=>{const r=s[t.indexOf(n)];const o=e[r[0]];return Pt(e,n).flatMap((t=>e[t].flatMap(((e,s)=>e.map(((e,c)=>e===null||e===undefined||o[e]!==undefined?undefined:`${t}[${s}][${c}] references ${n} ${e}, missing in ${r[0]}`)).filter((e=>e!==undefined))))))}));return r.concat(o)};const Mc=(e,t)=>{const n=Ec(e);const s=gr(e);const r=hr(e);const o=In(e);const c=Tn(e,t);if(r.length!==0){n.push(`contains circular edges: ${r.join(", ")}`)}if(o.length!==0){n.push(`contains isolated vertices: ${o.join(", ")}`)}if(s.length!==0){n.push("contains duplicate edges")}if(c.length!==0){n.push(`contains duplicate vertices`)}return n};const Ac=Object.freeze({__proto__:null,validate:Ec,validateComprehensive:Mc});const xc=e=>{const t=[];const n=(s,r)=>{if(t[s]!==undefined){return 0}t[s]=r;e[s].forEach((e=>n(e,r)));return 1};for(let t=0,s=0;t<e.length;t+=1){if(!(t in e)){continue}s+=n(t,s)}return t};const wc=e=>{const t=[];const n=[];e.forEach(((e,s)=>e.forEach((e=>{if(s<e){n.push([s,e])}if(s===e&&!t[s]){t[s]=true;n.push([s,e])}}))));return n};const kc=Object.freeze({__proto__:null,connectedComponents:xc,connectedComponentsPairs:wc});const Oc=e=>{const t=e.edges_vertices||[];const n=e.faces_vertices||[];const s=e.vertices_edges?e.vertices_edges:Ts({edges_vertices:t});const r=e.vertices_vertices?e.vertices_vertices:Rs({vertices_edges:s,edges_vertices:t});const o=e.vertices_faces?e.vertices_faces:Ls({vertices_edges:s,faces_vertices:n});const c=On(xc(r));const a=c.map((e=>e.flatMap((e=>s[e])))).map(ln);const i=c.map((e=>e.flatMap((e=>o[e])))).map(ln);return Array.from(Array(c.length)).map(((e,t)=>({vertices:c[t]||[],edges:a[t]||[],faces:i[t]||[]})))};const jc=e=>{const t=Oc(e);const n=Vt(e,"vertices");const s=Vt(e,"edges");const r=Vt(e,"faces");return t.map((({vertices:t,edges:o,faces:c})=>{const a={};n.forEach((n=>{a[n]=[];t.forEach((t=>{a[n][t]=e[n][t]}))}));s.forEach((t=>{a[t]=[];o.forEach((n=>{a[t][n]=e[t][n]}))}));r.forEach((t=>{a[t]=[];c.forEach((n=>{a[t][n]=e[t][n]}))}));return a}))};const Fc=Object.freeze({__proto__:null,disjointGraphs:jc,disjointGraphsIndices:Oc});const Sc=({vertices_coords:e},t)=>tt(e,t);const Cc=({edges_vertices:e,edges_assignment:t=[]})=>ln(e.filter(((e,n)=>kt[t[n]])).flat());const Vc=()=>({vertices:[],edges:[],polygon:[]});const Pc=({vertices_coords:e,vertices_edges:t,edges_vertices:n,edges_assignment:s})=>{if(!s||!n){return Vc()}if(!t){t=Ts({edges_vertices:n})}const r=s.map((e=>e==="B"||e==="b"));const o=[];const c=[];let a=-1;for(let e=0;e<r.length;e+=1){if(r[e]){a=e;break}}if(a===-1){return Vc()}r[a]=false;o.push(a);c.push(n[a][0]);let i=n[a][1];while(c[0]!==i){c.push(i);a=t[i].filter((e=>r[e])).shift();if(a===undefined){return Vc()}if(n[a][0]===i){[,i]=n[a]}else{[i]=n[a]}r[a]=false;o.push(a)}return{vertices:c,edges:o,polygon:e?c.map((t=>e[t])):[]}};const Tc=()=>console.error("todo");const Nc=({vertices_coords:e,vertices_edges:t,vertices_vertices:n,edges_vertices:s})=>{if(!n){n=zs({vertices_coords:e,vertices_edges:t,edges_vertices:s})}const r=Us({edges_vertices:s});const o=[];const c=[];const a={vertices:c,edges:o};let i=-Infinity;let f=-1;e.forEach(((e,t)=>{if(e[0]>i){i=e[0];f=t}}));if(f===-1){return a}c.push(f);const l=e[f];const d=n[f];if(!d){return a}const u=d.map((t=>e[t])).map((e=>[e[0]-l[0],e[1]-l[1]])).map((e=>Math.atan2(e[1],e[0]))).map((e=>e<0?e+Math.PI*2:e)).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).shift().i;const m=d[u];const g=f<m?`${f} ${m}`:`${m} ${f}`;const p=r[g];o.push(p);let _=f;let h=m;const v={[`${_} ${h}`]:true};while(true){const e=n[h];const t=e.indexOf(_);const s=(t+1)%e.length;const i=e[s];const f=h<i?`${h} ${i}`:`${i} ${h}`;const l=r[f];if(v[`${h} ${i}`]){if(l!==o[0]){console.warn("bad boundary")}return a}v[`${h} ${i}`]=true;c.push(h);o.push(l);_=h;h=i}};const zc=({vertices_coords:e,vertices_edges:t,vertices_vertices:n,edges_vertices:s})=>{if(!n){n=zs({vertices_coords:e,vertices_edges:t,edges_vertices:s})}return jc({vertices_coords:e,vertices_vertices:n,edges_vertices:s}).map(Nc)};const Bc=Object.freeze({__proto__:null,boundaries:Tc,boundary:Pc,boundaryVertices:Cc,boundingBox:Sc,planarBoundaries:zc,planarBoundary:Nc});const $c=(e,t)=>{const n={};t.forEach((e=>{n[e]=true}));const s=e.map((e=>!!n[e]));const r=[];const o=s.indexOf(false);const c={};for(let t=o+1;t<s.length;t+=1){if(s[t]&&!c[e[t]]){r.push(e[t]);c[e[t]]=true}}for(let t=0;t<o;t+=1){if(s[t]&&!c[e[t]]){r.push(e[t]);c[e[t]]=true}}return r};const Rc=Object.freeze({__proto__:null,getFaceFaceSharedVertices:$c});const Lc=(e=[],t=0)=>{if(e.length===0){return[]}const n=[];const s={};e.forEach(((e,t)=>{s[t]=true}));do{const r=t!==undefined&&s[t]?t:parseInt(Object.keys(s).shift(),10);t=undefined;const o=[];delete s[r];let c=[{index:r}];do{o.push(c);const t=c.flatMap((t=>e[t.index].filter((e=>s[e])).map((e=>({index:e,parent:t.index})))));const n={};t.forEach(((e,t)=>{if(!s[e.index]){n[t]=true}delete s[e.index]}));c=t.filter(((e,t)=>!n[t]))}while(c.length);n.push(o)}while(Object.keys(s).length);return n};const Ic=(e,t)=>Lc(e,t).shift();const Uc=Object.freeze({__proto__:null,minimumSpanningTree:Ic,minimumSpanningTrees:Lc});const Qc=({vertices_coords:e,vertices_faces:t,faces_vertices:n},s)=>{if(!t){t=Is({faces_vertices:n})}const r=t.map((e=>e.filter((e=>e!=null)).shift())).map((e=>e===undefined?re:s[e]));return e.map(((e,t)=>oe(r[t],e)))};const Dc={U:true,u:true};const qc=({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_faces:o},c=0)=>{if(!s&&n){s=Ys({edges_foldAngle:n})}if(!n){if(s){n=Ks({edges_assignment:s})}else{n=Array(t.length).fill(0)}}if(!o){o=ir({faces_vertices:r})}const a=Us({edges_vertices:t});const i=r.map((()=>he));Lc(o,c).forEach((t=>t.slice(1).forEach((t=>t.forEach((t=>{const o=$c(r[t.index],r[t.parent]).slice(0,2);const c=o.map((t=>e[t]));const f=o.join(" ");const l=a[f];const d=Dc[s[l]]?Math.PI:n[l]*Math.PI/180;const u=Fe(d,O(...X(c[1],c[0])),c[0]);i[t.index]=Ee(i[t.parent],u)}))))));return i};const Wc=({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_faces:o},c=0)=>{if(!n){if(s){n=Ks({edges_assignment:s})}else{n=Array(t.length).fill(0)}}if(!o){o=ir({faces_vertices:r})}const a=Qt({edges_vertices:t,edges_foldAngle:n,edges_assignment:s});const i=Us({edges_vertices:t});const f=r.map((()=>re));Lc(o,c).forEach((t=>t.slice(1).forEach((t=>t.forEach((t=>{const n=$c(r[t.index],r[t.parent]).slice(0,2);const s=n.map((t=>e[t]));const o=n.join(" ");const c=i[o];const l=j(s[1],s[0]);const d=s[0];const u=a[c]?ge(l,d):re;f[t.index]=ae(f[t.parent],u)}))))));return f};const Gc=Object.freeze({__proto__:null,makeFacesMatrix:qc,makeFacesMatrix2:Wc,multiplyVerticesFacesMatrix2:Qc});const Hc=({vertices_coords:e,vertices_faces:t,edges_vertices:n,edges_foldAngle:s,edges_assignment:r,faces_vertices:o,faces_faces:c,faces_matrix:a},i)=>{if(!e||!e.length){return[]}if(!o||!o.length){return e}a=qc({vertices_coords:e,edges_vertices:n,edges_foldAngle:s,edges_assignment:r,faces_vertices:o,faces_faces:c},i);if(!t){t=Is({faces_vertices:o})}const f=t.map((e=>e.filter((e=>e!=null)).shift())).map((e=>e===undefined?he:a[e]));return e.map((e=>Y(3,e))).map(((e,t)=>be(f[t],e)))};const Jc=({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_faces:o},c=0)=>{if(!e||!e.length){return[]}if(!r||!r.length){return e}if(!o){o=ir({faces_vertices:r})}const a=Qt({edges_vertices:t,edges_foldAngle:n,edges_assignment:s});const i=[];const f=[];const l=Us({edges_vertices:t});Lc(o,c).forEach((n=>{const s=n.shift();if(!s||!s.length){return}const o=s[0];f[o.index]=false;r[o.index].forEach((t=>{i[t]=[...e[t]]}));n.forEach((n=>n.forEach((n=>{const s=$c(r[n.index],r[n.parent]).slice(0,2).join(" ");const o=l[s];const c=t[o].map((e=>i[e]));if(c[0]===undefined||c[1]===undefined){return}const d=t[o].map((t=>e[t]));const u=d[0];const m=b(j(d[1],d[0]));const g=q(m);f[n.index]=a[o]?!f[n.parent]:f[n.parent];const p=b(j(c[1],c[0]));const _=c[0];const h=f[n.index]?W(p):q(p);r[n.index].filter((e=>i[e]===undefined)).forEach((t=>{const n=j(e[t],u);const s=S(n,g);const r=S(n,m);const o=M(p,r);const c=M(h,s);const a=w(w(_,o),c);i[t]=a}))}))))}));return i};const Zc=Object.freeze({__proto__:null,makeVerticesCoordsFlatFolded:Jc,makeVerticesCoordsFolded:Hc});const Yc=function(e){let t;let n;if(typeof e!=="object"){return e}if(!e){return e}if(Object.prototype.toString.apply(e)==="[object Array]"){t=[];for(n=0;n<e.length;n+=1){t[n]=Yc(e[n])}return t}t={};for(n in e){if(e.hasOwnProperty(n)){t[n]=Yc(e[n])}}return t};const Xc=typeof structuredClone==="function"?structuredClone:Yc;const Kc="class";const ea="function";const ta="undefined";const na="boolean";const sa="number";const ra="string";const oa="object";const ca="svg";const aa="path";const ia="id";const fa="style";const la="viewBox";const da="transform";const ua="points";const ma="stroke";const ga="fill";const pa="none";const _a="arrow";const ha="head";const va="tail";const ba=typeof window!==ta&&typeof window.document!==ta;typeof process!==ta&&process.versions!=null&&process.versions.node!=null;const ya={window:"window not set; svg.window = @xmldom/xmldom"};const Ea={window:undefined};const Ma=e=>(new e.DOMParser).parseFromString("<!DOCTYPE html><title>.</title>","text/html");const Aa=e=>{if(!e.document){e.document=Ma(e)}Ea.window=e;return Ea.window};if(ba){Ea.window=window}const xa=()=>{if(Ea.window===undefined){throw ya.window}return Ea.window};const wa="http://www.w3.org/2000/svg";const ka={presentation:["color","color-interpolation","cursor","direction","display","fill","fill-opacity","fill-rule","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","image-rendering","letter-spacing","opacity","overflow","paint-order","pointer-events","preserveAspectRatio","shape-rendering","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","tabindex","transform-origin","user-select","vector-effect","visibility"],animation:["accumulate","additive","attributeName","begin","by","calcMode","dur","end","from","keyPoints","keySplines","keyTimes","max","min","repeatCount","repeatDur","restart","to","values"],effects:["azimuth","baseFrequency","bias","color-interpolation-filters","diffuseConstant","divisor","edgeMode","elevation","exponent","filter","filterRes","filterUnits","flood-color","flood-opacity","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","lighting-color","limitingConeAngle","mode","numOctaves","operator","order","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","primitiveUnits","radius","result","seed","specularConstant","specularExponent","stdDeviation","stitchTiles","surfaceScale","targetX","targetY","type","xChannelSelector","yChannelSelector"],text:["dx","dy","alignment-baseline","baseline-shift","dominant-baseline","lengthAdjust","method","overline-position","overline-thickness","rotate","spacing","startOffset","strikethrough-position","strikethrough-thickness","text-anchor","text-decoration","text-rendering","textLength","underline-position","underline-thickness","word-spacing","writing-mode"],gradient:["gradientTransform","gradientUnits","spreadMethod"]};const Oa={svg:["svg"],defs:["defs"],header:["desc","filter","metadata","style","script","title","view"],cdata:["cdata"],group:["g"],visible:["circle","ellipse","line","path","polygon","polyline","rect","arc","arrow","curve","parabola","roundRect","wedge","origami"],text:["text"],invisible:["marker","symbol","clipPath","mask"],patterns:["linearGradient","radialGradient","pattern"],childrenOfText:["textPath","tspan"],gradients:["stop"],filter:["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]};const ja={svg:[la],line:["x1","y1","x2","y2"],rect:["x","y","width","height"],circle:["cx","cy","r"],ellipse:["cx","cy","rx","ry"],polygon:[ua],polyline:[ua],path:["d"],text:["x","y"],mask:[ia],symbol:[ia],clipPath:[ia,"clip-rule"],marker:[ia,"markerHeight","markerUnits","markerWidth","orient","refX","refY"],linearGradient:["x1","x2","y1","y2"],radialGradient:["cx","cy","r","fr","fx","fy"],stop:["offset","stop-color","stop-opacity"],pattern:["patternContentUnits","patternTransform","patternUnits"]};const Fa=[{nodes:[ca,"defs","g"].concat(Oa.visible,Oa.text),attr:ka.presentation},{nodes:["filter"],attr:ka.effects},{nodes:Oa.childrenOfText.concat("text"),attr:ka.text},{nodes:Oa.filter,attr:ka.effects},{nodes:Oa.gradients,attr:ka.gradient}];Fa.forEach((e=>e.nodes.forEach((t=>{if(!ja[t]){ja[t]=[]}ja[t].push(...e.attr)}))));const Sa=[Oa.header,Oa.invisible,Oa.patterns].flat();const Ca=[Oa.group,Oa.visible,Oa.text].flat();const Va={svg:[["svg","defs"],Sa,Ca].flat(),defs:Sa,filter:Oa.filter,g:Ca,text:Oa.childrenOfText,marker:Ca,symbol:Ca,clipPath:Ca,mask:Ca,linearGradient:Oa.gradients,radialGradient:Oa.gradients};const Pa=Object.values(Oa).flat();const Ta={black:"#000000",silver:"#c0c0c0",gray:"#808080",white:"#ffffff",maroon:"#800000",red:"#ff0000",purple:"#800080",fuchsia:"#ff00ff",green:"#008000",lime:"#00ff00",olive:"#808000",yellow:"#ffff00",navy:"#000080",blue:"#0000ff",teal:"#008080",aqua:"#00ffff",orange:"#ffa500",aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",blanchedalmond:"#ffebcd",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",oldlace:"#fdf5e6",olivedrab:"#6b8e23",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",whitesmoke:"#f5f5f5",yellowgreen:"#9acd32"};const Na=e=>Math.round(e*100)/100;const za=(e,t,n,s)=>{const r=t/100;const o=n/100;const c=t=>(t+e/30)%12;const a=r*Math.min(o,1-o);const i=e=>o-a*Math.max(-1,Math.min(c(e)-3,Math.min(9-c(e),1)));return s===undefined?[i(0)*255,i(8)*255,i(4)*255]:[i(0)*255,i(8)*255,i(4)*255,s]};const Ba=(e,t)=>{const n=Array.from(Array(t.length)).map(((t,n)=>e[n]||"0"));return e.length<=4?t.map((e=>n[e])).join(""):n.join("")};const $a=e=>{const t=e.replace(/#(?=\S)/g,"");const n=t.length===4||t.length===8;const s=n?Ba(t,[0,0,1,1,2,2,3,3]):Ba(t,[0,0,1,1,2,2]);const r=parseInt(s,16);return n?[r>>24&255,r>>16&255,r>>8&255,Na((r&255)/256)]:[r>>16&255,r>>8&255,r&255]};const Ra=(e,t,n,s)=>{const r=e=>`00${Math.max(0,Math.min(Math.round(e),255)).toString(16)}`.slice(-2);const o=`#${[e,t,n].map(r).join("")}`;return s===undefined?o:`${o}${r(s*255)}`};const La=Object.freeze({__proto__:null,hexToRgb:$a,hslToRgb:za,rgbToHex:Ra});const Ia=e=>{const t=e.match(/\(([^\)]+)\)/g);if(t==null||!t.length){return[]}return t[0].substring(1,t[0].length-1).split(/[\s,]+/).map(parseFloat)};const Ua=e=>{if(Ta[e]){return $a(Ta[e])}if(e[0]==="#"){return $a(e)}if(e.substring(0,4)==="rgba"||e.substring(0,3)==="rgb"){const t=Ia(e);[0,1,2].filter((e=>t[e]===undefined)).forEach((e=>{t[e]=0}));return t}if(e.substring(0,4)==="hsla"||e.substring(0,3)==="hsl"){const t=Ia(e);[0,1,2].filter((e=>t[e]===undefined)).forEach((e=>{t[e]=0}));return za(...t)}return undefined};const Qa=e=>{if(Ta[e]){return Ta[e].toUpperCase()}if(e[0]==="#"){return Ra(...$a(e))}if(e.substring(0,4)==="rgba"||e.substring(0,3)==="rgb"){return Ra(...Ia(e))}if(e.substring(0,4)==="hsla"||e.substring(0,3)==="hsl"){const t=Ia(e);[0,1,2].filter((e=>t[e]===undefined)).forEach((e=>{t[e]=0}));const n=za(...t);if(t.length===4){n.push(t[3])}return Ra(...n)}return undefined};const Da=Object.freeze({__proto__:null,parseColorToHex:Qa,parseColorToRgb:Ua});const qa={cssColors:Ta,...La,...Da};const Wa=(e,t)=>[e[0]+t[0],e[1]+t[1]];const Ga=(e,t)=>[e[0]-t[0],e[1]-t[1]];const Ha=(e,t)=>[e[0]*t,e[1]*t];const Ja=e=>e[0]**2+e[1]**2;const Za=e=>Math.sqrt(Ja(e));const Ya=(e,t)=>Ja(Ga(e,t));const Xa=(e,t)=>Math.sqrt(Ya(e,t));const Ka=(e,t)=>[Math.cos(e)*t,Math.sin(e)*t];const ei=(e,t)=>[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1],e[0]*t[2]+e[2]*t[3],e[1]*t[2]+e[3]*t[3],e[0]*t[4]+e[2]*t[5]+e[4],e[1]*t[4]+e[3]*t[5]+e[5]];const ti=Object.freeze({__proto__:null,svg_add2:Wa,svg_distance2:Xa,svg_distanceSq2:Ya,svg_magnitude2:Za,svg_magnitudeSq2:Ja,svg_multiplyMatrices2:ei,svg_polar_to_cart:Ka,svg_scale2:Ha,svg_sub2:Ga});const ni=function(e){const t=e.match(/(\w+\((\-?\d+\.?\d*e?\-?\d*,?\s*)+\))+/g);if(!t){return[]}const n=t.map((e=>e.match(/[\w\.\-]+/g)));return n.map((e=>({transform:e.shift(),parameters:e.map((e=>parseFloat(e)))})))};const si=function(e){switch(e.length){case 1:return[1,0,0,1,e[0],0];case 2:return[1,0,0,1,e[0],e[1]];default:console.warn(`improper translate, ${e}`)}return undefined};const ri=function(e){const t=Math.cos(e[0]/(180*Math.PI));const n=Math.sin(e[0]/(180*Math.PI));switch(e.length){case 1:return[t,n,-n,t,0,0];case 3:return[t,n,-n,t,-e[1]*t+e[2]*n+e[1],-e[1]*n-e[2]*t+e[2]];default:console.warn(`improper rotate, ${e}`)}return undefined};const oi=function(e){switch(e.length){case 1:return[e[0],0,0,e[0],0,0];case 2:return[e[0],0,0,e[1],0,0];default:console.warn(`improper scale, ${e}`)}return undefined};const ci=function(e){return[1,0,Math.tan(e[0]/(180*Math.PI)),1,0,0]};const ai=function(e){return[1,Math.tan(e[0]/(180*Math.PI)),0,1,0,0]};const ii=function(e,t){switch(e){case"translate":return si(t);case"rotate":return ri(t);case"scale":return oi(t);case"skewX":return ci(t);case"skewY":return ai(t);case"matrix":return t;default:console.warn(`unknown transform type ${e}`)}return undefined};const fi=function(e){return ni(e).map((e=>ii(e.transform,e.parameters))).filter((e=>e!==undefined)).reduce(((e,t)=>ei(e,t)),[1,0,0,1,0,0])};const li=Object.freeze({__proto__:null,parseTransform:ni,transformStringToMatrix:fi});const di=(e,t="text/xml")=>{const n=(new(xa().DOMParser)).parseFromString(e,t);return n?n.documentElement:null};const ui=e=>{let t=e;while(t.parentNode!=null){t=t.parentNode}return t};const mi=(e,t)=>{if((e.nodeName||"")===t){return e}return e.parentNode?mi(e.parentNode,t):undefined};const gi=(e,...t)=>{const n={};const s=e.getAttribute("class");const r=s?s.split(" "):[];r.push(...t);r.forEach((e=>{n[e]=true}));const o=Object.keys(n).join(" ");e.setAttribute("class",o)};const pi=(e,...t)=>{if(!e||!t.length){return undefined}return e.classList?e.classList.add(...t):gi(e,...t)};const _i=e=>e.childNodes==null||!e.childNodes.length?[e]:Array.from(e.childNodes).flatMap((e=>_i(e)));const hi={svg:["viewBox","xmlns","version"],line:["x1","y1","x2","y2"],rect:["x","y","width","height"],circle:["cx","cy","r"],ellipse:["cx","cy","rx","ry"],polygon:["points"],polyline:["points"],path:["d"]};const vi=e=>{const t=e.attributes;if(t==null){return[]}const n=Array.from(t);return hi[e.nodeName]?n.filter((t=>!hi[e.nodeName].includes(t.name))):n};const bi=e=>{const t={};e.forEach((e=>{t[e.nodeName]=e.value}));return t};const yi=(e,t)=>{const n=bi(vi(t));if(!n.transform&&!e.transform){return{...e,...n}}const s=n.transform||"";const r=e.transform||"";const o=fi(s);const c=fi(r);const a=ei(c,o);const i=`matrix(${a.join(", ")})`;return{...e,...n,transform:i}};const Ei=(e,t={})=>e.childNodes==null||!e.childNodes.length?[{element:e,attributes:t}]:Array.from(e.childNodes).flatMap((e=>Ei(e,yi(t,e))));const Mi=Object.freeze({__proto__:null,addClass:pi,findElementTypeInParents:mi,flattenDomTree:_i,flattenDomTreeWithStyle:Ei,getRootParent:ui,xmlStringToElement:di});const Ai=e=>(new(xa().DOMParser)).parseFromString("<root></root>","text/xml").createCDATASection(e);const xi=/[MmLlSsQqLlHhVvCcSsQqTtAaZz]/g;const wi=/-?[0-9]*\.?\d+/g;const ki={m:"move",l:"line",v:"vertical",h:"horizontal",a:"ellipse",c:"curve",s:"smoothCurve",q:"quadCurve",t:"smoothQuadCurve",z:"close"};Object.keys(ki).forEach((e=>{const t=ki[e];ki[e.toUpperCase()]=t.charAt(0).toUpperCase()+t.slice(1)}));const Oi=(e,t)=>[e[0]+(t[0]||0),e[1]+(t[1]||0)];const ji=(e,t,n=[0,0])=>{const s=e.toUpperCase();let r=e===s?[0,0]:n;if(e==="V"){r=[n[0],0]}if(e==="H"){r=[0,n[1]]}switch(s){case"V":return Oi(r,[0,t[0]]);case"H":return Oi(r,[t[0],0]);case"M":case"L":case"T":return Oi(r,t);case"A":return Oi(r,[t[5],t[6]]);case"C":return Oi(r,[t[4],t[5]]);case"S":case"Q":return Oi(r,[t[2],t[3]]);case"Z":return undefined;default:return r}};const Fi=e=>{const t=[];let n;while((n=xi.exec(e))!==null){t.push(n)}return t.map(((t,n,s)=>[t[0],t.index,n===s.length-1?e.length-1:s[(n+1)%s.length].index-1])).map((t=>{const n=t[0];const s=e.substring(t[1]+1,t[2]+1);const r=s.match(wi);const o=r?r.map(parseFloat):[];return{command:n,values:o}}))};const Si=e=>{let t=[0,0];const n=Fi(e);if(!n.length){return n}n.forEach(((e,s)=>{n[s].end=ji(e.command,e.values,t);n[s].start=s===0?t:n[s-1].end;t=n[s].end}));const s=n[n.length-1];const r=n.filter((e=>e.command.toUpperCase()!=="M"&&e.command.toUpperCase()!=="Z")).shift();if(s.command.toUpperCase()==="Z"){s.end=[...r.start]}return n};const Ci=Object.freeze({__proto__:null,parsePathCommands:Fi,parsePathCommandsWithEndpoints:Si,pathCommandNames:ki});const Vi=(...e)=>e.filter((e=>typeof e===sa)).concat(e.filter((e=>typeof e===oa&&e!==null)).map((e=>{if(typeof e.x===sa){return[e.x,e.y]}if(typeof e[0]===sa){return[e[0],e[1]]}return undefined})).filter((e=>e!==undefined)).reduce(((e,t)=>e.concat(t)),[]));const Pi=function(e,t,n,s,r=0){const o=1;const c=n/o-n;const a=e-c-r;const i=t-c-r;const f=n+c*2+r*2;const l=s+c*2+r*2;return[a,i,f,l].join(" ")};const Ti=(...e)=>{const t=Vi(...e.flat());if(t.length===2){t.unshift(0,0)}return t.length===4?Pi(...t):undefined};const Ni=(e,...t)=>{const n=t.length===1&&typeof t[0]===ra?t[0]:Ti(...t);if(n){e.setAttribute(la,n)}return e};const zi=function(e){const t=e.getAttribute(la);return t==null?undefined:t.split(" ").map((e=>parseFloat(e)))};const Bi=function(e,t,n){const s=e.createSVGPoint();s.x=t;s.y=n;const r=s.matrixTransform(e.getScreenCTM().inverse());return[r.x,r.y]};const $i=({vertices_coords:e})=>{if(!e){return undefined}const t=[Infinity,Infinity];const n=[-Infinity,-Infinity];e.forEach((e=>[0,1].forEach((s=>{t[s]=Math.min(e[s],t[s]);n[s]=Math.max(e[s],n[s])}))));return[t[0],t[1],n[0]-t[0],n[1]-t[1]].join(" ")};const Ri=Object.freeze({__proto__:null,convertToViewBox:Bi,foldToViewBox:$i,getViewBox:zi,setViewBox:Ni});const Li={...ti,...Mi,makeCDATASection:Ai,...Ci,...li,...Ri};const Ii=function(e){const t=zi(e);if(t!==undefined){return t}if(typeof e.getBoundingClientRect===ea){const t=e.getBoundingClientRect();return[t.x,t.y,t.width,t.height]}return[]};const Ui="svg-background-rectangle";const Qi=function(e,t){let n=Array.from(e.childNodes).filter((e=>e.getAttribute(Kc)===Ui)).shift();if(n==null){n=xa().document.createElementNS(wa,"rect");Ii(e).forEach(((e,t)=>n.setAttribute(ja.rect[t],e)));n.setAttribute(Kc,Ui);n.setAttribute(ma,pa);e.insertBefore(n,e.firstChild)}n.setAttribute(ga,t);return e};const Di=e=>{const t=e.getAttribute(da);return t==null||t===""?undefined:t};const qi={clearTransform:e=>{e.removeAttribute(da);return e}};["translate","rotate","scale","matrix"].forEach((e=>{qi[e]=(t,...n)=>{t.setAttribute(da,[Di(t),`${e}(${n.join(" ")})`].filter((e=>e!==undefined)).join(" "));return t}}));const Wi=e=>e.replace(/([-_][a-z])/gi,(e=>e.toUpperCase().replace("-","").replace("_","")));const Gi=e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z])([A-Z])(?=[a-z])/g,"$1-$2").toLowerCase();const Hi=e=>e.charAt(0).toUpperCase()+e.slice(1);const Ji=e=>{while(e.lastChild){e.removeChild(e.lastChild)}return e};const Zi=(e,t)=>{if(t&&t.appendChild){t.appendChild(e)}return e};const Yi=(e,t)=>{Object.keys(t).forEach((n=>e.setAttribute(Gi(n),t[n])));return e};const Xi=Object.freeze({__proto__:null,appendTo:Zi,removeChildren:Ji,setAttributes:Yi});const Ki=function(e,t){const n=zi(e);if(n!==undefined){Ni(e,...[-t,-t,t*2,t*2].map(((e,t)=>n[t]+e)))}return e};const ef=function(e,t){const n=e.getElementsByTagName(t);return n.length?n[0]:null};const tf=function(e,t){let n=ef(e,fa);if(n==null){n=xa().document.createElementNS(wa,fa);n.setTextContent=e=>{n.textContent="";n.appendChild(Ai(e));return n};e.insertBefore(n,e.firstChild)}n.textContent="";n.appendChild(Ai(t));return n};const nf=e=>{Array.from(e.attributes).filter((e=>e.name!=="xmlns"&&e.name!=="version")).forEach((t=>e.removeAttribute(t.name)));return Ji(e)};const sf={clear:nf,size:Ni,setViewBox:Ni,getViewBox:zi,padding:Ki,background:Qi,getWidth:e=>Ii(e)[2],getHeight:e=>Ii(e)[3],stylesheet:function(e,t){return tf.call(this,e,t)},...qi,...Xi};const rf={move:["mousemove","touchmove"],press:["mousedown","touchstart"],release:["mouseup","touchend"],leave:["mouseleave","touchcancel"]};const of=(e,t)=>Object.values(rf).flat().forEach((n=>{t[n].forEach((t=>e.removeEventListener(n,t)));t[n]=[]}));const cf=(e,t,n)=>Object.defineProperty(e,t,{get:()=>n,enumerable:true,configurable:true});const af=function(e){const t=[];Object.keys(rf).forEach((e=>{rf[e].forEach((e=>{t[e]=[]}))}));const n=n=>rf[n].forEach((n=>t[n].forEach((t=>e.removeEventListener(n,t)))));Object.keys(rf).forEach((s=>{Object.defineProperty(e,`on${Hi(s)}`,{set:r=>{if(!e.addEventListener){return}if(r==null){n(s);return}rf[s].forEach((n=>{const s=t=>{const n=t.touches!=null?t.touches[0]:t;if(n!==undefined){const{clientX:s,clientY:r}=n;const[o,c]=Bi(e,s,r);cf(t,"x",o);cf(t,"y",c)}r(t)};t[n].push(s);e.addEventListener(n,s)}))},enumerable:true})}));Object.defineProperty(e,"off",{value:()=>of(e,t)})};const ff=()=>Math.random().toString(36).replace(/[^a-z]+/g,"").concat("aaaaa").substr(0,5);const lf=function(e){let t;let n=0;let s;const r={};const o=()=>{if(xa().cancelAnimationFrame){xa().cancelAnimationFrame(s)}Object.keys(r).forEach((e=>delete r[e]))};const c=e=>{o();if(!e||!xa().requestAnimationFrame){return}t=performance.now();n=0;const c=ff();r[c]=o=>{const a=(o-t)*.001;e({time:a,frame:n});n+=1;if(r[c]){s=xa().requestAnimationFrame(r[c])}};s=xa().requestAnimationFrame(r[c])};Object.defineProperty(e,"play",{set:c,enumerable:true});Object.defineProperty(e,"stop",{value:o,enumerable:true})};const df=e=>e&&e.parentNode?e.parentNode.removeChild(e):undefined;const uf=[["cx","cy"],["x","y"]];const mf=function(e,t={}){const n=[0,0];const s={selected:false,svg:undefined,updatePosition:e=>e};const r=()=>{if(!s.svg){return}if(!s.svg.parentNode){e.appendChild(s.svg)}uf.filter((e=>s.svg[e[0]]!=null)).forEach((e=>e.forEach(((e,t)=>{s.svg.setAttribute(e,n[t])}))))};const o=new Proxy(n,{set:(e,t,n)=>{e[t]=n;r();return true}});const c=function(...e){Vi(...e.flat()).forEach(((e,t)=>{n[t]=e}));r();if(typeof n.delegate===ea){n.delegate.apply(n.pointsContainer,[o,n.pointsContainer])}};n.delegate=undefined;n.setPosition=c;n.onMouseMove=e=>s.selected?c(s.updatePosition(e)):undefined;n.onMouseUp=()=>{s.selected=false};n.distance=e=>Math.sqrt(Ya(e,n));["x","y"].forEach(((e,t)=>Object.defineProperty(n,e,{get:()=>n[t],set:e=>{n[t]=e}})));[ca,"updatePosition","selected"].forEach((e=>Object.defineProperty(n,e,{get:()=>s[e],set:t=>{s[e]=t}})));Object.defineProperty(n,"remove",{value:()=>{df(s.svg);n.delegate=undefined}});return o};const gf=function(e,t,n){let s;let r;const o=Array.from(Array(t)).map((()=>mf(e,n)));const c=e=>typeof r===ea?r.call(o,e,s,o):undefined;o.forEach((e=>{e.delegate=c;e.pointsContainer=o}));const a=function(e){if(!(o.length>0)){return}s=o.map(((t,n)=>({i:n,d:Ya(t,[e.x,e.y])}))).sort(((e,t)=>e.d-t.d)).shift().i;o[s].selected=true};const i=function(e){o.forEach((t=>t.onMouseMove(e)))};const f=function(){o.forEach((e=>e.onMouseUp()));s=undefined};e.onPress=a;e.onMove=i;e.onRelease=f;Object.defineProperty(o,"selectedIndex",{get:()=>s});Object.defineProperty(o,"selected",{get:()=>o[s]});Object.defineProperty(o,"add",{value:t=>{o.push(mf(e,t))}});o.removeAll=()=>{while(o.length>0){o.pop().remove()}};const l={onChange:(e,t)=>{r=e;if(t===true){const t=o.length-1;e.call(o,o[t],t,o)}},position:e=>o.forEach(((t,n)=>t.setPosition(e.call(o,t,n,o)))),svg:e=>o.forEach(((t,n)=>{t.svg=e.call(o,t,n,o)}))};Object.keys(l).forEach((e=>{o[e]=function(){if(typeof arguments[0]===ea){l[e](...arguments)}return o}}));o.parent=function(e){if(e!=null&&e.appendChild!=null){o.forEach((t=>{e.appendChild(t.svg)}))}return o};return o};const pf=e=>{e.controls=(...t)=>gf.call(e,e,...t)};const _f={svg:{args:(...e)=>[Ti(Vi(...e))].filter((e=>e!=null)),methods:sf,init:(...e)=>{const t=xa().document.createElementNS(wa,"svg");t.setAttribute("version","1.1");t.setAttribute("xmlns",wa);e.filter((e=>e!=null)).filter((e=>e.appendChild)).forEach((e=>e.appendChild(t)));af(t);lf(t);pf(t);return t}}};const hf=function(e){if(e==null){return""}if(typeof e===ra){return e.slice(0,3)==="url"?e:`url(#${e})`}if(e.getAttribute!=null){const t=e.getAttribute(ia);return`url(#${t})`}return""};const vf={};["clip-path","mask","symbol","marker-end","marker-mid","marker-start"].forEach((e=>{vf[Wi(e)]=(t,n)=>{t.setAttribute(e,hf(n));return t}}));const bf={g:{methods:{...qi,...vf,...Xi}}};const yf=(e,t)=>{e.setAttribute(ja.circle[2],t);return e};const Ef=(e,t,n)=>{[...Vi(...[t,n].flat()).slice(0,2)].forEach(((t,n)=>e.setAttribute(ja.circle[n],t)));return e};const Mf=(e,t,n,s)=>[e,t,Xa([e,t],[n,s])];const Af={circle:{args:(e,t,n,s)=>{const r=Vi(...[e,t,n,s].flat());switch(r.length){case 0:case 1:return[,,...r];case 2:case 3:return r;default:return Mf(...r)}},methods:{radius:yf,setRadius:yf,origin:Ef,setOrigin:Ef,center:Ef,setCenter:Ef,position:Ef,setPosition:Ef,...qi,...vf,...Xi}}};const xf=(e,t,n)=>{[,,t,n].forEach(((t,n)=>e.setAttribute(ja.ellipse[n],t)));return e};const wf=(e,t,n)=>{[...Vi(...[t,n].flat()).slice(0,2)].forEach(((t,n)=>e.setAttribute(ja.ellipse[n],t)));return e};const kf={ellipse:{args:(e,t,n,s)=>{const r=Vi(...[e,t,n,s].flat()).slice(0,4);switch(r.length){case 0:case 1:case 2:return[,,...r];default:return r}},methods:{radius:xf,setRadius:xf,origin:wf,setOrigin:wf,center:wf,setCenter:wf,position:wf,setPosition:wf,...qi,...vf,...Xi}}};const Of=e=>e!=null&&typeof e[Symbol.iterator]===ea;const jf=function(){switch(arguments.length){case 0:return Array.from(arguments);case 1:return Of(arguments[0])&&typeof arguments[0]!==ra?jf(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>Of(e)?[...jf(e)]:e))}};const Ff=(...e)=>Vi(...jf(...e)).slice(0,4);const Sf=(e,...t)=>{Ff(...t).forEach(((t,n)=>e.setAttribute(ja.line[n],t)));return e};const Cf={line:{args:Ff,methods:{setPoints:Sf,...qi,...vf,...Xi}}};const Vf=e=>{const t=e.getAttribute("d");return t==null?"":t};const Pf=e=>{e.removeAttribute("d");return e};const Tf=(e,t,...n)=>{e.setAttribute("d",`${Vf(e)}${t}${n.flat().join(" ")}`);return e};const Nf=e=>Fi(Vf(e));const zf={addCommand:Tf,appendCommand:Tf,clear:Pf,getCommands:Nf,get:Nf,getD:e=>e.getAttribute("d"),...qi,...vf,...Xi};Object.keys(ki).forEach((e=>{zf[ki[e]]=(t,...n)=>Tf(t,e,...n)}));const Bf={path:{methods:zf}};const $f=(e,t,n)=>{[,,t,n].forEach(((t,n)=>e.setAttribute(ja.rect[n],t)));return e};const Rf=(e,t,n)=>{[...Vi(...[t,n].flat()).slice(0,2)].forEach(((t,n)=>e.setAttribute(ja.rect[n],t)));return e};const Lf=function(e){[0,1].forEach((t=>{if(e[2+t]<0){if(e[0+t]===undefined){e[0+t]=0}e[0+t]+=e[2+t];e[2+t]=-e[2+t]}}));return e};const If={rect:{args:(e,t,n,s)=>{const r=Vi(...[e,t,n,s].flat()).slice(0,4);switch(r.length){case 0:case 1:case 2:case 3:return Lf([,,...r]);default:return Lf(r)}},methods:{origin:Rf,setOrigin:Rf,center:Rf,setCenter:Rf,size:$f,setSize:$f,...qi,...vf,...Xi}}};const Uf={style:{init:e=>{const t=xa().document.createElementNS(wa,"style");t.setAttribute("type","text/css");t.textContent="";t.appendChild(Ai(e));return t},methods:{setTextContent:(e,t)=>{e.textContent="";e.appendChild(Ai(t));return e}}}};const Qf={text:{args:(e,t,n)=>Vi(...[e,t,n].flat()).slice(0,2),init:(e,t,n,s)=>{const r=xa().document.createElementNS(wa,"text");const o=[e,t,n,s].filter((e=>typeof e===ra)).shift();r.appendChild(xa().document.createTextNode(o||""));return r},methods:{...qi,...vf,appendTo:Zi,setAttributes:Yi}}};const Df=function(){return Array.from(arguments).filter((e=>typeof e===ra||e instanceof String)).shift()||ff()};const qf=(...e)=>[Df(...e)];const Wf={mask:{args:qf,methods:{...qi,...vf,...Xi}},clipPath:{args:qf,methods:{...qi,...vf,...Xi}},symbol:{args:qf,methods:{...qi,...vf,...Xi}},marker:{args:qf,methods:{size:Ni,setViewBox:Ni,...qi,...vf,...Xi}}};const Gf=e=>{const t=e.getAttribute(ua);return t==null?"":t};const Hf=function(){return Array.from(Array(Math.floor(arguments.length/2))).map(((e,t)=>`${arguments[t*2+0]},${arguments[t*2+1]}`)).join(" ")};const Jf=(...e)=>[Hf(...Vi(...jf(...e)))];const Zf=(e,...t)=>{e.setAttribute(ua,Jf(...t)[0]);return e};const Yf=(e,...t)=>{e.setAttribute(ua,[Gf(e),Jf(...t)[0]].filter((e=>e!=="")).join(" "));return e};const Xf=function(...e){return e.length===1&&typeof e[0]===ra?[e[0]]:Jf(...e)};const Kf={polyline:{args:Xf,methods:{setPoints:Zf,addPoint:Yf,...qi,...vf,...Xi}},polygon:{args:Xf,methods:{setPoints:Zf,addPoint:Yf,...qi,...vf,...Xi}}};const el=(e,t,n,s,r,o=false)=>{if(r==null){return""}const c=Ka(s,n);const a=Ka(r,n);const i=[a[0]-c[0],a[1]-c[1]];const f=c[0]*a[1]-c[1]*a[0];const l=c[0]*a[0]+c[1]*a[1];const d=Math.atan2(f,l)>0?0:1;let u=o?`M ${e},${t} l ${c[0]},${c[1]} `:`M ${e+c[0]},${t+c[1]} `;u+=["a ",n,n,0,d,1,i[0],i[1]].join(" ");if(o){u+=" Z"}return u};const tl=(e,t,n,s,r)=>[el(e,t,n,s,r,false)];const nl={arc:{nodeName:aa,attributes:["d"],args:tl,methods:{setArc:(e,...t)=>e.setAttribute("d",tl(...t)),...qi}}};const sl=[va,ha];const rl=e=>e.join(",");const ol=e=>"M"+e.map((e=>e.join(","))).join("L")+"Z";const cl=function(e){let t=[[0,1],[2,3]].map((t=>t.map((t=>e.points[t]||0))));let n=Ga(t[1],t[0]);let s=Wa(t[0],Ha(n,.5));const r=Za(n);const o=sl.map((t=>e[t].visible?(1+e[t].padding)*e[t].height*2.5:0)).reduce(((e,t)=>e+t),0);if(r<o){const e=r===0?[o,0]:Ha(n,o/r);t=[Ga,Wa].map((t=>t(s,Ha(e,.5))));n=Ga(t[1],t[0])}let c=[n[1],-n[0]];let a=Wa(s,Ha(c,e.bend));const i=t.map((e=>Ga(a,e)));const f=i.map((e=>Za(e)));const l=i.map(((e,t)=>f[t]===0?e:Ha(e,1/f[t])));const d=l.map((e=>Ha(e,-1)));const u=d.map((e=>[e[1],-e[0]]));const m=sl.map(((t,n)=>e[t].padding?e[t].padding:e.padding?e.padding:0));const g=sl.map(((t,n)=>e[t].height*(e[t].visible?1:0))).map(((e,t)=>e+m[t]));const p=t.map(((e,t)=>Wa(e,Ha(l[t],g[t]))));n=Ga(p[1],p[0]);c=[n[1],-n[0]];s=Wa(p[0],Ha(n,.5));a=Wa(s,Ha(c,e.bend));const _=p.map(((t,n)=>Wa(t,Ha(Ga(a,t),e.pinch))));const h=sl.map(((t,n)=>[Wa(p[n],Ha(d[n],e[t].height)),Wa(p[n],Ha(u[n],e[t].width/2)),Wa(p[n],Ha(u[n],-e[t].width/2))]));return{line:`M${rl(p[0])}C${rl(_[0])},${rl(_[1])},${rl(p[1])}`,tail:ol(h[0]),head:ol(h[1])}};const al=(e,t,n)=>{if(typeof t===na){e.options[n].visible=t}else if(typeof t===oa){Object.assign(e.options[n],t);if(t.visible==null){e.options[n].visible=true}}else if(t==null){e.options[n].visible=true}};const il=(e,t={},n=ha)=>{const s=e.getElementsByClassName(`${_a}-${n}`)[0];Object.keys(t).map((e=>({key:e,fn:s[Wi(e)]}))).filter((e=>typeof e.fn===ea&&e.key!=="class")).forEach((e=>e.fn(t[e.key])));Object.keys(t).filter((e=>e==="class")).forEach((e=>s.classList.add(t[e])))};const fl=e=>{const t=cl(e.options);Object.keys(t).map((t=>({path:t,element:e.getElementsByClassName(`${_a}-${t}`)[0]}))).filter((e=>e.element)).map((e=>{e.element.setAttribute("d",t[e.path]);return e})).filter((t=>e.options[t.path])).forEach((t=>t.element.setAttribute("visibility",e.options[t.path].visible?"visible":"hidden")));return e};const ll=(e,...t)=>{e.options.points=Vi(...jf(...t)).slice(0,4);return fl(e)};const dl=(e,t)=>{e.options.bend=t;return fl(e)};const ul=(e,t)=>{e.options.pinch=t;return fl(e)};const ml=(e,t)=>{e.options.padding=t;return fl(e)};const gl=(e,t)=>{al(e,t,ha);il(e,t,ha);return fl(e)};const pl=(e,t)=>{al(e,t,va);il(e,t,va);return fl(e)};const _l=e=>e.getElementsByClassName(`${_a}-line`)[0];const hl=e=>e.getElementsByClassName(`${_a}-${ha}`)[0];const vl=e=>e.getElementsByClassName(`${_a}-${va}`)[0];const bl={setPoints:ll,points:ll,bend:dl,pinch:ul,padding:ml,head:gl,tail:pl,getLine:_l,getHead:hl,getTail:vl,...qi};const yl=()=>({visible:false,width:8,height:10,padding:0});const El=()=>({head:yl(),tail:yl(),bend:0,padding:0,pinch:.618,points:[]});const Ml=Object.keys(El());const Al=(...e)=>{for(let t=0;t<e.length;t+=1){if(typeof e[t]!==oa){continue}const n=Object.keys(e[t]);for(let s=0;s<n.length;s+=1){if(Ml.includes(n[s])){return e[t]}}}return undefined};const xl=function(...e){const t=xa().document.createElementNS(wa,"g");t.setAttribute(Kc,_a);const n=["line",va,ha].map((e=>{const n=xa().document.createElementNS(wa,aa);n.setAttribute(Kc,`${_a}-${e}`);t.appendChild(n);return n}));n[0].setAttribute(fa,"fill:none;");n[1].setAttribute(ma,pa);n[2].setAttribute(ma,pa);t.options=El();bl.setPoints(t,...e);const s=Al(...e);if(s){Object.keys(s).filter((e=>bl[e])).forEach((e=>bl[e](t,s[e])))}return t};const wl={arrow:{nodeName:"g",attributes:[],args:()=>[],methods:bl,init:xl}};const kl=(e=[],t=0,n=.5)=>{const s=[e[0]||0,e[1]||0];const r=[e[2]||0,e[3]||0];const o=Ga(r,s);const c=Wa(s,Ha(o,.5));const a=[o[1],-o[0]];const i=Wa(c,Ha(a,t));const f=Wa(s,Ha(Ga(i,s),n));const l=Wa(r,Ha(Ga(i,r),n));return`M${s[0]},${s[1]}C${f[0]},${f[1]} ${l[0]},${l[1]} ${r[0]},${r[1]}`};const Ol=(...e)=>[kl(Vi(...e.flat()))];const jl=e=>e.slice(1).split(/[, ]+/).map((e=>parseFloat(e)));const Fl=e=>e.match(/[Cc][(0-9), .-]+/).map((e=>jl(e)));const Sl=e=>e.match(/[Mm][(0-9), .-]+/).map((e=>jl(e)));const Cl=e=>{const t=Sl(e).shift();const n=Fl(e).shift();const s=t?[t[t.length-2],t[t.length-1]]:[0,0];const r=n?[n[n.length-2],n[n.length-1]]:[0,0];return[...s,...r]};const Vl=(e,...t)=>{const n=Vi(...t.flat()).slice(0,4);e.setAttribute("d",kl(n,e._bend,e._pinch));return e};const Pl=(e,t)=>{e._bend=t;return Vl(e,...Cl(e.getAttribute("d")))};const Tl=(e,t)=>{e._pinch=t;return Vl(e,...Cl(e.getAttribute("d")))};const Nl={setPoints:Vl,bend:Pl,pinch:Tl,...qi};const zl={curve:{nodeName:aa,attributes:["d"],args:Ol,methods:Nl}};const Bl=(e,t,n,s,r)=>[el(e,t,n,s,r,true)];const $l={wedge:{nodeName:aa,args:Bl,attributes:["d"],methods:{setArc:(e,...t)=>e.setAttribute("d",Bl(...t)),...qi}}};const Rl={};const Ll=(e,...t)=>{const n=xa().document.createElementNS(wa,"g");Rl.ear.convert.foldToSvg.render(e,n,...t);return n};const Il={...qi,...vf,...Xi};const Ul={origami:{nodeName:"g",init:Ll,args:()=>[],methods:Il}};const Ql={..._f,...bf,...Af,...kf,...Cf,...Bf,...If,...Uf,...Qf,...Wf,...Kf,...nl,...wl,...zl,...$l,...Ul};const Dl=(...e)=>e;const ql=(e,t,...n)=>{const s=Ql[e]&&Ql[e].nodeName?Ql[e].nodeName:e;const{init:r,args:o,methods:c}=Ql[e]||{};const a=ja[s]||[];const i=Va[s]||[];const f=r?r(...n):xa().document.createElementNS(wa,s);if(t){t.appendChild(f)}const l=o||Dl;l(...n).forEach(((e,t)=>{f.setAttribute(ja[s][t],e)}));if(c){Object.keys(c).forEach((e=>Object.defineProperty(f,e,{value:function(){return c[e](f,...arguments)}})))}a.forEach((e=>{const t=Wi(e);if(f[t]){return}Object.defineProperty(f,t,{value:function(){f.setAttribute(e,...arguments);return f}})}));i.forEach((e=>{if(f[e]){return}const t=function(){return ql(e,f,...arguments)};Object.defineProperty(f,e,{value:t})}));return f};const Wl=(...e)=>{const t=ql(ca,null,...e);const n=()=>e.filter((e=>typeof e===ea)).forEach((e=>e.call(t,t)));if(xa().document.readyState==="loading"){xa().document.addEventListener("DOMContentLoaded",n)}else{n()}return t};Object.assign(Wl,{NS:wa,nodes_attributes:ja,nodes_children:Va,extensions:Ql,...qa,...Li});Pa.forEach((e=>{Wl[e]=(...t)=>ql(e,null,...t)}));Object.defineProperty(Wl,"window",{enumerable:false,set:Aa});const Gl=e=>[e.min,e.span].flatMap((e=>[e[0],e[1]])).join(" ");const Hl=e=>{const t=Sc(e);return t===undefined?"":Gl(t)};const Jl=({vertices_coords:e,edges_vertices:t,edges_length:n},s=.1)=>{if(!e||!t){return undefined}if(!n){n=sr({vertices_coords:e,edges_vertices:t})}const r=n.slice().sort(((e,t)=>e-t));const o=Math.max(0,Math.min(Math.floor(r.length*s),r.length-1));return r[o]};const Zl={min:[0,0],span:[1,1]};const Yl=1/100;const Xl=(e,{vmax:t}={})=>{if(!t){const n=Sc(e)||Zl;t=Math.max(...n.span)}const n=Jl(e,.1);return n?n*Yl*10:t*Yl};const Kl=(e,t={})=>{const n=t&&t.vertices?t.vertices:{};const s=Wl.g();if(!e||!e.vertices_coords){return s}e.vertices_coords.map((e=>Wl.circle(e[0],e[1],.01))).forEach((e=>s.appendChild(e)));s.setAttributeNS(null,"fill","none");Object.keys(n).forEach((e=>s.setAttributeNS(null,e,n[e])));return s};const ed={B:"black",M:"crimson",V:"royalblue",F:"lightgray",J:"gold",C:"limegreen",U:"orchid"};Object.keys(ed).forEach((e=>{ed[e.toLowerCase()]=ed[e]}));const td=4;const nd={M:[1,0,0],V:[0,0,1],J:[1,1,0],U:[1,0,1],C:[0,1,0]};const sd=(e=0,t=0,n=0)=>{const s=A([e,t,n],1/255);const r=p(s);if(r<.05){return"B"}const o=s.reduce(((e,t)=>e+t),0)/3;const c=Q(s,[o,o,o]);const a=Object.keys(nd).map((e=>({key:e,dist:Q(s,nd[e])}))).sort(((e,t)=>e.dist-t.dist)).shift();if(a.dist<c*td){return a.key}return r<.1?"B":"F"};const rd=Object.freeze({__proto__:null,assignmentColor:ed,rgbToAssignment:sd});const od={};const cd={stroke:"black"};const ad={};const id={};Object.keys(ed).forEach((e=>{id[e]={stroke:ed[e]}}));const fd=(e,t,n)=>e.setAttribute(`data-${t}`,n);const ld=e=>{const t={u:[],c:[],j:[],f:[],v:[],m:[],b:[]};const n=e.edges_assignment.map((e=>e.toLowerCase()));e.edges_vertices.map(((e,t)=>n[t]||"u")).forEach(((e,n)=>t[e].push(n)));return t};const dd=({vertices_coords:e,edges_vertices:t})=>{if(!e||!t){return[]}return t.map((t=>t.map((t=>e[t]))))};const ud=e=>`M${e[0][0]} ${e[0][1]}L${e[1][0]} ${e[1][1]}`;const md=e=>dd(e).map((e=>ud(e))).join("");const gd=({vertices_coords:e,edges_vertices:t,edges_assignment:n})=>{if(!e||!t){return{}}if(!n){return{u:md({vertices_coords:e,edges_vertices:t})}}const s=ld({vertices_coords:e,edges_vertices:t,edges_assignment:n});Object.keys(s).forEach((n=>{s[n]=md({vertices_coords:e,edges_vertices:s[n].map((e=>t[e]))})}));Object.keys(s).forEach((e=>{if(s[e]===""){delete s[e]}}));return s};const pd=({vertices_coords:e,edges_vertices:t,edges_assignment:n})=>{const s=gd({vertices_coords:e,edges_vertices:t,edges_assignment:n});Object.keys(s).forEach((e=>{const t=Wl.path(s[e]);pi(t,At[e]);s[e]=t}));return s};const _d=(e,t={})=>Object.keys(t).forEach((n=>e.setAttributeNS(null,n,t[n])));const hd=(e,t={})=>{const n=t&&t.edges?t.edges:{};const s=Wl.g();if(!e){return s}const r=Lt(e);const o=JSON.parse(JSON.stringify(r?od:cd));const c=JSON.parse(JSON.stringify(r?ad:id));const a={};if(n.stroke){a.stroke=n.stroke}Object.assign(o,a);Object.keys(c).forEach((e=>{c[e]={...c[e],...a}}));const i=pd(e);Object.keys(i).forEach((e=>{pi(i[e],At[e]);_d(i[e],c[e]);_d(i[e],n[e]);_d(i[e],n[At[e]]);s.appendChild(i[e]);Object.defineProperty(s,At[e],{get:()=>i[e]})}));_d(s,o);Object.keys(i).forEach((e=>fd(i[e],"assignment",e)));Object.keys(i).forEach((e=>fd(i[e],"foldAngle",xt[e])));return s};const vd=e=>Math.abs(e)/180;const bd=(e,t={})=>{const n=t&&t.edges?t.edges:{};const s=Wl.g();if(!e){return s}const r=Lt(e);const o=JSON.parse(JSON.stringify(r?od:cd));const c=JSON.parse(JSON.stringify(r?ad:id));const a={};if(n.stroke){a.stroke=n.stroke}Object.assign(o,a);Mt.forEach((e=>{if(c[e]===undefined){c[e]={}}c[e]={...c[e],...a}}));const i={};Array.from(new Set(Mt.map((e=>e.toLowerCase())))).forEach((e=>{const t=Wl.g();s.appendChild(t);pi(t,At[e]);_d(t,c[e]);_d(t,n[At[e]]);Object.defineProperty(s,At[e],{get:()=>t});i[e]=t}));const f=e.edges_vertices.map((t=>t.map((t=>e.vertices_coords[t])))).map((e=>Wl.line(e[0][0],e[0][1],e[1][0],e[1][1])));if(e.edges_foldAngle){e.edges_foldAngle.forEach(((e,t)=>fd(f[t],"foldAngle",e)))}if(e.edges_assignment){e.edges_assignment.forEach(((e,t)=>fd(f[t],"assignment",e)))}if(e.edges_foldAngle){f.forEach(((t,n)=>{const s=e.edges_foldAngle[n];if(s===0||s===180||s===-180){return}t.setAttributeNS(null,"opacity",vd(s))}))}const l=(e.edges_assignment?e.edges_assignment:Xs(e)).map((e=>e.toLowerCase()));f.forEach(((e,t)=>i[l[t]].appendChild(e)));_d(s,o);return s};const yd=(e,t)=>St(e)?hd(e,t):bd(e,t);const Ed=e=>e.map((e=>e[0]*e[4]-e[1]*e[3])).map((e=>e>=0));const Md=e=>e.map((e=>e[0]*e[3]-e[1]*e[2])).map((e=>e>=0));const Ad=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])).map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>(e[1][0]-e[0][0])*(e[1][1]+e[0][1]))).reduce(((e,t)=>e+t),0))).map((e=>e<0));const xd=Object.freeze({__proto__:null,makeFacesWinding:Ad,makeFacesWindingFromMatrix:Ed,makeFacesWindingFromMatrix2:Md});const wd=e=>{const t=un(e.flat());const n=[];t.forEach((e=>{n[e]=[]}));e.forEach((e=>{n[e[1]].push(e[0])}));const s=[];const r={};const o=e=>{if(r[e]){return}r[e]=true;n[e].forEach(o);s.push(e)};t.forEach(o);return s};const kd=Object.freeze({__proto__:null,topologicalSort:wd});const Od=(e,t)=>{const n={};t.forEach((e=>{n[e]=true}));return e.filter((e=>n[e[0]]&&n[e[1]]))};const jd=({faceOrders:e,faces_normal:t},n)=>{if(!e||!e.length){return[]}if(!t){throw new Error("linearizeFaceOrders: faces_normal required")}const s=un(e.flatMap((e=>[e[0],e[1]])));const r=n!==undefined&&s.includes(n)?t[n]:t[s[0]];const o=[];s.forEach((e=>{o[e]=S(t[e],r)>0}));const c=e.map((e=>e[2]===-1^!o[e[1]]?[e[0],e[1]]:[e[1],e[0]]));return wd(c)};const Fd=({faces_vertices:e},t)=>{if(!e){return t}const n=e.map(((e,t)=>t)).filter((e=>t[e]==null));return n.concat(jn(t))};const Sd=({vertices_coords:e,faces_vertices:t,faceOrders:n,faces_layer:s,faces_normal:r},o)=>{if(!r){r=Cs({vertices_coords:e,faces_vertices:t})}if(n){return Fd({faces_vertices:t},jn(jd({faceOrders:n,faces_normal:r},o)))}if(s){return Fd({faces_vertices:t},s)}return t.map(((e,t)=>t)).filter((()=>true))};const Cd=({vertices_coords:e,faces_vertices:t,faceOrders:n,faces_normal:s})=>{if(!s){s=Cs({vertices_coords:e,faces_vertices:t})}const r=xc(Rs({edges_vertices:n.map((e=>[e[0],e[1]]))}));const o=On(r);const c=o.map((e=>Od(n,e))).map((e=>jd({faceOrders:e,faces_normal:s})));const a=o.map((e=>s[e[0]]));const i=[];c.forEach(((e,t)=>e.forEach(((e,n)=>{i[e]={vector:a[t],layer:n}}))));return i};const Vd=({faces_layer:e})=>{const t=[];const n=jn(e);n.forEach(((e,n)=>{t[e]={vector:[0,0,1],layer:n}}));return t};const Pd=({vertices_coords:e,faces_vertices:t,faceOrders:n,faces_normal:s})=>{if(!s){s=Cs({vertices_coords:e,faces_vertices:t})}return jn(jd({faceOrders:n,faces_normal:s}))};const Td=Object.freeze({__proto__:null,faceOrdersSubset:Od,linearize2DFaces:Sd,linearizeFaceOrders:jd,makeFacesLayer:Pd,nudgeFacesWithFaceOrders:Cd,nudgeFacesWithFacesLayer:Vd});const Nd={back:{fill:"white"},front:{fill:"#ddd"}};const zd={back:{opacity:.1},front:{opacity:.1}};const Bd={};const $d={stroke:"black","stroke-linejoin":"bevel"};const Rd={stroke:"none",fill:"black","stroke-linejoin":"bevel"};const Ld={fill:"none"};const Id=(e,t,n)=>e.setAttribute(`data-${t}`,n);const Ud=(e,t={})=>Object.keys(t).forEach((n=>e.setAttributeNS(null,n,t[n])));const Qd=(e,t,n,s={})=>{const r=s&&s.faces?s.faces:{};const o=Lt(e);const c=!!(e.faceOrders||e.faces_layer);const a=[["front"],["back"]];const i=Ad(e);i.map((e=>e?a[0]:a[1])).forEach(((e,n)=>{pi(t[n],e);Id(t[n],"side",e);Ud(t[n],o?c?Nd[e]:zd[e]:Bd[e]);Ud(t[n],r[e])}));Sd(e).forEach((e=>n.appendChild(t[e])));Object.defineProperty(n,"front",{get:()=>t.filter(((e,t)=>i[t]))});Object.defineProperty(n,"back",{get:()=>t.filter(((e,t)=>!i[t]))});Ud(n,o?c?$d:Rd:Ld);return n};const Dd=(e,t)=>{const n=Wl.g();if(!e||!e.vertices_coords||!e.faces_vertices){return n}const s=e.faces_vertices.map((t=>t.map((t=>[0,1].map((n=>e.vertices_coords[t][n])))))).map((e=>Wl.polygon(e)));s.forEach(((e,t)=>e.setAttributeNS(null,"index",t)));n.setAttributeNS(null,"fill","white");return Qd(e,s,n,t)};const qd=function(e,t){const n=Wl.g();if(!e||"faces_edges"in e===false||"edges_vertices"in e===false||"vertices_coords"in e===false){return n}const s=e["faces_edges"].map((t=>t.map((t=>e["edges_vertices"][t])).map(((e,t,n)=>{const s=n[(t+1)%n.length];return e[1]===s[0]||e[1]===s[1]?e[0]:e[1]})).map((t=>[0,1].map((n=>e["vertices_coords"][t][n])))))).map((e=>Wl.polygon(e)));s.forEach(((e,t)=>e.setAttributeNS(null,"index",t)));n.setAttributeNS(null,"fill","white");return Qd(e,s,n,t)};const Wd=(e,t)=>{if(e&&e["faces_vertices"]){return Dd(e,t)}if(e&&e["faces_edges"]){return qd(e,t)}return Wl.g()};const Gd={fill:"none"};const Hd={stroke:"black",fill:"white"};const Jd=(e,t={})=>Object.keys(t).forEach((n=>e.setAttributeNS(null,n,t[n])));const Zd=(e,t={})=>{const n=t&&t.boundaries?t.boundaries:{};const s=Wl.g();if(!e){return s}const r=Pc(e).polygon;if(!r.length){return s}const o=Wl.polygon(r);pi(o,"boundary");s.appendChild(o);Jd(s,Lt(e)?Gd:Hd);Object.keys(n).forEach((e=>s.setAttributeNS(null,e,n[e])));return s};const Yd={vertices:Kl,edges:yd,faces:Wd,boundaries:Zd,edgesPaths:hd,edgesLines:bd,facesVerticesPolygon:Dd,facesEdgesPolygon:qd};const Xd=1/50;const Kd={min:[0,0],span:[1,1]};const eu=["boundaries","faces","edges","vertices"];const tu=(e,t)=>{for(let n=0;n<e.childNodes.length;n+=1){e.childNodes[n].setAttributeNS(null,"r",t)}};const nu=(e,t,n,s)=>{const r=t[3]&&t[3].childNodes.length;if(!(s.strokeWidth||s.viewBox||r)){return}const o=Sc(n)||Kd;const c=Math.max(...o.span);const a=mi(e,"svg");if(a&&s.viewBox){const e=Gl(o);a.setAttributeNS(null,"viewBox",e)}if(a&&s.padding){const e=a.getAttribute("viewBox");if(e!=null){const t=s.padding*c;const n=e.split(" ").map((e=>parseFloat(e)));const r=[-t,-t,t*2,t*2].map(((e,t)=>n[t]+e)).join(" ");a.setAttributeNS(null,"viewBox",r)}}if(s.strokeWidth||s["stroke-width"]){const t=s.strokeWidth?s.strokeWidth:s["stroke-width"];const r=typeof t==="number"?c*t:Xl(n);e.setAttributeNS(null,"stroke-width",r)}if(r){const e=s.vertices&&s.vertices.radius!=null?s.vertices.radius:s.radius;const n=typeof e==="string"?parseFloat(e):e;const r=typeof n==="number"&&!Number.isNaN(n)?c*n:c*Xd;tu(t[3],r)}};const su=(e,t={})=>eu.map((n=>t[n]===false?Wl.g():Yd[n](e,t))).map(((e,t)=>{pi(e,eu[t]);return e}));const ru=(e,t,n={})=>{if(!Lt(e)){if(n.faces===undefined){n.faces=false}}const s=su(e,n);s.filter((e=>e.childNodes.length>0)).forEach((e=>t.appendChild(e)));nu(t,s,e,n);pi(t,...[e.file_classes||[],e.frame_classes||[]].flat());return t};const ou=(e,t={})=>{const n=ru(typeof e==="string"?JSON.parse(e):e,Wl.svg(),{viewBox:true,strokeWidth:true,...t});return t&&t.string?(new(c().XMLSerializer)).serializeToString(n):n};Object.assign(ou,{...Yd,render:ru,getViewBox:Hl,getStrokeWidth:Xl,boundingBoxToViewBox:Gl});const cu=e=>{const t=["file_title","file_author","file_description","frame_title","frame_author","frame_description"];return t.filter((t=>e[t])).map((t=>`# ${t.split("_")[1]}: ${e[t]}`)).join("\n")};const au=e=>{const t=typeof e==="string"?JSON.parse(e):e;const n=cu(t);const s=(t.vertices_coords||[]).map((e=>e.join(" "))).map((e=>`v ${e}`)).join("\n");const r=(t.faces_vertices||[]).map((e=>e.map((e=>e+1)).join(" "))).map((e=>`f ${e}`)).join("\n");const o=[n,s,r].filter((e=>e!=="")).join("\n");return`${o}\n`};const iu={};iu.prototype=Object.create(Object.prototype);iu.prototype.constructor=iu;Object.entries({clean:Er,populate:zo,subgraph:pc,boundary:Pc,boundingBox:Sc,nearest:eo,splitEdge:Wo,splitFace:uc,invertAssignments:Wt,svg:ou,obj:au,...xr,...tn,...Ac}).forEach((([e,t])=>{iu.prototype[e]=function(){return t(this,...arguments)}}));iu.prototype.clone=function(){return Object.assign(Object.create(Object.getPrototypeOf(this)),Xc(this))};iu.prototype.folded=function(){const e=this.faces_matrix2?Qc(this,this.faces_matrix2):Hc(this,...arguments);return{...this,vertices_coords:e,frame_classes:["foldedForm"]}};iu.prototype.flatFolded=function(){const e=this.faces_matrix2?Qc(this,this.faces_matrix2):Jc(this,...arguments);return{...this,vertices_coords:e,frame_classes:["foldedForm"]}};const fu=(e,t,n,s)=>{t.forEach((t=>{e.edges_assignment[t]=n;e.edges_foldAngle[t]=s}));return t};iu.prototype.setValley=function(e=[],t=180){return fu(this,e,"V",Math.abs(t))};iu.prototype.setMountain=function(e=[],t=-180){return fu(this,e,"M",-Math.abs(t))};iu.prototype.setFlat=function(e=[]){return fu(this,e,"F",0)};iu.prototype.setUnassigned=function(e=[]){return fu(this,e,"U",0)};iu.prototype.setCut=function(e=[]){return fu(this,e,"C",0)};const lu=iu.prototype;const du=(e,t,n,s,r=ut,o=a)=>{const c=R(b(e),b(n));if(Math.abs(c)<o){return undefined}const i=R(e,n);const f=-i;const l=j(s,t);const d=D(l);const u=R(l,n)/i;const m=R(d,e)/f;if(r(m,o/g(n))){return u}return undefined};const uu=(e,t,n)=>w(t,M(e,n));const mu=(e,t,n,s,r)=>e.map(((e,t,n)=>[j(n[(t+1)%n.length],e),e])).map((e=>du(t,n,e[0],e[1],s,r))).filter((e=>e!==undefined)).sort(((e,t)=>e-t));const gu=(e,t,n)=>{let s=0;let r=e.length-1;while(s<r){if(t(e[s+1]-e[s],n)){break}s+=1}while(r>s){if(t(e[r]-e[r-1],n)){break}r-=1}if(s>=r){return undefined}return[e[s],e[r]]};const pu=(e,{vector:t,origin:n},s=ct,r=it,o=a)=>{const c=mu(e,t,n,ut,o);if(c.length<2){return undefined}const i=o*2/g(t);const f=gu(c,s,i);if(f===undefined){return undefined}const l=e=>{if(r(e)){return e}return e<.5?0:1};const d=f.map(l);if(Math.abs(d[0]-d[1])<o*2/g(t)){return undefined}const u=uu(t,n,(d[0]+d[1])/2);return Dr(e,u,s,o)?d.map((e=>uu(t,n,e))):undefined};const _u=(e,t,n=a)=>{const s=(e,t,s)=>(s[0]-t[0])*(e[1]-t[1])>(s[1]-t[1])*(e[0]-t[0])+n;const r=(e,t,n,s)=>{const r=j(e,t);const o=j(s,n);const c=R(e,t);const a=R(s,n);const i=1/R(r,o);return M(j(M(o,c),M(r,a)),i)};let o=e;let c=t[t.length-1];for(let e=0;e<t.length;e+=1){const n=t[e];const a=o;o=[];let i=a[a.length-1];for(let e=0;e<a.length;e+=1){const t=a[e];if(s(t,c,n)){if(!s(i,c,n)){o.push(r(c,n,t,i))}o.push(t)}else if(s(i,c,n)){o.push(r(c,n,t,i))}i=t}c=n}return o.length===0?undefined:o};const hu=Object.freeze({__proto__:null,clipLineConvexPolygon:pu,clipPolygonPolygon:_u});const vu=(e,{vector:t,origin:n},s)=>{if(e.length<2){return e}const r=e.map((e=>j(e[1],e[0]))).map((e=>C(e,t)<s));e.map(((e,t)=>t)).filter((e=>r[e])).forEach((t=>{e[t]=[e[t][1],e[t][0]]}));const o=b(t);const c=e.map((e=>e.map((e=>C(j(e,n),o))))).sort(((e,t)=>e[0]-t[0]));const a=[[c[0][0],c[0][1]]];for(let e=1;e<c.length;e+=1){const t=c[e];if(t[0]-s<a[a.length-1][1]+s){a[a.length-1][1]=Math.max(t[1],a[a.length-1][1])}else{a.push([t])}}return a.map((e=>e.map((e=>w(n,M(o,e))))))};const bu=(e,t,n,s=it,r=a)=>{const o=t.map((t=>e.faces_vertices[t].map((t=>e.vertices_coords[t])))).map((e=>pu(e,n,ct,s,r))).filter((e=>e!==undefined));return vu(o,n,r)};const yu=(e,t,n=a)=>{const s=ac(e,t,n);return bu(e,s,t,it,n)};const Eu=(e,t,n=a)=>{const s=ic(e,t,n);return bu(e,s,t,lt,n)};const Mu=(e,t,n=a)=>{const s=j(t[1],t[0]);const r=t[0];const o=fc(e,t,n);return bu(e,o,{vector:s,origin:r},ut,n)};const Au=Object.freeze({__proto__:null,clipLine:yu,clipRay:Eu,clipSegment:Mu});const xu=({vertices_coords:e},{vector:t,origin:n},s=a)=>{const r=v(t);const o=e=>{const t=O(e,n);const o=m(t);if(Math.abs(o)<s){return true}const c=t.map((e=>e/o));const a=Math.abs(S(c,r));return Math.abs(1-a)<s};return e.map(o).map(((e,t)=>({a:e,i:t}))).filter((e=>e.a)).map((e=>e.i))};const wu=Object.freeze({__proto__:null,getVerticesCollinearToLine:xu});const ku=({vertices_coords:e,edges_vertices:t,vertices_edges:n},{vector:s,origin:r},o=a)=>{if(!n){n=Ts({edges_vertices:t})}const c=xu({vertices_coords:e},{vector:s,origin:r},o);const i=t.map((()=>0));c.forEach((e=>n[e].forEach((e=>{i[e]+=1}))));return i.map(((e,t)=>({count:e,i:t}))).filter((e=>e.count===2)).map((e=>e.i))};const Ou=({vertices_coords:e,edges_vertices:t},{min:n,max:s},r=a)=>{const o=tr({vertices_coords:e,edges_vertices:t});const c=n.map((e=>e-r));const i=s.map((e=>e+r));return t.map(((e,t)=>t)).filter((e=>!(o[e][0][0]<c[0]&&o[e][1][0]<c[0]))).filter((e=>!(o[e][0][0]>i[0]&&o[e][1][0]>i[0]))).filter((e=>!(o[e][0][1]<c[1]&&o[e][1][1]<c[1]))).filter((e=>!(o[e][0][1]>i[1]&&o[e][1][1]>i[1])))};const ju=({vertices_coords:e,edges_vertices:t},n,s,r=a)=>{const o=tt([n,s]);const c=j(s,n);const i={vector:c,origin:n};const f=Ou({vertices_coords:e,edges_vertices:t},o,r);const l=[];f.forEach((n=>{const s=t[n].map((t=>e[t]));const o=j(s[1],s[0]);const c={vector:o,origin:s[0]};const a=no(i,c,ut,ut,r).point;if(!a){return}l[n]=a}));return l};const Fu=({vertices_coords:e,edges_vertices:t},{vector:n,origin:s},r=a,o=ut)=>t.map((t=>{const c=t.map((t=>e[t]));const a=j(c[1],c[0]);const i={vector:a,origin:c[0]};return no(i,{vector:n,origin:s},o,it,r)}));const Su=Object.freeze({__proto__:null,getEdgesCollinearToLine:ku,getEdgesLineIntersection:Fu,getEdgesRectOverlap:Ou,getEdgesSegmentIntersection:ju});const Cu=(e,t,n=a)=>{if(!e.vertices_coords){e.vertices_coords=[]}if(typeof t[0]==="number"){t=[t]}const s=t.map((t=>e.vertices_coords.map((e=>I(e,t)<n)).map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined)).shift()));let r=e.vertices_coords.length;const o=t.filter(((e,t)=>s[t]===undefined));e.vertices_coords.push(...o);return s.map((e=>e===undefined?r++:e))};const Vu=(e,t,n)=>{const s=Array.from(Array(t.length-1)).map(((e,n)=>[t[n],t[n+1]]));const r=s.map((e=>e.join(" "))).map((e=>n[e]===undefined));const o=s.filter(((e,t)=>r[t]));const c=Array.from(Array(o.length)).map(((t,n)=>e.edges_vertices.length+n));c.forEach(((t,n)=>{e.edges_vertices[t]=o[n]}));if(e.edges_assignment){c.forEach((t=>{e.edges_assignment[t]="U"}))}if(e.edges_foldAngle){c.forEach((t=>{e.edges_foldAngle[t]=0}))}for(let n=0;n<t.length;n+=1){const s=t[n];const o=r[n-1]?t[n-1]:undefined;const c=r[n]?t[n+1]:undefined;const a=[o,c].filter((e=>e!==undefined));const i=e.vertices_vertices[s]?e.vertices_vertices[s]:[];const f=i.concat(a);e.vertices_vertices[s]=js(e,f,t[n])}const a=Us(e);for(let n=0;n<t.length;n+=1){const s=t[n];e.vertices_edges[s]=e.vertices_vertices[s].map((e=>a[`${s} ${e}`]))}t.map((t=>e.vertices_vertices[t].length===1?[l]:ls(e.vertices_vertices[t].map((n=>j(e.vertices_coords[n],e.vertices_coords[t])))))).forEach(((n,s)=>{e.vertices_sectors[t[s]]=n}));return c};const Pu=(e,t,n,s=a)=>{if(!e.vertices_sectors){e.vertices_sectors=Ws(e)}const r=[t,n].map((e=>[e[0],e[1]]));const o=j(r[1],r[0]);const c=ju(e,r[0],r[1],s);const i=c.map(((e,t)=>t)).filter(it);const f={};i.forEach((t=>e.edges_faces[t].forEach((e=>{f[e]=true}))));const l=Object.keys(f).map((e=>parseInt(e,10))).sort(((e,t)=>e-t));const d=i.reverse().map((t=>Wo(e,t,c[t],s)));const u=d.map((e=>e.vertex));const m=Cu(e,r,s);const g={};u.forEach((e=>{g[e]=true}));m.forEach((e=>{g[e]=true}));const p=Object.keys(g).map((e=>parseInt(e,10)));const _=Fs(e,p,o);const h=Us(e);const v=Vu(e,_,h);v.forEach((t=>{const n=e.edges_vertices[t];h[`${n[0]} ${n[1]}`]=t;h[`${n[1]} ${n[0]}`]=t}));const b=_.map((t=>e.vertices_vertices[t].map((e=>[[e,t],[t,e]])))).reduce(((e,t)=>e.concat(t)),[]).reduce(((e,t)=>e.concat(t)),[]);const y={};const E=b.map((t=>hs(e,t[0],t[1],y))).filter((e=>e!==undefined));const M=bs(E);$n(e,"faces",l);const A=M.map(((t,n)=>e.faces_vertices.length+n));if(e.faces_vertices){A.forEach(((t,n)=>{e.faces_vertices[t]=M[n].vertices}))}if(e.faces_edges){A.forEach(((t,n)=>{e.faces_edges[t]=M[n].edges.map((e=>h[e]))}))}if(e.faces_angles){A.forEach(((t,n)=>{e.faces_angles[t]=M[n].faces_angles}))}if(e.vertices_faces){e.vertices_faces=Is(e)}if(e.edges_faces){e.edges_faces=Hs(e)}if(e.faces_faces){e.faces_faces=ir(e)}if(e.vertices_coords.length!==e.vertices_vertices.length||e.vertices_coords.length!==e.vertices_edges.length||e.vertices_coords.length!==e.vertices_faces.length){console.warn("vertices mismatch",JSON.parse(JSON.stringify(e)))}if(e.edges_vertices.length!==e.edges_faces.length||e.edges_vertices.length!==e.edges_assignment.length){console.warn("edges mismatch",JSON.parse(JSON.stringify(e)))}if(e.faces_vertices.length!==e.faces_edges.length||e.faces_vertices.length!==e.faces_faces.length){console.warn("faces mismatch",JSON.parse(JSON.stringify(e)))}return v};const Tu=({vertices_vertices:e},t)=>{const n=[t[1],t[0]];t.map(((t,s)=>e[t].indexOf(n[s]))).forEach(((n,s)=>e[t[s]].splice(n,1)))};const Nu=({vertices_edges:e},t,n)=>{n.map(((n,s)=>e[n].indexOf(t))).forEach(((t,s)=>e[n[s]].splice(t,1)))};const zu=(e,t,n,s)=>{const r=t.map((t=>e.faces_edges[t].indexOf(n)));const o=[];t.forEach(((t,n)=>e.faces_vertices[t].forEach(((e,t,r)=>{const c=r[(t+1)%r.length];if(e===s[0]&&c===s[1]||e===s[1]&&c===s[0]){o[n]=t}}))));if(o[0]===undefined||o[1]===undefined){console.warn("removePlanarEdge error joining faces")}const c=t.map((t=>e.faces_edges[t].length));const a=t.map((t=>e.faces_vertices[t].length));const i=c.map((e=>e-1));const f=a.map((e=>e-1));const l=r.map(((e,t)=>(e+1)%c[t]));const d=o.map(((e,t)=>(e+1)%a[t]));const u=t.map(((t,n)=>Array.from(Array(i[n])).map(((e,t)=>(l[n]+t)%c[n])).map((n=>e.faces_edges[t][n]))));const m=t.map(((t,n)=>Array.from(Array(f[n])).map(((e,t)=>(d[n]+t)%a[n])).map((n=>e.faces_vertices[t][n]))));const g=t.map((t=>e.faces_faces[t])).reduce(((e,t)=>e.concat(t)),[]).filter((e=>e!==t[0]&&e!==t[1]));return{vertices:m[0].concat(m[1]),edges:u[0].concat(u[1]),faces:g}};const Bu=(e,t)=>{const n=[...e.edges_vertices[t]].sort(((e,t)=>t-e));const s=[...e.edges_faces[t]];Tu(e,n);Nu(e,t,n);const r=n.map((t=>e.vertices_vertices[t].length===0));const o=n.filter(((e,t)=>r[t]));if(s.length===2&&s[0]!==s[1]){const r=e.faces_vertices.length;const o=zu(e,s,t,n);e.faces_vertices.push(o.vertices);e.faces_edges.push(o.edges);e.faces_faces.push(o.faces);e.vertices_faces.forEach(((t,n)=>{let o=false;t.forEach(((c,a)=>{if(c===s[0]||c===s[1]){e.vertices_faces[n][a]=r;const s=o?[n,1]:[n,1,r];t.splice(...s);o=true}}))}));e.edges_faces.forEach(((t,n)=>t.forEach(((t,o)=>{if(t===s[0]||t===s[1]){e.edges_faces[n][o]=r}}))));e.faces_faces.forEach(((t,n)=>t.forEach(((t,o)=>{if(t===s[0]||t===s[1]){e.faces_faces[n][o]=r}}))));e.faces_vertices.forEach((t=>t.forEach((t=>{if(t===undefined){console.log("FOUND ONE before remove",e.faces_vertices)}}))));$n(e,"faces",s)}if(s.length===2&&s[0]===s[1]&&o.length){const n=s[0];e.faces_vertices[n]=e.faces_vertices[n].filter((e=>!o.includes(e))).filter(((e,t,n)=>e!==n[(t+1)%n.length]));e.faces_edges[n]=e.faces_edges[n].filter((e=>e!==t))}$n(e,"edges",[t]);$n(e,"vertices",o)};const $u=(e,t)=>{const n=e.vertices_edges[t];const s=un(e.vertices_faces[t].filter((e=>e!=null)));if(n.length!==2||s.length>2){console.warn("cannot remove non 2-degree vertex yet (e,f)",n,s);return}const r=xo(e,t,n);const o=r.slice().reverse();n.sort(((e,t)=>e-t));r.forEach((t=>{const s=e.vertices_edges[t].indexOf(n[1]);if(s===-1){return}e.vertices_edges[t][s]=n[0]}));r.forEach(((n,s)=>{const r=e.vertices_vertices[n].indexOf(t);if(r===-1){console.warn("removePlanarVertex unknown vertex issue");return}e.vertices_vertices[n][r]=o[s]}));e.edges_vertices[n[0]]=[...r];s.forEach((n=>{const s=e.faces_vertices[n].indexOf(t);if(s===-1){console.warn("removePlanarVertex unknown face_vertex issue");return}e.faces_vertices[n].splice(s,1)}));s.forEach((t=>{const s=e.faces_edges[t].indexOf(n[1]);if(s===-1){console.warn("removePlanarVertex unknown face_edge issue");return}e.faces_edges[t].splice(s,1)}));$n(e,"vertices",[t]);$n(e,"edges",[n[1]])};const Ru=e=>[0,1].map((t=>e.filter(((e,n)=>n%2===t)).reduce(((e,t)=>e+t),0)));const Lu=e=>{const t=e.reduce(((e,t)=>e+t),0)/2;return Ru(e).map((e=>e-t))};const Iu=e=>e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>Xn(...e))).map(((e,t,n)=>n.slice(t+1,n.length).concat(n.slice(0,t)))).map((e=>Ru(e).map((e=>Math.PI-e)))).map(((t,n)=>e[n]+t[0])).map(((t,n)=>Zn(t,e[n],e[(n+1)%e.length])?t:undefined));const Uu=e=>{const t=e.map((e=>Math.atan2(e[1],e[0])));return Iu(t).map((e=>e===undefined?undefined:[Math.cos(e),Math.sin(e)]))};const Qu=({vertices_coords:e,vertices_edges:t,edges_assignment:n,edges_vertices:s},r)=>{if(!t){t=Ts({edges_vertices:s})}const o=n?t[r].filter((e=>wt[n[e]])):t[r];if(o.length%2===0){return[]}const c=o.map((e=>s[e][0]===r?s[e]:[s[e][1],s[e][0]]));const a=c.map((t=>t.map((t=>e[t]))));const i=a.map((e=>j(e[1],e[0])));const f=is(i).map((e=>i[e]));const l=Uu(f);const d=f.map(b);const u=l.filter((e=>e!==undefined)).filter((e=>!d.map((t=>C(e,t))).map((e=>Math.abs(1-e)<.001)).reduce(((e,t)=>e||t),false)));return u};const Du=Object.freeze({__proto__:null,alternatingSum:Ru,alternatingSumDifference:Lu,kawasakiSolutions:Qu,kawasakiSolutionsRadians:Iu,kawasakiSolutionsVectors:Uu});const qu=({vertices_edges:e,edges_assignment:t})=>e.map((e=>e.map((e=>!wt[t[e]])).reduce(((e,t)=>e&&t),true))).map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined));const Wu=({edges_vertices:e,vertices_edges:t,edges_assignment:n})=>{if(!t){t=Ts({edges_vertices:e})}const s=t.map((e=>e.map((e=>xt[n[e]])).filter((e=>e!==0)).map(Math.sign).reduce(((e,t)=>e+t),0))).map((e=>e===2||e===-2));Cc({edges_vertices:e,edges_assignment:n}).forEach((e=>{s[e]=true}));qu({vertices_edges:t,edges_assignment:n}).forEach((e=>{s[e]=true}));return s.map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined))};const Gu=({vertices_coords:e,vertices_vertices:t,vertices_edges:n,edges_vertices:s,edges_assignment:r},o=a)=>{if(!t){t=$s({vertices_coords:e,vertices_edges:n,edges_vertices:s})}if(!n){n=Ts({edges_vertices:s})}const c=qs({vertices_coords:e,vertices_vertices:t,edges_vertices:s}).map(((e,t)=>e.filter(((e,s)=>wt[r[n[t][s]]])))).map((e=>e.length>1?ls(e):[0,0])).map((e=>Ru(e))).map((e=>Math.abs(e[0]-e[1])<o));Cc({edges_vertices:s,edges_assignment:r}).forEach((e=>{c[e]=true}));qu({vertices_edges:n,edges_assignment:r}).forEach((e=>{c[e]=true}));return c.map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined))};const Hu=Object.freeze({__proto__:null,validateKawasaki:Gu,validateMaekawa:Wu});const Ju={};Ju.prototype=Object.create(lu);Ju.prototype.constructor=Ju;const Zu=function(e){e.valley=t=>this.setValley(e,t);e.mountain=t=>this.setMountain(e,t);e.flat=()=>this.setFlat(e);e.unassigned=()=>this.setUnassigned(e);e.cut=()=>this.setCut(e);return e};Ju.prototype.line=function(...e){const t=Ie(...e);if(!t){return undefined}const n=yu(this,t);const s=n.flatMap((e=>Pu(this,e[0],e[1])));return Zu.call(this,s)};Ju.prototype.ray=function(...e){const t=Ie(...e);if(!t){return undefined}const n=Eu(this,t);const s=n.flatMap((e=>Pu(this,e[0],e[1])));return Zu.call(this,s)};Ju.prototype.segment=function(...e){const t=Re(...e);if(!t){return undefined}const n=Mu(this,t);const s=n.flatMap((e=>Pu(this,e[0],e[1])));return Zu.call(this,s)};Ju.prototype.polygon=function(...e){const t=$e(...e);if(!t){return undefined}const n=t.map(((e,t,n)=>[e,n[(t+1)%n.length]]));const s=n.flatMap((e=>Mu(this,e)));const r=s.flatMap((e=>Pu(this,e[0],e[1])));return Zu.call(this,r)};Ju.prototype.removeEdge=function(e){const t=this.edges_vertices[e];Bu(this,e);t.map((e=>ko(this,e))).map(((e,n)=>e?t[n]:undefined)).filter((e=>e!==undefined)).sort(((e,t)=>t-e)).forEach((e=>$u(this,e)));return true};Ju.prototype.validate=function(e){const t=Ec(this);t.vertices.kawasaki=Gu(this,e);t.vertices.maekawa=Wu(this);if(this.edges_foldAngle){t.edges.not_flat=this.edges_foldAngle.map(((e,t)=>Ft(e)?undefined:t)).filter((e=>e!==undefined))}if(t.summary==="valid"){if(t.vertices.kawasaki.length||t.vertices.maekawa.length){t.summary="invalid"}else if(t.edges.not_flat.length){t.summary="not flat"}}return t};Ju.prototype.defer=false;const Yu=Ju.prototype;const Xu=(e,t)=>{const n=[];const s=e.map(((e,t)=>t));const r=s.filter((e=>t[e]));const o=s.filter((e=>!t[e]));o.sort(((t,n)=>e[t]-e[n])).forEach(((e,t)=>{n[e]=t}));r.sort(((t,n)=>e[n]-e[t])).forEach(((e,t)=>{n[e]=o.length+t}));return n};const Ku=(e,t,n,s=a)=>{const r=Yr(e,t);if(r.length===0){return undefined}if(r.length===1){return r[0]}return r[0]};const em=(e,t,n,s)=>{const r=j(n,t);const o=R(e,r);return s?o>0:o<0};const tm=(e,t)=>!e.faces_vertices[t]?[0,0]:e.faces_vertices[t].map((t=>e.vertices_coords[t])).reduce(((e,t)=>[e[0]+t[0],e[1]+t[1]]),[0,0]).map((n=>n/e.faces_vertices[t].length));const nm={F:true,f:true,U:true,u:true};const sm={M:"V",m:"V",V:"M",v:"M"};const rm=e=>sm[e]||e;const om=(e,t)=>({center:e.faces_center[t],matrix:e.faces_matrix2[t],winding:e.faces_winding[t],crease:e.faces_crease[t],side:e.faces_side[t],layer:e.faces_layer[t]});const cm=(e,{vector:t,origin:n},s="V",r=a)=>{const o=rm(s);zo(e);if(!e.faces_layer){e.faces_layer=Array(e.faces_vertices.length).fill(0)}e.faces_center=e.faces_vertices.map(((t,n)=>tm(e,n)));if(!e.faces_matrix2){e.faces_matrix2=Wc(e,Ku(e,n,t,r))}e.faces_winding=Md(e.faces_matrix2);e.faces_crease=e.faces_matrix2.map(fe).map((e=>ce(e,t,n)));e.faces_side=e.faces_vertices.map(((t,n)=>em(e.faces_crease[n].vector,e.faces_crease[n].origin,e.faces_center[n],e.faces_winding[n])));const c=Qc(e,e.faces_matrix2);const i=ku({vertices_coords:c,edges_vertices:e.edges_vertices},{vector:t,origin:n},r).filter((t=>nm[e.edges_assignment[t]]));i.map((t=>e.edges_faces[t].find((e=>e!=null)))).map((t=>e.faces_winding[t])).map((e=>e?s:o)).forEach(((t,n)=>{e.edges_assignment[i[n]]=t;e.edges_foldAngle[i[n]]=Ot(t)}));const f=om(e,0);const l=e.faces_vertices.map(((e,t)=>t)).reverse().map((t=>{const n=om(e,t);const c=uc(e,t,n.crease,r);if(c===undefined){return undefined}e.edges_assignment[c.edges.new]=n.winding?s:o;e.edges_foldAngle[c.edges.new]=Ot(e.edges_assignment[c.edges.new]);const a=c.faces.map[c.faces.remove];a.forEach((t=>{e.faces_center[t]=tm(e,t);e.faces_side[t]=em(n.crease.vector,n.crease.origin,e.faces_center[t],n.winding);e.faces_layer[t]=n.layer}));return c})).filter((e=>e!==undefined));const d=Mn(...l.map((e=>e.faces.map)));const u=Mn(...l.map((e=>e.edges.map)).filter((e=>e!==undefined)));const m=l.map((e=>e.faces.remove)).reverse();e.faces_layer=Xu(e.faces_layer,e.faces_side);const g=d&&d[0]&&d[0].length===2;const p=g?d[0].filter((t=>e.faces_side[t])).shift():0;let _=f.matrix;if(s!==o){_=!g&&!e.faces_side[0]?f.matrix:ae(f.matrix,ge(f.crease.vector,f.crease.origin))}e.faces_matrix2=Wc(e,p).map((e=>ae(_,e)));delete e.faces_center;delete e.faces_winding;delete e.faces_crease;delete e.faces_side;return{faces:{map:d,remove:m},edges:{map:u}}};const am={};am.prototype=Object.create(lu);am.prototype.constructor=am;am.prototype.flatFold=function(){cm(this,Ie(arguments));return this};const im=am.prototype;const fm=1.1;const lm="Rabbit Ear";const dm=(e,t)=>[[0,0],[e,0],[e,t],[0,t]];const um=e=>zo({vertices_coords:e,edges_vertices:e.map(((e,t,n)=>[t,(t+1)%n.length])),edges_assignment:Array(e.length).fill("B")});const mm=(e=1)=>um(dm(e,e));const gm=(e=1,t=1)=>um(dm(e,t));const pm=(e=3,t=1)=>um(qe(e,t));const _m=()=>zo({vertices_coords:[[0,0],[1,0],[1,Math.SQRT2-1],[1,1],[Math.SQRT2-1,1],[0,1]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,2],[0,4],[0,3]],edges_assignment:Array.from("BBBBBBVVF")});const hm=()=>zo({vertices_coords:[[0,0],[Math.SQRT1_2,0],[1,0],[1,1-Math.SQRT1_2],[1,1],[1-Math.SQRT1_2,1],[0,1],[0,Math.SQRT1_2],[.5,.5],[Math.SQRT1_2,1-Math.SQRT1_2],[1-Math.SQRT1_2,Math.SQRT1_2]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[9,0],[9,2],[9,4],[10,0],[10,6],[10,4],[9,1],[10,7],[9,3],[10,5],[8,0],[8,9],[8,4],[8,10]],edges_assignment:Array.from("BBBBBBBBVVVVVVMMFFFFFF")});const vm=()=>zo({vertices_coords:[[0,0],[.5,0],[1,0],[1,.5],[1,1],[.5,1],[0,1],[0,.5],[.5,.5],[.5,(Math.SQRT2-1)/2],[(3-Math.SQRT2)/2,.5],[.5,(3-Math.SQRT2)/2],[(Math.SQRT2-1)/2,.5],[Math.SQRT1_2/2,Math.SQRT1_2/2],[1-Math.SQRT1_2/2,1-Math.SQRT1_2/2]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[0,9],[9,2],[2,10],[10,4],[4,11],[11,6],[6,12],[12,0],[1,9],[9,8],[3,10],[10,8],[5,11],[11,8],[7,12],[12,8],[2,8],[6,8],[0,13],[13,8],[13,9],[13,12],[4,14],[14,8],[14,10],[14,11]],edges_assignment:Array.from("BBBBBBBBVVVVVVVVMVMVMVMVMMFFFFFFFF")});const bm=()=>zo({vertices_coords:[[0,1],[0,Math.SQRT1_2],[0,.5],[0,1-Math.SQRT1_2],[0,0],[.5,.5],[1,1],[(1-Math.SQRT1_2)/2,Math.SQRT1_2/2],[Math.SQRT1_2/2,(1-Math.SQRT1_2)/2],[1-Math.SQRT1_2,0],[.5,0],[Math.SQRT1_2,0],[1,0],[.5,(1-Math.SQRT1_2)/2],[1-Math.SQRT1_2/2,(1-Math.SQRT1_2)/2],[(1-Math.SQRT1_2)/2,1-Math.SQRT1_2/2],[(1-Math.SQRT1_2)/2,.5],[(1+Math.SQRT1_2)/2,1-Math.SQRT1_2/2],[1,Math.SQRT1_2],[Math.SQRT1_2,1],[1-Math.SQRT1_2/2,(1+Math.SQRT1_2)/2],[Math.SQRT1_2/2,(1+Math.SQRT1_2)/2],[.5,1],[1,.5],[(1+Math.SQRT1_2)/2,Math.SQRT1_2/2],[.5,(1+Math.SQRT1_2)/2],[(1+Math.SQRT1_2)/2,.5],[1-Math.SQRT1_2,1],[1,1-Math.SQRT1_2]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[4,7],[4,8],[4,9],[9,10],[10,11],[11,12],[8,13],[13,14],[15,16],[16,7],[3,7],[7,5],[5,17],[17,18],[19,20],[20,5],[5,8],[8,9],[2,15],[14,10],[21,22],[23,24],[10,8],[7,2],[12,14],[0,15],[22,25],[25,5],[5,13],[13,10],[2,16],[16,5],[5,26],[26,23],[6,17],[6,20],[11,14],[14,5],[5,21],[21,27],[28,24],[24,5],[5,15],[15,1],[12,5],[5,0],[20,25],[25,21],[24,26],[26,17],[12,24],[0,21],[12,28],[28,23],[23,18],[18,6],[6,19],[19,22],[22,27],[27,0],[22,20],[17,23]],edges_assignment:Array.from("BBBBFFVVBBBBMMMMFVVFFVVFVVVVVVVVVMMVVMMVVVFVVFFVVFMMMMMMVVBBBBBBBBVV")});const ym=()=>zo({vertices_coords:[[0,0],[.25,0],[.5,0],[.75,0],[1,0],[0,1],[0,.75],[0,.5],[0,.25],[.25,.25],[.5,.5],[.75,.75],[1,1],[.25,1],[.25,.75],[.25,.5],[1,.25],[.75,.25],[.5,.25],[.5,1],[1,.5],[.5,.75],[.75,.5],[.75,1],[1,.75]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[5,6],[6,7],[7,8],[8,0],[0,9],[9,10],[10,11],[11,12],[13,14],[14,15],[15,9],[9,1],[16,17],[17,18],[18,9],[9,8],[7,14],[14,19],[20,17],[17,2],[2,9],[9,7],[19,21],[21,10],[10,18],[18,2],[20,22],[22,10],[10,15],[15,7],[4,17],[17,10],[10,14],[14,5],[23,11],[11,22],[22,17],[17,3],[6,14],[14,21],[21,11],[11,24],[12,23],[23,19],[19,13],[13,5],[4,16],[16,20],[20,24],[24,12],[19,11],[11,20]],edges_assignment:Array.from("BBBBBBBBVFFVFVVFFVVFMFMFMFFFFFFFFFVFFVFVVFFVVFBBBBBBBBMF")});const Em=()=>zo({vertices_coords:[[0,0],[2-Math.SQRT2,0],[1,0],[0,1],[0,2-Math.SQRT2],[.5,.5],[Math.SQRT1_2,Math.SQRT1_2],[1,1],[Math.SQRT1_2,1-Math.SQRT1_2],[1,Math.SQRT2-1],[1-Math.SQRT1_2,Math.SQRT1_2],[Math.SQRT2-1,1],[Math.SQRT1_2,1],[1,Math.SQRT1_2]],edges_vertices:[[0,1],[1,2],[3,4],[4,0],[0,5],[5,6],[6,7],[0,8],[8,9],[0,10],[10,11],[8,1],[10,4],[8,6],[6,12],[3,10],[10,5],[5,8],[8,2],[10,6],[6,13],[7,12],[12,11],[11,3],[11,6],[6,9],[2,9],[9,13],[13,7]],edges_assignment:Array.from("BBBBFFFVFVFMMVVVFFVVVBBBMMBBB")});const Mm=Object.freeze({__proto__:null,bird:vm,fish:hm,frog:bm,kite:_m,polygon:pm,rectangle:gm,square:mm,squareFish:Em,windmill:ym});const Am=(...e)=>zo(Object.assign(Object.create(lu),{...e.reduce(((e,t)=>({...e,...t})),{}),file_spec:fm,file_creator:lm}));const xm=(...e)=>zo(Object.assign(Object.create(Yu),{...e.length?e.reduce(((e,t)=>({...e,...t})),{}):mm(),file_spec:fm,file_creator:lm,frame_classes:["creasePattern"]}));const wm=(...e)=>zo(Object.assign(Object.create(im),{...e.length?e.reduce(((e,t)=>({...e,...t})),{}):mm(),file_spec:fm,file_creator:lm,frame_classes:["foldedForm"]}));Am.prototype=lu;Am.prototype.constructor=Am;xm.prototype=Yu;xm.prototype.constructor=xm;wm.prototype=im;wm.prototype.constructor=wm;Object.keys(Mm).forEach((e=>{Am[e]=(...t)=>Am(Mm[e](...t));xm[e]=(...t)=>xm(Mm[e](...t));wm[e]=(...t)=>wm(Mm[e](...t))}));const km=(e,t)=>{const n=R(e.normal,t.normal);if(Math.abs(n)<a){return undefined}const s=e.distance*t.normal[1]-t.distance*e.normal[1];const r=t.distance*e.normal[0]-e.distance*t.normal[0];return[s/n,r/n]};const Om=(e,t)=>{const n=b(q(j(t,e)));return[{normal:n,distance:C(w(e,t),n)/2}]};const jm=(e,t)=>{const n=b(j(t,e));return[{normal:n,distance:C(w(e,t),n)/2}]};const Fm=(e,t)=>{const n=km(e,t);return n===undefined?[{normal:e.normal,distance:(e.distance+t.distance*C(e.normal,t.normal))/2}]:[w,j].map((n=>b(n(e.normal,t.normal)))).map((e=>({normal:e,distance:C(n,e)})))};const Sm=(e,t)=>{const n=q(e.normal);const s=C(t,n);return[{normal:n,distance:s}]};const Cm=(e,t,n)=>{const s=C(t,e.normal);const r=e.distance-s;const o=U(t,n);if(r>o){return[]}const c=Math.sqrt(o*o-r*r);const i=M(e.normal,r);const f=w(t,i);const l=M(q(e.normal),c);const d=c<a?[f]:[w(f,l),j(f,l)];return d.map((e=>b(j(n,e)))).map((e=>({normal:e,distance:C(t,e)})))};const Vm=e=>e<0?-((-e)**(1/3)):e**(1/3);const Pm=(e,t,n,s,r)=>{switch(e){case 1:return[-r/s];case 2:{const e=s**2-4*n*r;if(e<-a){return[]}const t=-s/(2*n);if(e<a){return[t]}const o=Math.sqrt(e)/(2*n);return[t+o,t-o]}case 3:{const e=n/t;const o=s/t;const c=r/t;const i=(3*o-e**2)/9;const f=(9*e*o-27*c-2*e**3)/54;const l=i**3+f**2;const d=-e/3;if(l>0){const e=Math.sqrt(l);const t=Vm(f+e);const n=Vm(f-e);return[d+t+n]}if(Math.abs(l)<a){const e=f**(1/3);if(f<0){return[]}return[d+2*e,d-e]}const u=Math.sqrt(-l);const m=Math.atan2(u,f)/3;const g=(f**2-l)**(1/6);const p=g*Math.cos(m);const _=g*Math.sin(m);return[d+2*p,d-p-Math.sqrt(3)*_,d-p+Math.sqrt(3)*_]}default:return[]}};const Tm=(e,t,n,s)=>{if(Math.abs(1-C(e.normal,n)/e.distance)<.02){return[]}const r=q(e.normal);const o=j(w(n,M(e.normal,e.distance)),M(s,2));const c=j(M(e.normal,e.distance),n);const i=C(s,t.normal)-t.distance;const f=2*C(c,r);const l=C(c,c);const d=C(w(o,c),r);const u=C(o,c);const m=C(r,t.normal);const g=C(c,t.normal);const p=m;const _=i+d*m+g;const h=i*f+u*m+d*g;const v=i*l+u*g;let y=0;if(Math.abs(h)>a){y=1}if(Math.abs(_)>a){y=2}if(Math.abs(p)>a){y=3}return Pm(y,p,_,h,v).map((t=>w(M(e.normal,e.distance),M(r,t)))).map((e=>({p:e,normal:b(j(e,n))}))).map((e=>({normal:e.normal,distance:C(e.normal,T(e.p,n))})))};const Nm=(e,t,n)=>{const s=q(e.normal);const r=C(s,t.normal);if(Math.abs(r)<a){return undefined}const o=C(n,s);const c=C(n,t.normal);const i=(t.distance+2*o*r-c)/(2*r);return[{normal:s,distance:i}]};const zm=(e,...t)=>[null,Om,jm,Fm,Sm,Cm,Tm,Nm][e](...t);const Bm=Object.freeze({__proto__:null,normalAxiom:zm,normalAxiom1:Om,normalAxiom2:jm,normalAxiom3:Fm,normalAxiom4:Sm,normalAxiom5:Cm,normalAxiom6:Tm,normalAxiom7:Nm});const $m=(e,t)=>[{vector:b(j(...X(t,e))),origin:e}];const Rm=(e,t)=>[{vector:b(q(j(...X(t,e)))),origin:T(e,t)}];const Lm=(e,t)=>Pr(e,t);const Im=(e,t)=>[{vector:q(b(e.vector)),origin:t}];const Um=(e,t,n)=>(so({radius:U(t,n),origin:t},e)||[]).map((e=>({vector:b(q(j(...X(e,n)))),origin:T(n,e)})));const Qm=(e,t,n,s)=>Tm(Gn(e),Gn(t),n,s).map(Hn);const Dm=(e,t,n)=>{const s=no(e,{vector:t.vector,origin:n},it,it).point;return s===undefined?[]:[{vector:b(q(j(...X(s,n)))),origin:T(n,s)}]};const qm=(e,...t)=>[null,$m,Rm,Lm,Im,Um,Qm,Dm][e](...t);const Wm=Object.freeze({__proto__:null,axiom:qm,axiom1:$m,axiom2:Rm,axiom3:Lm,axiom4:Im,axiom5:Um,axiom6:Qm,axiom7:Dm});const Gm=(e,t)=>{const n=ge(e.vector,e.origin);return oe(n,t)};const Hm=(e,t,n,s)=>[[n,s].map((t=>Dr(e,t,ct))).reduce(((e,t)=>e&&t),true)];const Jm=Hm;const Zm=(e,t,n,s)=>{const r=[n,s].map((t=>pu(e,t,ct,it)));if(r[0]===undefined||r[1]===undefined){return[false,false]}const o=t.map((t=>t===undefined?undefined:pu(e,t,ct,it)));const c=[0,1].map((e=>o[e]!==undefined));const a=t.map((e=>e===undefined?undefined:[Gm(e,r[0][0]),Gm(e,r[0][1])]));const i=a.map((e=>e===undefined?false:Ir({vector:O(r[1][1],r[1][0]),origin:r[1][0]},e[0],ut)||Ir({vector:O(r[1][1],r[1][0]),origin:r[1][0]},e[1],ut)||Ir({vector:O(e[1],e[0]),origin:e[0]},r[1][0],ut)||Ir({vector:O(e[1],e[0]),origin:e[0]},r[1][1],ut)));return[0,1].map((e=>i[e]===true&&c[e]===true))};const Ym=(e,t,n,s)=>{const r=no(n,{vector:q(n.vector),origin:s},it,it).point;return[[s,r].filter((e=>e!==undefined)).map((t=>Dr(e,t,ct))).reduce(((e,t)=>e&&t),true)]};const Xm=(e,t,n,s,r)=>{if(t.length===0){return[]}const o=[s,r].map((t=>Dr(e,t,ct))).reduce(((e,t)=>e&&t),true);const c=t.map((e=>Gm(e,r))).map((t=>Dr(e,t,ct)));return c.map((e=>e&&o))};const Km=function(e,t,n,s,r,o){if(t.length===0){return[]}const c=[r,o].map((t=>Dr(e,t,ct))).reduce(((e,t)=>e&&t),true);if(!c){return t.map((()=>false))}const a=t.map((e=>Gm(e,r))).map((t=>Dr(e,t,ct)));const i=t.map((e=>Gm(e,o))).map((t=>Dr(e,t,ct)));return t.map(((e,t)=>a[t]&&i[t]))};const eg=(e,t,n,s,r)=>{const o=Dr(e,r,ct);if(!t.length){return[false]}const c=Gm(t[0],r);const a=Dr(e,c,ct);const i=fo(e,s,ut,it)!==undefined;const f=no(s,t[0],it,it).point;const l=f?Dr(e,f,ct):false;return[o&&a&&i&&l]};const tg=(e,t,n,...s)=>[null,Hm,Jm,Zm,Ym,Xm,Km,eg][e](t,n,...s);const ng=Object.freeze({__proto__:null,validateAxiom:tg,validateAxiom1:Hm,validateAxiom2:Jm,validateAxiom3:Zm,validateAxiom4:Ym,validateAxiom5:Xm,validateAxiom6:Km,validateAxiom7:eg});const sg=e=>e.map((e=>typeof e==="object"&&e.vector?Hn(e):e));const rg=(e,t,...n)=>{const s=qm(e,...n);tg(e,t,s,...n).map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined)).forEach((e=>delete s[e]));return s};const og=(e,t,...n)=>{const s=zm(e,...n).map(Hn);tg(e,t,s,...sg(n)).map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined)).forEach((e=>delete s[e]));return s};const cg=Object.freeze({__proto__:null,axiomWithBoundary:rg,normalAxiomWithBoundary:og});const ag={...Wm,...Bm,...cg,...ng};const ig=()=>{const e={};e.file_spec=fm;e.file_creator=lm;e.file_classes=["singleModel"];e.frame_classes=[];e.frame_attributes=[];e.vertices_coords=[];e.faces_vertices=[];return e};const fg=e=>{if(!e.edges_foldAngle||!e.edges_foldAngle.length){return}let t=true;for(let n=0;n<e.edges_foldAngle.length;n+=1){if(e.edges_foldAngle[n]!==0&&e.edges_foldAngle[n]!==-180&&e.edges_foldAngle[n]!==180){t=false;break}}e.frame_classes.push(t?"creasePattern":"foldedForm");e.frame_attributes.push(t?"2D":"3D")};const lg=e=>e.map(((e,t,n)=>[e,n[(t+1)%n.length]]));const dg=({faces_vertices:e})=>{const t={};const n=[];e.flatMap(lg).forEach((e=>{const s=[e.join(" "),`${e[1]} ${e[0]}`];if(s[0]in t||s[1]in t){return}n.push(e);t[s[0]]=true}));return n};const ug=e=>e.slice(1).map((e=>parseInt(e,10)-1));const mg=e=>e.slice(1).map((e=>parseFloat(e)));const gg=e=>{const t=e.split("\n").map((e=>e.trim().split(/\s+/)));const n=ig();for(let e=0;e<t.length;e+=1){switch(t[e][0].toLowerCase()){case"f":n.faces_vertices.push(ug(t[e]));break;case"v":n.vertices_coords.push(mg(t[e]));break}}n.faces_normal=Cs(n);n.faces_center=ur(n);n.edges_vertices=dg(n);n.faces_edges=ar(n);n.edges_faces=Hs(n);n.edges_foldAngle=er(n);n.edges_assignment=Xs(n);n.vertices_vertices=Bs(n);delete n.faces_normal;delete n.faces_center;delete n.edges_faces;fg(n);return n};const pg=(e,t)=>{const n=Po(e,t);n.vertices_vertices=$s(n);const s=or(n);n.faces_vertices=s.faces_vertices;n.faces_edges=s.faces_edges;delete n.vertices_edges;return n};const _g=({vertices_coords:e,edges_vertices:t})=>{const n=t.map((t=>t.map((t=>e[t])))).map((e=>I(...e))).filter((e=>e>1e-4));const s=n.reduce(((e,t)=>Math.min(e,t)),Infinity);return s===Infinity?undefined:s};const hg=({vertices_coords:e,edges_vertices:t})=>{const n=_g({vertices_coords:e,edges_vertices:t});const s=Sc({vertices_coords:e});const r=s&&s.span?Math.max(...s.span):1;const o=r*.01;const c=n/20;return n===undefined?o:Math.min(o,c)};const vg=function(e){const t=`${e}`.match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);return Math.max(0,(t[1]?t[1].length:0)-(t[2]?+t[2]:0))};const bg=function(e,t=15){const n=typeof e==="number"?e:parseFloat(e);if(Number.isNaN(n)){return e}const s=parseFloat(n.toFixed(t));if(vg(s)===Math.min(t,vg(n))){return n}return s};const yg=Object.freeze({__proto__:null,cleanNumber:bg});const Eg=(e,t,n="epsilon")=>{if(typeof t==="object"&&typeof t[n]==="number"){return t[n]}return typeof t==="number"?t:hg(e)};const Mg=e=>{const t=Sc({vertices_coords:e});const n=t.min[1]+t.span[1]/2;const s=Math.min(-t.min[1],-t.max[1]);const r=Math.max(-t.min[1],-t.max[1]);const o=r-s;const c=s+o/2;const a=n-c;const i=bg(a,8);for(let t=0;t<e.length;t+=1){e[t][1]=-e[t][1]+i}};const Ag=(e,t)=>e==null?null:Array.from(e.childNodes).filter((e=>e.attributes&&e.attributes.length)).filter((e=>Array.from(e.attributes).filter((e=>e.nodeValue===t)).shift()!==undefined)).shift();const xg=(e,t)=>{const n=Ag(e,t);const s=n?Array.from(n.childNodes).shift():null;return s?s.textContent:undefined};const wg=e=>{const t=Ag(e,"lines");const n=t?Array.from(t.childNodes).filter((e=>e.getAttribute)).filter((e=>e.getAttribute("class").split(" ").includes("oripa.OriLineProxy"))).shift():undefined;return n?Array.from(n.childNodes):[]};const kg=e=>e.filter((e=>e.nodeName==="void")).filter((e=>e.childNodes)).map((e=>Ag(e,"oripa.OriLineProxy"))).filter((e=>e)).map((e=>["type","x0","x1","y0","y1"].map((t=>Ag(e,t))).map((e=>e?Array.from(e.childNodes):[])).map((e=>e.filter((e=>e.nodeName==="double"||e.nodeName==="int")).shift())).map((e=>e&&e.childNodes[0]?e.childNodes[0].data:"0")).map(parseFloat)));const Og=["F","B","M","V","U"];const jg=e=>{const t={};t.vertices_coords=e.flatMap((e=>[[e[1],e[3]],[e[2],e[4]]]));t.edges_vertices=e.map(((e,t)=>[t*2,t*2+1]));t.edges_assignment=e.map((e=>Og[e[0]]));t.edges_foldAngle=Ks(t);return t};const Fg=e=>{const t=di(e,"text/xml");const n=Array.from(t.childNodes).filter((e=>e.getAttribute)).filter((e=>e.getAttribute("class").split(" ").includes("oripa.DataSet"))).shift();return jg(kg(wg(n)))};const Sg=(e,t)=>{const n={file_description:"memo",file_author:"originalAuthorName",file_title:"title"};Object.keys(n).forEach((t=>{n[t]=xg(e,n[t])}));Object.keys(n).filter((e=>n[e])).forEach((e=>{t[e]=n[e]}));t.file_classes=["singleModel"];t.frame_classes=["creasePattern"]};const Cg=(e,t)=>{const n=di(e,"text/xml");const s=n&&n.childNodes?Array.from(n.childNodes):[];const r=s.filter((e=>e.getAttribute)).filter((e=>e.getAttribute("class").split(" ").includes("oripa.DataSet"))).shift();const o=jg(kg(wg(r)));if(t&&t.invertVertical&&o.vertices_coords){Mg(o.vertices_coords)}const c=Eg(o,t);const a=pg(o,c);Sg(r,a);return a};Object.assign(Cg,{opxEdgeGraph:Fg});const Vg=(e,t)=>{const n=Qa(e).toUpperCase();return t&&t[n]?t[n]:sd(...Ua(e))};const Pg=(e,t)=>{switch(t){case"M":case"m":return-180*e;case"V":case"v":return 180*e;default:return 0}};const Tg=(e,t)=>{const n=c().getComputedStyle!=null?c().getComputedStyle(e).stroke:"";if(n!==""&&n!=="none"){return n}if(t.stroke!==undefined){return t.stroke}return undefined};const Ng=(e,t)=>{const n=c().getComputedStyle!=null?c().getComputedStyle(e).opacity:"";if(n!==""){const e=parseFloat(n);if(!Number.isNaN(e)){return e}}if(t.opacity!==undefined){const e=parseFloat(t.opacity);if(!Number.isNaN(e)){return e}}return undefined};const zg=Object.freeze({__proto__:null,colorToAssignment:Vg,getEdgeOpacity:Ng,getEdgeStroke:Tg,opacityToFoldAngle:Pg});const Bg=(e,t)=>t.map((t=>e.getAttribute(t))).map((e=>e==null?0:e)).map(parseFloat);const $g=e=>[Bg(e,["x1","y1","x2","y2"])];const Rg=function(e){const[t,n,s,r]=Bg(e,["x","y","width","height"]);return[[t,n,t+s,n],[t+s,n,t+s,n+r],[t+s,n+r,t,n+r],[t,n+r,t,n]]};const Lg=e=>{const t=e.split(/[\s,]+/).map(parseFloat);return Array.from(Array(Math.floor(t.length/2))).map(((e,n)=>[t[n*2+0],t[n*2+1]]))};const Ig=e=>Lg(e.getAttribute("points")||"").map(((e,t,n)=>[n[t][0],n[t][1],n[(t+1)%n.length][0],n[(t+1)%n.length][1]]));const Ug=function(e){const t=Ig(e);t.pop();return t};const Qg={L:true,V:true,H:true,Z:true};const Dg=e=>Si(e.getAttribute("d")||"").filter((e=>Qg[e.command.toUpperCase()])).map((e=>[e.start,e.end])).filter((e=>!ot(...e))).map((e=>e.flat()));const qg={line:$g,rect:Rg,polygon:Ig,polyline:Ug,path:Dg};const Wg=(e,t)=>{const n=[[e[0],e[1]],[e[2],e[3]]];if(!t){return n}const s=fi(t);return s?n.map((e=>oe(s,e))):n};const Gg=e=>Ei(e).filter((e=>qg[e.element.nodeName])).flatMap((e=>qg[e.element.nodeName](e.element).map((t=>Wg(t,e.attributes.transform))).map((t=>({...e,segment:t})))));const Hg=e=>{if(!c().document.body){return undefined}const t=c().document.createElement("div");t.setAttribute("display","none");c().document.body.appendChild(t);t.appendChild(e);return t};const Jg=e=>_i(e).map((e=>e.nodeName==="style")).reduce(((e,t)=>e||t),false);const Zg=e=>{const s=typeof e==="string"?di(e,"image/svg+xml"):e;if(Jg(s)&&t){console.warn(n.backendStylesheet)}const r=ui(s)===c().document?undefined:Hg(s);const o=Gg(s);o.map((e=>({data:{assignment:e.attributes["data-assignment"],foldAngle:e.attributes["data-foldAngle"]},stroke:Tg(e.element,e.attributes),opacity:Ng(e.element,e.attributes)}))).forEach(((e,t)=>{o[t]={...o[t],...e}}));if(r&&r.parentNode){r.parentNode.removeChild(r)}return o};const Yg=e=>{if(!e||!e.assignments){return undefined}const t={};Object.keys(e.assignments).forEach((n=>{const s=Qa(n).toUpperCase();t[s]=e.assignments[n]}));return t};const Xg=(e,t="#f0f",n=undefined)=>{if(e){return e}return Vg(t,n)};const Kg=(e,t=1,n=undefined)=>{if(e){return parseFloat(e)}return Pg(t,n)};const ep=(e,t)=>{const n=Yg(t);if(n){e.forEach((e=>{delete e.data.assignment;delete e.data.foldAngle}))}const s=e.map((e=>Xg(e.data.assignment,e.stroke,n)));const r=e.map(((e,t)=>Kg(e.data.foldAngle,e.opacity,s[t])));return{edges_assignment:s,edges_foldAngle:r}};const tp=(e,t)=>{const n=Zg(e);const{edges_assignment:s,edges_foldAngle:r}=ep(n,t);const o=t&&t.fast?e=>e:bg;const c=n.flatMap((e=>e.segment)).map((e=>e.map((e=>o(e,12)))));const a=n.map(((e,t)=>[t*2,t*2+1]));return{vertices_coords:c,edges_vertices:a,edges_assignment:s,edges_foldAngle:r}};const np=(e,t)=>{const n=tp(e,t);const s=Eg(n,t);if(t&&t.invertVertical&&n.vertices_coords){Mg(n.vertices_coords)}const r=pg(n,s);const o=t&&t.fast?e=>e:bg;r.vertices_coords=r.vertices_coords.map((e=>e.map((e=>o(e,12)))));if(typeof t!=="object"||t.boundary!==false){r.edges_assignment.map(((e,t)=>t)).filter((e=>r.edges_assignment[e]==="B"||r.edges_assignment[e]==="b")).forEach((e=>{r.edges_assignment[e]="F"}));const{edges:e}=Nc(r);e.forEach((e=>{r.edges_assignment[e]="B"}))}return{file_spec:1.1,file_creator:"Rabbit Ear",frame_classes:["creasePattern"],...r}};Object.assign(np,{...zg,svgSegments:Zg,svgEdgeGraph:tp,planarizeGraph:pg,makeEpsilon:hg});const sp={objToFold:gg,opxToFold:Cg,svgToFold:np,foldToSvg:ou,foldToObj:au};const rp=e=>e.replace(/([-_][a-z])/gi,(e=>e.toUpperCase().replace("-","").replace("_","")));const op=e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z])([A-Z])(?=[a-z])/g,"$1-$2").toLowerCase();const cp=e=>e.charAt(0).toUpperCase()+e.slice(1);const ap=Object.freeze({__proto__:null,capitalized:cp,toCamel:rp,toKebab:op});const ip={...yn,..._o,...Ue,...yg,...Os,...ap};const fp=e=>!e.file_frames?1:e.file_frames.length+1;const lp=(e,t=1)=>{if(!e.file_frames||e.file_frames.length<t){return e}const s=["frame_parent","frame_inherit"];const r={visited_frames:[]};const o={};Vt(e,"file").filter((e=>e!=="file_frames")).forEach((t=>{o[t]=e[t]}));const c=(e,t,s)=>{if(r.visited_frames.indexOf(t)!==-1){throw new Error(n.graphCycle)}r.visited_frames.push(t);s=[t].concat(s);if(t===0){return s}if(e.file_frames[t-1].frame_inherit&&e.file_frames[t-1].frame_parent!=null){return c(e,e.file_frames[t-1].frame_parent,s)}return s};return c(e,t,[]).map((t=>{if(t===0){const t=e.file_frames;e.file_frames=null;const n=Xc(e);e.file_frames=t;delete n.file_frames;s.forEach((e=>delete n[e]));return n}const n=Xc(e.file_frames[t-1]);s.forEach((e=>delete n[e]));return n})).reduce(((e,t)=>Object.assign(e,t)),o)};const dp=e=>{const t={...e};delete t.file_frames;return t};const up=e=>{if(!e){return[]}if(!e.file_frames||!e.file_frames.length){return[e]}return[dp(e),...e.file_frames]};const mp=(e,t)=>Array.from(Array(fp(e))).map(((t,n)=>lp(e,n))).filter((e=>e.frame_classes&&e.frame_classes.includes(t)));const gp=Object.freeze({__proto__:null,countFrames:fp,flattenFrame:lp,getFramesAsFlatArray:up,getFramesByClassName:mp});const pp=({vertices_coords:e,edges_vertices:t},n,s=a)=>{const r=t=>t.map((t=>e[t])).map((e=>j(e,n.origin))).map((e=>R(n.vector,e))).sort(((e,t)=>Math.abs(t)-Math.abs(e))).map(Math.sign).shift();const o=Fu({vertices_coords:e,edges_vertices:t},n,s,mt);const c={};ku({vertices_coords:e,edges_vertices:t},n,s).forEach((e=>{c[e]=true}));return t.map(((e,t)=>{if(c[t]===true){return 2}if(o[t].point!==undefined){return 0}return r(e)}))};const _p=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},r,o=a)=>{if(!s){s=ar({edges_vertices:t,faces_vertices:n})}const c=pp({vertices_coords:e,edges_vertices:t},r,o);const i=s.map((e=>e.map((e=>c[e])).filter((e=>e!==2))));const f=i.map((e=>e.includes(0)));const l=i.map(((e,t)=>f[t]?false:e.reduce(((t,n)=>t&&n===e[0]),true)));return l.map(((e,t)=>e?i[t][0]:0))};const hp=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s,faceOrders:r},o,c=a)=>{if(!r){throw new Error("faceOrders required")}const i=_p({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},o,c);const f=[-1,1].map((e=>i.map(((e,t)=>({s:e,f:t}))).filter((t=>t.s===e||t.s===0)).map((e=>e.f))));const l=f.map((e=>Od(r,e)));console.log("facesSide",i);console.log("sidesFaces",f);console.log("sidesFaceOrders",l);const d=Cs({vertices_coords:e,faces_vertices:n});const u=l.map((e=>jd({faceOrders:e,faces_normal:d})));console.log("sidesLayersFace",u)};const vp=Object.freeze({__proto__:null,getEdgesSide:pp,getFacesSide:_p,getFlapsThroughLine:hp});const bp=({vertices_coords:e},{vector:t,origin:n},s=it,r=a)=>{const o=h(t);const c=Math.sqrt(o);if(c<r){return e.map((()=>false))}return e.map((e=>j(e,n))).map((e=>Math.abs(R(e,t))<r&&s(C(e,t)/o,r/c)))};const yp=({vertices_coords:e,edges_vertices:t},n,s=it,r=a)=>{if(!e||!t){return{vertices:[],edges:{collinear:[],intersected:[]}}}const o=bp({vertices_coords:e},n,s,r);const c=t.map((e=>o[e[0]]+o[e[1]]));const i=t.map((t=>t.map((t=>e[t])))).map(((e,t)=>c[t]===0?no(Wn(...e),n,ut,s):{}));i.map(((e,t)=>t)).filter((e=>!i[e].point)).forEach((e=>delete i[e]));const f=c.map((e=>e===2));return{vertices:o,edges:{collinear:f,intersected:i}}};const Ep=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},r,o=it,c=a)=>{const{vertices:i,edges:{collinear:f,intersected:l}}=yp({vertices_coords:e,edges_vertices:t},r,o,c);if(!n){return{vertices:i,edges:{collinear:f,intersected:l},faces:{edges:[],vertices:[]}}}if(!s){s=ar({edges_vertices:t,faces_vertices:n})}const d=s.map((e=>e.filter((e=>f[e]))));const u=s.map((e=>e.filter((e=>l[e]))));const m=n.map((e=>e.filter((e=>i[e]))));const g=n.map(((e,t)=>{if(d[t].length){return undefined}const n=u[t];const s=m[t];return n.length+s.length?{edges:n,vertices:s}:undefined}));Object.keys(g).filter((e=>g[e]===undefined)).forEach((e=>delete g[e]));return{faces:g,edges:{intersected:l,collinear:f.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined))},vertices:i.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined))}};const Mp=(e,t,n=a)=>Ep(e,t,it,n);const Ap=(e,t,n=a)=>Ep(e,t,lt,n);const xp=(e,t,n=a)=>Ep(e,Wn(...t),ut,n);const wp=Object.freeze({__proto__:null,intersectEdgesLineFunc:yp,intersectGraphLine:Mp,intersectGraphLineFunc:Ep,intersectGraphRay:Ap,intersectGraphSegment:xp,intersectVerticesLineFunc:bp});const kp=(e,t)=>{const n=Object.keys(yt);const s=Ut(t);const r=Ut(e);const o={};n.forEach((e=>{const n=Vt(t,e).shift();o[e]=n!==undefined?t[n]:[]}));const c={};n.forEach((t=>{c[t]=on(e,t)}));const a={vertices:[],edges:[],faces:[]};n.forEach((e=>o[e].forEach(((t,n)=>{a[e][n]=c[e]++}))));const i=Xc(t);n.forEach((e=>Fn(i,e,a[e])));Object.keys(i).filter((e=>i[e].constructor===Array)).filter((t=>!(t in e))).forEach((t=>{e[t]=[]}));Object.keys(i).filter((e=>i[e].constructor===Array)).forEach((t=>i[t].forEach(((n,s)=>{e[t][s]=n}))));const f={};const l={};n.forEach((t=>{const n=Vt(e,t).shift();l[t]=n!==undefined?e[n]:[]}));n.forEach((e=>{const t=l[e].map((()=>0));a[e].forEach((e=>{t[e]=1}));f[e]=On(t)}));const d=s!==r?(e.vertices_coords||[]).map(((e,t)=>e.length===2?t:undefined)).filter((e=>e!==undefined)):[];d.forEach((t=>{e.vertices_coords[t][2]=0}));return f};const Op=Object.freeze({__proto__:null,join:kp});const jp=({vertices_coords:e,edges_vertices:t},n)=>Wn(...t[n].map((t=>e[t])));const Fp=({vertices_coords:e,edges_vertices:t},n,s,r,o=a)=>{const c=jp({vertices_coords:e,edges_vertices:t},n);const i=jp({vertices_coords:e,edges_vertices:t},s);const f=Vr(c,i,r,o);const l=nr({vertices_coords:e,edges_vertices:t}).map(((n,s)=>({vector:n,origin:e[t[s][0]]})));const d=f.map((e=>e.map((e=>{const t=l.map((t=>no(e,t,it,ut,o).a)).filter((e=>e!==undefined));const n=Math.min(...t);const s=Math.max(...t);return Math.abs(s-n)<o?undefined:[w(e.origin,M(e.vector,n)),w(e.origin,M(e.vector,s))]})).filter((e=>e!==undefined))));return d};const Sp=Object.freeze({__proto__:null,pleat:Fp});const Cp=(e,t=a)=>rr(e,t).map((t=>e.vertices_coords.map((e=>e[0]>t.min[0]&&e[1]>t.min[1]&&e[0]<t.max[0]&&e[1]<t.max[1]))));const Vp=({vertices_coords:e,edges_vertices:t,edges_coords:n},s=a)=>{const r=rr({vertices_coords:e,edges_vertices:t,edges_coords:n},s);const o=t.map((()=>[]));for(let e=0;e<t.length-1;e+=1){for(let n=e+1;n<t.length;n+=1){const t=(r[e].max[0]<r[n].min[0]||r[n].max[0]<r[e].min[0])&&(r[e].max[1]<r[n].min[1]||r[n].max[1]<r[e].min[1]);o[e][n]=!t;o[n][e]=!t}}for(let e=0;e<t.length;e+=1){o[e][e]=true}return o};const Pp=Object.freeze({__proto__:null,getEdgesEdgesOverlapingSpans:Vp,getEdgesVerticesOverlappingSpan:Cp});const Tp=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},r,o=[],c=it,i=a)=>{if(!e||!t||!n){return undefined}const{faces:f,edges:l}=Ep({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},r,c,i);if(o.length){f.forEach(((t,s)=>{const r=n[s].map((t=>e[t]));const c=o.map((e=>({...qr(r,e),point:e}))).filter((e=>e.overlap));f[s].points=c}))}f.forEach(((e,t)=>{const n=f[t].points?f[t].vertices.length+f[t].edges.length+f[t].points.length:f[t].vertices.length+f[t].edges.length;if(n!==2){delete f[t]}}));let d=e.length;const u=[];const m=[];const g=[];const p=[];l.intersected.forEach((({a:e,b:t,point:n},s)=>{g[d]=s;m[d]={a:e,b:t,point:n,edge:s};u[d++]=n}));f.forEach((({points:e},t)=>e.forEach((e=>{p[d]=t;m[d]={...e,face:t};u[d++]=e.point}))));const _=wn(g);const h=On(p);let v=t.length;const b=[];f.forEach(((e,t)=>{const n=e.edges.map((e=>_[e]));const s=h[t];b[v++]=n.concat(s).concat(e.vertices).filter((e=>e!==undefined))}));return{vertices_coords:u,vertices_overlapInfo:m,edges_vertices:b,collinear_edges:l.collinear}};const Np=(e,t,n=a)=>Tp(e,t,[],it,n);const zp=(e,t,n=a)=>Tp(e,t,[t.origin],lt,n);const Bp=(e,t,n=a)=>Tp(e,Wn(...t),t,ut,n);const $p=Object.freeze({__proto__:null,splitGraphLineFunction:Tp,splitLineWithGraph:Np,splitRayWithGraph:zp,splitSegmentWithGraph:Bp});const Rp=({normal:e,distance:t})=>t<0?{normal:D(e),distance:-t}:{normal:e,distance:t};const Lp=(e,t=a)=>{const{lines:n}=Fo(e,t);const s=n.map(Gn).map(Rp);const r=n.map((({vector:e,origin:t})=>ge(e,t)));const o=r.map((e=>n.map((({vector:t,origin:n})=>ce(e,t,n)))));const c=o.map((e=>e.map((e=>e.vector[0]<0?{vector:D(e.vector),origin:e.origin}:e)))).map((e=>e.map(Gn).map(Rp))).map((e=>e.concat(s)));const i=c.map((e=>go(e.map((e=>e.distance)))));const f=i.map(((e,n)=>e.map((e=>e.map((e=>c[n][e].normal)))).map((e=>po(e,t)))));const l=f.map(((e,t)=>e.flatMap(((e,n)=>e.map((e=>e.map((e=>i[t][n][e]))))))));const d=l.map((e=>(e.length-n.length)/n.length));return d.map(((e,t)=>({error:e,i:t}))).map((e=>({line:n[e.i],error:e.error}))).sort(((e,t)=>e.error-t.error))};const Ip=(e,t=a)=>Lp(e,t)[0];const Up=Object.freeze({__proto__:null,findSymmetryLine:Ip,findSymmetryLines:Lp});const Qp=(e,t)=>{if(e[0]===undefined||e[1]===undefined||e[2]===undefined){return undefined}const n=M(j(e[1],e[0]),1/U(e[1],e[0]));const s=C(n,j(e[2],e[0]));const r=M(n,s);const o=j(j(e[2],e[0]),r);const c=M(o,1/g(o));const a=U(e[1],e[0]);const i=C(c,j(e[2],e[0]));const f=(t[0]**2-t[1]**2+a**2)/(2*a);const l=(t[0]**2-t[2]**2+s**2+i**2)/(2*i)-s*f/i;return w(w(e[0],M(n,f)),M(c,l))};const Dp=(e,t,n)=>{const s=t[0]-e[0];const r=t[1]-e[1];const o=n[0]-e[0];const c=n[1]-e[1];const i=s*(e[0]+t[0])+r*(e[1]+t[1]);const f=o*(e[0]+n[0])+c*(e[1]+n[1]);const l=2*(s*(n[1]-t[1])-r*(n[0]-t[0]));if(Math.abs(l)<a){const s=Math.min(e[0],t[0],n[0]);const r=Math.min(e[1],t[1],n[1]);const o=(Math.max(e[0],t[0],n[0])-s)*.5;const c=(Math.max(e[1],t[1],n[1])-r)*.5;return{origin:[s+o,r+c],radius:Math.sqrt(o*o+c*c)}}const d=[(c*i-r*f)/l,(s*f-o*i)/l];const u=d[0]-e[0];const m=d[1]-e[1];return{origin:d,radius:Math.sqrt(u*u+m*m)}};const qp=Object.freeze({__proto__:null,circumcircle:Dp,trilateration:Qp});const Wp=(e,t,n,s)=>{const r=e.faces_vertices[n];if(r.length<3){return s}let o=r.map((t=>e.vertices_coords[t]));let c=r.map((e=>t.vertices_coords[e]));if(jr(o[0],o[1],o[2])){o=Ye(o)}if(jr(c[0],c[1],c[2])){c=Ye(c)}const a=o.map((e=>U(e,s)));return Qp(c,a)};const Gp=(e,t,n,s)=>{const r=t.edges_vertices[n].map((e=>t.vertices_coords[e]));const o=Wn(...r);return w(o.origin,M(o.vector,s))};const Hp=Object.freeze({__proto__:null,transferPointBetweenGraphs:Wp,transferPointOnEdgeBetweenGraphs:Gp});const Jp=e=>Array.from(Array(e.length-2)).map(((t,n)=>[e[0],e[n+1],e[n+2]]));const Zp=({faces_vertices:e})=>e.flatMap((e=>e.length<4?[e]:Jp(e)));const Yp=e=>e.length===3?[e]:Array.from(Array(Math.floor(e.length/3))).map(((t,n)=>[n*3+0,n*3+1,n*3+2].map((t=>e[t]))));const Xp=({vertices_coords:e,faces_vertices:t},s)=>{if(!e||!e.length){throw new Error(n.nonConvexTriangulation)}const r=e.filter((()=>true)).shift().length;return t.map((t=>t.flatMap((t=>e[t])))).map((e=>s(e,null,r))).map(((e,n)=>e.map((e=>t[n][e])))).flatMap((e=>Yp(e)))};const Kp=e=>{if(!e.edges_vertices){e.edges_vertices=[]}const t=Us(e);let n=e.edges_vertices.length;const s=[];e.faces_edges=e.faces_vertices.map((e=>e.map(((e,r,o)=>{const c=[e,o[(r+1)%o.length]];const a=c.join(" ");if(a in t){return t[a]}s.push(c);t[a]=n;t[c.reverse().join(" ")]=n;return n++}))));const r=s.length;e.edges_vertices.push(...s);if(e.edges_assignment){e.edges_assignment.push(...Array(r).fill("J"))}if(e.edges_foldAngle){e.edges_foldAngle.push(...Array(r).fill(0))}if(e.vertices_vertices){delete e.vertices_vertices}if(e.vertices_edges){delete e.vertices_edges}if(e.vertices_faces){delete e.vertices_faces}if(e.edges_faces){delete e.edges_faces}if(e.faces_faces){delete e.faces_faces}if(e.faceOrders){delete e.faceOrders}return e};const e_=({faces_vertices:e})=>{let t=0;return e.map((e=>Math.max(3,e.length))).map((e=>Array.from(Array(e-2)).map((()=>t++))))};const t_=(e,t)=>{if(!e.faces_vertices){return{}}const n=e.edges_vertices?e.edges_vertices.length:0;const s=e_(e);e.faces_vertices=t?Xp(e,t):Zp(e);Kp(e);const r=Array.from(Array(e.edges_vertices.length-n)).map(((e,t)=>n+t));return{faces:{map:s},edges:{new:r}}};const n_=Object.freeze({__proto__:null,triangulate:t_,triangulateConvexFacesVertices:Zp,triangulateNonConvexFacesVertices:Xp});const s_=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);const r_=e=>s_.map(((t,n)=>Math.abs(t-e[n])<a)).reduce(((e,t)=>e&&t),true);const o_=(e,t)=>[e[0]*t[0]+e[4]*t[1]+e[8]*t[2]+e[12],e[1]*t[0]+e[5]*t[1]+e[9]*t[2]+e[13],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]+e[14]];const c_=(e,t,n)=>({vector:[e[0]*t[0]+e[4]*t[1]+e[8]*t[2],e[1]*t[0]+e[5]*t[1]+e[9]*t[2],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]],origin:[e[0]*n[0]+e[4]*n[1]+e[8]*n[2]+e[12],e[1]*n[0]+e[5]*n[1]+e[9]*n[2]+e[13],e[2]*n[0]+e[6]*n[1]+e[10]*n[2]+e[14]]});const a_=(e,t)=>[e[0]*t[0]+e[4]*t[1]+e[8]*t[2]+e[12]*t[3],e[1]*t[0]+e[5]*t[1]+e[9]*t[2]+e[13]*t[3],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]+e[14]*t[3],e[3]*t[0]+e[7]*t[1]+e[11]*t[2]+e[15]*t[3],e[0]*t[4]+e[4]*t[5]+e[8]*t[6]+e[12]*t[7],e[1]*t[4]+e[5]*t[5]+e[9]*t[6]+e[13]*t[7],e[2]*t[4]+e[6]*t[5]+e[10]*t[6]+e[14]*t[7],e[3]*t[4]+e[7]*t[5]+e[11]*t[6]+e[15]*t[7],e[0]*t[8]+e[4]*t[9]+e[8]*t[10]+e[12]*t[11],e[1]*t[8]+e[5]*t[9]+e[9]*t[10]+e[13]*t[11],e[2]*t[8]+e[6]*t[9]+e[10]*t[10]+e[14]*t[11],e[3]*t[8]+e[7]*t[9]+e[11]*t[10]+e[15]*t[11],e[0]*t[12]+e[4]*t[13]+e[8]*t[14]+e[12]*t[15],e[1]*t[12]+e[5]*t[13]+e[9]*t[14]+e[13]*t[15],e[2]*t[12]+e[6]*t[13]+e[10]*t[14]+e[14]*t[15],e[3]*t[12]+e[7]*t[13]+e[11]*t[14]+e[15]*t[15]];const i_=e=>{const t=e[10]*e[15]-e[11]*e[14];const n=e[9]*e[15]-e[11]*e[13];const s=e[9]*e[14]-e[10]*e[13];const r=e[8]*e[15]-e[11]*e[12];const o=e[8]*e[14]-e[10]*e[12];const c=e[8]*e[13]-e[9]*e[12];return e[0]*(e[5]*t-e[6]*n+e[7]*s)-e[1]*(e[4]*t-e[6]*r+e[7]*o)+e[2]*(e[4]*n-e[5]*r+e[7]*c)-e[3]*(e[4]*s-e[5]*o+e[6]*c)};const f_=e=>{const t=i_(e);if(Math.abs(t)<1e-12||Number.isNaN(t)||!Number.isFinite(e[12])||!Number.isFinite(e[13])||!Number.isFinite(e[14])){return undefined}const n=e[10]*e[15]-e[11]*e[14];const s=e[9]*e[15]-e[11]*e[13];const r=e[9]*e[14]-e[10]*e[13];const o=e[8]*e[15]-e[11]*e[12];const c=e[8]*e[14]-e[10]*e[12];const a=e[8]*e[13]-e[9]*e[12];const i=e[6]*e[15]-e[7]*e[14];const f=e[5]*e[15]-e[7]*e[13];const l=e[5]*e[14]-e[6]*e[13];const d=e[6]*e[11]-e[7]*e[10];const u=e[5]*e[11]-e[7]*e[9];const m=e[5]*e[10]-e[6]*e[9];const g=e[4]*e[15]-e[7]*e[12];const p=e[4]*e[14]-e[6]*e[12];const _=e[4]*e[11]-e[7]*e[8];const h=e[4]*e[10]-e[6]*e[8];const v=e[4]*e[13]-e[5]*e[12];const b=e[4]*e[9]-e[5]*e[8];const y=[+(e[5]*n-e[6]*s+e[7]*r),-(e[1]*n-e[2]*s+e[3]*r),+(e[1]*i-e[2]*f+e[3]*l),-(e[1]*d-e[2]*u+e[3]*m),-(e[4]*n-e[6]*o+e[7]*c),+(e[0]*n-e[2]*o+e[3]*c),-(e[0]*i-e[2]*g+e[3]*p),+(e[0]*d-e[2]*_+e[3]*h),+(e[4]*s-e[5]*o+e[7]*a),-(e[0]*s-e[1]*o+e[3]*a),+(e[0]*f-e[1]*g+e[3]*v),-(e[0]*u-e[1]*_+e[3]*b),-(e[4]*r-e[5]*c+e[6]*a),+(e[0]*r-e[1]*c+e[2]*a),-(e[0]*l-e[1]*p+e[2]*v),+(e[0]*m-e[1]*h+e[2]*b)];const E=1/t;return y.map((e=>e*E))};const l_=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0]);const d_=(e=0,t=0,n=0)=>[...l_,e,t,n,1];const u_=(e,t,n,s,r)=>{const o=Math.cos(e);const c=Math.sin(e);const a=[...s_];a[n*4+n]=o;a[n*4+s]=(r?+1:-1)*c;a[s*4+n]=(r?-1:+1)*c;a[s*4+s]=o;const i=[0,1,2].map((e=>t[e]||0));const f=[...s_];const l=[...s_];[12,13,14].forEach(((e,t)=>{f[e]=-i[t];l[e]=i[t]}));return a_(l,a_(a,f))};const m_=(e,t=[0,0,0])=>u_(e,t,1,2,true);const g_=(e,t=[0,0,0])=>u_(e,t,0,2,false);const p_=(e,t=[0,0,0])=>u_(e,t,0,1,true);const __=(e,t=[0,0,1],n=[0,0,0])=>{const s=[0,1,2].map((e=>n[e]||0));const[r,o,c]=Y(3,v(t));const a=Math.cos(e);const i=Math.sin(e);const f=1-a;const l=d_(-s[0],-s[1],-s[2]);const d=d_(s[0],s[1],s[2]);return a_(d,a_([f*r*r+a,f*o*r+c*i,f*c*r-o*i,0,f*r*o-c*i,f*o*o+a,f*c*o+r*i,0,f*r*c+o*i,f*o*c-r*i,f*c*c+a,0,0,0,0,1],l))};const h_=(e=[1,1,1],t=[0,0,0])=>[e[0],0,0,0,0,e[1],0,0,0,0,e[2],0,e[0]*-t[0]+t[0],e[1]*-t[1]+t[1],e[2]*-t[2]+t[2],1];const v_=(e=1,t=[0,0,0])=>h_([e,e,e],t);const b_=(e,t=[0,0])=>{const n=ge(e,t);return[n[0],n[1],0,0,n[2],n[3],0,0,0,0,1,0,n[4],n[5],0,1]};const y_=(e,t,n,s)=>{const r=Math.tan(Math.PI*.5-.5*e);const o=1/(n-s);const c=t<1?r:r/t;const a=t<1?r*t:r;return[c,0,0,0,0,a,0,0,0,0,(n+s)*o,-1,0,0,n*s*o*2,0]};const E_=(e,t,n,s,r,o)=>[2/(t-s),0,0,0,0,2/(e-n),0,0,0,0,2/(r-o),0,(s+t)/(s-t),(n+e)/(n-e),(r+o)/(r-o),1];const M_=(e,t,n)=>{const s=y(F(e,t));const r=y(L(n,s));const o=y(L(s,r));return[r[0],r[1],r[2],0,o[0],o[1],o[2],0,s[0],s[1],s[2],0,e[0],e[1],e[2],1]};const A_=Object.freeze({__proto__:null,determinant4:i_,identity4x4:s_,invertMatrix4:f_,isIdentity4x4:r_,makeLookAtMatrix4:M_,makeMatrix4ReflectZ:b_,makeMatrix4Rotate:__,makeMatrix4RotateX:m_,makeMatrix4RotateY:g_,makeMatrix4RotateZ:p_,makeMatrix4Scale:h_,makeMatrix4Translate:d_,makeMatrix4UniformScale:v_,makeOrthographicMatrix4:E_,makePerspectiveMatrix4:y_,multiplyMatrices4:a_,multiplyMatrix4Line3:c_,multiplyMatrix4Vector3:o_});const x_=(e,t)=>{const n=L(e,t);const s=[n[0],n[1],n[2],S(e,t)];s[3]+=m(s);return v(s)};const w_=e=>a_([+e[3],+e[2],-e[1],+e[0],-e[2],+e[3],+e[0],+e[1],+e[1],-e[0],+e[3],+e[2],-e[0],-e[1],-e[2],+e[3]],[+e[3],+e[2],-e[1],-e[0],-e[2],+e[3],+e[0],-e[1],+e[1],-e[0],+e[3],-e[2],+e[0],+e[1],+e[2],+e[3]]);const k_=Object.freeze({__proto__:null,matrix4FromQuaternion:w_,quaternionFromTwoVectors:x_});const O_=({vertices_coords:e,faces_vertices:t},n=a)=>{const s=Cs({vertices_coords:e,faces_vertices:t});const r=t.map((()=>[]));for(let e=0;e<t.length-1;e+=1){for(let o=e+1;o<t.length;o+=1){if(e===o){continue}if(H(s[e],s[o],n)){r[e].push(o);r[o].push(e)}}}const o=xc(r);const c=jn(o).map((e=>typeof e==="number"?[e]:e));const i=c.map((e=>s[e[0]]));const f=[];c.forEach(((e,t)=>e.forEach((e=>{f[e]=V(s[e],i[t])>0}))));const l=t.map((t=>e[t[0]])).map((e=>Y(3,e)));const d=c.map(((e,t)=>e.map((e=>V(i[t],l[e])))));const u=d.map(((e,t)=>go(e).map((e=>e.map((e=>c[t][e]))))));const m=u.flatMap(((e,t)=>e.map((()=>[...i[t]]))));const g=u.flat();const p=g.map((e=>e[0])).map((e=>l[e])).map(((e,t)=>V(m[t],e))).map(((e,t)=>A(m[t],e)));const _=g.map(((e,t)=>({normal:m[t],origin:p[t]})));return g.map(((e,t)=>({faces:e,facesAligned:e.map((e=>f[e])),plane:_[t]})))};const j_=(e,t,n,s)=>{const r=e.vertices_coords.map((e=>Y(3,e)));const o=t.map((t=>t.faces.map(((n,s)=>t.facesAligned[s]?e.faces_vertices[n]:e.faces_vertices[n].slice().reverse())).map((e=>e.map((e=>r[e])))).map((e=>Ye(e,s)))));const c=[];const a=o.map(((e,t)=>e.map((e=>e.map((e=>o_(n[t],e))).map((e=>[e[0],e[1]]))))));t.map((e=>e.faces)).forEach(((e,t)=>e.forEach(((e,n)=>{c[e]=a[t][n]}))));return c};const F_=({vertices_coords:e,faces_vertices:t,faces_faces:n},s=a)=>{if(!n){n=ir({faces_vertices:t})}const r=O_({vertices_coords:e,faces_vertices:t},s);const o=[];r.forEach((e=>e.facesAligned.forEach(((t,n)=>{o[e.faces[n]]=t}))));const c=[0,0,1];const i=r.map((e=>e.plane.normal)).map((e=>{const t=S(e,c);return Math.abs(t+1)<.01?__(Math.PI,[1,0,0]):w_(x_(e,c))}));const f=j_({vertices_coords:e,faces_vertices:t},r,i,s);const l=r.map((e=>e.faces)).map((e=>mc(n,e)));const d=l.map((e=>xc(e)));const u=d.map((e=>jn(e).map((e=>e.constructor===Array?e:[e]))));const m=d.map((e=>{const t=e.map(((e,t)=>t));return e.map((n=>t.filter((t=>e[t]!==n))))}));const g=t.map((()=>[]));m.forEach((e=>e.forEach(((e,t)=>{for(let n=0;n<e.length;n+=1){const r=e[n];const o=[t,r].map((e=>f[e]));const c=Wr(...o,s);if(c){g[t][r]=true;g[r][t]=true}}}))));const p=m.map((e=>e.map(((e,t)=>e.filter((e=>g[t][e]))))));const _=[];p.forEach(((e,t)=>{_[t]=[];e.forEach(((e,n)=>{const s=d[t][n];const r=e.map((e=>d[t][e]));if(!_[t][s]){_[t][s]=new Set}r.forEach((e=>{if(!_[t][e]){_[t][e]=new Set}}));r.forEach((e=>{_[t][s].add(e);_[t][e].add(s)}))}))}));_.forEach(((e,t)=>e.forEach(((e,n)=>{_[t][n]=[...e]}))));const h=_.map((e=>jn(xc(e)).map((e=>e.constructor===Array?e:[e]))));const v=h.flatMap(((e,t)=>e.map((()=>t))));const b=r.map(((e,t)=>h[t].map((e=>e.flatMap((e=>u[t][e]))))));const y=b.flatMap(((e,t)=>e.map((e=>({faces:e,facesAligned:e.map((e=>o[e])),plane:r[t].plane})))));const E=v.map((e=>r[e].plane));const M=v.map((e=>i[e]));const A=y.map((e=>e.faces));const x=jn(A);return{sets_faces:A,sets_plane:E,sets_transformXY:M,faces_set:x,faces_winding:o}};const S_=Object.freeze({__proto__:null,coplanarFacesGroups:O_,coplanarOverlappingFacesGroups:F_});const C_=({vertices_coords:e,edges_vertices:t,edges_vector:n},s=a)=>{if(!n){n=nr({vertices_coords:e,edges_vertices:t})}const r=n.map((e=>v(e)));const o=t.map((()=>[]));r.forEach(((e,t)=>{r.forEach(((e,n)=>{if(n>=t){return}if(1-Math.abs(S(r[t],r[n]))<s){o[t].push(n);o[n].push(t)}}))}));return o};const V_=({vertices_coords:e,edges_vertices:t,edges_vector:n},s)=>{if(!n){n=nr({vertices_coords:e,edges_vertices:t})}const r=t.map((t=>e[t[0]]));const o=n.map(((e,t)=>({vector:e,origin:r[t]})));return C_({vertices_coords:e,edges_vertices:t,edges_vector:n},.001).map(((e,t)=>e.filter((e=>Ur(o[t],o[e],mt,mt,s)))))};const P_=Object.freeze({__proto__:null,makeEdgesEdgesParallelOverlap:V_});const T_=e=>e.map((e=>e.map(((e,t)=>e===true?t:undefined)).filter((e=>e!==undefined))));const N_=({vertices_coords:e,edges_vertices:t,edges_coords:n,edges_boundingBox:s},r=a)=>{if(!n){n=tr({vertices_coords:e,edges_vertices:t})}if(!s){s=rr({vertices_coords:e,edges_vertices:t,edges_coords:n})}const o=t.map(((e,t)=>t)).shift();const c=Array.from(Array(n.length)).map((()=>[]));if(o===undefined){return T_(c)}const i=s[o].min.length;for(let e=0;e<n.length-1;e+=1){if(!s[e]){continue}for(let t=e+1;t<n.length;t+=1){if(!s[t]){continue}let n=true;for(let o=0;o<i;o+=1){if(!st(s[e].min[o],s[t].min[o],r)||!st(s[e].max[o],s[t].max[o],r)){n=false}}c[e][t]=n;c[t][e]=n}}for(let e=0;e<n.length-1;e+=1){for(let t=e+1;t<n.length;t+=1){if(!c[e][t]){continue}const s=ot(n[e][0],n[t][0],r)&&ot(n[e][1],n[t][1],r);const o=ot(n[e][0],n[t][1],r)&&ot(n[e][1],n[t][0],r);const a=s||o;c[e][t]=a;c[t][e]=a}}return T_(c)};const z_=({vertices_coords:e,edges_vertices:t,edges_vector:n,edges_faces:s,faces_vertices:r},o=a)=>{if(!n){n=nr({vertices_coords:e,edges_vertices:t})}const c=t.map((t=>e[t[0]]));const i=t.map((()=>Array.from(Array(r.length))));s.forEach(((e,t)=>e.forEach((e=>{i[t][e]=false}))));const f=t.map((t=>t.map((t=>e[t]))));const l=r.map((t=>t.map((t=>e[t]))));Ad({vertices_coords:e,faces_vertices:r}).map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined)).forEach((e=>l[e].reverse()));const d=rr({edges_coords:f});const u=l.map((e=>tt(e)));for(let e=0;e<i.length;e+=1){if(!d[e]){continue}for(let t=0;t<i[e].length;t+=1){if(i[e][t]===false){continue}if(!u[t]){continue}if(!Gr(u[t],d[e],o)){i[e][t]=false;continue}}}const m=N_({vertices_coords:e,edges_vertices:t,edges_coords:f,edges_boundingBox:d});const g={};for(let e=0;e<i.length;e+=1){if(g[e]){continue}if(!f[e]){continue}for(let t=0;t<i[e].length;t+=1){if(i[e][t]!==undefined){continue}if(!l[t]){continue}const s=f[e].map((e=>Dr(l[t],e,at,.001))).reduce(((e,t)=>e||t),false);if(s){i[e][t]=true;continue}const r=fo(l[t],{vector:n[e],origin:c[e]},mt,mt,o);if(r){i[e][t]=true;continue}i[e][t]=false}m[e].forEach((t=>{i[t]=i[e].slice();g[t]=true}))}return i.map((e=>e.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined))))};const B_=Object.freeze({__proto__:null,getEdgesFacesOverlap:z_});const $_=({vertices_coords:e,faces_vertices:t},n=a)=>{const s=fr({vertices_coords:e,faces_vertices:t});const r=s.map((e=>tt(e)));const o=[];const c=[];Eo({vertices_coords:e,faces_vertices:t},0,n).forEach((e=>{e.start.forEach((e=>{c[e]=true}));c.forEach(((t,c)=>e.start.forEach((e=>{if(c===e){return}if(!Gr(r[c],r[e],n)||!Wr(s[c],s[e],n)){return}if(!o[c]){o[c]=[]}if(!o[e]){o[e]=[]}o[c][e]=true;o[e][c]=true}))));e.end.forEach((e=>delete c[e]))}));return o.map((e=>Object.keys(e).map((e=>parseInt(e,10)))))};const R_=Object.freeze({__proto__:null,getFacesFacesOverlap:$_});const L_=(e,t)=>{if(!e.vertices_coords){e.vertices_coords=[]}const n=e.vertices_coords.length;Vt(e,"vertices").forEach((t=>{e[t][n]=[]}));e.vertices_coords[n]=t;return n};const I_=(e,t=[])=>{if(!e.vertices_coords){e.vertices_coords=[]}const n=e.vertices_coords.length;Vt(e,"vertices").forEach((s=>{t.forEach(((t,r)=>{e[s][n+r]=[]}))}));t.forEach(((t,s)=>{e.vertices_coords[n+s]=t}));return t.map(((e,t)=>n+t))};const U_=(e,t)=>{if(t.length!==2){return undefined}if(!e.edges_vertices){e.edges_vertices=[]}const n=e.edges_vertices.length;Vt(e,"edges").forEach((t=>{e[t][n]=[]}));e.edges_vertices[n]=t;if(e.edges_assignment){e.edges_assignment[n]="U"}if(e.edges_foldAngle){e.edges_foldAngle[n]=0}if(e.vertices_edges){t.forEach((t=>{e.vertices_edges[t]=e.vertices_edges[t].filter((e=>e!==n));e.vertices_edges[t].push(n)}))}if(e.vertices_vertices){const n=[t[1],t[0]];t.forEach(((t,s)=>{e.vertices_vertices[t]=e.vertices_vertices[t].filter((e=>e!==n[s]));e.vertices_vertices[t].push(n[s])}))}return n};const Q_=(e,{vector:t,origin:n},s=a)=>{const r=Fu(e,{vector:t,origin:n},s).map((e=>e.point)).filter(Boolean);const o=r.map((e=>O(e,n))).map((e=>S(e,t)));const c=mn(o);const i=c.map((e=>x(E(t,e),n)));const f=Array.from(Array(i.length-1)).map(((e,t)=>[i[t],i[t+1]])).map((t=>Pu(e,t[0],t[1],s)));return f};const D_=(e,t,n,s=a)=>{e.faces_vertices[t].map((t=>e.vertices_coords[t])).map((e=>n.map((t=>ot(e,t,s)))));e.faces_vertices[t].map((t=>e.vertices_coords[t])).map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>Wn(...e))).map((e=>n.map((t=>Ir(e,t,mt,s)))))};const q_=(e,t,n=a)=>{const s=j(t[1],t[0]);const r=t[0];const o=fc(e,t,n);const c=o.map((t=>e.faces_vertices[t].map((t=>e.vertices_coords[t])))).map((e=>pu(e,{vector:s,origin:r},ct,ut,n)));const i=[];o.forEach(((e,t)=>{if(c[t]){i[e]=c[t]}}));return i};const W_=(e,t,n=a)=>{const s=q_(e,t,n);console.log("facesSegment",s);const r=s.map(((t,s)=>D_(e,s,t,n)));return r};const G_=e=>{const t={vertices:[],edges:[],faces:[]};let n=0;let s=0;let r=0;e.vertices_coords.forEach(((e,s)=>{t.vertices[s]=n++}));e.edges_vertices.forEach(((e,n)=>{t.edges[n]=s++}));e.faces_vertices.forEach(((e,n)=>{t.faces[n]=r++}));Sn(e,"vertices",t.vertices);Sn(e,"edges",t.edges);Sn(e,"faces",t.faces);return e};const H_=({vertices_coords:e,faces_vertices:t},n,s)=>{const r=Yr({vertices_coords:e,faces_vertices:t},n,ct);switch(r.length){case 0:return undefined;case 1:return r[0]}if(!s){return r[0]}const o=w(n,M(s,.01));const c=r.map((n=>t[n].map((t=>e[t]))));const a=r.filter(((e,t)=>Dr(c[t],o,at)));switch(a.length){case 0:return r.filter(((e,t)=>Dr(c[t],o,ct))).shift();case 1:return a[0];default:return a[0]}};const J_=({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_edges:o,faces_faces:c},{vector:i,origin:f},l="V",d=a)=>{if(!o){o=ar({edges_vertices:t,faces_vertices:r})}const u=H_({vertices_coords:e,faces_vertices:r},f,i);const m=qt(l);const g=Jc({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_faces:c},u);const p=Ad({vertices_coords:g,faces_vertices:r});if(!p[u]){p.forEach(((e,t)=>{p[t]=!e}))}const _=Fu({vertices_coords:g,edges_vertices:t},{vector:i,origin:f},d).map(((e,t)=>e.point===undefined?undefined:{...e,edge:t}));const h=t.map((t=>e[t[0]]));const v=nr({vertices_coords:e,edges_vertices:t});const b=[];o.map((e=>e.map((e=>_[e])).filter((e=>e!==undefined)))).forEach(((e,t)=>{switch(e.length){case 0:case 1:break;default:b[t]=e;break}}));const y=(e,t)=>Math.abs(e.b-t.b)<d*2;const E=[];b.map((e=>e.sort(((e,t)=>e.b-t.b)))).map((e=>mo(e,y).map((t=>t.map((t=>e[t])))))).forEach(((e,t)=>{if(e.length===2){E[t]=[e[0][0],e[e.length-1][0]]}if(e.length>2){console.log("repeatFoldLine, non-convex polygons.")}}));return E.map(((e,t)=>({edges:e.map((e=>e.edge)),assignment:p[t]?l:m,points:e.map((e=>w(M(v[e.edge],e.a),h[e.edge])))})))};const Z_={count:on,countImplied:_s,clean:Er,populate:zo,remove:$n,replace:Pn,removePlanarVertex:$u,removePlanarEdge:Bu,splitEdge:Wo,splitFace:uc,flatFold:cm,normalize:G_,repeatFold:J_,addVertex:L_,addVertices:I_,addNonPlanarEdge:U_,addPlanarLine:Q_,addPlanarSegment:Pu,addPlanarSegmentNew:W_,planarize:Po,...kc,...rd,...gp,...bt,...Ht,...Bc,...Au,...xr,...vp,...wp,...Op,...mr,...Cn,...to,...Ps,...Td,...Sp,...Pp,...$p,...vc,...Ao,...Up,...kd,...Fc,...Hp,...tn,...Uc,...n_,...ys,...Ac,...sn,...Oo,...zn,...Zc,...Qn,...Ss,...yr,..._r,...wo,...So,...S_,...Rc,...Gc,...xd,...wu,...Su,...P_,...B_,...dc,...R_};const Y_=(e,t=a)=>{if(!e||!e.length){return undefined}const n=(e,n)=>rt(e[0],n[0],t);const s=uo(e,n);let r=0;for(let t=1;t<s.length;t+=1){if(e[s[t]][1]<e[s[r]][1]){r=t}}return s[r]};const X_=(e,t=a)=>{const n=Y_(e,t);if(n===undefined){return[]}const s=e.map((t=>j(t,e[n]))).map((e=>b(e))).map((e=>C([0,1],e)));const r=s.map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).map((e=>e.i)).filter((e=>e!==n));return[[n]].concat(go(r.map((e=>s[e])),t).map((e=>e.map((e=>r[e])))).map((t=>t.length===1?t:t.map((t=>({i:t,len:U(e[t],e[n])}))).sort(((e,t)=>e.len-t.len)).map((e=>e.i)))))};const K_=(e=[],t=false,n=a)=>{if(e.length<2){return[]}const s=X_(e,n).map((e=>e.length===1?e:cn(e))).flat();s.push(s[0]);const r=[s[0]];let o=1;const c={"-1":()=>r.pop(),1:e=>{r.push(e);o+=1},undefined:()=>{o+=1}};c[0]=t?c["1"]:c["-1"];while(o<s.length){if(r.length<2){r.push(s[o]);o+=1;continue}const t=r[r.length-2];const a=r[r.length-1];const i=s[o];const f=ds(...[t,a,i].map((t=>e[t])),n);c[f](i)}r.pop();return r};const eh=Object.freeze({__proto__:null,convexHull:K_,convexHullRadialSortPoints:X_,smallestVector2:Y_});const th=(e,t,n)=>{const s=e.map(((e,t)=>({vector:n[t],origin:e}))).map(((e,t,n)=>no(e,n[(t+1)%n.length],dt,dt).point));const r=t.map(((e,t)=>Br(e,s[t],(e=>e))));if(e.length===3){return e.map((e=>({type:"skeleton",points:[e,s[0]]}))).concat([{type:"perpendicular",points:[r[0],s[0]]}])}const o=s.map(((e,t)=>I(e,r[t])));let c=0;o.forEach(((e,t)=>{if(e<o[c]){c=t}}));const a=[{type:"skeleton",points:[e[c],s[c]]},{type:"skeleton",points:[e[(c+1)%e.length],s[c]]},{type:"perpendicular",points:[r[c],s[c]]}];const i=ts(D(t[(c+t.length-1)%t.length].vector),t[(c+1)%t.length].vector);const f=c===e.length-1;e.splice(c,2,s[c]);t.splice(c,1);n.splice(c,2,i);if(f){e.splice(0,1);n.splice(0,1);t.push(t.shift())}return a.concat(th(e,t,n))};const nh=e=>{const t=e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>({vector:O(e[1],e[0]),origin:e[0]})));const n=e.map(((e,t,n)=>[(t-1+n.length)%n.length,t,(t+1)%n.length].map((e=>n[e])))).map((e=>[O(e[0],e[1]),O(e[2],e[1])])).map((e=>ts(...e)));return th([...e],t,n)};const sh=(e,t,n=a)=>{for(let s=0;s<e.length;s+=1){if(e[s]<t.min[s]-n||e[s]>t.max[s]+n){return false}}return true};const rh=(e,t,n=a)=>{const s=Math.min(e.min.length,t.min.length);for(let r=0;r<s;r+=1){if(t.min[r]<e.min[r]-n||t.max[r]>e.max[r]+n){return false}}return true};const oh=Object.freeze({__proto__:null,enclosingBoundingBoxes:rh,pointInBoundingBox:sh});const ch=(e,t)=>{const n=e.map(((e,n)=>{const s=Ir(t,e,it);return{point:s?e:null,at_index:n}})).filter((e=>e.point!=null));const s=e.map(((e,t,n)=>({vector:O(e,n[(t+1)%n.length]),origin:n[(t+1)%n.length]}))).map(((e,n)=>({point:no(t,e,ft,mt).point,at_index:n}))).filter((e=>e.point!=null));if(s.length===2){const t=s.slice().sort(((e,t)=>e.at_index-t.at_index));const n=e.slice(t[1].at_index+1).concat(e.slice(0,t[0].at_index+1));n.push(t[0].point);n.push(t[1].point);const r=e.slice(t[0].at_index+1,t[1].at_index+1);r.push(t[1].point);r.push(t[0].point);return[n,r]}if(s.length===1&&n.length===1){n[0].type="v";s[0].type="e";const t=n.concat(s).sort(((e,t)=>e.at_index-t.at_index));const r=e.slice(t[1].at_index+1).concat(e.slice(0,t[0].at_index+1));if(t[0].type==="e"){r.push(t[0].point)}r.push(t[1].point);const o=e.slice(t[0].at_index+1,t[1].at_index+1);if(t[1].type==="e"){o.push(t[1].point)}o.push(t[0].point);return[r,o]}if(n.length===2){const t=n.slice().sort(((e,t)=>e.at_index-t.at_index));const s=e.slice(t[1].at_index).concat(e.slice(0,t[0].at_index+1));const r=e.slice(t[0].at_index,t[1].at_index+1);return[s,r]}return[e.slice()]};const ah=Object.freeze({__proto__:null,splitConvexPolygon:ch});const ih=e=>{if(typeof e!=="object"){return typeof e}if(e.radius!==undefined){return"circle"}if(e.min&&e.max&&e.span){return"box"}if(typeof e[0]==="number"){return"vector"}if(e.vector!==undefined&&e.origin!==undefined){return"line"}if(e[0]!==undefined&&e[0].length&&typeof e[0][0]==="number"){return e.length===2?"segment":"polygon"}return"object"};const fh=e=>e.charAt(0).toUpperCase()+e.slice(1);const lh={polygon:ut,circle:ct,line:it,ray:lt,segment:ut};const dh=(e,t,n=a)=>{const s=e=>e==="polygon"?"ConvexPolygon":fh(e);const r=[e,t].map(ih);const o=[r,r.slice().reverse()].map((e=>e.map(s).join(""))).map((e=>lo[`intersect${e}`]));const c=[e.domain,t.domain].map(((e,t)=>e||lh[r[t]]));const i=[[e,t,...c],[t,e,...c.slice().reverse()]];const f=o.map(((e,t)=>({fn:e,params:i[t]}))).filter((e=>e.fn)).shift();return f?f.fn(...f.params,n):undefined};const uh={...d,...Jn,...gt,...ne,...pe,...Pe,...A_,...k_,...eh,...Tr,...Lr,...Ms,...nt,...us,straightSkeleton:nh,...qp,...oh,...Hr,...lo,...hu,...ah,intersect:dh};const mh=e=>{const t=e.map((e=>e.toUpperCase()));const n=t.filter((e=>e==="M")).length;const s=t.filter((e=>e==="V")).length;return n>s?t.indexOf("V"):t.indexOf("M")};const gh=(e,t,n=0)=>{const s=mh(t);if(s===-1){return undefined}const r=e[(s+1)%e.length];const o=e[(s+2)%e.length];const c=Math.max(-Math.PI,Math.min(Math.PI,n));const a=-Math.cos(r)*Math.cos(o)+Math.sin(r)*Math.sin(o)*Math.cos(Math.PI-c);const i=Math.cos(Math.PI-c)-Math.sin(Math.PI-c)**2*Math.sin(r)*Math.sin(o)/(1-a);const f=-Math.acos(i)+Math.PI;return s%2===0?[f,c,f,c].map(((e,t)=>s===t?-e:e)):[c,f,c,f].map(((e,t)=>s===t?-e:e))};const ph=Object.freeze({__proto__:null,foldDegree4:gh});const _h=({vertices_coords:e,vertices_vertices:t,vertices_edges:n,vertices_faces:s,edges_vertices:r,edges_foldAngle:o,edges_vector:c,faces_vertices:i},l=a)=>{if(!t){t=$s({vertices_coords:e,vertices_edges:n,vertices_faces:s,edges_vertices:r,faces_vertices:i})}if(!n){n=Ns({edges_vertices:r,vertices_vertices:t})}if(!s){s=Is({vertices_coords:e,vertices_vertices:t,faces_vertices:i})}const d=qs({vertices_coords:e,vertices_vertices:t,vertices_edges:n,vertices_faces:s,edges_vertices:r,edges_vector:c,faces_vertices:i});return e.map(((e,t)=>{if(s[t].includes(undefined)||s[t].includes(null)){return true}const r=d[t].map((e=>Math.atan2(e[1],e[0])));const c=n[t].map((e=>o[e])).map((e=>e*f));const a=r.map((e=>je(e)));const i=a.map((e=>Ae(e)));const u=c.map((e=>ke(e)));const m=d[t].map(((e,t)=>Ee(a[t],Ee(u[t],i[t]))));let g=he;m.forEach((e=>{g=Ee(g,e)}));return Array.from(Array(9)).map(((e,t)=>Math.abs(g[t]-he[t])<l)).reduce(((e,t)=>e&&t),true)}))};const hh=Object.freeze({__proto__:null,verticesFoldable:_h});const vh={U:true,u:true};const bh=e=>e.map(((e,t)=>t)).filter((t=>vh[e[t]]));const yh=e=>{const t=bh(e);const n=Array.from(Array(2**t.length)).map(((e,t)=>t.toString(2))).map((e=>Array(t.length-e.length+1).join("0")+e)).map((e=>Array.from(e).map((e=>e==="0"?"V":"M"))));const s=n.map((n=>{const s=e.slice();t.forEach(((e,t)=>{s[e]=n[t]}));return s}));const r=e.filter((e=>kt[e])).length;if(r>0){return s}const o=s.map((e=>e.filter((e=>e==="M"||e==="m")).length));const c=s.map((e=>e.filter((e=>e==="V"||e==="v")).length));return s.filter(((e,t)=>Math.abs(o[t]-c[t])===2))};const Eh=Object.freeze({__proto__:null,maekawaSolver:yh});const Mh={...ph,...hh,...Du,...Eh,...Hu};const Ah=(e,t,n)=>{const s=e.createShader(n);e.shaderSource(s,t);e.compileShader(s);if(!e.getShaderParameter(s,e.COMPILE_STATUS)){throw new Error(e.getShaderInfoLog(s))}return s};const xh=(e,t,n)=>{const s=e.createProgram();e.attachShader(s,t);e.attachShader(s,n);e.linkProgram(s);if(!e.getProgramParameter(s,e.LINK_STATUS)){throw new Error(e.getProgramInfoLog(s))}e.deleteShader(t);e.deleteShader(n);return s};const wh=(e,t,n)=>{const s=Ah(e,t,e.VERTEX_SHADER);const r=Ah(e,n,e.FRAGMENT_SHADER);return xh(e,s,r)};const kh=(e,t)=>{const s=[null,"webgl","webgl2"];const r=window.devicePixelRatio||1;e.width=e.clientWidth*r;e.height=e.clientHeight*r;if(t){return{gl:e.getContext(s[t]),version:t}}const o=e.getContext(s[2]);if(o){return{gl:o,version:2}}const c=e.getContext(s[1]);if(c){return{gl:c,version:1}}throw new Error(n.noWebGL)};const Oh=(e,t)=>{if(!e){return}const n=window.devicePixelRatio||1;const s=[t.clientWidth,t.clientHeight].map((e=>e*n));if(t.width!==s[0]||t.height!==s[1]){t.width=s[0];t.height=s[1]}e.viewport(0,0,e.canvas.width,e.canvas.height)};const jh=(e,t="perspective",n=45)=>{if(!e){return s_}const s=.1;const r=20;const o=-100;const c=100;const a=[e.clientWidth,e.clientHeight];const i=Math.min(...a);const f=[0,1].map((e=>(a[e]-i)/i/2));const l=f.map((e=>e+.5));return t==="orthographic"?E_(l[1],l[0],-l[1],-l[0],o,c):y_(n*(Math.PI/180),a[0]/a[1],s,r)};const Fh=e=>{if(!e){return s_}const t=Sc(e);if(!t){return s_}const n=Math.max(...t.span);if(n===0){return s_}const s=Y(3,P(t.min,t.max));const r=[n,0,0,0,0,n,0,0,0,0,n,0,...s,1];return f_(r)||s_};const Sh=Object.freeze({__proto__:null,makeModelMatrix:Fh,makeProjectionMatrix:jh,rebuildViewport:Oh});const Ch=(e,t,n,s)=>{switch(n){case"uniformMatrix4fv":e[n](t,false,s);break;default:e[n](t,s);break}};const Vh=(e,t,n,s={})=>{e.useProgram(n.program);n.flags.forEach((t=>e.enable(t)));const r=e.getProgramParameter(n.program,e.ACTIVE_UNIFORMS);for(let t=0;t<r;t+=1){const r=e.getActiveUniform(n.program,t).name;const o=s[r];if(o){const t=e.getUniformLocation(n.program,r);Ch(e,t,o.func,o.value)}}n.vertexArrays.forEach((t=>{e.bindBuffer(e.ARRAY_BUFFER,t.buffer);e.bufferData(e.ARRAY_BUFFER,t.data,e.STATIC_DRAW);e.vertexAttribPointer(t.location,t.length,t.type,false,0,0);e.enableVertexAttribArray(t.location)}));n.elementArrays.forEach((n=>{e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n.buffer);e.bufferData(e.ELEMENT_ARRAY_BUFFER,n.data,e.STATIC_DRAW);e.drawElements(n.mode,n.data.length,t===2?e.UNSIGNED_INT:e.UNSIGNED_SHORT,n.buffer)}));n.flags.forEach((t=>e.disable(t)))};const Ph=(e,t)=>{t.vertexArrays.forEach((t=>e.disableVertexAttribArray(t.location)));t.vertexArrays.forEach((t=>e.deleteBuffer(t.buffer)));t.elementArrays.forEach((t=>e.deleteBuffer(t.buffer)));e.deleteProgram(t.program)};const Th=Object.freeze({__proto__:null,deallocProgram:Ph,drawProgram:Vh});const Nh={B:[.5,.5,.5],b:[.5,.5,.5],V:[.2,.4,.6],v:[.2,.4,.6],M:[.75,.25,.15],m:[.75,.25,.15],F:[.3,.3,.3],f:[.3,.3,.3],J:[.3,.2,0],j:[.3,.2,0],C:[.5,.8,.1],c:[.5,.8,.1],U:[.6,.25,.9],u:[.6,.25,.9]};const zh={B:[0,0,0],b:[0,0,0],V:[.2,.5,.8],v:[.2,.5,.8],M:[.75,.25,.15],m:[.75,.25,.15],F:[.75,.75,.75],f:[.75,.75,.75],J:[1,.75,.25],j:[1,.75,.25],C:[.5,.8,.1],c:[.5,.8,.1],U:[.6,.25,.9],u:[.6,.25,.9]};const Bh=e=>e!==undefined&&e.constructor===Array?e.slice(0,3):Ua(e).slice(0,3).map((e=>e/255));const $h=({vertices_coords:e,edges_assignment:t,faces_vertices:n,faces_edges:s,faces_normal:r},o={})=>{const c=e.map((e=>[...e].concat(Array(3-e.length).fill(0))));const a=Vs({vertices_coords:c,faces_vertices:n,faces_normal:r});const i=c.map(((e,t)=>t%3)).map((e=>[e===0?1:0,e===1?1:0,e===2?1:0]));const f=s.map((e=>e.map((e=>t[e])).map((e=>e==="J"||e==="j"))));if(!o.showTrianglulation){for(let e=0;e<f.length;e+=1){if(f[e][0]){i[e*3+0][2]=i[e*3+1][2]=100}if(f[e][1]){i[e*3+1][0]=i[e*3+2][0]=100}if(f[e][2]){i[e*3+0][1]=i[e*3+2][1]=100}}}return{vertices_coords:c,vertices_normal:a,vertices_barycentric:i}};const Rh=(e,t)=>{if(!e||!e.vertices_coords||!e.edges_vertices){return[]}const n=t&&t.dark?Nh:zh;const s={...n,...t};const r=e.vertices_coords.map((e=>[...e].concat(Array(3-e.length).fill(0))));const o=e.edges_vertices.flatMap((e=>e.map((e=>r[e])))).flatMap((e=>[e,e,e,e]));const c=nr(e);const a=e.edges_assignment?e.edges_assignment.flatMap((e=>Array(8).fill(s[e]))):e.edges_vertices.flatMap((()=>Array(8).fill(s.U)));const i=c.flatMap((e=>[e,e,e,e,e,e,e,e]));const f=e.edges_vertices.flatMap((()=>[[1,0],[0,1],[-1,0],[0,-1],[1,0],[0,1],[-1,0],[0,-1]]));return{vertices_coords:o,vertices_color:a,verticesEdgesVector:i,vertices_vector:f}};const Lh=Object.freeze({__proto__:null,makeFacesVertexData:$h,makeThickEdgesVertexData:Rh});const Ih=(e,t,{vertices_coords:n,edges_vertices:s,edges_assignment:r,faces_vertices:o,faces_edges:c,faces_normal:a}={},i={})=>{if(!n||!o){return[]}if(!c){c=ar({edges_vertices:s,faces_vertices:o})}const{vertices_coords:f,vertices_normal:l,vertices_barycentric:d}=$h({vertices_coords:n,edges_assignment:r,faces_vertices:o,faces_edges:c,faces_normal:a},i);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:f.length?f[0].length:3,data:new Float32Array(f.flat())},{location:e.getAttribLocation(t,"v_normal"),buffer:e.createBuffer(),type:e.FLOAT,length:l.length?l[0].length:3,data:new Float32Array(l.flat())},{location:e.getAttribLocation(t,"v_barycentric"),buffer:e.createBuffer(),type:e.FLOAT,length:3,data:new Float32Array(d.flat())}].filter((e=>e.location!==-1))};const Uh=(e,t=1,n={})=>{if(!n||!n.vertices_coords||!n.faces_vertices){return[]}return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:t===2?new Uint32Array(n.faces_vertices.flat()):new Uint16Array(n.faces_vertices.flat())}]};const Qh=(e,t,n,s={})=>{if(!n||!n.vertices_coords||!n.edges_vertices){return[]}const{vertices_coords:r,vertices_color:o,verticesEdgesVector:c,vertices_vector:a}=Rh(n,s.assignment_color);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:r.length?r[0].length:3,data:new Float32Array(r.flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:o.length?o[0].length:3,data:new Float32Array(o.flat())},{location:e.getAttribLocation(t,"edge_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:c.length?c[0].length:3,data:new Float32Array(c.flat())},{location:e.getAttribLocation(t,"vertex_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:a.length?a[0].length:3,data:new Float32Array(a.flat())}].filter((e=>e.location!==-1))};const Dh=(e,t=1,n={})=>{if(!n||!n.edges_vertices){return[]}const s=n.edges_vertices.map(((e,t)=>t*8)).flatMap((e=>[e+0,e+1,e+4,e+4,e+1,e+5,e+1,e+2,e+5,e+5,e+2,e+6,e+2,e+3,e+6,e+6,e+3,e+7,e+3,e+0,e+7,e+7,e+0,e+4]));return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:t===2?new Uint32Array(s):new Uint16Array(s)}]};const qh=Object.freeze({__proto__:null,makeFoldedElementArrays:Uh,makeFoldedVertexArrays:Ih,makeThickEdgesElementArrays:Dh,makeThickEdgesVertexArrays:Qh});const Wh=5e-6;const Gh=(e,t=Wh)=>{const n=Xc(e);if(!n.edges_assignment){const e=on.edges(n)||_s.edges(n);n.edges_assignment=Array(e).fill("U")}let s=[];if(n.faceOrders){s=Cd(n)}else if(n.faces_layer){s=Vd(n)}const r=t_(n);const o=Mr(n);if(r.faces){const e=jn(r.faces.map);e.forEach(((e,n)=>{const r=s[e];if(!r){return}o.faces_vertices[n].forEach((e=>{const n=E(r.vector,r.layer*t);o.vertices_coords[e]=x(Y(3,o.vertices_coords[e]),n)}))}))}return o};const Hh=(e,{projectionMatrix:t,modelViewMatrix:n,frontColor:s,backColor:r,outlineColor:o,strokeWidth:c,opacity:a})=>({u_matrix:{func:"uniformMatrix4fv",value:a_(t||s_,n||s_)},u_projection:{func:"uniformMatrix4fv",value:t||s_},u_modelView:{func:"uniformMatrix4fv",value:n||s_},u_frontColor:{func:"uniform3fv",value:Bh(s||"gray")},u_backColor:{func:"uniform3fv",value:Bh(r||"white")},u_outlineColor:{func:"uniform3fv",value:Bh(o||"black")},u_strokeWidth:{func:"uniform1f",value:c!==undefined?c:.05},u_opacity:{func:"uniform1f",value:a!==undefined?a:1}});const Jh=`#version 300 es\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nin vec3 v_position;\nin vec3 v_normal;\nout vec3 front_color;\nout vec3 back_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tvec3 light = abs(normalize((vec4(v_normal, 1) * u_modelView).xyz));\n\tfloat brightness = 0.5 + light.x * 0.15 + light.z * 0.35;\n\tfront_color = u_frontColor * brightness;\n\tback_color = u_backColor * brightness;\n}\n`;const Zh=`#version 300 es\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\nin vec3 v_position;\nin vec3 v_color;\nin vec3 edge_vector;\nin vec2 vertex_vector;\nout vec3 blend_color;\nvoid main () {\n\tvec3 edge_norm = normalize(edge_vector);\n\t// axis most dissimilar to edge_vector\n\tvec3 absNorm = abs(edge_norm);\n\tvec3 xory = absNorm.x < absNorm.y ? vec3(1,0,0) : vec3(0,1,0);\n\tvec3 axis = absNorm.x > absNorm.z && absNorm.y > absNorm.z ? vec3(0,0,1) : xory;\n\t// two perpendiculars. with edge_vector these make basis vectors\n\tvec3 one = cross(axis, edge_norm);\n\tvec3 two = cross(one, edge_norm);\n\tvec3 displaceNormal = normalize(\n\t\tone * vertex_vector.x + two * vertex_vector.y\n\t);\n\tvec3 displace = displaceNormal * (u_strokeWidth * 0.5);\n\tgl_Position = u_matrix * vec4(v_position + displace, 1);\n\tblend_color = v_color;\n}\n`;const Yh=`#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nuniform float u_opacity;\nin vec3 front_color;\nin vec3 back_color;\nin vec3 outline_color;\nin vec3 barycentric;\nout vec4 outColor;\nfloat edgeFactor(vec3 barycenter) {\n\tvec3 d = fwidth(barycenter);\n\tvec3 a3 = smoothstep(vec3(0.0), d*3.5, barycenter);\n\treturn min(min(a3.x, a3.y), a3.z);\n}\nvoid main () {\n\tgl_FragDepth = gl_FragCoord.z;\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\t// vec4 color4 = gl_FrontFacing\n\t// \t? vec4(front_color, u_opacity)\n\t// \t: vec4(back_color, u_opacity);\n\t// vec4 outline4 = vec4(outline_color, 1);\n\t// outColor = vec4(mix(vec3(0.0), color, edgeFactor(barycentric)), u_opacity);\n\toutColor = vec4(mix(outline_color, color, edgeFactor(barycentric)), u_opacity);\n\t// outColor = mix(outline4, color4, edgeFactor(barycentric));\n}\n`;const Xh=`#version 100\nprecision mediump float;\nuniform float u_opacity;\nvarying vec3 barycentric;\nvarying vec3 front_color;\nvarying vec3 back_color;\nvarying vec3 outline_color;\nvoid main () {\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\t// vec3 boundary = vec3(0.0, 0.0, 0.0);\n\tvec3 boundary = outline_color;\n\t// gl_FragDepth = 0.5;\n\tgl_FragColor = any(lessThan(barycentric, vec3(0.02)))\n\t\t? vec4(boundary, u_opacity)\n\t\t: vec4(color, u_opacity);\n}\n`;const Kh=`#version 100\nattribute vec3 v_position;\nattribute vec3 v_normal;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nvarying vec3 normal_color;\nvarying vec3 front_color;\nvarying vec3 back_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tvec3 light = abs(normalize((vec4(v_normal, 1) * u_modelView).xyz));\n\tfloat brightness = 0.5 + light.x * 0.15 + light.z * 0.35;\n\tfront_color = u_frontColor * brightness;\n\tback_color = u_backColor * brightness;\n}\n`;const ev=`#version 100\nattribute vec3 v_position;\nattribute vec3 v_color;\nattribute vec3 edge_vector;\nattribute vec2 vertex_vector;\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\nvarying vec3 blend_color;\nvoid main () {\n\tvec3 edge_norm = normalize(edge_vector);\n\t// axis most dissimilar to edge_vector\n\tvec3 absNorm = abs(edge_norm);\n\tvec3 xory = absNorm.x < absNorm.y ? vec3(1,0,0) : vec3(0,1,0);\n\tvec3 axis = absNorm.x > absNorm.z && absNorm.y > absNorm.z ? vec3(0,0,1) : xory;\n\t// two perpendiculars. with edge_vector these make basis vectors\n\tvec3 one = cross(axis, edge_norm);\n\tvec3 two = cross(one, edge_norm);\n\tvec3 displaceNormal = normalize(\n\t\tone * vertex_vector.x + two * vertex_vector.y\n\t);\n\tvec3 displace = displaceNormal * (u_strokeWidth * 0.5);\n\tgl_Position = u_matrix * vec4(v_position + displace, 1);\n\tblend_color = v_color;\n}\n`;const tv=`#version 100\nprecision mediump float;\nuniform float u_opacity;\nvarying vec3 front_color;\nvarying vec3 back_color;\nvoid main () {\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\tgl_FragColor = vec4(color, u_opacity);\n}\n`;const nv=`#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nin vec3 blend_color;\nout vec4 outColor;\n \nvoid main() {\n\toutColor = vec4(blend_color.rgb, 1);\n}\n`;const sv=`#version 100\nattribute vec3 v_position;\nattribute vec3 v_normal;\nattribute vec3 v_barycentric;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nuniform vec3 u_outlineColor;\nvarying vec3 normal_color;\nvarying vec3 barycentric;\nvarying vec3 front_color;\nvarying vec3 back_color;\nvarying vec3 outline_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tbarycentric = v_barycentric;\n\tvec3 light = abs(normalize((vec4(v_normal, 1) * u_modelView).xyz));\n\tfloat brightness = 0.5 + light.x * 0.15 + light.z * 0.35;\n\tfront_color = u_frontColor * brightness;\n\tback_color = u_backColor * brightness;\n\toutline_color = u_outlineColor;\n}\n`;const rv=`#version 300 es\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nuniform vec3 u_outlineColor;\nin vec3 v_position;\nin vec3 v_normal;\nin vec3 v_barycentric;\nin float v_rawEdge;\nout vec3 front_color;\nout vec3 back_color;\nout vec3 outline_color;\nout vec3 barycentric;\n// flat out int rawEdge;\nflat out int provokedVertex;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tprovokedVertex = gl_VertexID;\n\tbarycentric = v_barycentric;\n\t// rawEdge = int(v_rawEdge);\n\tvec3 light = abs(normalize((vec4(v_normal, 1) * u_modelView).xyz));\n\tfloat brightness = 0.5 + light.x * 0.15 + light.z * 0.35;\n\tfront_color = u_frontColor * brightness;\n\tback_color = u_backColor * brightness;\n\toutline_color = u_outlineColor;\n}\n`;const ov=`#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nuniform float u_opacity;\nin vec3 front_color;\nin vec3 back_color;\nout vec4 outColor;\nvoid main () {\n\tgl_FragDepth = gl_FragCoord.z;\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\toutColor = vec4(color, u_opacity);\n}\n`;const cv=`#version 100\nprecision mediump float;\nvarying vec3 blend_color;\nvoid main () {\n\tgl_FragColor = vec4(blend_color.rgb, 1);\n}\n`;const av=(e,t=1,n={},s={})=>{const r=Gh(n,s.layerNudge);const o=t===1?wh(e,Kh,tv):wh(e,Jh,ov);return{program:o,vertexArrays:Ih(e,o,r,s),elementArrays:Uh(e,t,r),flags:[e.DEPTH_TEST],makeUniforms:Hh}};const iv=(e,t=1,n={},s={})=>{const r=t===1?wh(e,ev,cv):wh(e,Zh,nv);return{program:r,vertexArrays:Qh(e,r,n,s),elementArrays:Dh(e,t,n),flags:[e.DEPTH_TEST],makeUniforms:Hh}};const fv=(e,t=1,n={},s={})=>{const r=Gh(n,s.layerNudge);const o=t===1?wh(e,sv,Xh):wh(e,rv,Yh);return{program:o,vertexArrays:Ih(e,o,r,s),elementArrays:Uh(e,t,r),flags:[e.DEPTH_TEST],makeUniforms:Hh}};const lv=Object.freeze({__proto__:null,foldedFormEdges:iv,foldedFormFaces:av,foldedFormFacesOutlined:fv});const dv=(e,t=1,n={},s={})=>{const r=[];if(s.faces!==false){if(s.outlines===false){r.push(av(e,t,n,s))}else{r.push(fv(e,t,n,s))}}if(s.edges===true){r.push(iv(e,t,n,s))}return r};const uv=e=>e.map((e=>[0,1].map((t=>e[t]||0))));const mv=(e,t)=>{if(!e||!e.vertices_coords||!e.edges_vertices){return[]}const n=t&&t.dark?Nh:zh;const s={...n,...t};const r=uv(e.edges_vertices.flatMap((t=>t.map((t=>e.vertices_coords[t])))).flatMap((e=>[e,e])));const o=uv(nr(e));const c=e.edges_assignment?e.edges_assignment.flatMap((e=>[s[e],s[e],s[e],s[e]])):e.edges_vertices.flatMap((()=>[s.U,s.U,s.U,s.U]));const a=o.flatMap((e=>[e,e,e,e]));const i=e.edges_vertices.flatMap((()=>[[1,0],[-1,0],[-1,0],[1,0]]));return{vertices_coords:r,vertices_color:c,verticesEdgesVector:a,vertices_vector:i}};const gv=Object.freeze({__proto__:null,makeCPEdgesVertexData:mv});const pv=(e,t,n,s)=>{if(!n||!n.vertices_coords||!n.edges_vertices){return[]}const{vertices_coords:r,vertices_color:o,verticesEdgesVector:c,vertices_vector:a}=mv(n,s);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:2,data:new Float32Array(r.flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:o.length?o[0].length:2,data:new Float32Array(o.flat())},{location:e.getAttribLocation(t,"edge_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:c.length?c[0].length:2,data:new Float32Array(c.flat())},{location:e.getAttribLocation(t,"vertex_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:a.length?a[0].length:2,data:new Float32Array(a.flat())}].filter((e=>e.location!==-1))};const _v=(e,t=1,n={})=>{if(!n||!n.edges_vertices){return[]}const s=n.edges_vertices.map(((e,t)=>t*4)).flatMap((e=>[e+0,e+1,e+2,e+2,e+3,e+0]));return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:t===2?new Uint32Array(s):new Uint16Array(s)}]};const hv=e=>e.map((e=>[0,1].map((t=>e[t]||0))));const vv=(e,t,n)=>{if(!n||!n.vertices_coords){return[]}return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:2,data:new Float32Array(hv(n.vertices_coords).flat())}].filter((e=>e.location!==-1))};const bv=(e,t=1,n={})=>{if(!n||!n.vertices_coords||!n.faces_vertices){return[]}return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:t===2?new Uint32Array(Zp(n).flat()):new Uint16Array(Zp(n).flat())}]};const yv=Object.freeze({__proto__:null,makeCPEdgesElementArrays:_v,makeCPEdgesVertexArrays:pv,makeCPFacesElementArrays:bv,makeCPFacesVertexArrays:vv});const Ev=(e,{projectionMatrix:t,modelViewMatrix:n,cpColor:s,strokeWidth:r})=>({u_matrix:{func:"uniformMatrix4fv",value:a_(t||s_,n||s_)},u_projection:{func:"uniformMatrix4fv",value:t||s_},u_modelView:{func:"uniformMatrix4fv",value:n||s_},u_cpColor:{func:"uniform3fv",value:Bh(s||"white")},u_strokeWidth:{func:"uniform1f",value:r||.05}});const Mv=`#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nin vec3 blend_color;\nout vec4 outColor;\nvoid main() {\n\toutColor = vec4(blend_color.rgb, 1);\n}\n`;const Av=`#version 100\nprecision mediump float;\nvarying vec3 blend_color;\nvoid main () {\n\tgl_FragColor = vec4(blend_color.rgb, 1);\n}\n`;const xv=`#version 300 es\nuniform mat4 u_matrix;\nuniform float u_strokeWidth;\nin vec2 v_position;\nin vec3 v_color;\nin vec2 edge_vector;\nin vec2 vertex_vector;\nout vec3 blend_color;\nvoid main () {\n\tfloat sign = vertex_vector[0];\n\tfloat halfWidth = u_strokeWidth * 0.5;\n\tvec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * halfWidth;\n\tgl_Position = u_matrix * vec4(side + v_position, 0, 1);\n\tblend_color = v_color;\n}\n`;const wv=`#version 100\nuniform mat4 u_matrix;\nuniform float u_strokeWidth;\nattribute vec2 v_position;\nattribute vec3 v_color;\nattribute vec2 edge_vector;\nattribute vec2 vertex_vector;\nvarying vec3 blend_color;\nvoid main () {\n\tfloat sign = vertex_vector[0];\n\tfloat halfWidth = u_strokeWidth * 0.5;\n\tvec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * halfWidth;\n\tgl_Position = u_matrix * vec4(side + v_position, 0, 1);\n\tblend_color = v_color;\n}\n`;const kv=`#version 100\nuniform mat4 u_matrix;\nuniform vec3 u_cpColor;\nattribute vec2 v_position;\nvarying vec3 blend_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 0, 1);\n\tblend_color = u_cpColor;\n}\n`;const Ov=`#version 300 es\nuniform mat4 u_matrix;\nuniform vec3 u_cpColor;\nin vec2 v_position;\nout vec3 blend_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 0, 1);\n\tblend_color = u_cpColor;\n}\n`;const jv=(e,t={},n=undefined)=>{const s=wh(e,kv,Av);return{program:s,vertexArrays:vv(e,s,t),elementArrays:bv(e,1,t),flags:[],makeUniforms:Ev}};const Fv=(e,t={},n=undefined)=>{const s=wh(e,wv,Av);return{program:s,vertexArrays:pv(e,s,t,n),elementArrays:_v(e,1,t),flags:[],makeUniforms:Ev}};const Sv=(e,t={},n=undefined)=>{const s=wh(e,Ov,Mv);return{program:s,vertexArrays:vv(e,s,t),elementArrays:bv(e,2,t),flags:[],makeUniforms:Ev}};const Cv=(e,t={},n=undefined)=>{const s=wh(e,xv,Mv);return{program:s,vertexArrays:pv(e,s,t,n),elementArrays:_v(e,2,t),flags:[],makeUniforms:Ev}};const Vv=Object.freeze({__proto__:null,cpEdgesV1:Fv,cpEdgesV2:Cv,cpFacesV1:jv,cpFacesV2:Sv});const Pv=(e,t=1,n={},s=undefined)=>{switch(t){case 1:return[jv(e,n,s),Fv(e,n,s)];case 2:default:return[Sv(e,n,s),Cv(e,n,s)]}};const Tv=Object.assign(Object.create(null),{createProgram:wh,initialize:kh,foldedForm:dv,creasePattern:Pv},Sh,Th,qh,Lh,lv,yv,gv,Vv);const Nv=({vertices_coords:e,edges_vertices:t})=>{const n=t.map((t=>t.map((t=>e[t])))).map((e=>I(...e)));const s=n.reduce(((e,t)=>Math.min(e,t)),Infinity);return s===Infinity?undefined:s};const zv=({vertices_coords:e,edges_vertices:t})=>{const n=Nv({vertices_coords:e,edges_vertices:t});if(n){return Math.max(n*1e-4,1e-10)}const s=Sc({vertices_coords:e});return s&&s.span?Math.max(1e-6*Math.max(...s.span),1e-10):1e-6};const Bv=e=>jn(jn(e).reverse());const $v=(e,t)=>{const n=[];const s=Ad(e);const r=e.edges_faces?e.edges_faces:Js(e);r.forEach(((e,r)=>{if(e.length===1){n[r]="B"}if(e.length===2){const o=e.map((e=>s[e]));if(o[0]===o[1]){n[r]="F";return}const c=e.map((e=>t[e]));const a=c[0]<c[1];const i=o[0]?a:!a;n[r]=i?"V":"M"}}));return n};const Rv=e=>{const t=[];e.forEach((e=>{t[e[0]]=undefined;t[e[1]]=undefined}));const n=t.map((()=>[]));e.forEach((([e,t,s])=>{n[e][t]=s;n[t][e]=-s}));return n};const Lv=Object.freeze({__proto__:null,faceOrdersToMatrix:Rv,facesLayerToEdgesAssignments:$v,flipFacesLayer:Bv,makeEpsilon:zv});const Iv={taco_taco:e=>[[e[0],e[2]],[e[1],e[3]],[e[1],e[2]],[e[0],e[3]],[e[0],e[1]],[e[2],e[3]]],taco_tortilla:e=>[[e[0],e[2]],[e[0],e[1]],[e[1],e[2]]],tortilla_tortilla:e=>[[e[0],e[2]],[e[1],e[3]]],transitivity:e=>[[e[0],e[1]],[e[1],e[2]],[e[2],e[0]]]};const Uv=e=>e[0]<e[1]?`${e[0]} ${e[1]}`:`${e[1]} ${e[0]}`;const Qv={taco_taco:e=>[Uv([e[0],e[2]]),Uv([e[1],e[3]]),Uv([e[1],e[2]]),Uv([e[0],e[3]]),Uv([e[0],e[1]]),Uv([e[2],e[3]])],taco_tortilla:e=>[Uv([e[0],e[2]]),Uv([e[0],e[1]]),Uv([e[1],e[2]])],tortilla_tortilla:e=>[Uv([e[0],e[2]]),Uv([e[1],e[3]])],transitivity:e=>[Uv([e[0],e[1]]),Uv([e[1],e[2]]),Uv([e[2],e[0]])]};const Dv={0:0,1:1,2:-1};const qv=(e,t)=>{const n=Object.keys(e);const s=n.map((e=>e.split(" ").map((e=>parseInt(e,10)))));s.forEach(((s,r)=>{const o=Dv[e[n[r]]];const c=!t[s[1]]?-o:o;s.push(c)}));return s};const Wv=Object.freeze({__proto__:null,constraintToFacePairs:Iv,constraintToFacePairsStrings:Qv,solverSolutionToFaceOrders:qv});const Gv=({taco_taco:e,taco_tortilla:t,tortilla_tortilla:n,transitivity:s})=>{const r={};r.taco_taco=e.map((e=>[e[0][0],e[1][0],e[0][1],e[1][1]]));r.taco_tortilla=t.map((e=>[e.taco[0],e.tortilla,e.taco[1]]));r.tortilla_tortilla=n.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]]));r.transitivity=s.map((e=>[e[0],e[1],e[2]]));return r};const Hv=e=>{const t={};Object.keys(e).forEach((e=>{t[e]={}}));Object.keys(e).forEach((n=>{e[n].forEach(((e,s)=>Qv[n](e).forEach((e=>{if(t[n][e]===undefined){t[n][e]=[]}t[n][e].push(s)}))))}));return t};const Jv=({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_center:s})=>{const r=t.map((t=>e[t[0]]));const o=t.map((t=>j(e[t[1]],e[t[0]])));return n.map(((e,t)=>e.map((e=>R(j(s[e],r[t]),o[t]))).map((e=>Math.sign(e)))))};const Zv=({vertices_coords:e,edges_vertices:t,faces_center:n},s,r)=>{const o=s.map((n=>t[n[0]].map((t=>e[t]))));const c=o.map((e=>e[0]));const a=o.map((e=>j(e[1],e[0])));const i=r.map((e=>e.map((e=>e.map((e=>n[e]))))));return i.map(((e,t)=>e.map((e=>e.map((e=>R(j(e,c[t]),a[t]))).map((e=>Math.sign(e)))))))};const Yv=e=>{if(e[0]===1&&e[1]===-1||e[0]===-1&&e[1]===1){return"both"}if(e[0]===1&&e[1]===1){return"right"}if(e[0]===-1&&e[1]===-1){return"left"}return undefined};const Xv=e=>e[0]===e[1]&&e[0]!=="both";const Kv=e=>e[0]===e[1]&&e[0]==="both";const eb=e=>e[0]!==e[1]&&(e[0]==="both"||e[1]==="both");const tb=(e,t,n)=>{const s=t[0]==="left"||t[1]==="left"?-1:1;const r=t[0]==="both"?[...e[1]]:[...e[0]];const o=t[0]==="both"?0:1;const c=n[o][0]===s?e[o][0]:e[o][1];return{taco:r,tortilla:c}};const nb=(e,t)=>{if(e===undefined){return undefined}return t[0][0]===t[1][0]?e:[e[0],[e[1][1],e[1][0]]]};const sb=(e,t,n)=>{const s=t.map((e=>e.length===2&&e[0]!==e[1])).map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined));const r=[];s.forEach((e=>{r[e]=n[e]}));const o=r.map(((t,n)=>t.map((t=>[e[n],[t,t]])))).reduce(((e,t)=>e.concat(t)),[]);return o};const rb=({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:s,faces_center:r,edges_vector:o},c=a)=>{if(!r){r=ur({vertices_coords:e,faces_vertices:s})}const i=Jv({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_center:r});const f=V_({vertices_coords:e,edges_vertices:t,edges_vector:o},c);const l=z_({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:s},c);const d=wc(f).filter((e=>e.map((e=>n[e].length>1)).reduce(((e,t)=>e&&t),true)));const u=d.map((e=>e.map((e=>n[e]))));const m=Zv({vertices_coords:e,edges_vertices:t,faces_center:r},d,u);const g=m.map((e=>e.map(Yv)));const p=g.map(((e,t)=>Xv(e)?u[t]:undefined)).filter((e=>e!==undefined));const _=g.map(((e,t)=>Kv(e)?u[t]:undefined)).map(((e,t)=>nb(e,m[t]))).filter((e=>e!==undefined));const h=sb(n,i,l);const v=_.concat(h);const b=g.map(((e,t)=>eb(e)?tb(u[t],g[t],m[t]):undefined)).filter((e=>e!==undefined));const y=l.map(((e,t)=>i[t].length>1&&i[t][0]===i[t][1]?e:[]));const E=y.map(((e,t)=>({taco:n[t],tortillas:e}))).filter((e=>e.tortillas.length));const M=E.flatMap((e=>e.tortillas.map((t=>({taco:[...e.taco],tortilla:t})))));const A=b.concat(M);return{taco_taco:p,tortilla_tortilla:v,taco_tortilla:A}};const ob=({faces_polygon:e},t,n=a)=>{const s=t.map((()=>[]));t.forEach(((e,t)=>e.forEach((e=>{s[t][e]=true;s[e][t]=true}))));const r=[];t.forEach(((t,s)=>t.forEach((t=>{const o=_u(e[s],e[t],n);if(o){if(!r[s]){r[s]=[]}if(!r[t]){r[t]=[]}r[s][t]=o;r[t][s]=o}}))));const o=[];for(let t=0;t<r.length-1;t+=1){if(!r[t]){continue}for(let c=t+1;c<r.length;c+=1){if(!r[t][c]){continue}for(let a=c+1;a<r.length;a+=1){if(t===a||c===a){continue}if(!s[t][a]||!s[c][a]){continue}const i=_u(r[t][c],e[a],n);if(i){o.push([t,c,a].sort(((e,t)=>e-t)))}}}}return o};const cb=(e,{taco_taco:t,taco_tortilla:n})=>{const s={};t.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]].sort(((e,t)=>e-t)))).forEach((e=>[`${e[0]} ${e[1]} ${e[2]}`,`${e[0]} ${e[1]} ${e[3]}`,`${e[0]} ${e[2]} ${e[3]}`,`${e[1]} ${e[2]} ${e[3]}`].forEach((e=>{s[e]=true}))));n.map((e=>[e.taco[0],e.taco[1],e.tortilla].sort(((e,t)=>e-t)).join(" "))).forEach((e=>{s[e]=true}));return e.filter((e=>s[e.join(" ")]===undefined))};const ab=Object.freeze({__proto__:null,filterTransitivity:cb,makeTransitivity:ob});const ib=({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:s,faces_edges:r,edges_vector:o},c=a)=>{const i=Ad({vertices_coords:e,faces_vertices:s});const f=fr({vertices_coords:e,faces_vertices:s},c);i.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined)).forEach((e=>f[e].reverse()));const l=$_({vertices_coords:e,faces_vertices:s},c);const{taco_taco:d,taco_tortilla:u,tortilla_tortilla:m}=rb({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:s,faces_edges:r,edges_vector:o},c);const g=ob({faces_polygon:f},l,c);const p=cb(g,{taco_taco:d,taco_tortilla:u});const _=wc(l).map((e=>e.join(" ")));const h=Gv({taco_taco:d,taco_tortilla:u,tortilla_tortilla:m,transitivity:p});const v=Hv(h);return{constraints:h,lookup:v,facePairs:_,faces_winding:i}};const fb=Object.freeze({__proto__:null,setup:ib});const lb=({edges_faces:e,edges_assignment:t},n,s)=>{const r={0:0,1:2,2:1};const o={M:1,m:1,V:2,v:2};const c={};n.forEach((e=>{c[e]=true}));const a={};e.forEach(((e,n)=>{const i=t[n];const f=o[i];if(e.length<2||f===undefined){return}const l=s[e[0]];const d=l?f:r[f];const u=`${e[0]} ${e[1]}`;const m=`${e[1]} ${e[0]}`;if(u in c){a[u]=d}if(m in c){a[m]=r[d]}}));return a};const db=["111112","111121","111222","112111","121112","121222","122111","122212","211121","211222","212111","212221","221222","222111","222212","222221"];const ub=["112","121","212","221"];const mb=["11","22"];const gb=["112","121","122","211","212","221"];const pb=(e,t,n)=>{const s=Array.from(n).map((e=>parseInt(e,10)));if(s.filter((e=>e===0)).length!==t){return}e[t][n]=false;let r=false;for(let n=0;n<s.length;n+=1){const o=[];if(s[n]!==0){continue}for(let r=1;r<=2;r+=1){s[n]=r;if(e[t-1][s.join("")]!==false){o.push([n,r])}}s[n]=0;if(o.length>0&&r===false){r=[]}if(o.length===1){r.push(o[0])}}if(r!==false&&r.length===0){r=true}e[t][n]=r};const _b=e=>{const t=e[0].length;const n=Array.from(Array(t+1)).map((()=>({})));Array.from(Array(2**t)).map(((e,t)=>t.toString(2))).map((e=>Array.from(e).map((e=>parseInt(e,10)+1)).join(""))).map((e=>`11111${e}`.slice(-t))).forEach((e=>{n[0][e]=false}));e.forEach((e=>{n[0][e]=true}));Array.from(Array(t)).map(((e,t)=>t+1)).map((e=>Array.from(Array(3**t)).map(((e,t)=>t.toString(3))).map((e=>`000000${e}`.slice(-t))).forEach((t=>pb(n,e,t)))));let s=[];Array.from(Array(t+1)).map(((e,n)=>t-n)).forEach((e=>{const t=[];Object.keys(n[e]).forEach((s=>{let r=n[e][s];if(r.constructor===Array){r=r[0]}t.push([s,r])}));s=s.concat(t)}));s.sort(((e,t)=>parseInt(e[0],10)-parseInt(t[0],10)));const r={};s.forEach((e=>{r[e[0]]=Object.freeze(e[1])}));return Object.freeze(r)};const hb={taco_taco:_b(db),taco_tortilla:_b(ub),tortilla_tortilla:_b(mb),transitivity:_b(gb)};const vb=Object.freeze(Object.keys(hb));const bb=(e,t,...n)=>{const s={0:0,1:2,2:1};const r=Iv[e](t);const o=r.map((e=>e[1]<e[0]));const c=r.map(((e,t)=>o[t]?`${e[1]} ${e[0]}`:`${e[0]} ${e[1]}`));const a=c.map(((e,t)=>{for(let r=0;r<n.length;r+=1){if(n[r][e]){return o[t]?s[n[r][e]]:n[r][e]}}return 0})).join("");if(hb[e][a]===true||hb[e][a]===false){return hb[e][a]}const i=hb[e][a];const f=c[i[0]];const l=o[i[0]]?s[i[1]]:i[1];return[f,l]};const yb=(e,t,n)=>{const s={};vb.forEach((r=>{const o=n.flatMap((e=>t[r][e]));s[r]=ln(o).filter((t=>e[r][t]))}));return s};const Eb=(e,t,n,...s)=>{let r=n;const o={};do{const n=yb(e,t,r);const c={};for(let t=0;t<vb.length;t+=1){const r=vb[t];const a=n[r];for(let t=0;t<a.length;t+=1){const n=bb(r,e[r][a[t]],...s,o);if(n===true){continue}if(n===false){throw new Error(`invalid ${r} ${a[t]}:${e[r][a[t]]}`)}if(o[n[0]]){if(o[n[0]]!==n[1]){throw new Error(`conflict ${r} ${a[t]}:${e[r][a[t]]}`)}}else{const[e,t]=n;c[e]=true;o[n[0]]=t}}}r=Object.keys(c)}while(r.length);return o};const Mb=(e,t,n)=>{const s=Object.keys(t);const r={};e.forEach((e=>{r[e]=true}));let o=0;const c=[];while(o<e.length){if(!r[e[o]]){o+=1;continue}const a=[];const i=[e[o]];const f={[e[o]]:true};do{const e=i.pop();delete r[e];a.push(e);const o={};s.forEach((s=>{const r=n[s][e];if(!r){return}r.map((e=>t[s][e])).map((e=>Qv[s](e).forEach((e=>{o[e]=true}))))}));const c=Object.keys(o).filter((e=>r[e])).filter((e=>!f[e]));i.push(...c);c.forEach((e=>{f[e]=true}))}while(i.length);o+=1;c.push(a)}return c};const Ab=(e,t,n,...s)=>{if(!n.length){return[]}const r=n[0];const o=[];const c=[];[1,2].forEach((a=>{let i;try{i=Eb(e,t,[r],...s,{[r]:a})}catch(e){return}i[r]=a;if(Object.keys(i).length===n.length){o.push(i)}else{c.push(i)}}));const a=c.map((r=>Ab(e,t,n.filter((e=>!(e in r))),...s,r)));return o.map((e=>[...s,e])).concat(...a)};const xb=({constraints:e,lookup:t,facePairs:s,orders:r})=>{let o;try{o=Eb(e,t,Object.keys(r),r)}catch(e){throw new Error(n.noLayerSolution,{cause:e})}const c=s.filter((e=>!(e in r))).filter((e=>!(e in o)));let a;try{a=Mb(c,e,t).map((n=>Ab(e,t,n,r,o)))}catch(e){throw new Error(n.noLayerSolution,{cause:e})}const i={...r,...o};const f=a.map((e=>e.map((e=>Object.assign({},...e)))));return{root:i,branches:f}};const wb=e=>{const t=e.reduce(((e,t)=>e*t),1);const n=e.slice();for(let e=n.length-2;e>=0;e-=1){n[e]*=n[e+1]}n.push(1);n.shift();return Array.from(Array(t)).map(((t,s)=>e.map(((e,t)=>Math.floor(s/n[t])%e))))};const kb={count:function(){return this.branches.map((e=>e.length))},faceOrders:function(...e){return qv(this.compile(...e),this.faces_winding)},facesLayer:function(...e){return jn(this.linearize(...e).reverse())},compile:function(...e){const t=Array(this.branches.length).fill(0).map(((t,n)=>e[n]!=null?e[n]:t));const n=this.branches?this.branches.map(((e,n)=>e[t[n]])):[];return Object.assign({},this.root,...n)},directedPairs:function(...e){const t=this.compile(...e);return Object.keys(t).map((e=>t[e]===1?e.split(" "):e.split(" ").reverse())).map((e=>e.map((e=>parseInt(e,10)))))},linearize:function(...e){return wd(this.directedPairs(...e))},allSolutions:function(){return wb(this.count()).map((e=>this.compile(...e)))},allFacesLayers:function(){return wb(this.count()).map((e=>this.facesLayer(...e)))}};const Ob=()=>({root:{},branches:[],faces_winding:[]});const jb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,faces_vertices:r,faces_edges:o,edges_vector:c},a)=>{if(!e||!t||!r){return Object.assign(Object.create(kb),Ob())}if(!o){o=ar({edges_vertices:t,faces_vertices:r})}if(!n){n=Hs({edges_vertices:t,faces_edges:o})}if(a===undefined){a=zv({vertices_coords:e,edges_vertices:t})}const{constraints:i,lookup:f,facePairs:l,faces_winding:d}=ib({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:r,faces_edges:o,edges_vector:c},a);const u=lb({edges_faces:n,edges_assignment:s},l,d);const{root:m,branches:g}=xb({constraints:i,lookup:f,facePairs:l,orders:u});return Object.assign(Object.create(kb),{root:m,branches:g,faces_winding:d})};const Fb=(e,t,n=a)=>{const s=e[0]<e[1]?e:[e[1],e[0]];const r=t[0]<t[1]?t:[t[1],t[0]];const o=Math.min(s[1],r[1])-Math.max(s[0],r[0]);return o>n};const Sb=({vertices_coords:e,edges_vertices:t},n,s,r=a)=>{const o=n.map((n=>t[n].map((t=>e[t]))));const c=o.map((e=>e.map((e=>S(e,s)))));const i=Fb(...c,r);return i};const Cb=(e,t)=>{if(e.orders){e.orders=e.orders.flatMap((e=>qv(e,t)))}if(e.leaves){e.leaves=e.leaves.map((e=>qv(e,t)))}if(e.partitions){e.partitions.forEach((e=>Cb(e,t)))}if(e.node){e.node.forEach((e=>Cb(e,t)))}return e};const Vb=Object.freeze({__proto__:null,doEdgesOverlap:Sb,doRangesOverlap:Fb,reformatSolution:Cb});const Pb=({vertices_coords:e,edges_vertices:t},n=a)=>{const{lines:s,edges_line:r}=Fo({vertices_coords:e,edges_vertices:t},n);const o=r.map((e=>s[e].vector));const c=tr({vertices_coords:e,edges_vertices:t}).map(((e,t)=>e.map((e=>S(o[t],e)))));return jn(r).map((e=>e.constructor===Array?e:[e])).flatMap((e=>_n(e).filter((e=>Fb(...e.map((e=>c[e])))))))};const Tb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s,faces_center:r},o,c,i,f=a)=>{const l=s.map(Ft);const d=Pb({vertices_coords:e,edges_vertices:t},f).map((e=>e[0]<e[1]?e:e.slice().reverse())).filter((e=>!(l[e[0]]&&l[e[1]]))).filter((e=>e.map((e=>n[e].length===2)).reduce(((e,t)=>e&&t),true))).filter((e=>e.map((e=>o[e]!==undefined)).reduce(((e,t)=>e&&t),true))).filter((e=>Array.from(new Set(e.flatMap((e=>o[e])))).length!==4));const u=d.map((e=>e.map((e=>o[e]))));const m=u.map((e=>Array.from(new Set(e.flat()))));const g=u.map(((e,t)=>{const n={};e.flat().forEach((e=>{n[e]=[]}));e.forEach(((e,s)=>e.forEach((e=>n[e].push(d[t][s])))));return n}));const p=d.map((e=>e.map((e=>n[e]))));const _=p.map(((e,t)=>{const n={};m[t].forEach((e=>{n[e]=[]}));e.flat().forEach((e=>n[c[e]].push(e)));return n}));const h=tr({vertices_coords:e,edges_vertices:t});const v=m.map(((e,t)=>{const n=h[d[t][0]];const s={};e.forEach((e=>{s[e]=n.map((t=>o_(i[e],t))).map((e=>[e[0],e[1]]))}));return s}));const b=_.map(((e,t)=>{const n={};m[t].forEach((s=>{const o=v[t][s][0];n[s]=e[s].map((e=>R(j(r[e],o),j(v[t][s][1],o)))).map((e=>Math.sign(e)))}));return n}));const y=b.map(((e,t)=>{const n={};m[t].forEach((t=>{n[t]=e[t].reduce(((n,s)=>n&&s===e[t][0]),true)}));return n}));const E=d.map(((e,t)=>{const n={};Object.keys(g[t]).forEach((e=>{n[e]={edges:g[t][e],faces:_[t][e],facesSides:b[t][e],facesSameSide:y[t][e]}}));return{edges:e,sets:n}}));const M=E.filter((e=>{const t=Object.values(e.sets).map((e=>e.faces.length===2)).reduce(((e,t)=>e&&t),true);const n=Object.values(e.sets).map((e=>e.facesSameSide)).reduce(((e,t)=>e&&t),true);return t&&n}));const A=E.filter((e=>{const t=Object.values(e.sets).length===3;const n=Object.values(e.sets).map((e=>e.facesSameSide)).reduce(((e,t)=>e&&t),true);return t&&n}));const x=E.filter((e=>{const t=Object.values(e.sets).map((e=>e.faces.length===2)).reduce(((e,t)=>e&&t),true);const n=Object.values(e.sets).map((e=>e.facesSameSide));const s=n[0]!==n[1];return t&&s}));const w=E.filter((e=>{const t=Object.values(e.sets).filter((e=>e.faces.length===3)).shift();const s=t!==undefined;if(!s){return false}const r=t.facesSides.reduce(((e,t)=>e+t),0);const o=Math.abs(r)===1;if(!o){return false}const c=t.faces.filter(((e,n)=>t.facesSides[n]===r));const a=t.edges.map((e=>n[e].map((e=>c.includes(e))).reduce(((e,t)=>e&&t),true))).reduce(((e,t)=>e||t),false);const i=!a;return s&&o&&i}));if(w.length){console.log("This model contains the third case",w)}return{tortillaTortillaEdges:M,solvable1:A,solvable2:x,solvable3:[]}};const Nb=({edges_faces:e},t,n,s)=>{const r=t.map((e=>e.edges)).map((t=>t.map((t=>e[t].slice()))));r.forEach(((e,t)=>{if(n[e[0][0]]!==n[e[1][0]]){r[t][1].reverse()}}));r.map((e=>[e[0][0],e[0][1]])).map((e=>e.map((e=>s[e])))).map(((e,t)=>e[0]!==e[1]?t:undefined)).filter((e=>e!==undefined)).forEach((e=>{const t=r[e][0][1];r[e][0][1]=r[e][1][1];r[e][1][1]=t}));return r};const zb=(e,t,n=a)=>{const s=t.map((t=>Dr(e,t,at,n))).reduce(((e,t)=>e||t),false);if(s){return true}const r=pu(e,{vector:j(t[1],t[0]),origin:t[0]},at,mt,n);return r!==undefined};const Bb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s},r,o,c,i,f,l,d,u=a)=>{const m=c.slice();m.forEach(((e,t)=>{if(e.length<2){delete m[t]}}));const g=n.map((e=>{const t={};e.forEach((e=>{t[e]=true}));return t}));const p=d.map((e=>e.filter((e=>m[e]!==undefined)).map((e=>m[e]))));d.map(((e,t)=>t)).filter((e=>p[e].length<2)).forEach((e=>delete p[e]));const _=p.map(((e,t)=>e.map((e=>e.filter((e=>g[t][e]))))));const h=p.map(((e,t)=>e.map((e=>e.filter((e=>!g[t][e]))))));const v=p.map(((n,s)=>t[s].map((t=>e[t]))));const b=h.map(((e,t)=>e.map((e=>e.map((e=>{const n=v[t].map((t=>o_(o[i[e]],t)));const s=n.map((e=>[e[0],e[1]]));return zb(f[e],s,u)?e:undefined})).filter((e=>e!==undefined))))));const y=p.flatMap(((e,t)=>b[t].flatMap(((e,n)=>{const s=1-n;const r=_[t];return e.map((e=>({edge:t,faces:[r[n][0],r[s][0]],overlap:e,set:i[e]})))}))));const E=y.map((e=>[e.faces[0],e.overlap]));const M=E.map((e=>e[0]<e[1]));M.forEach(((e,t)=>{if(!e){E[t].reverse()}}));const A=y.map((e=>l[e.faces[0]]));const x=y.map((e=>s[e.edge])).map(Math.sign).map((e=>e===1));const w=y.map(((e,t)=>A[t]^x[t]));const k=w.map(((e,t)=>M[t]?e:1-e)).map((e=>e+1));const O={};E.forEach(((e,t)=>{O[e.join(" ")]=k[t]}));return O};const $b=({edges_foldAngle:e,faces_winding:t},n,s)=>{const r=n.map((t=>t.map((t=>e[t]))));const o=s.map((e=>e.map((e=>t[e]))));const c=r.map(((e,t)=>e.map(((e,n)=>o[t][n]?e:-e))));const a=c.map((e=>e[0]>e[1]));const i=s.map((e=>e[0]<e[1]));const f=s.map(((e,t)=>a[t]^i[t]));const l={};const d=s.map(((e,t)=>i[t]?e:e.slice().reverse())).map((e=>e.join(" ")));f.map((e=>e+1)).forEach(((e,t)=>{l[d[t]]=e}));return l};const Rb=({edges_foldAngle:e,faces_winding:t},n)=>{const s=n.map((e=>Object.values(e.sets).sort(((e,t)=>t.faces.length-e.faces.length)).shift()));const r=s.map((e=>e.edges));const o=s.map((e=>e.faces));return $b({edges_foldAngle:e,faces_winding:t},r,o)};const Lb=({edges_foldAngle:e,faces_winding:t},n)=>{const s=n.map((e=>Object.values(e.sets).filter((e=>e.facesSameSide)).shift()));const r=s.map((e=>e.edges));const o=s.map((e=>e.faces));return $b({edges_foldAngle:e,faces_winding:t},r,o)};const Ib=({edges_foldAngle:e,faces_winding:t},n)=>({});const Ub=({edges_foldAngle:e,faces_winding:t},n,s,r)=>{const o=Rb({edges_foldAngle:e,faces_winding:t},n);const c=Lb({edges_foldAngle:e,faces_winding:t},s);const a=Ib({edges_foldAngle:e,faces_winding:t});return{...o,...c,...a}};const Qb=(e,t,n)=>{const s=(e,t)=>{const n=o_(e,t);return[n[0],n[1]]};const r=e.vertices_coords.map((e=>Y(3,e)));const o=t.map((t=>_c(e,t)));n.forEach(((e,t)=>{o[t].vertices_coords=o[t].vertices_coords.map(((t,n)=>s(e,r[n])))}));const c=e.edges_foldAngle.map(Ft).map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined));const a=Vt(e,"edges");o.forEach((e=>c.forEach((t=>a.forEach((n=>{delete e[n][t]}))))));return o};const Db=Object.freeze({__proto__:null,graphGroupCopies:Qb});const qb=({edges_vertices:e,faces_edges:t},n)=>{const s=e.map((()=>({})));n.forEach(((e,n)=>t[n].forEach((t=>{s[t][e]=true}))));const r=s.map((e=>Object.keys(e).map((e=>parseInt(e,10))).sort(((e,t)=>e-t))));return r};const Wb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s,faces_edges:r,faces_winding:o,faces_center:c},a,i,f,l,d,u,m)=>{const g=u.map((e=>f[e[0]]));const p=jn(g).map((e=>e.constructor===Array?e:[e]));const _=p.map((e=>e.map((e=>d[e]))));const h=qb({edges_vertices:t,faces_edges:r},f);h.map(((e,t)=>e.length!==2?t:undefined)).filter((e=>e!==undefined)).forEach((e=>delete h[e]));const{tortillaTortillaEdges:v,solvable1:b,solvable2:y,solvable3:E}=Tb({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s,faces_center:c},h,f,i,m);const M=Nb({edges_faces:n},v,f,o);const A=Bb({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s},_,i,a,f,l,o,h,m);const x=Ub({edges_foldAngle:s,faces_winding:o},b,y);const w={...A,...x};return{tortillas3D:M,orders:w}};const Gb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,edges_foldAngle:r,faces_vertices:o,faces_edges:c,faces_faces:i},f=a)=>{if(!c){c=ar({edges_vertices:t,faces_vertices:o})}if(!n){n=Hs({edges_vertices:t,faces_edges:c})}if(!i){i=ir({faces_vertices:o})}if(!r&&s){r=Ks({edges_assignment:s})}if(!s){s=Ys({edges_foldAngle:r})}const{sets_faces:l,sets_transformXY:d,faces_set:u,faces_winding:m}=F_({vertices_coords:e,faces_vertices:o,faces_faces:i},f);const g=Qb({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,edges_foldAngle:r,faces_vertices:o,faces_edges:c,faces_faces:i},l,d);const p=an(...g.map((e=>fr(e,f))));m.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined)).forEach((e=>p[e].reverse()));const _=an(...g.map((e=>$_(e,f))));const h=p.map((e=>B(...e)));g.forEach((e=>{e.faces_center=e.faces_vertices.map(((e,t)=>h[t]))}));const v=g.map((e=>rb(e,f)));const b=v.flatMap((e=>e.taco_taco));const y=v.flatMap((e=>e.taco_tortilla));const E=v.flatMap((e=>e.tortilla_tortilla));const M=ob({faces_polygon:p},_,f);const A=cb(M,{taco_taco:b,taco_tortilla:y});const x=wc(_);const w=x.map((e=>e.join(" ")));const{tortillas3D:k,orders:O}=Wb({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:r,faces_edges:c,faces_winding:m,faces_center:h},l,d,u,p,w,x,f);E.push(...k);const j=Gv({taco_taco:b,taco_tortilla:y,tortilla_tortilla:E,transitivity:A});const F=Hv(j);g.map((e=>lb(e,w,m))).forEach((e=>Object.assign(O,e)));return{constraints:j,lookup:F,facePairs:w,faces_winding:m,orders:O}};const Hb=Object.freeze({__proto__:null,setup:Gb});const Jb=()=>({root:{},branches:[],faces_winding:[]});const Zb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,edges_foldAngle:r,faces_vertices:o,faces_edges:c,faces_faces:a},i)=>{if(!e||!t||!o){return Object.assign(Object.create(kb),Jb())}if(i===undefined){i=zv({vertices_coords:e,edges_vertices:t})}const{constraints:f,lookup:l,facePairs:d,faces_winding:u,orders:m}=Gb({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,edges_foldAngle:r,faces_vertices:o,faces_edges:c,faces_faces:a},i);const{root:g,branches:p}=xb({constraints:f,lookup:l,facePairs:d,orders:m});return Object.assign(Object.create(kb),{root:g,branches:p,faces_winding:u})};const Yb=(e,t,n)=>{const s=e.map((e=>e?(e[0]+e[1])/2:undefined));const r=[];e.forEach(((o,c)=>{if(!o){return}if(!t&&c===e.length-1){return}const a=o[1];const i=a-n*2;const f=a+n*2;const l=[c,(c+1)%e.length];const d=l.map((e=>s[e])).map((e=>e>a));const u=(!d[0]&&!d[1])*1+(d[0]&&d[1])*2;const m=r.filter((e=>e.min<a&&e.max>a)).shift();const g={faces:l,taco_type:u};if(m){m.pairs.push(g)}else{r.push({min:i,max:f,pairs:[g]})}}));return r.map((e=>e.pairs)).filter((e=>e.length>1)).map((e=>({both:e.filter((e=>e.taco_type===0)).map((e=>e.faces)),left:e.filter((e=>e.taco_type===1)).map((e=>e.faces)),right:e.filter((e=>e.taco_type===2)).map((e=>e.faces))})))};const Xb=(e,t,n)=>t<n?e.slice(t+1,n):e.slice(n+1,t);const Kb=(e,t,n=true,s=a)=>{const r=jn(t);const o=e.map((e=>e?e[1]:undefined));const c=e.map((e=>e?Math.min(...e):undefined)).map((e=>e+s));const i=e.map((e=>e?Math.max(...e):undefined)).map((e=>e-s));const f=r.length+(n?0:-1);for(let e=0;e<f;e+=1){const n=(e+1)%r.length;if(r[e]===r[n]){continue}const s=Xb(t,r[e],r[n]).flat();const a=s.map((t=>o[e]<c[t])).reduce(((e,t)=>e&&t),true);const f=s.map((t=>o[e]>i[t])).reduce(((e,t)=>e&&t),true);if(!a&&!f){return false}}return true};const ey=e=>{const t=dn(e);const n={};let s=0;for(let e=0;e<t.length;e+=1){if(n[t[e]]===undefined){s+=1;n[t[e]]=s}else if(n[t[e]]!==undefined){if(n[t[e]]!==s){return false}s-=1;n[t[e]]=undefined}}return true};const ty=(e,t)=>e.map((e=>t[e])).filter((e=>e!==undefined));const ny=(e,t,n,s,r)=>{const o=t.flat();if(!Kb(e,t,s,r)){return false}for(let e=0;e<n.length;e+=1){const t=ty(o,n[e]);if(!ey(t)){return false}}return true};const sy={V:true,v:true,M:true,m:true};const ry=e=>{let t=0;const n=e.slice(1);return[false].concat(n.map((e=>sy[e]?++t:t)).map((e=>e%2===1)))};const oy={V:1,v:1,M:-1,m:-1};const cy=(e,t)=>t%2===0?oy[e]||0:-(oy[e]||0);const ay=e=>{let t=0;return e.slice(1).concat([e[0]]).map((e=>{const n=cy(e,t);t+=oy[e]===undefined?0:1;return n}))};const iy=(e,t)=>{const n=ry(t).map(((t,n)=>e[n]*(t?-1:1)));const s=e.map((()=>undefined));s[0]=[0,n[0]];for(let r=1;r<e.length;r+=1){if(t[r]==="B"||t[r]==="b"){break}const o=(r-1+e.length)%e.length;const c=s[o][1];s[r]=[c,c+n[r]]}return s};const fy={B:true,b:true};const ly=(e,t,n=a)=>{const s=iy(e,t);const r=ay(t);const o=t.map((e=>!fy[e])).reduce(((e,t)=>e&&t),true);if(o){const e=s[0][0];const t=s[s.length-1][1];if(Math.abs(e-t)>n){return[]}}const c=Yb(s,o,n).map((e=>[e.left,e.right].map(jn).filter((e=>e.length>1)))).reduce(((e,t)=>e.concat(t)),[]);const i=(t=[0],a=0,f=0)=>{const l=a+1;const d=r[a];const u=a>=e.length-1;const m=o&&u;if(!ny(s,t,c,m,n)){return[]}if(m){const e=jn(t);const n=e[0];const s=e[a];if(d>0&&s>n){return[]}if(d<0&&s<n){return[]}}if(u){return[t]}if(d===0){t[f]=[l].concat(t[f]);return i(t,l,f)}const g=d===1?Array.from(Array(t.length-f)).map(((e,t)=>f+t+1)):Array.from(Array(f+1)).map(((e,t)=>t));const p=g.map((()=>Xc(t)));p.forEach(((e,t)=>e.splice(g[t],0,l)));return p.map(((e,t)=>i(e,l,g[t]))).reduce(((e,t)=>e.concat(t)),[])};return i().map(jn)};const dy=(e,t,n)=>{if(t==null){t=e.map((()=>"U"))}const s=yh(t);const r=s.map((t=>ly(e,t,n)));return s.map(((e,t)=>t)).filter((e=>r[e].length>0)).map((e=>({assignment:s[e],layer:r[e]})))};Object.assign(jb,{table:hb,makeTacosAndTortillas:rb,...ab,...Lv,...Wv,...fb,layer3d:Zb,...Hb,...Vb,...Db,singleVertexSolver:ly,singleVertexAssignmentSolver:dy,foldStripWithAssignments:iy});Object.assign(Am,Z_);const uy={graph:Am,cp:xm,origami:wm,axiom:ag,convert:sp,general:ip,math:uh,singleVertex:Mh,svg:Wl,webgl:Tv,layer:jb};Rl.ear=uy;Object.defineProperty(uy,"window",{enumerable:false,set:e=>{Wl.window=o(e)}});export{uy as default};