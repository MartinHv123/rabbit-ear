const e=typeof window!=="undefined"&&typeof window.document!=="undefined";const t=typeof process!=="undefined"&&process.versions!=null&&process.versions.node!=null;const n={planarize:"graph could not planarize",manifold:"valid manifold required",graphCycle:"cycle not allowed",planarBoundary:"planar boundary detection error, bad graph",circularEdge:"circular edges not allowed",replaceModifyParam:"replace() index < value. indices parameter modified",replaceUndefined:"replace() generated undefined",flatFoldAngles:"foldAngles cannot be determined from flat-folded faces without an assignment",noWebGL:"WebGl not Supported",convexFace:"only convex faces are supported",window:"window not set; if using node/deno include package @xmldom/xmldom and set ear.window = xmldom",nonConvexTriangulation:"non-convex triangulation requires vertices_coords",backendStylesheet:"svgToFold found <style> in <svg>. rendering will be incomplete unless run in a major browser.",noLayerSolution:"LayerSolver bad input. no solution possible"};const s={window:undefined};const r=e=>(new e.DOMParser).parseFromString("<!DOCTYPE html><title>.</title>","text/html");const c=e=>{if(!e.document){e.document=r(e)}s.window=e;return s.window};if(e){s.window=window}const o=()=>{if(s.window===undefined){throw new Error(n.window)}return s.window};const a=1e-6;const i=180/Math.PI;const f=Math.PI/180;const l=Math.PI*2;const d=Object.freeze({__proto__:null,D2R:f,EPSILON:a,R2D:i,TWO_PI:l});const u=(e,t)=>e+(t||0);const m=e=>Math.sqrt(e.map((e=>e*e)).reduce(u,0));const g=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]);const p=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);const _=e=>e.map((e=>e*e)).reduce(u,0);const h=e=>{const t=m(e);return t===0?e:e.map((e=>e/t))};const v=e=>{const t=g(e);return t===0?e:[e[0]/t,e[1]/t]};const b=e=>{const t=p(e);return t===0?e:[e[0]/t,e[1]/t,e[2]/t]};const y=(e,t)=>e.map((e=>e*t));const E=(e,t)=>[e[0]*t,e[1]*t];const M=(e,t)=>[e[0]*t,e[1]*t,e[2]*t];const A=(e,t)=>e.map(((e,n)=>e+(t[n]||0)));const x=(e,t)=>[e[0]+t[0],e[1]+t[1]];const w=(e,t)=>[e[0]+t[0],e[1]+t[1],e[2]+t[2]];const k=(e,t)=>e.map(((e,n)=>e-(t[n]||0)));const O=(e,t)=>[e[0]-t[0],e[1]-t[1]];const j=(e,t)=>[e[0]-t[0],e[1]-t[1],e[2]-t[2]];const F=(e,t)=>e.map(((n,s)=>e[s]*t[s])).reduce(u,0);const S=(e,t)=>e[0]*t[0]+e[1]*t[1];const C=(e,t)=>e[0]*t[0]+e[1]*t[1]+e[2]*t[2];const V=(e,t)=>e.map(((e,n)=>(e+t[n])/2));const P=(e,t)=>E(x(e,t),.5);const T=(e,t)=>M(w(e,t),.5);const N=function(){if(arguments.length===0){return undefined}const e=arguments[0].length>0?arguments[0].length:0;const t=Array(e).fill(0);Array.from(arguments).forEach((e=>t.forEach(((n,s)=>{t[s]+=e[s]||0}))));return t.map((e=>e/arguments.length))};const z=(...e)=>{if(!e||!e.length){return undefined}const t=1/e.length;return e.reduce(((e,t)=>x(e,t)),[0,0]).map((e=>e*t))};const B=(e,t,n=0)=>{const s=1-n;return e.map(((e,r)=>e*s+(t[r]||0)*n))};const $=(e,t)=>e[0]*t[1]-e[1]*t[0];const R=(e,t)=>[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]];const L=(e,t)=>Math.sqrt(e.map(((n,s)=>(e[s]-t[s])**2)).reduce(u,0));const I=(e,t)=>{const n=e[0]-t[0];const s=e[1]-t[1];return Math.sqrt(n*n+s*s)};const U=(e,t)=>{const n=e[0]-t[0];const s=e[1]-t[1];const r=e[2]-t[2];return Math.sqrt(n*n+s*s+r*r)};const Q=e=>e.map((e=>-e));const D=e=>[-e[1],e[0]];const q=e=>[e[1],-e[0]];const W=(e,t=a)=>e.map((e=>Math.abs(e))).reduce(u,0)<t;const G=(e,t,n=a)=>1-Math.abs(F(e,t))<n;const H=(e,t,n=a)=>G(h(e),h(t),n);const J=(e,t,n=a)=>Math.abs($(e,t))<n;const Z=(e,t)=>t.length===e?t:Array(e).fill(0).map(((e,n)=>t[n]?t[n]:e));const Y=(e,t)=>[e,t].map((n=>Z(Math.max(e.length,t.length),n)));const X=(e=[1,0])=>{const t=v(e);return[t,D(t)]};const K=(e=[1,0,0])=>{const t=b(e);const n=[[1,0,0],[0,1,0],[0,0,1]].map((e=>R(e,t)));const s=n.map(p).map(((e,t)=>({n:e,i:t}))).sort(((e,t)=>t.n-e.n)).map((e=>e.i)).shift();const r=b(n[s]);return[t,r,R(t,r)]};const ee=e=>e.length===2?X(e):K(e);const te=Object.freeze({__proto__:null,add:A,add2:x,add3:w,average:N,average2:z,basisVectors:ee,basisVectors2:X,basisVectors3:K,cross2:$,cross3:R,degenerate:W,distance:L,distance2:I,distance3:U,dot:F,dot2:S,dot3:C,flip:Q,lerp:B,magSquared:_,magnitude:m,magnitude2:g,magnitude3:p,midpoint:V,midpoint2:P,midpoint3:T,normalize:h,normalize2:v,normalize3:b,parallel:H,parallel2:J,parallelNormalized:G,resize:Z,resizeUp:Y,rotate270:q,rotate90:D,scale:y,scale2:E,scale3:M,subtract:k,subtract2:O,subtract3:j});const ne=[1,0,0,1];const se=ne.concat(0,0);const re=(e,t)=>[e[0]*t[0]+e[2]*t[1]+e[4],e[1]*t[0]+e[3]*t[1]+e[5]];const ce=(e,t,n)=>({vector:[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1]],origin:[e[0]*n[0]+e[2]*n[1]+e[4],e[1]*n[0]+e[3]*n[1]+e[5]]});const oe=(e,t)=>[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1],e[0]*t[2]+e[2]*t[3],e[1]*t[2]+e[3]*t[3],e[0]*t[4]+e[2]*t[5]+e[4],e[1]*t[4]+e[3]*t[5]+e[5]];const ae=e=>e[0]*e[3]-e[1]*e[2];const ie=e=>{const t=ae(e);if(Math.abs(t)<1e-12||Number.isNaN(t)||!Number.isFinite(e[4])||!Number.isFinite(e[5])){return undefined}return[e[3]/t,-e[1]/t,-e[2]/t,e[0]/t,(e[2]*e[5]-e[3]*e[4])/t,(e[1]*e[4]-e[0]*e[5])/t]};const fe=(e=0,t=0)=>ne.concat(e,t);const le=(e=[1,1],t=[0,0])=>[e[0],0,0,e[1],e[0]*-t[0]+t[0],e[1]*-t[1]+t[1]];const de=(e=1,t=[0,0])=>le([e,e],t);const ue=(e,t=[0,0])=>{const n=Math.cos(e);const s=Math.sin(e);return[n,s,-s,n,t[0],t[1]]};const me=(e,t=[0,0])=>{const n=Math.atan2(e[1],e[0]);const s=Math.cos(n);const r=Math.sin(n);const c=Math.cos(-n);const o=Math.sin(-n);const a=s*c+r*o;const i=s*-o+r*c;const f=r*c+-s*o;const l=r*-o+-s*c;const d=t[0]+a*-t[0]+-t[1]*f;const u=t[1]+i*-t[0]+-t[1]*l;return[a,i,f,l,d,u]};const ge=Object.freeze({__proto__:null,determinant2:ae,identity2x2:ne,identity2x3:se,invertMatrix2:ie,makeMatrix2Reflect:me,makeMatrix2Rotate:ue,makeMatrix2Scale:le,makeMatrix2Translate:fe,makeMatrix2UniformScale:de,multiplyMatrices2:oe,multiplyMatrix2Line2:ce,multiplyMatrix2Vector2:re});const pe=Object.freeze([1,0,0,0,1,0,0,0,1]);const _e=Object.freeze(pe.concat(0,0,0));const he=e=>_e.map(((t,n)=>Math.abs(t-e[n])<a)).reduce(((e,t)=>e&&t),true);const ve=(e,t)=>[e[0]*t[0]+e[3]*t[1]+e[6]*t[2]+e[9],e[1]*t[0]+e[4]*t[1]+e[7]*t[2]+e[10],e[2]*t[0]+e[5]*t[1]+e[8]*t[2]+e[11]];const be=(e,t,n)=>({vector:[e[0]*t[0]+e[3]*t[1]+e[6]*t[2],e[1]*t[0]+e[4]*t[1]+e[7]*t[2],e[2]*t[0]+e[5]*t[1]+e[8]*t[2]],origin:[e[0]*n[0]+e[3]*n[1]+e[6]*n[2]+e[9],e[1]*n[0]+e[4]*n[1]+e[7]*n[2]+e[10],e[2]*n[0]+e[5]*n[1]+e[8]*n[2]+e[11]]});const ye=(e,t)=>[e[0]*t[0]+e[3]*t[1]+e[6]*t[2],e[1]*t[0]+e[4]*t[1]+e[7]*t[2],e[2]*t[0]+e[5]*t[1]+e[8]*t[2],e[0]*t[3]+e[3]*t[4]+e[6]*t[5],e[1]*t[3]+e[4]*t[4]+e[7]*t[5],e[2]*t[3]+e[5]*t[4]+e[8]*t[5],e[0]*t[6]+e[3]*t[7]+e[6]*t[8],e[1]*t[6]+e[4]*t[7]+e[7]*t[8],e[2]*t[6]+e[5]*t[7]+e[8]*t[8],e[0]*t[9]+e[3]*t[10]+e[6]*t[11]+e[9],e[1]*t[9]+e[4]*t[10]+e[7]*t[11]+e[10],e[2]*t[9]+e[5]*t[10]+e[8]*t[11]+e[11]];const Ee=e=>e[0]*e[4]*e[8]-e[0]*e[7]*e[5]-e[3]*e[1]*e[8]+e[3]*e[7]*e[2]+e[6]*e[1]*e[5]-e[6]*e[4]*e[2];const Me=e=>{const t=Ee(e);if(Math.abs(t)<1e-12||Number.isNaN(t)||!Number.isFinite(e[9])||!Number.isFinite(e[10])||!Number.isFinite(e[11])){return undefined}const n=[e[4]*e[8]-e[7]*e[5],-e[1]*e[8]+e[7]*e[2],e[1]*e[5]-e[4]*e[2],-e[3]*e[8]+e[6]*e[5],e[0]*e[8]-e[6]*e[2],-e[0]*e[5]+e[3]*e[2],e[3]*e[7]-e[6]*e[4],-e[0]*e[7]+e[6]*e[1],e[0]*e[4]-e[3]*e[1],-e[3]*e[7]*e[11]+e[3]*e[8]*e[10]+e[6]*e[4]*e[11]-e[6]*e[5]*e[10]-e[9]*e[4]*e[8]+e[9]*e[5]*e[7],e[0]*e[7]*e[11]-e[0]*e[8]*e[10]-e[6]*e[1]*e[11]+e[6]*e[2]*e[10]+e[9]*e[1]*e[8]-e[9]*e[2]*e[7],-e[0]*e[4]*e[11]+e[0]*e[5]*e[10]+e[3]*e[1]*e[11]-e[3]*e[2]*e[10]-e[9]*e[1]*e[5]+e[9]*e[2]*e[4]];const s=1/t;return n.map((e=>e*s))};const Ae=(e=0,t=0,n=0)=>pe.concat(e,t,n);const xe=(e,t,n,s,r)=>{const c=Math.cos(e);const o=Math.sin(e);const a=pe.concat([0,0,0]);a[n*3+n]=c;a[n*3+s]=(r?+1:-1)*o;a[s*3+n]=(r?-1:+1)*o;a[s*3+s]=c;const i=[0,1,2].map((e=>t[e]||0));const f=pe.concat(Q(i));const l=pe.concat(i);return ye(l,ye(a,f))};const we=(e,t=[0,0,0])=>xe(e,t,1,2,true);const ke=(e,t=[0,0,0])=>xe(e,t,0,2,false);const Oe=(e,t=[0,0,0])=>xe(e,t,0,1,true);const je=(e,t=[0,0,1],n=[0,0,0])=>{const s=[0,1,2].map((e=>n[e]||0));const[r,c,o]=Z(3,h(t));const a=Math.cos(e);const i=Math.sin(e);const f=1-a;const l=pe.concat(-s[0],-s[1],-s[2]);const d=pe.concat(s[0],s[1],s[2]);return ye(d,ye([f*r*r+a,f*c*r+o*i,f*o*r-c*i,f*r*c-o*i,f*c*c+a,f*o*c+r*i,f*r*o+c*i,f*c*o-r*i,f*o*o+a,0,0,0],l))};const Fe=(e=[1,1,1],t=[0,0,0])=>[e[0],0,0,0,e[1],0,0,0,e[2],e[0]*-t[0]+t[0],e[1]*-t[1]+t[1],e[2]*-t[2]+t[2]];const Se=(e=1,t=[0,0,0])=>Fe([e,e,e],t);const Ce=(e,t=[0,0])=>{const n=me(e,t);return[n[0],n[1],0,n[2],n[3],0,0,0,1,n[4],n[5],0]};const Ve=Object.freeze({__proto__:null,determinant3:Ee,identity3x3:pe,identity3x4:_e,invertMatrix3:Me,isIdentity3x4:he,makeMatrix3ReflectZ:Ce,makeMatrix3Rotate:je,makeMatrix3RotateX:we,makeMatrix3RotateY:ke,makeMatrix3RotateZ:Oe,makeMatrix3Scale:Fe,makeMatrix3Translate:Ae,makeMatrix3UniformScale:Se,multiplyMatrices3:ye,multiplyMatrix3Line3:be,multiplyMatrix3Vector3:ve});const Pe=e=>e!=null&&typeof e[Symbol.iterator]==="function";const Te=function(){switch(arguments.length){case 0:return Array.from(arguments);case 1:return Pe(arguments[0])&&typeof arguments[0]!=="string"?Te(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>Pe(e)?[...Te(e)]:e))}};const Ne=function(){switch(arguments.length){case 0:return Array.from(arguments);case 1:return Pe(arguments[0])&&typeof arguments[0]!=="string"?Ne(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>Pe(e)?[...Ne(e)]:e)).flat()}};const ze=function(){let e=Ne(arguments);const t=e[0];if(typeof t==="object"&&t!==null&&!Number.isNaN(t.x)){e=["x","y","z"].map((e=>t[e])).filter((e=>e!==undefined))}return e.filter((e=>typeof e==="number"))};const Be=function(){return Te(arguments).map((e=>ze(e)))};const $e=function(){const e=Te(arguments);return e.length===4?[[0,1],[2,3]].map((t=>t.map((t=>e[t])))):e.map((e=>ze(e)))};const Re=(e,t=[])=>({vector:e,origin:t});const Le=function(){const e=Te(arguments);if(e.length===0||e[0]==null){return Re([],[])}if(e[0].constructor===Object&&e[0].vector!==undefined){return Re(e[0].vector,e[0].origin||[])}return typeof e[0]==="number"?Re(ze(e)):Re(...e.map((e=>ze(e))))};const Ie=Object.freeze({__proto__:null,getArrayOfVectors:Be,getLine:Le,getSegment:$e,getVector:ze});const Ue=e=>Array.from(Array(Math.floor(e))).map(((t,n)=>l*(n/e)));const Qe=(e,t)=>e.map((e=>[t*Math.cos(e),t*Math.sin(e)]));const De=(e=3,t=1)=>Qe(Ue(e),t);const qe=(e=3,t=1)=>{const n=Math.PI/e;const s=Ue(e).map((e=>e+n));return Qe(s,t)};const We=(e=3,t=1)=>De(e,t/Math.cos(Math.PI/e));const Ge=(e=3,t=1)=>qe(e,t/Math.cos(Math.PI/e));const He=(e=3,t=1)=>De(e,t/2/Math.sin(Math.PI/e));const Je=(e=3,t=1)=>qe(e,t/2/Math.sin(Math.PI/e));const Ze=(e,t=a)=>{const n=e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>k(e[1],e[0])));const s=n.map(((e,t,n)=>[e,n[(t+n.length-1)%n.length]])).map((e=>!H(e[1],e[0],t)));return e.filter(((e,t)=>s[t]))};const Ye=e=>.5*e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>$(...e))).reduce(((e,t)=>e+t),0);const Xe=e=>{const t=1/(6*Ye(e));return e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>E(x(...e),$(...e)))).reduce(((e,t)=>x(e,t)),[0,0]).map((e=>e*t))};const Ke=(e,t=0)=>{if(!e||!e.length){return undefined}const n=Array(e[0].length).fill(Infinity);const s=Array(e[0].length).fill(-Infinity);e.filter((e=>e!==undefined)).forEach((e=>e.forEach(((e,r)=>{if(e<n[r]){n[r]=e-t}if(e>s[r]){s[r]=e+t}}))));const r=s.map(((e,t)=>e-n[t]));return{min:n,max:s,span:r}};const et=Object.freeze({__proto__:null,boundingBox:Ke,centroid:Xe,makePolygonCircumradius:De,makePolygonCircumradiusSide:qe,makePolygonInradius:We,makePolygonInradiusSide:Ge,makePolygonNonCollinear:Ze,makePolygonSideLength:He,makePolygonSideLengthSide:Je,signedArea:Ye});const tt=(e,t,n=a)=>Math.abs(e-t)<n;const nt=(e,t,n=a)=>tt(e,t,n)?0:Math.sign(e-t);const st=(e,t,n=a)=>{for(let s=0;s<Math.max(e.length,t.length);s+=1){if(!tt(e[s]||0,t[s]||0,n)){return false}}return true};const rt=(e,t=a)=>e>-t;const ct=(e,t=a)=>e>t;const ot=()=>true;const at=()=>true;const it=rt;const ft=ct;const lt=(e,t=a)=>e>-t&&e<1+t;const dt=(e,t=a)=>e>t&&e<1-t;const ut=Object.freeze({__proto__:null,epsilonCompare:nt,epsilonEqual:tt,epsilonEqualVectors:st,exclude:ct,excludeL:at,excludeR:ft,excludeS:dt,include:rt,includeL:ot,includeR:it,includeS:lt});const mt={file:["file_spec","file_creator","file_author","file_title","file_description","file_classes","file_frames"],frame:["frame_author","frame_title","frame_description","frame_attributes","frame_classes","frame_unit","frame_parent","frame_inherit"],graph:["vertices_coords","vertices_vertices","vertices_faces","edges_vertices","edges_faces","edges_assignment","edges_foldAngle","edges_length","faces_vertices","faces_edges","vertices_edges","edges_edges","faces_faces"],orders:["edgeOrders","faceOrders"]};const gt=["singleModel","multiModel","animation","diagrams"];const pt=["creasePattern","foldedForm","graph","linkage"];const _t=["2D","3D","abstract","manifold","nonManifold","orientable","nonOrientable","selfTouching","nonSelfTouching","selfIntersecting","nonSelfIntersecting"];const ht=Object.freeze({__proto__:null,foldFileClasses:gt,foldFrameAttributes:_t,foldFrameClasses:pt,foldKeys:mt});const vt={vertices:"vertex",edges:"edge",faces:"face"};const bt={vertex:"vertices",edge:"edges",face:"faces"};const yt=Array.from("BbMmVvFfJjCcUu");const Et={B:"boundary",M:"mountain",V:"valley",F:"flat",J:"join",C:"cut",U:"unassigned"};Object.keys(Et).forEach((e=>{Et[e.toLowerCase()]=Et[e]}));const Mt={B:0,b:0,M:-180,m:-180,V:180,v:180,F:0,f:0,J:0,j:0,C:0,c:0,U:0,u:0};const At={B:false,b:false,M:true,m:true,V:true,v:true,F:false,f:false,J:false,j:false,C:false,c:false,U:true,u:true};const xt={B:true,b:true,M:false,m:false,V:false,v:false,F:false,f:false,J:false,j:false,C:true,c:true,U:false,u:false};const wt=e=>Mt[e]||0;const kt=e=>{if(e>a){return"V"}if(e<-a){return"M"}return"U"};const Ot=e=>tt(0,e)||tt(-180,e)||tt(180,e);const jt=({edges_foldAngle:e})=>{if(!e){return true}for(let t=0;t<e.length;t+=1){if(!Ot(e[t])){return false}}return true};const Ft=(e,t)=>Object.keys(e).filter((e=>t(e)));const St=(e,t)=>Ft(e,(e=>e.substring(0,t.length+1)===`${t}_`));const Ct=(e,t)=>Ft(e,(e=>e.substring(e.length-t.length-1,e.length)===`_${t}`));const Vt=(e,t)=>{const n=St(e,t);if(n.length===0){return[]}const s=Math.max(...n.map((t=>e[t].length)));const r=Array.from(Array(s)).map((()=>({})));n.forEach((t=>r.forEach(((n,s)=>{r[s][t]=e[t][s]}))));return r};const Pt=(e,t,n)=>{const s=St(e,t);if(s.length===0){return undefined}const r={};s.forEach((t=>{r[t]=e[t][n]}));return r};const Tt=Object.freeze([].concat(mt.file).concat(mt.frame).concat(mt.graph).concat(mt.orders));const Nt=(e={})=>Object.keys(e).length===0?0:Tt.filter((t=>e[t])).length/Object.keys(e).length;const zt=({frame_classes:e,file_classes:t})=>e&&e.includes("foldedForm")||t&&t.includes("foldedForm");const Bt=({vertices_coords:e},t=a)=>{for(let n=0;n<e.length;n+=1){if(e[n]&&e[n].length===3&&!tt(0,e[n][2],t)){return 3}}return 2};const $t=({vertices_coords:e})=>{if(e[0]!==undefined){return e[0].length}const t=e.filter((()=>true)).shift();if(!t){return undefined}return t.length};const Rt=({edges_vertices:e,edges_foldAngle:t,edges_assignment:n})=>{if(n===undefined){return t===undefined?e.map((()=>true)):t.map((e=>e<-a||e>a))}return n.map((e=>At[e]))};const Lt={M:"V",m:"v",V:"M",v:"m"};const It=e=>Lt[e]||e;const Ut=e=>{if(e.edges_assignment){e.edges_assignment=e.edges_assignment.map((e=>Lt[e]?Lt[e]:e))}if(e.edges_foldAngle){e.edges_foldAngle=e.edges_foldAngle.map((e=>-e))}return e};const Qt=(e={})=>{const t={};mt.file.filter((e=>e!=="file_frames")).filter((t=>e[t]!==undefined)).forEach((n=>{t[n]=e[n]}));return t};const Dt=Object.freeze({__proto__:null,assignmentCanBeFolded:At,assignmentFlatFoldAngle:Mt,assignmentIsBoundary:xt,edgeAssignmentToFoldAngle:wt,edgeFoldAngleIsFlat:Ot,edgeFoldAngleToAssignment:kt,edgesAssignmentNames:Et,edgesAssignmentValues:yt,edgesFoldAngleAreAllFlat:jt,filterKeysWithPrefix:St,filterKeysWithSuffix:Ct,getDimension:Bt,getDimensionQuick:$t,getFileMetadata:Qt,invertAssignment:It,invertAssignments:Ut,isFoldObject:Nt,isFoldedForm:zt,makeEdgesIsFolded:Rt,pluralize:bt,singularize:vt,transposeGraphArrayAtIndex:Pt,transposeGraphArrays:Vt});const qt=function(e,t){Ct(e,"coords").forEach((n=>{e[n]=e[n].map((e=>Z(3,e))).map((e=>ve(t,e)))}));Ct(e,"matrix").forEach((n=>{e[n]=e[n].map((e=>ye(e,t)))}));return e};const Wt=(e,...t)=>{const n=t.flat();const s=n.length===1?[n[0],n[0],n[0]]:[1,1,1].map(((e,t)=>n[t]===undefined?e:n[t]));const r=Fe(s);return qt(e,r)};const Gt=(e,...t)=>{const n=ze(...t);const s=Z(3,n);const r=Ae(...s);return qt(e,r)};const Ht=(e,t,n,s)=>qt(e,je(t,n,s));const Jt=(e,t,...n)=>{const s=ze(...n);const r=Z(3,s);const c=Oe(t,r);return qt(e,c)};const Zt=function(e){if(!e.vertices_coords){return e}const t=Ke(e.vertices_coords);const n=Math.max(...t.span);const s=n===0?1:1/n;const r=t.min;e.vertices_coords=e.vertices_coords.map((e=>k(e,r))).map((e=>e.map((e=>e*s))));return e};const Yt=Object.freeze({__proto__:null,rotate:Ht,rotateZ:Jt,scale:Wt,transform:qt,translate:Gt,unitize:Zt});const Xt=({vertices_coords:e},t=a)=>{if(!e){return[]}const n=$t({vertices_coords:e});const s=Array.from(Array(n));const r=[];const c=[];const o=e.map(((e,t)=>({i:t,d:e[0]}))).sort(((e,t)=>e.d-t.d)).map((e=>e.i));let i=0;const f=s.map((()=>[0,0]));const l=t=>s.map(((n,s)=>e[t][s]>f[s][0]&&e[t][s]<f[s][1])).reduce(((e,t)=>e&&t),true);const d=s=>{const r=s[s.length-1];while(e[r][0]-e[s[i]][0]>t){i+=1}const c=s.slice(i,s.length).map((t=>e[t]));f[0]=[c[0][0]-t,c[c.length-1][0]+t];for(let e=1;e<n;e+=1){const n=c.map((t=>t[e]));f[e]=[Math.min(...n)-t,Math.max(...n)+t]}};while(c.length!==e.length){const t=[];const n=o.shift();t.push(n);c.push(n);i=0;d(t);let s=0;while(s<o.length&&e[o[s]][0]<f[0][1]){if(l(o[s])){const e=o.splice(s,1).shift();t.push(e);c.push(e);d(t)}else{s+=1}}r.push(t)}return r};const Kt=Object.freeze({__proto__:null,getVerticesClusters:Xt});const en=(...e)=>Math.max(0,...e.filter((e=>e!==undefined)).map((e=>e.length)));const tn=(e,t)=>en(...St(e,t).map((t=>e[t])));tn.vertices=({vertices_coords:e,vertices_faces:t,vertices_vertices:n})=>en(e,t,n);tn.edges=({edges_vertices:e,edges_edges:t,edges_faces:n})=>en(e,t,n);tn.faces=({faces_vertices:e,faces_edges:t,faces_faces:n})=>en(e,t,n);const nn=e=>e.concat(e.slice(0,-1).reverse());const sn=(...e)=>{const t=[];e.forEach((e=>e.forEach(((e,n)=>{t[n]=e}))));return t};const rn=(e,t)=>{t.sort(((e,t)=>e-t));return[e.slice(t[1]).concat(e.slice(0,t[0]+1)),e.slice(t[0],t[1]+1)]};const cn=e=>Array.from(new Set(e));const on=e=>{const t={};e.forEach((e=>{if(t[e]===undefined){t[e]=0}t[e]+=1}));return e.filter((e=>t[e]>1))};const an=e=>{const t={};e.forEach((e=>{t[e]=true}));return Object.keys(t).map(parseFloat)};const fn=(e,t=a)=>{const n=e.slice().sort(((e,t)=>e-t));if(n.length<2){return n}const s=[true];for(let e=1;e<n.length;e+=1){s[e]=!tt(n[e],n[e-1],t)}return n.filter(((e,t)=>s[t]))};const ln=(e,t,n=a)=>{const s=[];let r=0;let c=0;while(r<e.length&&c<t.length){if(tt(e[r],t[c],n)){r+=1;continue}if(e[r]>t[c]){c+=1;continue}if(t[c]>e[r]){s.push(e[r]);r+=1;continue}}return s};const dn=e=>{const t=Array(e.length*(e.length-1)/2);let n=0;for(let s=0;s<e.length-1;s+=1){for(let r=s+1;r<e.length;r+=1,n+=1){t[n]=[e[s],e[r]]}}return t};const un=(e,t)=>{const n=t===undefined?e.map(((e,t)=>({i:t,value:e}))):e.map(((e,n)=>({i:n,value:t(e)})));let s;let r=Infinity;for(let e=0;e<n.length;e+=1){if(n[e].value<r){s=e;r=n[e].value}}return s};const mn=e=>{let t=0;for(let n=1;n<e.length;n+=1){if(e[n]<e[t]){t=n}}return t};const gn=e=>{let t=0;for(let n=1;n<e.length;n+=1){if(e[n]>e[t]){t=n}}return t};const pn=Object.freeze({__proto__:null,arrayMaxIndex:gn,arrayMinIndex:mn,arrayMinimum:un,chooseTwoPairs:dn,epsilonUniqueSortedNumbers:fn,mirrorArray:nn,nonUniqueElements:on,setDifferenceSortedNumbers:ln,splitCircularArray:rn,uniqueElements:cn,uniqueSortedNumbers:an,zipperArrays:sn});const _n=(e,t,s)=>{const r=tn(e,t);let c=false;Object.entries(s).filter((([e,t])=>e<t)).forEach((([e,t])=>{c=true;delete s[e];s[t]=e}));if(c){console.warn(n.replaceModifyParam)}const o=Object.keys(s).map((e=>parseInt(e,10)));const a=an(o);const i=[];for(let e=0,t=0,c=0;e<r;e+=1,t+=1){while(e===a[c]){i[e]=i[s[a[c]]];if(i[e]===undefined){throw new Error(n.replaceUndefined)}e+=1;c+=1}if(e<r){i[e]=t}}Ct(e,t).forEach((t=>e[t].forEach(((n,s)=>e[t][s].forEach(((n,r)=>{e[t][s][r]=i[n]}))))));a.reverse();St(e,t).forEach((t=>a.forEach((n=>e[t].splice(n,1)))));return i};const hn=(e,t)=>Xt(e,t).filter((e=>e.length>1));const vn=(e,t=a)=>{const n=[];const s=[];const r=Xt(e,t).filter((e=>e.length>1));r.forEach((e=>{if(Math.min(...e)!==e[0]){e.sort(((e,t)=>e-t))}for(let t=1;t<e.length;t+=1){n[e[t]]=e[0];s.push(e[t])}}));r.map((t=>t.map((t=>e.vertices_coords[t])))).map((e=>N(...e))).forEach(((t,n)=>{e.vertices_coords[r[n][0]]=t}));return{map:_n(e,"vertices",n),remove:s}};const bn=Object.freeze({__proto__:null,duplicateVertices:hn,removeDuplicateVertices:vn});const yn=(e,t,n)=>{const s=tn(e,t);const r=an(n);const c=[];for(let e=0,t=0,n=0;e<s;e+=1,t+=1){while(e===r[n]){c[e]=undefined;e+=1;n+=1}if(e<s){c[e]=t}}Ct(e,t).forEach((t=>e[t].forEach(((n,s)=>e[t][s].forEach(((n,r)=>{e[t][s][r]=c[n]}))))));r.reverse();St(e,t).forEach((t=>r.forEach((n=>e[t].splice(n,1)))));Ct(e,t).forEach((t=>e[t].forEach(((n,s)=>{e[t][s]=e[t][s].filter((e=>e!==undefined))}))));return c};const En=({vertices_coords:e,edges_vertices:t})=>{if(!e||!t){return[]}let n=e.length;const s=Array(n).fill(false);t.forEach((e=>{e.filter((e=>!s[e])).forEach((e=>{s[e]=true;n-=1}))}));return s.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined))};const Mn=({vertices_coords:e,faces_vertices:t})=>{if(!e||!t){return[]}let n=e.length;const s=Array(n).fill(false);t.forEach((e=>{e.filter((e=>!s[e])).forEach((e=>{s[e]=true;n-=1}))}));return s.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined))};const An=({vertices_coords:e,edges_vertices:t,faces_vertices:n})=>{if(!e){return[]}let s=e.length;const r=Array(s).fill(false);if(t){t.forEach((e=>{e.filter((e=>!r[e])).forEach((e=>{r[e]=true;s-=1}))}))}if(n){n.forEach((e=>{e.filter((e=>!r[e])).forEach((e=>{r[e]=true;s-=1}))}))}return r.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined))};const xn=(e,t)=>{if(!t){t=An(e)}return{map:yn(e,"vertices",t),remove:t}};const wn=Object.freeze({__proto__:null,edgeIsolatedVertices:En,faceIsolatedVertices:Mn,isolatedVertices:An,removeIsolatedVertices:xn});const kn=e=>Math.atan2(e[1],e[0]);const On=e=>[Math.cos(e),Math.sin(e)];const jn=(e,t)=>({vector:k(t,e),origin:e});const Fn=({vector:e,origin:t})=>{const n=m(e);const s=D(e);const r=F(t,s)/n;return{normal:y(s,1/n),distance:r}};const Sn=({normal:e,distance:t})=>({vector:q(e),origin:y(e,t)});const Cn=Object.freeze({__proto__:null,angleToVector:On,pointsToLine:jn,uniqueLineToVecLine:Sn,vecLineToUniqueLine:Fn,vectorToAngle:kn});const Vn=(e,t,n)=>{while(n<t){n+=l}while(e>t){e-=l}while(e<t){e+=l}return e<n};const Pn=(e,t)=>{while(e<0){e+=l}while(t<0){t+=l}while(e>l){e-=l}while(t>l){t-=l}const n=e-t;return n>=0?n:l-(t-e)};const Tn=(e,t)=>{while(e<0){e+=l}while(t<0){t+=l}while(e>l){e-=l}while(t>l){t-=l}const n=t-e;return n>=0?n:l-(e-t)};const Nn=(e,t)=>{const n=t[0]*e[0]+t[1]*e[1];const s=t[0]*e[1]-t[1]*e[0];let r=Math.atan2(s,n);if(r<0){r+=l}return r};const zn=(e,t)=>{const n=e[0]*t[0]+e[1]*t[1];const s=e[0]*t[1]-e[1]*t[0];let r=Math.atan2(s,n);if(r<0){r+=l}return r};const Bn=(e,t)=>On(kn(e)-Nn(e,t)/2);const $n=(e,t)=>On(kn(e)+zn(e,t)/2);const Rn=(e,t,n)=>{const s=Pn(e,t)/n;return Array.from(Array(n-1)).map(((t,n)=>e+s*(n+1)))};const Ln=(e,t,n)=>{const s=Tn(e,t)/n;return Array.from(Array(n-1)).map(((t,n)=>e+s*(n+1)))};const In=(e,t,n)=>{const s=Math.atan2(e[1],e[0]);const r=Math.atan2(t[1],t[0]);return Rn(s,r,n).map(On)};const Un=(e,t,n)=>{const s=Math.atan2(e[1],e[0]);const r=Math.atan2(t[1],t[0]);return Ln(s,r,n).map(On)};const Qn=e=>{const t=e.map(((e,t)=>t)).sort(((t,n)=>e[t]-e[n]));return t.slice(t.indexOf(0),t.length).concat(t.slice(0,t.indexOf(0)))};const Dn=e=>Qn(e.map(kn));const qn=e=>Qn(e).map((t=>e[t])).map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>Tn(e[0],e[1])));const Wn=e=>qn(e.map(kn));const Gn=(e,t,n,s=a)=>{const r=v(O(t,e));const c=v(O(n,e));const o=$(r,c);if(!tt(o,0,s)){return Math.sign(o)}return tt(I(e,t)+I(t,n),I(e,n))?0:undefined};const Hn=Object.freeze({__proto__:null,clockwiseAngle2:Nn,clockwiseAngleRadians:Pn,clockwiseBisect2:Bn,clockwiseSubsect2:In,clockwiseSubsectRadians:Rn,counterClockwiseAngle2:zn,counterClockwiseAngleRadians:Tn,counterClockwiseBisect2:$n,counterClockwiseOrder2:Dn,counterClockwiseOrderRadians:Qn,counterClockwiseSectors2:Wn,counterClockwiseSectorsRadians:qn,counterClockwiseSubsect2:Un,counterClockwiseSubsectRadians:Ln,isCounterClockwiseBetween:Vn,threePointTurnDirection:Gn});const Jn=e=>{let t=-1;e.filter((e=>e!==undefined)).forEach((e=>e.forEach((e=>e.forEach((e=>{if(e>t){t=e}}))))));return t};const Zn=e=>{let t=-1;e.forEach((e=>{if(e[0]>t){t=e[0]}if(e[1]>t){t=e[1]}}));return t};const Yn={edges:"edgeOrders",faces:"faceOrders"};const Xn=(e,t)=>Math.max(Jn(Ct(e,t).map((t=>e[t]))),e[Yn[t]]?Zn(e[Yn[t]]):-1)+1;Xn.vertices=e=>Xn(e,"vertices");Xn.edges=e=>Xn(e,"edges");Xn.faces=e=>Xn(e,"faces");const Kn=({vertices_vertices:e,vertices_sectors:t},n,s,r={})=>{const c={};const o={vertices:[n],edges:[],angles:[]};let a=n;let i=s;while(true){const n=e[i];const s=n.indexOf(a);const f=(s+n.length-1)%n.length;const l=n[f];const d=`${i} ${l}`;if(c[d]){Object.assign(r,c);o.vertices.pop();return o}c[d]=true;if(r[d]){return undefined}o.vertices.push(i);o.edges.push(d);if(t){o.angles.push(t[i][f])}a=i;i=l}};const es=({vertices_vertices:e,vertices_sectors:t})=>{const n={vertices_vertices:e,vertices_sectors:t};const s={};return e.map(((e,t)=>e.map((e=>Kn(n,t,e,s))).filter((e=>e!==undefined)))).flat()};const ts=e=>e.filter((e=>e.angles.map((e=>Math.PI-e)).reduce(((e,t)=>e+t),0)>0));const ns=Object.freeze({__proto__:null,counterClockwiseWalk:Kn,filterWalkedBoundaryFace:ts,planarVertexWalk:es});const ss=(e,t=[1,0,0],n=[0,0,0])=>{const s=Z(3,e);const r=j(s,Z(3,n));const c=b(Z(3,t));const o=C(c,r);const a=M(c,o);return j(s,a)};const rs=Object.freeze({__proto__:null,projectPointOnPlane:ss});const cs=(e,t,n)=>e.map(((e,s)=>({i:s,n:n(e,t)}))).sort(((e,t)=>e.n-t.n)).map((e=>e.i));const os=(e,t)=>cs(e,t,F);const as=e=>{const t=[e=>e[0]>=0&&e[1]>=0,e=>e[0]<0&&e[1]>=0,e=>e[0]<0&&e[1]<0,e=>e[0]>=0&&e[1]<0];const n=[(t,n)=>e[n][0]-e[t][0],(t,n)=>e[n][0]-e[t][0],(t,n)=>e[t][0]-e[n][0],(t,n)=>e[t][0]-e[n][0]];const s=e.map((e=>t.map(((t,n)=>t(e)?n:undefined)).filter((e=>e!==undefined)).shift()));const r=[[],[],[],[]];s.forEach(((e,t)=>{r[e].push(t)}));return r.flatMap(((e,t)=>e.sort(n[t])))};const is=(e,t=[1,0,0],n=[0,0,0])=>{const s=K(t);const r=[s[1],s[2],s[0]];const c=e.map((e=>ss(e,t,n)));const o=c.map((e=>k(e,n)));const a=o.map((e=>[F(e,r[0]),F(e,r[1])]));const i=a.map(v);return as(i)};const fs=Object.freeze({__proto__:null,radialSortPointIndices3:is,radialSortUnitVectors2:as,sortAgainstItem:cs,sortPointsAlongVector:os});const ls=({vertices_coords:e},t,n)=>t.map((t=>e[t])).map((t=>k(t,e[n]))).map((e=>Math.atan2(e[1],e[0]))).map((e=>e>-a?e:e+Math.PI*2)).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).map((e=>e.i)).map((e=>t[e]));const ds=({vertices_coords:e},t,n)=>os(t.map((t=>e[t])),n).map((e=>t[e]));const us=Object.freeze({__proto__:null,sortVerticesAlongVector:ds,sortVerticesCounterClockwise:ls});const ms=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))).map((e=>{let t;let n;let s=0;do{t=k(e[(s+1)%e.length],e[s]);n=k(e[(s+2)%e.length],e[s]);s+=1}while(s<e.length&&H(t,n));return b(R(Z(3,t),Z(3,n)))}));const gs=({vertices_coords:e,faces_vertices:t,faces_normal:n})=>{const s=(e,t)=>{e[0]+=t[0];e[1]+=t[1];e[2]+=t[2]};if(!n){n=ms({vertices_coords:e,faces_vertices:t})}const r=e.map((()=>[0,0,0]));t.forEach(((e,t)=>e.forEach((e=>s(r[e],n[t])))));return r.map((e=>b(e)))};const ps=Object.freeze({__proto__:null,makeFacesNormal:ms,makeVerticesNormal:gs});const _s=({edges_vertices:e})=>{const t=[];e.forEach(((e,n)=>e.forEach((e=>{if(t[e]===undefined){t[e]=[]}t[e].push(n)}))));return t};const hs=({edges_vertices:e,vertices_vertices:t})=>{const n=xs({edges_vertices:e});return t.map(((e,t)=>e.map((e=>n[`${t} ${e}`]))))};const vs=({vertices_coords:e,vertices_edges:t,edges_vertices:n})=>{if(!t){t=_s({edges_vertices:n})}const s=t.map(((e,t)=>e.map((e=>n[e].filter((e=>e!==t)))).reduce(((e,t)=>e.concat(t)),[])));return e===undefined?s:s.map(((t,n)=>ls({vertices_coords:e},t,n)))};const bs=({vertices_coords:e,vertices_faces:t,faces_vertices:n})=>{if(!t){t=Ms({vertices_coords:e,faces_vertices:n})}const s=t.map((e=>e.map((e=>n[e]))));const r=s.map(((e,t)=>e.map((e=>e.indexOf(t)))));const c=s.map(((e,t)=>e.map(((e,n)=>[(r[t][n]+e.length-1)%e.length,r[t][n],(r[t][n]+1)%e.length]))));const o=c.map(((e,t)=>e.map(((e,n)=>e.map((e=>s[t][n][e]))))));const a=o.map((e=>{const t=e.map((e=>[[0,1],[1,2]].map((t=>t.map((t=>e[t])).join(" ")))));const n={};const s={};t.forEach(((e,t)=>{n[e[0]]=t;s[e[1]]=t}));return{facesVerts:t,to:s,from:n}}));return a.map((e=>{const t=Object.keys(e.to);const n=t.map((e=>e.split(" ").reverse().join(" ")));const s=t.filter(((t,s)=>!(n[s]in e.from)));if(s.length>2){console.warn("vertices_vertices found an unsolvable vertex");return[]}const r=s.length?s:[t[0]];const c=[];const o={};for(let t=0;t<r.length;t+=1){const n=r[t];const s=[n];o[n]=true;let a=false;do{const t=s[s.length-1];const n=e.to[t];if(!(n in e.facesVerts)){break}let r;if(e.facesVerts[n][0]===t){r=e.facesVerts[n][1]}if(e.facesVerts[n][1]===t){r=e.facesVerts[n][0]}if(r===undefined){return"not found"}const c=r.split(" ").reverse().join(" ");s.push(r);a=c in o;if(!a){s.push(c)}o[r]=true;o[c]=true}while(!a);const i=s.filter(((e,t)=>t%2===0)).map((e=>e.split(" ")[1])).map((e=>parseInt(e,10)));c.push(...i)}return c}))};const ys=e=>{if(!e.vertices_coords||!e.vertices_coords.length){return[]}const t=e.vertices_coords.filter((()=>true)).shift().length;switch(t){case 3:return bs(e);default:return vs(e)}};const Es=({vertices_edges:e,edges_vertices:t})=>{if(!e){e=_s({edges_vertices:t})}return e.map(((e,n)=>e.flatMap((e=>t[e].filter((e=>e!==n))))))};const Ms=({vertices_coords:e,vertices_edges:t,faces_vertices:n})=>{const s=e||t;if(!n){return(s||[]).map((()=>[]))}const r=s!==undefined?s.map((()=>[])):Array.from(Array(Xn.vertices({faces_vertices:n}))).map((()=>[]));n.forEach(((e,t)=>{const n=[];e.forEach((e=>{n[e]=t}));n.forEach(((e,t)=>r[t].push(e)))}));return r};const As=({vertices_coords:e,vertices_vertices:t,faces_vertices:n})=>{if(!n){return e.map((()=>[]))}if(!t){return Ms({vertices_coords:e,faces_vertices:n})}const s=ks({faces_vertices:n});return t.map(((e,t)=>e.map(((e,n,s)=>[s[(n+1)%s.length],t,e].join(" "))))).map((e=>e.map((e=>s[e]))))};const xs=({edges_vertices:e})=>{const t={};e.map((e=>e.join(" "))).forEach(((e,n)=>{t[e]=n}));e.map((e=>`${e[1]} ${e[0]}`)).forEach(((e,n)=>{t[e]=n}));return t};const ws=({edges_vertices:e})=>{const t={};e.map((e=>e.join(" "))).forEach(((e,n)=>{t[e]=n}));return t};const ks=({faces_vertices:e})=>{const t={};e.forEach(((e,n)=>e.map(((t,n)=>[0,1,2].map((t=>(n+t)%e.length)).map((t=>e[t])).join(" "))).forEach((e=>{t[e]=n}))));return t};const Os=({vertices_coords:e,vertices_vertices:t,vertices_edges:n,vertices_faces:s,edges_vertices:r,edges_vector:c,faces_vertices:o})=>{if(!c){c=$s({vertices_coords:e,edges_vertices:r})}if(!t){t=ys({vertices_coords:e,vertices_edges:n,vertices_faces:s,edges_vertices:r,faces_vertices:o})}const a=ws({edges_vertices:r});return t.map(((e,n)=>t[n].map((e=>{const t=a[`${n} ${e}`];const s=a[`${e} ${n}`];if(t!==undefined){return c[t]}if(s!==undefined){return Q(c[s])}}))))};const js=({vertices_coords:e,vertices_vertices:t,edges_vertices:n,edges_vector:s})=>Os({vertices_coords:e,vertices_vertices:t,edges_vertices:n,edges_vector:s}).map((e=>e.length===1?[l]:Wn(e)));const Fs=({edges_vertices:e,vertices_edges:t})=>e.map(((e,n)=>{const s=t[e[0]].filter((e=>e!==n));const r=t[e[1]].filter((e=>e!==n));return s.concat(r)}));const Ss=({edges_vertices:e,faces_edges:t})=>{const n=e!==undefined?e.map((()=>[])):Array.from(Array(Xn.edges({faces_edges:t}))).map((()=>[]));t.forEach(((e,t)=>{const s=[];e.forEach((e=>{s[e]=t}));s.forEach(((e,t)=>n[t].push(e)))}));return n};const Cs=({vertices_coords:e,edges_vertices:t,edges_vector:n,faces_vertices:s,faces_edges:r,faces_center:c})=>{if(!t||!s&&!r){return Ss({faces_edges:r})}if(!s){s=Us({edges_vertices:t,faces_edges:r})}if(!r){r=Qs({edges_vertices:t,faces_vertices:s})}if(!n){n=$s({vertices_coords:e,edges_vertices:t})}const o=t.map((t=>e[t[0]]));if(!c){c=Hs({vertices_coords:e,faces_vertices:s})}const a=t.map((()=>[]));r.forEach(((e,t)=>{const n=[];e.forEach((e=>{n[e]=t}));n.forEach(((e,t)=>a[t].push(e)))}));a.forEach(((e,t)=>{const s=e.map((e=>c[e])).map((e=>O(e,o[t]))).map((e=>$(e,n[t])));e.sort(((e,t)=>s[e]-s[t]))}));return a};const Vs={M:-180,m:-180,V:180,v:180};const Ps=({edges_foldAngle:e})=>e.map((e=>{if(e===0){return"F"}return e<0?"M":"V"}));const Ts=({edges_vertices:e,edges_foldAngle:t,edges_faces:n,faces_vertices:s,faces_edges:r})=>{if(e&&!n){if(!r&&s){r=Qs({edges_vertices:e,faces_vertices:s})}if(r){n=Ss({edges_vertices:e,faces_edges:r})}}if(t){return n?t.map(((e,t)=>{if(n[t].length<2){return"B"}if(e===0){return"F"}return e<0?"M":"V"})):Ps({edges_foldAngle:t})}return e.map((()=>"U"))};const Ns=({edges_assignment:e})=>e.map((e=>Vs[e]||0));const zs=({vertices_coords:e,edges_vertices:t,edges_faces:s,edges_assignment:r,faces_vertices:c,faces_edges:o,faces_normal:a,faces_center:i})=>{if(!s){if(!o){o=Qs({edges_vertices:t,faces_vertices:c})}s=Ss({edges_vertices:t,faces_edges:o})}if(!a){a=ms({vertices_coords:e,faces_vertices:c})}if(!i){i=Hs({vertices_coords:e,faces_vertices:c})}return s.map(((e,t)=>{if(e.length>2){throw new Error(n.manifold)}if(e.length<2){return 0}const s=a[e[0]];const c=a[e[1]];const o=h(k(i[e[1]],i[e[0]]));let f=Math.sign(F(s,o));if(f===0){if(r&&r[t]){if(r[t]==="F"||r[t]==="F"){f=0}if(r[t]==="M"||r[t]==="m"){f=-1}if(r[t]==="V"||r[t]==="v"){f=1}}else{throw new Error(n.flatFoldAngles)}}return Math.acos(F(s,c))*(180/Math.PI)*f}))};const Bs=({vertices_coords:e,edges_vertices:t})=>t.map((t=>t.map((t=>e[t]))));const $s=({vertices_coords:e,edges_vertices:t})=>Bs({vertices_coords:e,edges_vertices:t}).map((e=>k(e[1],e[0])));const Rs=({vertices_coords:e,edges_vertices:t})=>$s({vertices_coords:e,edges_vertices:t}).map((e=>m(e)));const Ls=({vertices_coords:e,edges_vertices:t,edges_coords:n},s=0)=>{if(!n){n=Bs({vertices_coords:e,edges_vertices:t})}return n.map((e=>Ke(e,s)))};const Is=({vertices_coords:e,vertices_vertices:t,vertices_edges:n,vertices_sectors:s,edges_vertices:r,edges_vector:c})=>{if(!t){t=ys({vertices_coords:e,edges_vertices:r,vertices_edges:n})}if(!s){s=js({vertices_coords:e,vertices_vertices:t,edges_vertices:r,edges_vector:c})}const o=xs({edges_vertices:r});const a=ts(es({vertices_vertices:t,vertices_sectors:s})).map((e=>({...e,edges:e.edges.map((e=>o[e]))})));return{faces_vertices:a.map((e=>e.vertices)),faces_edges:a.map((e=>e.edges)),faces_sectors:a.map((e=>e.angles))}};const Us=({edges_vertices:e,faces_edges:t})=>t.map((t=>t.map((t=>e[t])).map(((e,t,n)=>{const s=n[(t+1)%n.length];return e[0]===s[0]||e[0]===s[1]?e[1]:e[0]}))));const Qs=({edges_vertices:e,faces_vertices:t})=>{const n=xs({edges_vertices:e});return t.map((e=>e.map(((e,t,n)=>[e,n[(t+1)%n.length]].join(" "))))).map((e=>e.map((e=>n[e]))))};const Ds=({faces_vertices:e})=>{const t=e.map((()=>[]));const n={};e.forEach(((e,t)=>e.forEach(((s,r,c)=>{let o=c[(r+1)%e.length];if(o<s){[s,o]=[o,s]}const a=`${s} ${o}`;if(n[a]===undefined){n[a]={}}n[a][t]=true}))));Object.values(n).map((e=>Object.keys(e))).filter((e=>e.length>1)).forEach((e=>{t[e[0]].push(parseInt(e[1],10));t[e[1]].push(parseInt(e[0],10))}));return t};const qs=({vertices_coords:e,faces_vertices:t},n)=>t.map((t=>t.map((t=>e[t])))).map((e=>Ze(e,n)));const Ws=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t]))));const Gs=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))).map((e=>Xe(e)));const Hs=({vertices_coords:e,faces_vertices:t})=>{const n=e.filter((()=>true)).shift();if(!n){return t.map((()=>[]))}const s=n.length;return t.map((t=>t.map((t=>e[t])).reduce(((e,t)=>A(e,t)),Array(s).fill(0)).map((e=>e/t.length))))};const Js=Object.freeze({__proto__:null,makeEdgesAssignment:Ts,makeEdgesAssignmentSimple:Ps,makeEdgesBoundingBox:Ls,makeEdgesCoords:Bs,makeEdgesEdges:Fs,makeEdgesFaces:Cs,makeEdgesFacesUnsorted:Ss,makeEdgesFoldAngle:Ns,makeEdgesFoldAngleFromFaces:zs,makeEdgesLength:Rs,makeEdgesVector:$s,makeFacesCenter2D:Gs,makeFacesConvexCenter:Hs,makeFacesEdgesFromVertices:Qs,makeFacesFaces:Ds,makeFacesPolygon:qs,makeFacesPolygonQuick:Ws,makeFacesVerticesFromEdges:Us,makePlanarFaces:Is,makeVerticesEdges:hs,makeVerticesEdgesUnsorted:_s,makeVerticesFaces:As,makeVerticesFacesUnsorted:Ms,makeVerticesSectors:js,makeVerticesToEdge:ws,makeVerticesToEdgeBidirectional:xs,makeVerticesToFace:ks,makeVerticesVertices:ys,makeVerticesVertices2D:vs,makeVerticesVerticesFromFaces:bs,makeVerticesVerticesUnsorted:Es,makeVerticesVerticesVector:Os});const Zs=({edges_vertices:e})=>{if(!e){return[]}const t=[];const n={};for(let s=0;s<e.length;s+=1){const r=`${e[s][0]} ${e[s][1]}`;const c=`${e[s][1]} ${e[s][0]}`;if(n[r]!==undefined){t[s]=n[r]}else{n[r]=s;n[c]=s}}return t};const Ys=(e,t)=>{if(!t){t=Zs(e)}const n=Object.keys(t).map((e=>parseInt(e,10)));const s=_n(e,"edges",t);if(n.length){if(e.vertices_edges||e.vertices_vertices||e.vertices_faces){e.vertices_edges=_s(e);e.vertices_vertices=ys(e);e.vertices_edges=hs(e);e.vertices_faces=As(e)}}return{map:s,remove:n}};const Xs=Object.freeze({__proto__:null,duplicateEdges:Zs,removeDuplicateEdges:Ys});const Ks=({edges_vertices:e})=>{if(!e){return[]}const t=[];for(let n=0;n<e.length;n+=1){if(e[n][0]===e[n][1]){t.push(n)}}return t};const er=(e,t,n)=>{const s={};n.forEach((e=>{s[e]=true}));Ct(e,t).forEach((t=>e[t].forEach(((n,r)=>{for(let c=n.length-1;c>=0;c-=1){if(s[n[c]]===true){e[t][r].splice(c,1)}}}))))};const tr=(e,t)=>{if(!t){t=Ks(e)}if(t.length){er(e,"edges",t)}return{map:yn(e,"edges",t),remove:t}};const nr=Object.freeze({__proto__:null,circularEdges:Ks,removeCircularEdges:tr});const sr=(...e)=>{if(e.length===0){return[]}const t=e[0].map(((e,t)=>t));e.forEach((e=>t.forEach(((n,s)=>{t[s]=e[n]}))));return t};const rr=(...e)=>{if(e.length===0){return[]}const t=e[0].map(((e,t)=>[t]));e.forEach((e=>{t.forEach(((n,s)=>n.forEach(((n,r)=>{t[s][r]=e[n]}))));t.forEach(((e,n)=>{t[n]=e.reduce(((e,t)=>e.concat(t)),[]).filter((e=>e!==undefined))}))}));return t};const cr=(...e)=>{if(e.length===0){return[]}let t=e[0].map(((e,t)=>t));e.forEach((e=>{const n=e.map((e=>t[e]));t=n}));return t};const or=(...e)=>{if(e.length===0){return[]}let t=e[0].reduce(((e,t)=>e.concat(t)),[]).map(((e,t)=>[t]));e.forEach((e=>{const n=[];e.forEach(((e,s)=>{if(typeof e==="number"){n[s]=t[e]}else{n[s]=e.map((e=>t[e])).reduce(((e,t)=>e.concat(t)),[])}}));t=n}));return t};const ar=e=>{const t=[];const n=(e,n)=>{if(t[e]!==undefined){if(typeof t[e]==="number"){t[e]=[t[e],n]}else{t[e].push(n)}}else{t[e]=n}};e.forEach(((e,t)=>{if(e==null){return}if(typeof e==="number"){n(e,t)}if(e.constructor===Array){e.forEach((e=>n(e,t)))}}));return t};const ir=e=>{const t=[];const n=(e,n)=>{if(t[e]===undefined){t[e]=[]}t[e].push(n)};e.forEach(((e,t)=>{if(e==null){return}if(typeof e==="number"){n(e,t)}if(e.constructor===Array){e.forEach((e=>n(e,t)))}}));return t};const fr=e=>{const t=[];e.forEach(((e,n)=>{t[e]=n}));return t};const lr=(e,t,n=[])=>{Ct(e,t).forEach((t=>e[t].forEach(((s,r)=>e[t][r].forEach(((s,c)=>{e[t][r][c]=n[s]}))))));const s=fr(n);St(e,t).forEach((t=>{e[t]=s.map((n=>e[t][n]))}))};const dr=Object.freeze({__proto__:null,invertMap:ar,invertMapArray:ir,invertSimpleMap:fr,mergeBackmaps:or,mergeNextmaps:rr,mergeSimpleBackmaps:cr,mergeSimpleNextmaps:sr,remapComponent:lr});const ur=(e,t)=>{const n=vn(e,t);const s=tr(e);const r=Ys(e);const c=xn(e);const o=fr(n.map);const a=c.remove.map((e=>o[e]));const i=fr(s.map);const f=r.remove.map((e=>i[e]));return{vertices:{map:sr(n.map,c.map),remove:n.remove.concat(a)},edges:{map:sr(s.map,r.map),remove:s.remove.concat(f)}}};const mr=({vertices_coords:e,edges_vertices:t,edges_assignment:n,edges_foldAngle:s,faces_vertices:r,faces_edges:c})=>{if(!r){return undefined}let o=0;let a=0;const i={faces_vertices:r.map((e=>e.map((()=>a++))))};if(!e){return i}i.vertices_coords=structuredClone(r.flatMap((t=>t.map((t=>e[t])))));if(!t){return i}if(!c){c=Qs({edges_vertices:t,faces_vertices:r})}i.edges_vertices=c.flatMap((e=>e.map(((e,t,n)=>t===n.length-1?[o,++o-n.length]:[o,++o]))));const f=c.flatMap((e=>e));if(n){i.edges_assignment=structuredClone(f.map((e=>n[e])))}if(s){i.edges_foldAngle=structuredClone(f.map((e=>s[e])))}return i};const gr=({vertices_coords:e,edges_vertices:t,edges_assignment:n,edges_foldAngle:s})=>{if(!t){return undefined}let r=0;const c={edges_vertices:t.map((e=>e.map((()=>r++))))};if(n){c.edges_assignment=n}if(s){c.edges_foldAngle=s}if(e){c.vertices_coords=structuredClone(t.flatMap((t=>t.map((t=>e[t])))))}return c};const pr=Object.freeze({__proto__:null,explodeEdges:gr,explodeFaces:mr});const _r=e=>e;const hr=e=>e<-a?0:e;const vr=e=>{if(e<-a){return 0}if(e>1+a){return 1}return e};const br=(e,t,n,s=false,r=a)=>{const c=[e,n].map((e=>st(t,e,r))).reduce(((e,t)=>e||t),false);if(c){return s}const o=[[e,t],[t,n]].map((e=>k(e[1],e[0]))).map((e=>h(e)));return tt(1,F(...o),a)};const yr=(e,t,n)=>{const s=B(e.vector,t.vector,n);const r=B(e.origin,t.origin,n);return{vector:s,origin:r}};const Er=(e,t,n,s=a)=>{const r=F(e.vector,t.vector);const c=$(e.vector,t.vector);const o=$(O(t.origin,e.origin),t.vector);const i=o/c;const f=[e.vector,t.vector].map((e=>h(e)));const l=c>-s?[[e.vector,t.vector],[Q(t.vector),e.vector]]:[[t.vector,e.vector],[Q(e.vector),t.vector]];const d=l.map((e=>Un(e[0],e[1],n)));const u=Math.abs($(...f))<s;const m=u?undefined:x(e.origin,E(e.vector,i));const g=Array.from(Array(n-1));const p=u?g.map(((s,r)=>B(e.origin,t.origin,(r+1)/n))):g.map((()=>m));const _=d.map((e=>e.map(((e,t)=>({vector:e,origin:[...p[t]]})))));if(u){_[r>-s?1:0]=[]}return _};const Mr=(e,t,n=a)=>{const s=Er(e,t,2,n).map((e=>e[0]));s.forEach(((e,t)=>{if(e===undefined){delete s[t]}}));return s};const Ar=Object.freeze({__proto__:null,bisectLines2:Mr,clampLine:_r,clampRay:hr,clampSegment:vr,collinearBetween:br,lerpLines:yr,pleat:Er});const xr=(e,t)=>{const n=un(e,(e=>I(e,t)));return n===undefined?undefined:e[n]};const wr=(e,t)=>{const n=un(e,(e=>L(e,t)));return n===undefined?undefined:e[n]};const kr=({vector:e,origin:t},n,s=_r,r=a)=>{t=Z(e.length,t);n=Z(e.length,n);const c=_(e);const o=k(n,t);const i=F(e,o);const f=i/c;const l=s(f,r);return A(t,y(e,l))};const Or=(e,t)=>e.map(((e,t,n)=>k(n[(t+1)%n.length],e))).map(((t,n)=>({vector:t,origin:e[n]}))).map((e=>kr(e,t,vr))).map(((e,n)=>({point:e,edge:n,distance:L(e,t)}))).sort(((e,t)=>e.distance-t.distance)).shift();const jr=({radius:e,origin:t},n)=>A(t,y(h(k(n,t)),e));const Fr=Object.freeze({__proto__:null,nearestPoint:wr,nearestPoint2:xr,nearestPointOnCircle:jr,nearestPointOnLine:kr,nearestPointOnPolygon:Or});const Sr=({vector:e,origin:t},n,s=ot,r=a)=>{const c=O(n,t);const o=_(e);const i=Math.sqrt(o);if(i<r){return false}const f=$(c,e.map((e=>e/i)));const l=S(c,e)/o;return Math.abs(f)<r&&s(l,r/i)};const Cr=(e,t,n=ot,s=ot,r=a)=>{const c=$(e.vector,t.vector);const o=-c;const i=O(t.origin,e.origin);const f=[-i[0],-i[1]];if(Math.abs(c)<r){if(Math.abs($(i,e.vector))>r){return false}const c=f;const o=x(c,e.vector);const a=P(c,o);const l=i;const d=x(l,t.vector);const u=P(l,d);const m=S(e.vector,e.vector);const g=S(t.vector,t.vector);const p=S(c,t.vector)/g;const _=S(o,t.vector)/g;const h=S(a,t.vector)/g;const v=S(l,e.vector)/m;const b=S(d,e.vector)/m;const y=S(u,e.vector)/m;return n(v,r)||n(b,r)||s(p,r)||s(_,r)||n(y,r)||s(h,r)}const l=$(i,t.vector)/c;const d=$(f,e.vector)/o;return n(l,r/g(e.vector))&&s(d,r/g(t.vector))};const Vr=({radius:e,origin:t},n,s=ct,r=a)=>s(e-I(t,n),r);const Pr=(e,t,n=ct,s=a)=>e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>$(v(O(e[1],e[0])),O(t,e[0])))).map((e=>n(e,s))).map(((e,t,n)=>e===n[0])).reduce(((e,t)=>e&&t),true);const Tr=(e,t,n=ct,s=a)=>{const r=e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((([e,n])=>[O(n,e),O(t,e)])).map((([e,t])=>$(e,t)));const c=Math.sign(r.reduce(((e,t)=>e+t),0));const o=r.map((e=>e*c)).map((e=>n(e,s))).map(((e,t,n)=>e===n[0])).reduce(((e,t)=>e&&t),true);return{overlap:o,t:r}};const Nr=(e,t,n=a)=>{for(let s=0;s<2;s+=1){const r=s===0?e:t;const c=s===0?t:e;for(let e=0;e<r.length;e+=1){const t=r[e];const s=D(O(r[(e+1)%r.length],r[e]));const o=c.map((e=>O(e,t))).map((e=>S(s,e)));const a=r[(e+2)%r.length];const i=S(s,O(a,t));const f=i>0;const l=o.map((e=>f?e<n:e>-n)).reduce(((e,t)=>e&&t),true);if(l){return false}}}return true};const zr=(e,t,n=a)=>{const s=Math.min(e.min.length,t.min.length);for(let r=0;r<s;r+=1){if(e.min[r]>t.max[r]+n||e.max[r]<t.min[r]-n){return false}}return true};const Br=Object.freeze({__proto__:null,overlapBoundingBoxes:zr,overlapCirclePoint:Vr,overlapConvexPolygonPoint:Pr,overlapConvexPolygonPointNew:Tr,overlapConvexPolygons:Nr,overlapLineLine:Cr,overlapLinePoint:Sr});const $r=({vertices_coords:e},t)=>{if(!e){return undefined}const n=$t({vertices_coords:e});if(n===undefined){return undefined}const s=Z(n,t);const r=e.map(((e,t)=>({d:L(s,e),i:t}))).sort(((e,t)=>e.d-t.d)).shift();return r?r.i:undefined};const Rr=({vertices_coords:e,edges_vertices:t},n)=>{if(!e||!t){return undefined}const s=t.map((t=>t.map((t=>e[t])))).map((e=>kr({vector:k(e[1],e[0]),origin:e[0]},n,vr)));return un(s,(e=>L(e,n)))};const Lr=({vertices_coords:e,faces_vertices:t},n,s=ct)=>!e||!t?[]:t.map(((t,n)=>({face:t.map((t=>e[t])),i:n}))).filter((e=>Pr(e.face,n,s))).map((e=>e.i));const Ir=({vertices_coords:e,faces_vertices:t},n)=>{const s=Lr({vertices_coords:e,faces_vertices:t},n);return s.length?s.shift():undefined};const Ur=(e,t)=>{const n=Ir(e,t);if(n!==undefined){return n}if(e.edges_faces){const n=Rr(e,t);if(n===undefined){return undefined}const s=e.edges_faces[n];if(s.length===1){return s[0]}if(s.length>1){const n=Hs({vertices_coords:e.vertices_coords,faces_vertices:s.map((t=>e.faces_vertices[t]))});const r=n.map((e=>L(e,t)));let c=0;for(let e=0;e<r.length;e+=1){if(r[e]<r[c]){c=e}}return s[c]}}return undefined};const Qr=(e,...t)=>{const n={vertices:$r,edges:Rr,faces:Ur};const s=ze(...t);const r=Object.create(null);["vertices","edges","faces"].forEach((t=>{Object.defineProperty(r,vt[t],{enumerable:true,get:()=>n[t](e,s)});St(e,t).forEach((n=>Object.defineProperty(r,n,{enumerable:true,get:()=>e[n][r[vt[t]]]})))}));return r};const Dr=Object.freeze({__proto__:null,faceContainingPoint:Ir,facesContainingPoint:Lr,nearest:Qr,nearestEdge:Rr,nearestFace:Ur,nearestVertex:$r});const qr=(e,t,n=ot,s=ot,r=a)=>{const c=$(v(e.vector),v(t.vector));if(Math.abs(c)<r){return{a:undefined,b:undefined,point:undefined}}const o=$(e.vector,t.vector);const i=-o;const f=[t.origin[0]-e.origin[0],t.origin[1]-e.origin[1]];const l=[-f[0],-f[1]];const d=$(f,t.vector)/o;const u=$(l,e.vector)/i;if(n(d,r/g(e.vector))&&s(u,r/g(t.vector))){return{a:d,b:u,point:x(e.origin,E(e.vector,d))}}return{a:undefined,b:undefined,point:undefined}};const Wr=(e,t,n=rt,s=ot,r=a)=>{const c=t.vector[0]**2+t.vector[1]**2;const o=Math.sqrt(c);const i=o===0?t.vector:t.vector.map((e=>e/o));const f=D(i);const l=O(t.origin,e.origin);const d=$(l,i);if(Math.abs(d)>e.radius+r){return undefined}const u=Math.sqrt(e.radius**2-d**2);const m=(t,n)=>e.origin[n]-f[n]*d+i[n]*t;const g=Math.abs(e.radius-Math.abs(d))<r?[u].map((e=>[e,e].map(m))):[-u,u].map((e=>[e,e].map(m)));const p=g.map((e=>e.map(((e,n)=>e-t.origin[n])))).map((e=>e[0]*t.vector[0]+t.vector[1]*e[1])).map((e=>e/c));return g.filter(((e,t)=>s(p[t],r)))};const Gr=e=>{if(e>=1)return 0;if(e<=-1)return Math.PI;return Math.acos(e)};const Hr=(e,t,n)=>{const s=t[0]-e[0];const r=t[1]-e[1];const c=s*Math.cos(n)+r*Math.sin(n);const o=r*Math.cos(n)-s*Math.sin(n);return[e[0]+c,e[1]+o]};const Jr=(e,t,n=rt,s=rt,r=a)=>{const c=e.radius<t.radius?e.radius:t.radius;const o=e.radius<t.radius?t.radius:e.radius;const i=e.radius<t.radius?e.origin:t.origin;const f=e.radius<t.radius?t.origin:e.origin;const l=[i[0]-f[0],i[1]-f[1]];const d=Math.sqrt(l[0]**2+l[1]**2);if(d<r){return undefined}const u=l.map(((e,t)=>e/d*o+f[t]));if(Math.abs(o+c-d)<r||Math.abs(o-(c+d))<r){return[u]}if(d+c<o||o+c<d){return undefined}const m=Gr((c*c-d*d-o*o)/(-2*d*o));const g=Hr(f,u,+m);const p=Hr(f,u,-m);return[g,p]};const Zr=e=>{for(let t=1;t<e.length;t+=1){if(!st(e[0],e[t])){return[e[0],e[t]]}}return undefined};const Yr=(e,{vector:t,origin:n},s=lt,r=ot,c=a)=>{const o=e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>qr({vector:O(e[1],e[0]),origin:e[0]},{vector:t,origin:n},s,r,c).point)).filter((e=>e!==undefined));switch(o.length){case 0:return undefined;case 1:return[o];default:return Zr(o)||[o[0]]}};const Xr=(e,{vector:t,origin:n},s=lt,r=at,c=a)=>{const o=Yr(e,{vector:t,origin:n},s,r,c);let i;switch(r){case ft:i=it;break;case dt:i=lt;break;default:return o}const f=Yr(e,{vector:t,origin:n},lt,i,c);if(f===undefined){return undefined}const l=Zr(f);if(l===undefined){switch(r){case ft:return Pr(e,n,ct,.001)?f:undefined;case dt:return Pr(e,x(n,t),ct,.001)||Pr(e,n,ct,.001)?f:undefined;case at:return undefined;default:return undefined}}return Pr(e,P(...l),ct,.001)?l:o};const Kr=Object.freeze({__proto__:null,intersectCircleCircle:Jr,intersectCircleLine:Wr,intersectConvexPolygonLine:Xr,intersectLineLine:qr});const ec=(e,t)=>{let n=[0];for(let s=1;s<e.length;s+=1){switch(t(e[n[0]],e[s])){case 0:n.push(s);break;case 1:n=[s];break}}return n};const tc=(e,t)=>{if(!e.length){return[]}const n=e.map(((e,t)=>t));const s=[[n[0]]];for(let r=1;r<n.length;r+=1){const c=n[r];if(c===undefined){continue}const o=s.length-1;const a=s[o][s[o].length-1];if(t(e[a],e[c])){s[o].push(c)}else{s.push([c])}}return s};const nc=(e,t=a)=>{const n=e.map(((e,t)=>({v:e,i:t}))).sort(((e,t)=>e.v-t.v)).map((e=>e.i));const s=n.map((t=>e[t]));const r=(e,n)=>Math.abs(e-n)<t;return tc(s,r).map((e=>e.map((e=>n[e]))))};const sc=(e,t=a)=>{const n=[[0]];for(let s=1;s<e.length;s+=1){let r=false;for(let c=0;c<n.length;c+=1){const o=n[c][0];if(H(e[s],e[o],t)){n[c].push(s);r=true;break}}if(!r){n.push([s])}}return n};const rc=Object.freeze({__proto__:null,clusterParallelVectors:sc,clusterScalars:nc,clusterSortedGeneric:tc,minimumCluster:ec});const cc=({vertices_coords:e,faces_vertices:t},n=0)=>t.map((t=>[t.reduce(((t,s)=>e[t][n]<e[s][n]?t:s)),t.reduce(((t,s)=>e[t][n]>e[s][n]?t:s))]));const oc=({vertices_coords:e},t=0,n=a)=>nc(e.map((e=>e[t])),n).map((n=>({vertices:n,t:n.reduce(((n,s)=>n+e[s][t]),0)/n.length})));const ac=(e,{edges_vertices:t,vertices_edges:n},s=a)=>{if(!n){n=_s({edges_vertices:t})}const r=t.map((t=>t.map((t=>e[t]))));const c=r.map((e=>tt(...e,s)));const o=r.map((([e,t])=>Math.sign(e-t)));const i=t.map((([e,t],n)=>c[n]?{[e]:0,[t]:0}:{[e]:o[n],[t]:-o[n]}));return nc(e,s).map((e=>e.filter((e=>n[e])))).filter((e=>e.length)).map((t=>({vertices:t,t:t.reduce(((t,n)=>t+e[n]),0)/t.length,start:cn(t.flatMap((e=>n[e].filter((t=>i[t][e]<=0))))),end:cn(t.flatMap((e=>n[e].filter((t=>i[t][e]>=0)))))})))};const ic=({vertices_coords:e,edges_vertices:t,vertices_edges:n},s=0,r=a)=>ac(e.map((e=>e[s])),{edges_vertices:t,vertices_edges:n},r);const fc=({vertices_coords:e,faces_vertices:t},n=0,s=a)=>ac(e.map((e=>e[n])),{edges_vertices:cc({vertices_coords:e,faces_vertices:t},n)},s);const lc=({vertices_coords:e,edges_vertices:t,faces_vertices:n},s=0,r=a)=>{const c=e.map((e=>e[s]));const o=cc({vertices_coords:e,faces_vertices:n},s);const i=_s({edges_vertices:t});const f=_s({edges_vertices:o});const l=t.map((e=>e.map((e=>c[e]))));const d=o.map((e=>e.map((e=>c[e]))));const u=l.map((e=>tt(...e,r)));const m=d.map((e=>tt(...e,r)));const g=l.map((([e,t])=>Math.sign(e-t)));const p=d.map((([e,t])=>Math.sign(e-t)));const _=t.map((([e,t],n)=>u[n]?{[e]:0,[t]:0}:{[e]:g[n],[t]:-g[n]}));const h=n.map((([e,t],n)=>m[n]?{[e]:0,[t]:0}:{[e]:p[n],[t]:-p[n]}));return nc(c,r).map((e=>({vertices:e,t:e.reduce(((e,t)=>e+c[t]),0)/e.length,edges:{start:cn(e.filter((e=>i[e]!==undefined)).flatMap((e=>i[e].filter((t=>_[t][e]<=0))))),end:cn(e.filter((e=>i[e]!==undefined)).flatMap((e=>i[e].filter((t=>_[t][e]>=0)))))},faces:{start:cn(e.filter((e=>f[e]!==undefined)).flatMap((e=>f[e].filter((t=>h[t][e]<=0))))),end:cn(e.filter((e=>f[e]!==undefined)).flatMap((e=>f[e].filter((t=>h[t][e]>=0)))))}})))};const dc=Object.freeze({__proto__:null,sweep:lc,sweepEdges:ic,sweepFaces:fc,sweepValues:ac,sweepVertices:oc});const uc=({edges_vertices:e},t,n)=>n.map((n=>e[n][0]===t?e[n][1]:e[n][0]));const mc=Object.freeze({__proto__:null,getOtherVerticesInEdges:uc});const gc=({vertices_coords:e,vertices_edges:t,edges_vertices:n},s,r=a)=>{if(!e||!n){return false}if(!t){t=_s({edges_vertices:n})}const c=t[s];if(c===undefined||c.length!==2){return false}const o=uc({edges_vertices:n},s,c);const i=[o[0],s,o[1]].map((t=>e[t]));return br(...i,false,r)};const pc=Object.freeze({__proto__:null,isVertexCollinear:gc});const _c=({vertices_coords:e,edges_vertices:t},n=a)=>{if(!e||!t||!t.length){return{edges_line:[],lines:[]}}const s=Bs({vertices_coords:e,edges_vertices:t});const r=s.map((e=>k(e[1],e[0]))).map(h);const c=r.map(((e,t)=>({vector:e,origin:s[t][0]})));const o=c.map((e=>kr(e,[0,0,0],(e=>e),n)));const i=o.map((e=>m(e)));const f=nc(i,n);const l=f.map((e=>e.map((e=>r[e])))).map((e=>sc(e,n))).map(((e,t)=>e.map((e=>e.map((e=>f[t][e]))))));const d=l.map((s=>s.map((s=>{if(Math.abs(i[s[0]])<n){return[s]}const r=c[s[0]].vector;const o=s.map((n=>e[t[n][0]])).map((e=>ss(e,r)));const a=is(o,r);const f=(e,t)=>st(o[e],o[t],n);const l=e=>e.map((e=>a[e])).map((e=>s[e]));const d=tc(a,f);if(d.length===1){return d.map(l)}const u=d[0][0];const m=d[d.length-1];const g=m[m.length-1];const p=[u,g].map((e=>a[e]));if(f(...p)){const e=d.pop();d[0]=e.concat(d[0])}return d.map(l)}))));const u=d.flatMap((e=>e.flatMap((e=>e))));const g=ar(u);const p=u.map((e=>e.flatMap((e=>t[e])))).map(cn);const _=u.map((e=>r[e[0]]));const v=p.map(((t,n)=>t.map((t=>F(_[n],e[t])))));const b=v.map(((e,t)=>p[t][mn(e)]));const y=v.map(((e,t)=>p[t][gn(e)]));const E=p.map(((t,n)=>k(e[y[n]],e[b[n]])));const M=b.map((t=>e[t]));const A=E.map(((e,t)=>({vector:e,origin:M[t]})));return{lines:A,edges_line:g}};const hc=Object.freeze({__proto__:null,getEdgesLine:_c});const vc=(e,t,n=a)=>{const s=(e,t)=>e>t[0]-n&&e<t[1]+n;const r=e.map((()=>[]));for(let c=0;c<e.length-1;c+=1){for(let o=c+1;o<e.length;o+=1){const{a:a,b:i,point:f}=qr(e[c],e[o],ot,ot,n);if(f===undefined){continue}if(!s(a,t[c])||!s(i,t[o])){continue}r[c].push(a);r[o].push(i)}}return r};const bc=({edges_vertices:e,vertices_edges:t},n)=>{const s=t[n].sort(((e,t)=>e-t));const r=s.flatMap((t=>e[t])).filter((e=>e!==n)).slice(0,2);e[s[0]]=r;e[s[1]]=undefined;r.forEach((e=>{const n=t[e].indexOf(s[1]);if(n===-1){return}t[e][n]=s[0]}));return s[1]};const yc=({vertices_coords:e,edges_vertices:t,edges_assignment:n,edges_foldAngle:s},r=a)=>{const c=r/10;const{lines:o,edges_line:i}=_c({vertices_coords:e,edges_vertices:t});const f=o.map((({vector:e,origin:t})=>({origin:t,vector:v(e)})));const l=ar(i).map((e=>e.constructor===Array?e:[e]));const d=t.map((t=>t.map((t=>e[t])))).map(((e,t)=>e.map((e=>S(O(e,f[i[t]].origin),f[i[t]].vector)))));const u=l.map((e=>e.flatMap((e=>d[e])))).map((e=>fn(e,c)));const m=u.map((e=>[e[0],e[e.length-1]]));const g=vc(f,m,c).map((e=>fn(e,c))).map(((e,t)=>ln(e,u[t],c)));const p=l.map((e=>e.flatMap((e=>d[e]))));const _=l.map((e=>{const t=[];e.forEach(((e,n)=>{t[e]=[n*2,n*2+1]}));return t}));const h=l.map(((e,t)=>ac(p[t],{edges_vertices:_[t]},c)));const b=h.map((e=>e.map((e=>e.t))));const y=h.map((e=>{const t={};const n=e.map((e=>{e.start.forEach((e=>{t[e]=true}));e.end.forEach((e=>{delete t[e]}));return Object.keys(t).map((e=>parseInt(e,10)))}));n.pop();return n}));g.forEach(((e,t)=>{const n=b[t];const s=y[t];let r=0;let o=0;while(r<e.length&&o<n.length-1){if(tt(n[o],e[r],c)){throw new Error("bad algorithm")}if(e[r]>n[o+1]){o+=1;continue}n.splice(o+1,0,e[r]);s.splice(o+1,0,s[o]);r+=1}}));const M=b.flatMap(((e,t)=>e.map((e=>x(f[t].origin,E(f[t].vector,e))))));let A=0;const w=y.map((e=>{const t=e.map((()=>[A,++A]));A+=1;return t})).flatMap(((e,t)=>e.filter(((e,n)=>y[t][n].length))));const k={vertices_coords:M,edges_vertices:w};if(n||s){const e=y.flatMap((e=>e.filter((e=>e.length))));if(n){k.edges_assignment=e.map((e=>n[e[0]]))}if(s){k.edges_foldAngle=e.map((e=>s[e[0]]))}}xn(k,En(k));vn(k,r);tr(k);k.vertices_edges=_s(k);const j=k.vertices_edges.map(((e,t)=>e.length===2?t:undefined)).filter((e=>e!==undefined)).filter((e=>gc(k,e,c))).reverse();const F=j.map((e=>bc(k,e)));yn(k,"edges",F);yn(k,"vertices",j);const C=Zs(k);if(C.length){Ys(k,C)}if(Ks(k).length){console.error("planarize: found circular edges. place 3.")}delete k.vertices_edges;return k};const Ec=e=>{const t=e.edges_vertices.length;if(!e.edges_assignment){e.edges_assignment=[]}if(!e.edges_foldAngle){e.edges_foldAngle=[]}if(e.edges_assignment.length>e.edges_foldAngle.length){for(let t=e.edges_foldAngle.length;t<e.edges_assignment.length;t+=1){e.edges_foldAngle[t]=wt(e.edges_assignment[t])}}if(e.edges_foldAngle.length>e.edges_assignment.length){for(let t=e.edges_assignment.length;t<e.edges_foldAngle.length;t+=1){e.edges_assignment[t]=kt(e.edges_foldAngle[t])}}for(let n=e.edges_assignment.length;n<t;n+=1){e.edges_assignment[n]="U";e.edges_foldAngle[n]=0}};const Mc=(e,t)=>{if(t===undefined&&!e.faces_vertices&&!e.faces_edges&&e.vertices_coords&&Bt(e)===2){t=true}if(t&&e.vertices_coords){const t=Is(e);e.faces_vertices=t.faces_vertices;e.faces_edges=t.faces_edges;return}if(e.faces_vertices&&e.faces_edges){return}if(e.faces_vertices&&!e.faces_edges){e.faces_edges=Qs(e)}else if(e.faces_edges&&!e.faces_vertices){e.faces_vertices=Us(e)}else{e.faces_vertices=[];e.faces_edges=[]}};const Ac=(e,t)=>{if(typeof e!=="object"){return e}if(!e.edges_vertices){return e}e.vertices_edges=_s(e);e.vertices_vertices=ys(e);e.vertices_edges=hs(e);Ec(e);Mc(e,t);e.vertices_faces=As(e);e.edges_faces=Ss(e);e.faces_faces=Ds(e);return e};const xc=({vertices_vertices:e},t,n)=>{if(!e){return}e[t]=[...n];n.forEach(((n,s,r)=>{const c=r[(s+1)%r.length];const o=e[n].indexOf(c);e[n][o]=t}))};const wc=({vertices_coords:e,vertices_vertices:t,vertices_sectors:n},s)=>{if(!n){return}n[s]=t[s].length===1?[l]:Wn(t[s].map((t=>O(e[t],e[s]))))};const kc=({vertices_edges:e},t,n,s,r)=>{if(!e){return}e[n]=[...r];s.map((n=>e[n].indexOf(t))).forEach(((t,n)=>{e[s[n]][t]=r[n]}))};const Oc=({vertices_faces:e},t,n)=>{if(!e){return}e[t]=[...n]};const jc=({edges_faces:e},t,n)=>{if(!e){return}t.forEach((t=>{e[t]=[...n]}))};const Fc=({faces_vertices:e},t,n,s)=>{if(!e){return}s.map((t=>e[t])).forEach((e=>e.map(((e,t,s)=>{const r=(t+1)%s.length;return e===n[0]&&s[r]===n[1]||e===n[1]&&s[r]===n[0]?r:undefined})).filter((e=>e!==undefined)).sort(((e,t)=>t-e)).forEach((n=>e.splice(n,0,t)))))};const Sc=({edges_vertices:e,faces_vertices:t,faces_edges:n},s)=>{const r=xs({edges_vertices:e});s.map((e=>t[e].map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>r[e.join(" ")])))).forEach(((e,t)=>{n[s[t]]=e}))};const Cc=({vertices_faces:e,edges_vertices:t,edges_faces:n,faces_edges:s,faces_vertices:r},c)=>{if(n&&n[c]){return n[c]}const o=t[c];if(e!==undefined){const t=[];for(let n=0;n<e[o[0]].length;n+=1){for(let s=0;s<e[o[1]].length;s+=1){if(e[o[0]][n]===e[o[1]][s]){if(e[o[0]][n]===undefined){continue}t.push(e[o[0]][n])}}}return t}if(s){const e=[];for(let t=0;t<s.length;t+=1){for(let n=0;n<s[t].length;n+=1){if(s[t][n]===c){e.push(t)}}}return e}if(r){console.warn("todo: findAdjacentFacesToEdge")}};const Vc=(e,t,n)=>{const s=e.edges_vertices[t];const r=[{edges_vertices:[s[0],n]},{edges_vertices:[n,s[1]]}];r.forEach((n=>["edges_assignment","edges_foldAngle"].filter((n=>e[n]&&e[n][t]!==undefined)).forEach((s=>{n[s]=e[s][t]}))));return r};const Pc=(e,t,n,s=a)=>{if(e.edges_vertices.length<t){return{}}const r=e.edges_vertices[t];if(!n){n=V(...r.map((t=>e.vertices_coords[t])))}const c=r.map((t=>e.vertices_coords[t])).map((e=>L(e,n)<s));if(c[0]){return{vertex:r[0],edges:{}}}if(c[1]){return{vertex:r[1],edges:{}}}const o=e.vertices_coords.length;e.vertices_coords[o]=n;const i=[0,1].map((t=>t+e.edges_vertices.length));Vc(e,t,o).forEach(((t,n)=>Object.keys(t).forEach((s=>{e[s][i[n]]=t[s]}))));xc(e,o,r);wc(e,o);kc(e,t,o,r,i);const f=Cc(e,t);if(f){Oc(e,o,f);jc(e,i,f);Fc(e,o,r,f);Sc(e,f)}const l=yn(e,"edges",[t]);i.forEach(((e,t)=>{i[t]=l[i[t]]}));l.splice(-2);l[t]=i;return{vertex:o,edges:{map:l,new:i,remove:t}}};const Tc=({vertices_coords:e},t,n)=>{const s=t.map((t=>e[t])).reverse();return{edges_vertices:[...t],edges_foldAngle:0,edges_assignment:"U",edges_length:L(...s),edges_vector:k(...s),edges_faces:[n,n]}};const Nc=(e,t,n)=>{const s=e.edges_vertices.length;const r=Tc(e,n,t);Object.keys(r).filter((t=>e[t]!==undefined)).forEach((t=>{e[t][s]=r[t]}));return s};const zc=({edges_vertices:e,faces_vertices:t,faces_edges:n},s,r)=>{const c=r.map((e=>t[s].indexOf(e)));const o=rn(t[s],c).map((e=>({faces_vertices:e})));if(n){const t=xs({edges_vertices:e});o.map((e=>e.faces_vertices.map(((e,t,n)=>`${e} ${n[(t+1)%n.length]}`)).map((e=>t[e])))).forEach(((e,t)=>{o[t].faces_edges=e}))}return o};const Bc=(e,t,n)=>{const s=[0,1].map((t=>e.faces_vertices.length+t));zc(e,t,n).forEach(((t,n)=>Object.keys(t).forEach((r=>{e[r][s[n]]=t[r]}))));return s};const $c=(e,{vertices:t,edges:n})=>{let s;const r=n.map((t=>{const n=Pc(e,s?s[t.edge]:t.edge,t.coords);s=s?rr(s,n.edges.map):n.edges.map;return n}));t.push(...r.map((e=>e.vertex)));let c;r.forEach((e=>{e.edges.remove=c?c[e.edges.remove]:e.edges.remove;const t=fr(e.edges.map);c=c?or(c,t):t}));return{vertices:t,edges:{map:s,remove:r.map((e=>e.edges.remove))}}};const Rc=({vertices_coords:e,vertices_vertices:t,edges_vertices:n},s)=>{const r=n[s][0];const c=n[s][1];t[r]=ls({vertices_coords:e},t[r].concat(c),r);t[c]=ls({vertices_coords:e},t[c].concat(r),c)};const Lc=({edges_vertices:e,vertices_edges:t,vertices_vertices:n},s)=>{if(!t||!n){return}const r=e[s];r.map((e=>n[e])).map(((e,t)=>e.indexOf(r[(t+1)%r.length]))).forEach(((e,n)=>t[r[n]].splice(e,0,s)))};const Ic=(e,t,s)=>{const r={};s.forEach((t=>e.faces_vertices[t].forEach((e=>{if(!r[e]){r[e]=[]}r[e].push(t)}))));e.faces_vertices[t].forEach((s=>{const c=e.vertices_faces[s].indexOf(t);const o=r[s];if(c===-1||!o){throw new Error(n.convexFace)}e.vertices_faces[s].splice(c,1,...o)}))};const Uc=(e,t,s,r)=>{const c={};r.forEach((t=>e.faces_edges[t].forEach((e=>{if(!c[e]){c[e]=[]}c[e].push(t)}))));const o=[...e.faces_edges[t],s];o.forEach((s=>{const r=c[s];const o=[];for(let n=0;n<e.edges_faces[s].length;n+=1){if(e.edges_faces[s][n]===t){o.push(n)}}if(o.length===0||!r){throw new Error(n.convexFace)}o.reverse().forEach((t=>e.edges_faces[s].splice(t,1)));const a=o[o.length-1];e.edges_faces[s].splice(a,0,...r)}))};const Qc=({faces_vertices:e,faces_faces:t},n,s)=>{const r=t[n];const c=s.map((t=>e[t]));const o=r.map((t=>{const n=e[t];const r=[0,0];for(let e=0;e<c.length;e+=1){let t=0;for(let s=0;s<n.length;s+=1){if(c[e].indexOf(n[s])!==-1){t+=1}}r[e]=t}if(r[0]>=2){return s[0]}if(r[1]>=2){return s[1]}}));s.forEach(((e,n,r)=>{t[e]=[r[(n+1)%s.length]]}));r.forEach(((e,s)=>{for(let r=0;r<t[e].length;r+=1){if(t[e][r]===n){t[e][r]=o[s];t[o[s]].push(e)}}}))};const Dc=()=>0;const qc=(e,t)=>e<-t?-1:0;const Wc=(e,t)=>e<-t?-1:e>1+t?1:0;const Gc=({vertices_coords:e,faces_vertices:t},{vector:n,origin:s},r=Dc,c=a)=>{const o=S(n,n);const i=v(n);const f=e.map((e=>O(e,s))).map((e=>v(e))).map((e=>$(i,e))).map((e=>Math.abs(e)<c?0:Math.sign(e)));const l=e.map((e=>O(e,s))).map((e=>S(e,n))).map((e=>e/o)).map((e=>r(e,c)));const d=t.map((e=>e.map((e=>f[e])).map(((e,t,n)=>e===n[0])).reduce(((e,t)=>e&&t),true))).map((e=>!e));const u=t.map((e=>e.map((e=>l[e])).map(((e,t,n)=>e===n[0])).reduce(((e,t)=>e&&t),true))).map((e=>!e)).map(((e,n)=>e||l[t[n][0]]===0));return t.map(((e,t)=>t)).filter((e=>d[e]&&u[e]))};const Hc=(e,{vector:t,origin:n},s=a)=>Gc(e,{vector:t,origin:n},Dc,s);const Jc=(e,{vector:t,origin:n},s=a)=>Gc(e,{vector:t,origin:n},qc,s);const Zc=(e,t,n=a)=>{const s=O(t[1],t[0]);const r=t[0];return Gc(e,{vector:s,origin:r},Wc,n)};const Yc=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},r,{vector:c,origin:o},i=a)=>{const f=n[r].map((t=>e[t])).map((e=>Sr({vector:c,origin:o},e,(()=>true),i))).map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined));const l=f.map((e=>n[r][e]));const d=f.concat(f.map((e=>e+n[r].length))).map(((e,t,n)=>n[t+1]-e===1)).reduce(((e,t)=>e||t),false);if(d){return undefined}if(l.length>1){return{vertices:l,edges:[]}}const u=s[r].map((n=>t[n].map((t=>e[t])))).map((e=>qr({vector:c,origin:o},{vector:O(e[1],e[0]),origin:e[0]},ot,dt,i).point)).map(((e,t)=>({coords:e,edge:s[r][t]}))).filter((e=>e.coords!==undefined)).filter((e=>!l.map((n=>t[e.edge].includes(n))).reduce(((e,t)=>e||t),false)));return u.length+l.length===2?{vertices:l,edges:u}:undefined};const Xc=Object.freeze({__proto__:null,facesLineTypeOverlap:Gc,getFacesLineOverlap:Hc,getFacesRayOverlap:Jc,getFacesSegmentOverlap:Zc,intersectConvexFaceLine:Yc});const Kc=(e,t,n,s)=>{const r=Yc(e,t,n,s);if(r===undefined){return undefined}const c=$c(e,r);c.edges.new=Nc(e,t,c.vertices);Rc(e,c.edges.new);Lc(e,c.edges.new);const o=Bc(e,t,c.vertices);Ic(e,t,o);Uc(e,t,c.edges.new,o);Qc(e,t,o);const a=yn(e,"faces",[t]);o.forEach(((e,t)=>{o[t]=a[o[t]]}));a.splice(-2);a[t]=o;c.faces={map:a,new:o,remove:t};return c};const eo=(e,t)=>{const n={};t.forEach((e=>{n[e]=true}));const s=[];t.forEach((t=>{s[t]=e[t].filter((e=>n[e]))}));return s};const to=(e,t={})=>{const n={vertices:[],edges:[],faces:[],...t};const s=Object.keys(n);const r={...e};mt.graph.forEach((e=>delete r[e]));delete r.file_frames;const c={};s.forEach((e=>{c[e]={}}));s.forEach((e=>n[e].forEach((t=>{c[e][t]=true}))));const o={};s.forEach((t=>{St(e,t).forEach((e=>{o[e]={}}));Ct(e,t).forEach((e=>{o[e]={}}))}));s.forEach((t=>{St(e,t).forEach((e=>{o[e].prefix=t}));Ct(e,t).forEach((e=>{o[e].suffix=t}))}));Object.keys(o).forEach((e=>{r[e]=[]}));Object.keys(o).forEach((t=>{const{prefix:s,suffix:a}=o[t];if(s&&a){n[s].forEach((n=>{r[t][n]=e[t][n].filter((e=>c[a][e]))}))}else if(s){n[s].forEach((n=>{r[t][n]=e[t][n]}))}else if(a){r[t]=e[t].map((e=>e.filter((e=>c[a][e]))))}else{r[t]=e[t]}}));return r};const no=(e,t={})=>{const n={vertices:[],edges:[],faces:[],...t};const s={vertices:{},edges:{},faces:{}};n.vertices.forEach((e=>{s.vertices[e]=true}));n.edges.forEach((e=>{s.edges[e]=true}));n.edges.forEach((t=>e.edges_vertices[t].forEach((e=>{s.vertices[e]=true}))));n.faces.forEach((e=>{s.faces[e]=true}));n.faces.forEach((t=>e.faces_vertices[t].forEach((e=>{s.vertices[e]=true}))));e.faces_vertices.map(((e,t)=>t)).filter((t=>e.faces_vertices[t].map((e=>s.vertices[e])).reduce(((e,t)=>e&&t),true))).forEach((e=>{s.faces[e]=true}));e.edges_vertices.map(((e,t)=>t)).filter((t=>e.edges_vertices[t].map((e=>s.vertices[e])).reduce(((e,t)=>e&&t),true))).forEach((e=>{s.edges[e]=true}));return to(e,{vertices:Object.keys(s.vertices),edges:Object.keys(s.edges),faces:Object.keys(s.faces)})};const so=(e,t)=>{let n=[];if(e.faces_vertices){n=an(t.flatMap((t=>e.faces_vertices[t])))}let s=[];if(e.faces_edges){s=an(t.flatMap((t=>e.faces_edges[t])))}else if(e.edges_vertices){const t={};n.forEach((e=>{t[e]=true}));s=e.edges_vertices.map(((e,n)=>t[e[0]]&&t[e[1]]?n:undefined)).filter((e=>e!==undefined))}return to(e,{vertices:n,edges:s,faces:t})};const ro=(e,t=[])=>{const n={vertices:[],edges:[]};t.forEach((e=>{n.vertices[e]=true}));if(e.vertices_edges){n.vertices.forEach(((t,s)=>e.vertices_edges[s].forEach((e=>{n.edges[e]=true}))))}if(e.edges_vertices){n.edges.forEach(((t,s)=>e.edges_vertices[s].forEach((e=>{n.vertices[e]=true}))))}return to(e,{vertices:n.vertices.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined)),edges:n.edges.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined))})};const co=Object.freeze({__proto__:null,selfRelationalArraySubset:eo,subgraph:no,subgraphExclusive:to,subgraphWithFaces:so,subgraphWithVertices:ro});const oo=e=>{const t={vertices:tn.vertices(e),edges:tn.edges(e),faces:tn.faces(e)};const n={vertices:Xn.vertices(e),edges:Xn.edges(e),faces:Xn.faces(e)};return{vertices:t.vertices>=n.vertices,edges:t.edges>=n.edges,faces:t.faces>=n.faces}};const ao=(e,t)=>{const n=Zs(e);const s=Ks(e);const r=An(e);const c=hn(e,t);const o=oo(e);const a=n.length===0&&s.length===0&&r.length===0&&o.vertices&&o.edges&&o.faces;const i=a?"valid":"problematic";return{summary:i,vertices:{isolated:r,duplicate:c,references:o.vertices},edges:{circular:s,duplicate:n,references:o.edges},faces:{references:o.faces}}};const io=e=>{const t=[];const n=(s,r)=>{if(t[s]!==undefined){return 0}t[s]=r;e[s].forEach((e=>n(e,r)));return 1};for(let t=0,s=0;t<e.length;t+=1){if(!(t in e)){continue}s+=n(t,s)}return t};const fo=e=>{const t=[];const n=[];e.forEach(((e,s)=>e.forEach((e=>{if(s<e){n.push([s,e])}if(s===e&&!t[s]){t[s]=true;n.push([s,e])}}))));return n};const lo=Object.freeze({__proto__:null,connectedComponents:io,connectedComponentsPairs:fo});const uo=e=>{const t=e.edges_vertices||[];const n=e.faces_vertices||[];const s=e.vertices_edges?e.vertices_edges:_s({edges_vertices:t});const r=e.vertices_vertices?e.vertices_vertices:Es({vertices_edges:s,edges_vertices:t});const c=e.vertices_faces?e.vertices_faces:Ms({vertices_edges:s,faces_vertices:n});const o=ir(io(r));const a=o.map((e=>e.flatMap((e=>s[e])))).map(cn);const i=o.map((e=>e.flatMap((e=>c[e])))).map(cn);return Array.from(Array(o.length)).map(((e,t)=>({vertices:o[t]||[],edges:a[t]||[],faces:i[t]||[]})))};const mo=e=>{const t=uo(e);const n=St(e,"vertices");const s=St(e,"edges");const r=St(e,"faces");return t.map((({vertices:t,edges:c,faces:o})=>{const a={};n.forEach((n=>{a[n]=[];t.forEach((t=>{a[n][t]=e[n][t]}))}));s.forEach((t=>{a[t]=[];c.forEach((n=>{a[t][n]=e[t][n]}))}));r.forEach((t=>{a[t]=[];o.forEach((n=>{a[t][n]=e[t][n]}))}));return a}))};const go=Object.freeze({__proto__:null,disjointGraphs:mo,disjointGraphsIndices:uo});const po=({vertices_coords:e},t)=>Ke(e,t);const _o=({edges_vertices:e,edges_assignment:t=[]})=>cn(e.filter(((e,n)=>xt[t[n]])).flat());const ho=()=>({vertices:[],edges:[],polygon:[]});const vo=({vertices_coords:e,vertices_edges:t,edges_vertices:n,edges_assignment:s})=>{if(!s||!n){return ho()}if(!t){t=_s({edges_vertices:n})}const r=s.map((e=>e==="B"||e==="b"));const c=[];const o=[];let a=-1;for(let e=0;e<r.length;e+=1){if(r[e]){a=e;break}}if(a===-1){return ho()}r[a]=false;c.push(a);o.push(n[a][0]);let i=n[a][1];while(o[0]!==i){o.push(i);a=t[i].filter((e=>r[e])).shift();if(a===undefined){return ho()}if(n[a][0]===i){[,i]=n[a]}else{[i]=n[a]}r[a]=false;c.push(a)}return{vertices:o,edges:c,polygon:e?o.map((t=>e[t])):[]}};const bo=({vertices_coords:e,vertices_edges:t,vertices_vertices:n,edges_vertices:s})=>{if(!n){n=vs({vertices_coords:e,vertices_edges:t,edges_vertices:s})}const r=xs({edges_vertices:s});const c=[];const o=[];const a={vertices:o,edges:c};let i=-Infinity;let f=-1;e.forEach(((e,t)=>{if(e[0]>i){i=e[0];f=t}}));if(f===-1){return a}o.push(f);const l=e[f];const d=n[f];if(!d){return a}const u=d.map((t=>e[t])).map((e=>[e[0]-l[0],e[1]-l[1]])).map((e=>Math.atan2(e[1],e[0]))).map((e=>e<0?e+Math.PI*2:e)).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).shift().i;const m=d[u];const g=f<m?`${f} ${m}`:`${m} ${f}`;const p=r[g];c.push(p);let _=f;let h=m;const v={[`${_} ${h}`]:true};while(true){const e=n[h];const t=e.indexOf(_);const s=(t+1)%e.length;const i=e[s];const f=h<i?`${h} ${i}`:`${i} ${h}`;const l=r[f];if(v[`${h} ${i}`]){if(l!==c[0]){console.warn("bad boundary")}return a}v[`${h} ${i}`]=true;o.push(h);c.push(l);_=h;h=i}};const yo=({vertices_coords:e,vertices_edges:t,vertices_vertices:n,edges_vertices:s})=>{if(!n){n=vs({vertices_coords:e,vertices_edges:t,edges_vertices:s})}return mo({vertices_coords:e,vertices_vertices:n,edges_vertices:s}).map(bo)};const Eo=Object.freeze({__proto__:null,boundary:vo,boundaryVertices:_o,boundingBox:po,planarBoundaries:yo,planarBoundary:bo});const Mo=(e,t)=>{const n={};t.forEach((e=>{n[e]=true}));const s=e.map((e=>!!n[e]));const r=[];const c=s.indexOf(false);const o={};for(let t=c+1;t<s.length;t+=1){if(s[t]&&!o[e[t]]){r.push(e[t]);o[e[t]]=true}}for(let t=0;t<c;t+=1){if(s[t]&&!o[e[t]]){r.push(e[t]);o[e[t]]=true}}return r};const Ao=Object.freeze({__proto__:null,getFaceFaceSharedVertices:Mo});const xo=(e=[],t=0)=>{if(e.length===0){return[]}const n=[];const s={};e.forEach(((e,t)=>{s[t]=true}));do{const r=t!==undefined?t:parseInt(Object.keys(s).shift(),10);t=undefined;const c=[];delete s[r];let o=[{index:r}];do{c.push(o);const t=o.flatMap((t=>e[t.index].filter((e=>s[e])).map((e=>({index:e,parent:t.index})))));const n={};t.forEach(((e,t)=>{if(!s[e.index]){n[t]=true}delete s[e.index]}));o=t.filter(((e,t)=>!n[t]))}while(o.length);n.push(c)}while(Object.keys(s).length);return n};const wo=(e,t)=>xo(e,t).shift();const ko=Object.freeze({__proto__:null,minimumSpanningTree:wo,minimumSpanningTrees:xo});const Oo=({vertices_coords:e,vertices_faces:t,faces_vertices:n},s)=>{if(!t){t=As({faces_vertices:n})}const r=t.map((e=>e.filter((e=>e!=null)).shift())).map((e=>e===undefined?se:s[e]));return e.map(((e,t)=>re(r[t],e)))};const jo={U:true,u:true};const Fo=({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_faces:c},o=0)=>{if(!s&&n){s=Ps({edges_foldAngle:n})}if(!n){if(s){n=Ns({edges_assignment:s})}else{n=Array(t.length).fill(0)}}if(!c){c=Ds({faces_vertices:r})}const a=xs({edges_vertices:t});const i=r.map((()=>_e));xo(c,o).forEach((t=>t.slice(1).forEach((t=>t.forEach((t=>{const c=Mo(r[t.index],r[t.parent]).slice(0,2);const o=c.map((t=>e[t]));const f=c.join(" ");const l=a[f];const d=jo[s[l]]?Math.PI:n[l]*Math.PI/180;const u=je(d,k(...Y(o[1],o[0])),o[0]);i[t.index]=ye(i[t.parent],u)}))))));return i};const So=({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_faces:c},o=0)=>{if(!n){if(s){n=Ns({edges_assignment:s})}else{n=Array(t.length).fill(0)}}if(!c){c=Ds({faces_vertices:r})}const a=Rt({edges_vertices:t,edges_foldAngle:n,edges_assignment:s});const i=xs({edges_vertices:t});const f=r.map((()=>se));xo(c,o).forEach((t=>t.slice(1).forEach((t=>t.forEach((t=>{const n=Mo(r[t.index],r[t.parent]).slice(0,2);const s=n.map((t=>e[t]));const c=n.join(" ");const o=i[c];const l=O(s[1],s[0]);const d=s[0];const u=a[o]?me(l,d):se;f[t.index]=oe(f[t.parent],u)}))))));return f};const Co=Object.freeze({__proto__:null,makeFacesMatrix:Fo,makeFacesMatrix2:So,multiplyVerticesFacesMatrix2:Oo});const Vo=({vertices_coords:e,vertices_faces:t,edges_vertices:n,edges_foldAngle:s,edges_assignment:r,faces_vertices:c,faces_faces:o,faces_matrix:a},i)=>{if(!e||!e.length){return[]}if(!c||!c.length){return e}a=Fo({vertices_coords:e,edges_vertices:n,edges_foldAngle:s,edges_assignment:r,faces_vertices:c,faces_faces:o},i);if(!t){t=As({faces_vertices:c})}const f=t.map((e=>e.filter((e=>e!=null)).shift())).map((e=>e===undefined?_e:a[e]));return e.map((e=>Z(3,e))).map(((e,t)=>ve(f[t],e)))};const Po=({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_faces:c},o=0)=>{if(!e||!e.length){return[]}if(!r||!r.length){return e}if(!c){c=Ds({faces_vertices:r})}const a=Rt({edges_vertices:t,edges_foldAngle:n,edges_assignment:s});const i=[];const f=[];const l=xs({edges_vertices:t});xo(c,o).forEach((n=>{const s=n.shift();if(!s||!s.length){return}const c=s[0];f[c.index]=false;r[c.index].forEach((t=>{i[t]=[...e[t]]}));n.forEach((n=>n.forEach((n=>{const s=Mo(r[n.index],r[n.parent]).slice(0,2).join(" ");const c=l[s];const o=t[c].map((e=>i[e]));if(o[0]===undefined||o[1]===undefined){return}const d=t[c].map((t=>e[t]));const u=d[0];const m=v(O(d[1],d[0]));const g=D(m);f[n.index]=a[c]?!f[n.parent]:f[n.parent];const p=v(O(o[1],o[0]));const _=o[0];const h=f[n.index]?q(p):D(p);r[n.index].filter((e=>i[e]===undefined)).forEach((t=>{const n=O(e[t],u);const s=F(n,g);const r=F(n,m);const c=E(p,r);const o=E(h,s);const a=x(x(_,c),o);i[t]=a}))}))))}));return i};const To=Object.freeze({__proto__:null,makeVerticesCoordsFlatFolded:Po,makeVerticesCoordsFolded:Vo});const No=function(e){let t;let n;if(typeof e!=="object"){return e}if(!e){return e}if(Object.prototype.toString.apply(e)==="[object Array]"){t=[];for(n=0;n<e.length;n+=1){t[n]=No(e[n])}return t}t={};for(n in e){if(e.hasOwnProperty(n)){t[n]=No(e[n])}}return t};const zo=typeof structuredClone==="function"?structuredClone:No;const Bo="class";const $o="function";const Ro="undefined";const Lo="boolean";const Io="number";const Uo="string";const Qo="object";const Do="svg";const qo="path";const Wo="id";const Go="style";const Ho="viewBox";const Jo="transform";const Zo="points";const Yo="stroke";const Xo="fill";const Ko="none";const ea="arrow";const ta="head";const na="tail";const sa=typeof window!==Ro&&typeof window.document!==Ro;typeof process!==Ro&&process.versions!=null&&process.versions.node!=null;const ra={window:"window not set; svg.window = @xmldom/xmldom"};const ca={window:undefined};const oa=e=>(new e.DOMParser).parseFromString("<!DOCTYPE html><title>.</title>","text/html");const aa=e=>{if(!e.document){e.document=oa(e)}ca.window=e;return ca.window};if(sa){ca.window=window}const ia=()=>{if(ca.window===undefined){throw ra.window}return ca.window};const fa="http://www.w3.org/2000/svg";const la={presentation:["color","color-interpolation","cursor","direction","display","fill","fill-opacity","fill-rule","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","image-rendering","letter-spacing","opacity","overflow","paint-order","pointer-events","preserveAspectRatio","shape-rendering","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","tabindex","transform-origin","user-select","vector-effect","visibility"],animation:["accumulate","additive","attributeName","begin","by","calcMode","dur","end","from","keyPoints","keySplines","keyTimes","max","min","repeatCount","repeatDur","restart","to","values"],effects:["azimuth","baseFrequency","bias","color-interpolation-filters","diffuseConstant","divisor","edgeMode","elevation","exponent","filter","filterRes","filterUnits","flood-color","flood-opacity","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","lighting-color","limitingConeAngle","mode","numOctaves","operator","order","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","primitiveUnits","radius","result","seed","specularConstant","specularExponent","stdDeviation","stitchTiles","surfaceScale","targetX","targetY","type","xChannelSelector","yChannelSelector"],text:["dx","dy","alignment-baseline","baseline-shift","dominant-baseline","lengthAdjust","method","overline-position","overline-thickness","rotate","spacing","startOffset","strikethrough-position","strikethrough-thickness","text-anchor","text-decoration","text-rendering","textLength","underline-position","underline-thickness","word-spacing","writing-mode"],gradient:["gradientTransform","gradientUnits","spreadMethod"]};const da={svg:["svg"],defs:["defs"],header:["desc","filter","metadata","style","script","title","view"],cdata:["cdata"],group:["g"],visible:["circle","ellipse","line","path","polygon","polyline","rect","arc","arrow","curve","parabola","roundRect","wedge","origami"],text:["text"],invisible:["marker","symbol","clipPath","mask"],patterns:["linearGradient","radialGradient","pattern"],childrenOfText:["textPath","tspan"],gradients:["stop"],filter:["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]};const ua={svg:[Ho],line:["x1","y1","x2","y2"],rect:["x","y","width","height"],circle:["cx","cy","r"],ellipse:["cx","cy","rx","ry"],polygon:[Zo],polyline:[Zo],path:["d"],text:["x","y"],mask:[Wo],symbol:[Wo],clipPath:[Wo,"clip-rule"],marker:[Wo,"markerHeight","markerUnits","markerWidth","orient","refX","refY"],linearGradient:["x1","x2","y1","y2"],radialGradient:["cx","cy","r","fr","fx","fy"],stop:["offset","stop-color","stop-opacity"],pattern:["patternContentUnits","patternTransform","patternUnits"]};const ma=[{nodes:[Do,"defs","g"].concat(da.visible,da.text),attr:la.presentation},{nodes:["filter"],attr:la.effects},{nodes:da.childrenOfText.concat("text"),attr:la.text},{nodes:da.filter,attr:la.effects},{nodes:da.gradients,attr:la.gradient}];ma.forEach((e=>e.nodes.forEach((t=>{if(!ua[t]){ua[t]=[]}ua[t].push(...e.attr)}))));const ga=[da.header,da.invisible,da.patterns].flat();const pa=[da.group,da.visible,da.text].flat();const _a={svg:[["svg","defs"],ga,pa].flat(),defs:ga,filter:da.filter,g:pa,text:da.childrenOfText,marker:pa,symbol:pa,clipPath:pa,mask:pa,linearGradient:da.gradients,radialGradient:da.gradients};const ha=Object.values(da).flat();const va={black:"#000000",silver:"#c0c0c0",gray:"#808080",white:"#ffffff",maroon:"#800000",red:"#ff0000",purple:"#800080",fuchsia:"#ff00ff",green:"#008000",lime:"#00ff00",olive:"#808000",yellow:"#ffff00",navy:"#000080",blue:"#0000ff",teal:"#008080",aqua:"#00ffff",orange:"#ffa500",aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",blanchedalmond:"#ffebcd",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",oldlace:"#fdf5e6",olivedrab:"#6b8e23",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",whitesmoke:"#f5f5f5",yellowgreen:"#9acd32"};const ba=e=>Math.round(e*100)/100;const ya=(e,t,n,s)=>{const r=t/100;const c=n/100;const o=t=>(t+e/30)%12;const a=r*Math.min(c,1-c);const i=e=>c-a*Math.max(-1,Math.min(o(e)-3,Math.min(9-o(e),1)));return s===undefined?[i(0)*255,i(8)*255,i(4)*255]:[i(0)*255,i(8)*255,i(4)*255,s]};const Ea=(e,t)=>{const n=Array.from(Array(t.length)).map(((t,n)=>e[n]||"0"));return e.length<=4?t.map((e=>n[e])).join(""):n.join("")};const Ma=e=>{const t=e.replace(/#(?=\S)/g,"");const n=t.length===4||t.length===8;const s=n?Ea(t,[0,0,1,1,2,2,3,3]):Ea(t,[0,0,1,1,2,2]);const r=parseInt(s,16);return n?[r>>24&255,r>>16&255,r>>8&255,ba((r&255)/256)]:[r>>16&255,r>>8&255,r&255]};const Aa=(e,t,n,s)=>{const r=e=>`00${Math.max(0,Math.min(Math.round(e),255)).toString(16)}`.slice(-2);const c=`#${[e,t,n].map(r).join("")}`;return s===undefined?c:`${c}${r(s*255)}`};const xa=Object.freeze({__proto__:null,hexToRgb:Ma,hslToRgb:ya,rgbToHex:Aa});const wa=e=>{const t=e.match(/\(([^\)]+)\)/g);if(t==null||!t.length){return[]}return t[0].substring(1,t[0].length-1).split(/[\s,]+/).map(parseFloat)};const ka=e=>{if(va[e]){return Ma(va[e])}if(e[0]==="#"){return Ma(e)}if(e.substring(0,4)==="rgba"||e.substring(0,3)==="rgb"){const t=wa(e);[0,1,2].filter((e=>t[e]===undefined)).forEach((e=>{t[e]=0}));return t}if(e.substring(0,4)==="hsla"||e.substring(0,3)==="hsl"){const t=wa(e);[0,1,2].filter((e=>t[e]===undefined)).forEach((e=>{t[e]=0}));return ya(...t)}return undefined};const Oa=e=>{if(va[e]){return va[e].toUpperCase()}if(e[0]==="#"){return Aa(...Ma(e))}if(e.substring(0,4)==="rgba"||e.substring(0,3)==="rgb"){return Aa(...wa(e))}if(e.substring(0,4)==="hsla"||e.substring(0,3)==="hsl"){const t=wa(e);[0,1,2].filter((e=>t[e]===undefined)).forEach((e=>{t[e]=0}));const n=ya(...t);if(t.length===4){n.push(t[3])}return Aa(...n)}return undefined};const ja=Object.freeze({__proto__:null,parseColorToHex:Oa,parseColorToRgb:ka});const Fa={cssColors:va,...xa,...ja};const Sa=(e,t)=>[e[0]+t[0],e[1]+t[1]];const Ca=(e,t)=>[e[0]-t[0],e[1]-t[1]];const Va=(e,t)=>[e[0]*t,e[1]*t];const Pa=e=>e[0]**2+e[1]**2;const Ta=e=>Math.sqrt(Pa(e));const Na=(e,t)=>Pa(Ca(e,t));const za=(e,t)=>Math.sqrt(Na(e,t));const Ba=(e,t)=>[Math.cos(e)*t,Math.sin(e)*t];const $a=(e,t)=>[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1],e[0]*t[2]+e[2]*t[3],e[1]*t[2]+e[3]*t[3],e[0]*t[4]+e[2]*t[5]+e[4],e[1]*t[4]+e[3]*t[5]+e[5]];const Ra=Object.freeze({__proto__:null,svg_add2:Sa,svg_distance2:za,svg_distanceSq2:Na,svg_magnitude2:Ta,svg_magnitudeSq2:Pa,svg_multiplyMatrices2:$a,svg_polar_to_cart:Ba,svg_scale2:Va,svg_sub2:Ca});const La=function(e){const t=e.match(/(\w+\((\-?\d+\.?\d*e?\-?\d*,?\s*)+\))+/g);if(!t){return[]}const n=t.map((e=>e.match(/[\w\.\-]+/g)));return n.map((e=>({transform:e.shift(),parameters:e.map((e=>parseFloat(e)))})))};const Ia=function(e){switch(e.length){case 1:return[1,0,0,1,e[0],0];case 2:return[1,0,0,1,e[0],e[1]];default:console.warn(`improper translate, ${e}`)}return undefined};const Ua=function(e){const t=Math.cos(e[0]/(180*Math.PI));const n=Math.sin(e[0]/(180*Math.PI));switch(e.length){case 1:return[t,n,-n,t,0,0];case 3:return[t,n,-n,t,-e[1]*t+e[2]*n+e[1],-e[1]*n-e[2]*t+e[2]];default:console.warn(`improper rotate, ${e}`)}return undefined};const Qa=function(e){switch(e.length){case 1:return[e[0],0,0,e[0],0,0];case 2:return[e[0],0,0,e[1],0,0];default:console.warn(`improper scale, ${e}`)}return undefined};const Da=function(e){return[1,0,Math.tan(e[0]/(180*Math.PI)),1,0,0]};const qa=function(e){return[1,Math.tan(e[0]/(180*Math.PI)),0,1,0,0]};const Wa=function(e,t){switch(e){case"translate":return Ia(t);case"rotate":return Ua(t);case"scale":return Qa(t);case"skewX":return Da(t);case"skewY":return qa(t);case"matrix":return t;default:console.warn(`unknown transform type ${e}`)}return undefined};const Ga=function(e){return La(e).map((e=>Wa(e.transform,e.parameters))).filter((e=>e!==undefined)).reduce(((e,t)=>$a(e,t)),[1,0,0,1,0,0])};const Ha=Object.freeze({__proto__:null,parseTransform:La,transformStringToMatrix:Ga});const Ja=(e,t="text/xml")=>{const n=(new(ia().DOMParser)).parseFromString(e,t);return n?n.documentElement:null};const Za=e=>{let t=e;while(t.parentNode!=null){t=t.parentNode}return t};const Ya=(e,t)=>{if((e.nodeName||"")===t){return e}return e.parentNode?Ya(e.parentNode,t):undefined};const Xa=(e,...t)=>{const n={};const s=e.getAttribute("class");const r=s?s.split(" "):[];r.push(...t);r.forEach((e=>{n[e]=true}));const c=Object.keys(n).join(" ");e.setAttribute("class",c)};const Ka=(e,...t)=>{if(!e||!t.length){return undefined}return e.classList?e.classList.add(...t):Xa(e,...t)};const ei=e=>e.childNodes==null||!e.childNodes.length?[e]:Array.from(e.childNodes).flatMap((e=>ei(e)));const ti={svg:["viewBox","xmlns","version"],line:["x1","y1","x2","y2"],rect:["x","y","width","height"],circle:["cx","cy","r"],ellipse:["cx","cy","rx","ry"],polygon:["points"],polyline:["points"],path:["d"]};const ni=e=>{const t=e.attributes;if(t==null){return[]}const n=Array.from(t);return ti[e.nodeName]?n.filter((t=>!ti[e.nodeName].includes(t.name))):n};const si=e=>{const t={};e.forEach((e=>{t[e.nodeName]=e.value}));return t};const ri=(e,t)=>{const n=si(ni(t));if(!n.transform&&!e.transform){return{...e,...n}}const s=n.transform||"";const r=e.transform||"";const c=Ga(s);const o=Ga(r);const a=$a(o,c);const i=`matrix(${a.join(", ")})`;return{...e,...n,transform:i}};const ci=(e,t={})=>e.childNodes==null||!e.childNodes.length?[{element:e,attributes:t}]:Array.from(e.childNodes).flatMap((e=>ci(e,ri(t,e))));const oi=Object.freeze({__proto__:null,addClass:Ka,findElementTypeInParents:Ya,flattenDomTree:ei,flattenDomTreeWithStyle:ci,getRootParent:Za,xmlStringToElement:Ja});const ai=e=>(new(ia().DOMParser)).parseFromString("<root></root>","text/xml").createCDATASection(e);const ii=/[MmLlSsQqLlHhVvCcSsQqTtAaZz]/g;const fi=/-?[0-9]*\.?\d+/g;const li={m:"move",l:"line",v:"vertical",h:"horizontal",a:"ellipse",c:"curve",s:"smoothCurve",q:"quadCurve",t:"smoothQuadCurve",z:"close"};Object.keys(li).forEach((e=>{const t=li[e];li[e.toUpperCase()]=t.charAt(0).toUpperCase()+t.slice(1)}));const di=(e,t)=>[e[0]+(t[0]||0),e[1]+(t[1]||0)];const ui=(e,t,n=[0,0])=>{const s=e.toUpperCase();let r=e===s?[0,0]:n;if(e==="V"){r=[n[0],0]}if(e==="H"){r=[0,n[1]]}switch(s){case"V":return di(r,[0,t[0]]);case"H":return di(r,[t[0],0]);case"M":case"L":case"T":return di(r,t);case"A":return di(r,[t[5],t[6]]);case"C":return di(r,[t[4],t[5]]);case"S":case"Q":return di(r,[t[2],t[3]]);case"Z":return undefined;default:return r}};const mi=e=>{const t=[];let n;while((n=ii.exec(e))!==null){t.push(n)}return t.map(((t,n,s)=>[t[0],t.index,n===s.length-1?e.length-1:s[(n+1)%s.length].index-1])).map((t=>{const n=t[0];const s=e.substring(t[1]+1,t[2]+1);const r=s.match(fi);const c=r?r.map(parseFloat):[];return{command:n,values:c}}))};const gi=e=>{let t=[0,0];const n=mi(e);if(!n.length){return n}n.forEach(((e,s)=>{n[s].end=ui(e.command,e.values,t);n[s].start=s===0?t:n[s-1].end;t=n[s].end}));const s=n[n.length-1];const r=n.filter((e=>e.command.toUpperCase()!=="M"&&e.command.toUpperCase()!=="Z")).shift();if(s.command.toUpperCase()==="Z"){s.end=[...r.start]}return n};const pi=Object.freeze({__proto__:null,parsePathCommands:mi,parsePathCommandsWithEndpoints:gi,pathCommandNames:li});const _i=(...e)=>e.filter((e=>typeof e===Io)).concat(e.filter((e=>typeof e===Qo&&e!==null)).map((e=>{if(typeof e.x===Io){return[e.x,e.y]}if(typeof e[0]===Io){return[e[0],e[1]]}return undefined})).filter((e=>e!==undefined)).reduce(((e,t)=>e.concat(t)),[]));const hi=function(e,t,n,s,r=0){const c=1;const o=n/c-n;const a=e-o-r;const i=t-o-r;const f=n+o*2+r*2;const l=s+o*2+r*2;return[a,i,f,l].join(" ")};const vi=(...e)=>{const t=_i(...e.flat());if(t.length===2){t.unshift(0,0)}return t.length===4?hi(...t):undefined};const bi=(e,...t)=>{const n=t.length===1&&typeof t[0]===Uo?t[0]:vi(...t);if(n){e.setAttribute(Ho,n)}return e};const yi=function(e){const t=e.getAttribute(Ho);return t==null?undefined:t.split(" ").map((e=>parseFloat(e)))};const Ei=function(e,t,n){const s=e.createSVGPoint();s.x=t;s.y=n;const r=s.matrixTransform(e.getScreenCTM().inverse());return[r.x,r.y]};const Mi=({vertices_coords:e})=>{if(!e){return undefined}const t=[Infinity,Infinity];const n=[-Infinity,-Infinity];e.forEach((e=>[0,1].forEach((s=>{t[s]=Math.min(e[s],t[s]);n[s]=Math.max(e[s],n[s])}))));return[t[0],t[1],n[0]-t[0],n[1]-t[1]].join(" ")};const Ai=Object.freeze({__proto__:null,convertToViewBox:Ei,foldToViewBox:Mi,getViewBox:yi,setViewBox:bi});const xi={...Ra,...oi,makeCDATASection:ai,...pi,...Ha,...Ai};const wi=function(e){const t=yi(e);if(t!==undefined){return t}if(typeof e.getBoundingClientRect===$o){const t=e.getBoundingClientRect();return[t.x,t.y,t.width,t.height]}return[]};const ki="svg-background-rectangle";const Oi=function(e,t){let n=Array.from(e.childNodes).filter((e=>e.getAttribute(Bo)===ki)).shift();if(n==null){n=ia().document.createElementNS(fa,"rect");wi(e).forEach(((e,t)=>n.setAttribute(ua.rect[t],e)));n.setAttribute(Bo,ki);n.setAttribute(Yo,Ko);e.insertBefore(n,e.firstChild)}n.setAttribute(Xo,t);return e};const ji=e=>{const t=e.getAttribute(Jo);return t==null||t===""?undefined:t};const Fi={clearTransform:e=>{e.removeAttribute(Jo);return e}};["translate","rotate","scale","matrix"].forEach((e=>{Fi[e]=(t,...n)=>{t.setAttribute(Jo,[ji(t),`${e}(${n.join(" ")})`].filter((e=>e!==undefined)).join(" "));return t}}));const Si=e=>e.replace(/([-_][a-z])/gi,(e=>e.toUpperCase().replace("-","").replace("_","")));const Ci=e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z])([A-Z])(?=[a-z])/g,"$1-$2").toLowerCase();const Vi=e=>e.charAt(0).toUpperCase()+e.slice(1);const Pi=e=>{while(e.lastChild){e.removeChild(e.lastChild)}return e};const Ti=(e,t)=>{if(t&&t.appendChild){t.appendChild(e)}return e};const Ni=(e,t)=>{Object.keys(t).forEach((n=>e.setAttribute(Ci(n),t[n])));return e};const zi=Object.freeze({__proto__:null,appendTo:Ti,removeChildren:Pi,setAttributes:Ni});const Bi=function(e,t){const n=yi(e);if(n!==undefined){bi(e,...[-t,-t,t*2,t*2].map(((e,t)=>n[t]+e)))}return e};const $i=function(e,t){const n=e.getElementsByTagName(t);return n.length?n[0]:null};const Ri=function(e,t){let n=$i(e,Go);if(n==null){n=ia().document.createElementNS(fa,Go);n.setTextContent=e=>{n.textContent="";n.appendChild(ai(e));return n};e.insertBefore(n,e.firstChild)}n.textContent="";n.appendChild(ai(t));return n};const Li=e=>{Array.from(e.attributes).filter((e=>e.name!=="xmlns"&&e.name!=="version")).forEach((t=>e.removeAttribute(t.name)));return Pi(e)};const Ii={clear:Li,size:bi,setViewBox:bi,getViewBox:yi,padding:Bi,background:Oi,getWidth:e=>wi(e)[2],getHeight:e=>wi(e)[3],stylesheet:function(e,t){return Ri.call(this,e,t)},...Fi,...zi};const Ui={move:["mousemove","touchmove"],press:["mousedown","touchstart"],release:["mouseup","touchend"],leave:["mouseleave","touchcancel"]};const Qi=(e,t)=>Object.values(Ui).flat().forEach((n=>{t[n].forEach((t=>e.removeEventListener(n,t)));t[n]=[]}));const Di=(e,t,n)=>Object.defineProperty(e,t,{get:()=>n,enumerable:true,configurable:true});const qi=function(e){const t=[];Object.keys(Ui).forEach((e=>{Ui[e].forEach((e=>{t[e]=[]}))}));const n=n=>Ui[n].forEach((n=>t[n].forEach((t=>e.removeEventListener(n,t)))));Object.keys(Ui).forEach((s=>{Object.defineProperty(e,`on${Vi(s)}`,{set:r=>{if(!e.addEventListener){return}if(r==null){n(s);return}Ui[s].forEach((n=>{const s=t=>{const n=t.touches!=null?t.touches[0]:t;if(n!==undefined){const{clientX:s,clientY:r}=n;const[c,o]=Ei(e,s,r);Di(t,"x",c);Di(t,"y",o)}r(t)};t[n].push(s);e.addEventListener(n,s)}))},enumerable:true})}));Object.defineProperty(e,"off",{value:()=>Qi(e,t)})};const Wi=()=>Math.random().toString(36).replace(/[^a-z]+/g,"").concat("aaaaa").substr(0,5);const Gi=function(e){let t;let n=0;let s;const r={};const c=()=>{if(ia().cancelAnimationFrame){ia().cancelAnimationFrame(s)}Object.keys(r).forEach((e=>delete r[e]))};const o=e=>{c();if(!e||!ia().requestAnimationFrame){return}t=performance.now();n=0;const o=Wi();r[o]=c=>{const a=(c-t)*.001;e({time:a,frame:n});n+=1;if(r[o]){s=ia().requestAnimationFrame(r[o])}};s=ia().requestAnimationFrame(r[o])};Object.defineProperty(e,"play",{set:o,enumerable:true});Object.defineProperty(e,"stop",{value:c,enumerable:true})};const Hi=e=>e&&e.parentNode?e.parentNode.removeChild(e):undefined;const Ji=[["cx","cy"],["x","y"]];const Zi=function(e,t={}){const n=[0,0];const s={selected:false,svg:undefined,updatePosition:e=>e};const r=()=>{if(!s.svg){return}if(!s.svg.parentNode){e.appendChild(s.svg)}Ji.filter((e=>s.svg[e[0]]!=null)).forEach((e=>e.forEach(((e,t)=>{s.svg.setAttribute(e,n[t])}))))};const c=new Proxy(n,{set:(e,t,n)=>{e[t]=n;r();return true}});const o=function(...e){_i(...e.flat()).forEach(((e,t)=>{n[t]=e}));r();if(typeof n.delegate===$o){n.delegate.apply(n.pointsContainer,[c,n.pointsContainer])}};n.delegate=undefined;n.setPosition=o;n.onMouseMove=e=>s.selected?o(s.updatePosition(e)):undefined;n.onMouseUp=()=>{s.selected=false};n.distance=e=>Math.sqrt(Na(e,n));["x","y"].forEach(((e,t)=>Object.defineProperty(n,e,{get:()=>n[t],set:e=>{n[t]=e}})));[Do,"updatePosition","selected"].forEach((e=>Object.defineProperty(n,e,{get:()=>s[e],set:t=>{s[e]=t}})));Object.defineProperty(n,"remove",{value:()=>{Hi(s.svg);n.delegate=undefined}});return c};const Yi=function(e,t,n){let s;let r;const c=Array.from(Array(t)).map((()=>Zi(e,n)));const o=e=>typeof r===$o?r.call(c,e,s,c):undefined;c.forEach((e=>{e.delegate=o;e.pointsContainer=c}));const a=function(e){if(!(c.length>0)){return}s=c.map(((t,n)=>({i:n,d:Na(t,[e.x,e.y])}))).sort(((e,t)=>e.d-t.d)).shift().i;c[s].selected=true};const i=function(e){c.forEach((t=>t.onMouseMove(e)))};const f=function(){c.forEach((e=>e.onMouseUp()));s=undefined};e.onPress=a;e.onMove=i;e.onRelease=f;Object.defineProperty(c,"selectedIndex",{get:()=>s});Object.defineProperty(c,"selected",{get:()=>c[s]});Object.defineProperty(c,"add",{value:t=>{c.push(Zi(e,t))}});c.removeAll=()=>{while(c.length>0){c.pop().remove()}};const l={onChange:(e,t)=>{r=e;if(t===true){const t=c.length-1;e.call(c,c[t],t,c)}},position:e=>c.forEach(((t,n)=>t.setPosition(e.call(c,t,n,c)))),svg:e=>c.forEach(((t,n)=>{t.svg=e.call(c,t,n,c)}))};Object.keys(l).forEach((e=>{c[e]=function(){if(typeof arguments[0]===$o){l[e](...arguments)}return c}}));c.parent=function(e){if(e!=null&&e.appendChild!=null){c.forEach((t=>{e.appendChild(t.svg)}))}return c};return c};const Xi=e=>{e.controls=(...t)=>Yi.call(e,e,...t)};const Ki={svg:{args:(...e)=>[vi(_i(...e))].filter((e=>e!=null)),methods:Ii,init:(...e)=>{const t=ia().document.createElementNS(fa,"svg");t.setAttribute("version","1.1");t.setAttribute("xmlns",fa);e.filter((e=>e!=null)).filter((e=>e.appendChild)).forEach((e=>e.appendChild(t)));qi(t);Gi(t);Xi(t);return t}}};const ef=function(e){if(e==null){return""}if(typeof e===Uo){return e.slice(0,3)==="url"?e:`url(#${e})`}if(e.getAttribute!=null){const t=e.getAttribute(Wo);return`url(#${t})`}return""};const tf={};["clip-path","mask","symbol","marker-end","marker-mid","marker-start"].forEach((e=>{tf[Si(e)]=(t,n)=>{t.setAttribute(e,ef(n));return t}}));const nf={g:{methods:{...Fi,...tf,...zi}}};const sf=(e,t)=>{e.setAttribute(ua.circle[2],t);return e};const rf=(e,t,n)=>{[..._i(...[t,n].flat()).slice(0,2)].forEach(((t,n)=>e.setAttribute(ua.circle[n],t)));return e};const cf=(e,t,n,s)=>[e,t,za([e,t],[n,s])];const of={circle:{args:(e,t,n,s)=>{const r=_i(...[e,t,n,s].flat());switch(r.length){case 0:case 1:return[,,...r];case 2:case 3:return r;default:return cf(...r)}},methods:{radius:sf,setRadius:sf,origin:rf,setOrigin:rf,center:rf,setCenter:rf,position:rf,setPosition:rf,...Fi,...tf,...zi}}};const af=(e,t,n)=>{[,,t,n].forEach(((t,n)=>e.setAttribute(ua.ellipse[n],t)));return e};const ff=(e,t,n)=>{[..._i(...[t,n].flat()).slice(0,2)].forEach(((t,n)=>e.setAttribute(ua.ellipse[n],t)));return e};const lf={ellipse:{args:(e,t,n,s)=>{const r=_i(...[e,t,n,s].flat()).slice(0,4);switch(r.length){case 0:case 1:case 2:return[,,...r];default:return r}},methods:{radius:af,setRadius:af,origin:ff,setOrigin:ff,center:ff,setCenter:ff,position:ff,setPosition:ff,...Fi,...tf,...zi}}};const df=e=>e!=null&&typeof e[Symbol.iterator]===$o;const uf=function(){switch(arguments.length){case 0:return Array.from(arguments);case 1:return df(arguments[0])&&typeof arguments[0]!==Uo?uf(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>df(e)?[...uf(e)]:e))}};const mf=(...e)=>_i(...uf(...e)).slice(0,4);const gf=(e,...t)=>{mf(...t).forEach(((t,n)=>e.setAttribute(ua.line[n],t)));return e};const pf={line:{args:mf,methods:{setPoints:gf,...Fi,...tf,...zi}}};const _f=e=>{const t=e.getAttribute("d");return t==null?"":t};const hf=e=>{e.removeAttribute("d");return e};const vf=(e,t,...n)=>{e.setAttribute("d",`${_f(e)}${t}${n.flat().join(" ")}`);return e};const bf=e=>mi(_f(e));const yf={addCommand:vf,appendCommand:vf,clear:hf,getCommands:bf,get:bf,getD:e=>e.getAttribute("d"),...Fi,...tf,...zi};Object.keys(li).forEach((e=>{yf[li[e]]=(t,...n)=>vf(t,e,...n)}));const Ef={path:{methods:yf}};const Mf=(e,t,n)=>{[,,t,n].forEach(((t,n)=>e.setAttribute(ua.rect[n],t)));return e};const Af=(e,t,n)=>{[..._i(...[t,n].flat()).slice(0,2)].forEach(((t,n)=>e.setAttribute(ua.rect[n],t)));return e};const xf=function(e){[0,1].forEach((t=>{if(e[2+t]<0){if(e[0+t]===undefined){e[0+t]=0}e[0+t]+=e[2+t];e[2+t]=-e[2+t]}}));return e};const wf={rect:{args:(e,t,n,s)=>{const r=_i(...[e,t,n,s].flat()).slice(0,4);switch(r.length){case 0:case 1:case 2:case 3:return xf([,,...r]);default:return xf(r)}},methods:{origin:Af,setOrigin:Af,center:Af,setCenter:Af,size:Mf,setSize:Mf,...Fi,...tf,...zi}}};const kf={style:{init:e=>{const t=ia().document.createElementNS(fa,"style");t.setAttribute("type","text/css");t.textContent="";t.appendChild(ai(e));return t},methods:{setTextContent:(e,t)=>{e.textContent="";e.appendChild(ai(t));return e}}}};const Of={text:{args:(e,t,n)=>_i(...[e,t,n].flat()).slice(0,2),init:(e,t,n,s)=>{const r=ia().document.createElementNS(fa,"text");const c=[e,t,n,s].filter((e=>typeof e===Uo)).shift();r.appendChild(ia().document.createTextNode(c||""));return r},methods:{...Fi,...tf,appendTo:Ti,setAttributes:Ni}}};const jf=function(){return Array.from(arguments).filter((e=>typeof e===Uo||e instanceof String)).shift()||Wi()};const Ff=(...e)=>[jf(...e)];const Sf={mask:{args:Ff,methods:{...Fi,...tf,...zi}},clipPath:{args:Ff,methods:{...Fi,...tf,...zi}},symbol:{args:Ff,methods:{...Fi,...tf,...zi}},marker:{args:Ff,methods:{size:bi,setViewBox:bi,...Fi,...tf,...zi}}};const Cf=e=>{const t=e.getAttribute(Zo);return t==null?"":t};const Vf=function(){return Array.from(Array(Math.floor(arguments.length/2))).map(((e,t)=>`${arguments[t*2+0]},${arguments[t*2+1]}`)).join(" ")};const Pf=(...e)=>[Vf(..._i(...uf(...e)))];const Tf=(e,...t)=>{e.setAttribute(Zo,Pf(...t)[0]);return e};const Nf=(e,...t)=>{e.setAttribute(Zo,[Cf(e),Pf(...t)[0]].filter((e=>e!=="")).join(" "));return e};const zf=function(...e){return e.length===1&&typeof e[0]===Uo?[e[0]]:Pf(...e)};const Bf={polyline:{args:zf,methods:{setPoints:Tf,addPoint:Nf,...Fi,...tf,...zi}},polygon:{args:zf,methods:{setPoints:Tf,addPoint:Nf,...Fi,...tf,...zi}}};const $f=(e,t,n,s,r,c=false)=>{if(r==null){return""}const o=Ba(s,n);const a=Ba(r,n);const i=[a[0]-o[0],a[1]-o[1]];const f=o[0]*a[1]-o[1]*a[0];const l=o[0]*a[0]+o[1]*a[1];const d=Math.atan2(f,l)>0?0:1;let u=c?`M ${e},${t} l ${o[0]},${o[1]} `:`M ${e+o[0]},${t+o[1]} `;u+=["a ",n,n,0,d,1,i[0],i[1]].join(" ");if(c){u+=" Z"}return u};const Rf=(e,t,n,s,r)=>[$f(e,t,n,s,r,false)];const Lf={arc:{nodeName:qo,attributes:["d"],args:Rf,methods:{setArc:(e,...t)=>e.setAttribute("d",Rf(...t)),...Fi}}};const If=[na,ta];const Uf=e=>e.join(",");const Qf=e=>"M"+e.map((e=>e.join(","))).join("L")+"Z";const Df=function(e){let t=[[0,1],[2,3]].map((t=>t.map((t=>e.points[t]||0))));let n=Ca(t[1],t[0]);let s=Sa(t[0],Va(n,.5));const r=Ta(n);const c=If.map((t=>e[t].visible?(1+e[t].padding)*e[t].height*2.5:0)).reduce(((e,t)=>e+t),0);if(r<c){const e=r===0?[c,0]:Va(n,c/r);t=[Ca,Sa].map((t=>t(s,Va(e,.5))));n=Ca(t[1],t[0])}let o=[n[1],-n[0]];let a=Sa(s,Va(o,e.bend));const i=t.map((e=>Ca(a,e)));const f=i.map((e=>Ta(e)));const l=i.map(((e,t)=>f[t]===0?e:Va(e,1/f[t])));const d=l.map((e=>Va(e,-1)));const u=d.map((e=>[e[1],-e[0]]));const m=If.map(((t,n)=>e[t].padding?e[t].padding:e.padding?e.padding:0));const g=If.map(((t,n)=>e[t].height*(e[t].visible?1:0))).map(((e,t)=>e+m[t]));const p=t.map(((e,t)=>Sa(e,Va(l[t],g[t]))));n=Ca(p[1],p[0]);o=[n[1],-n[0]];s=Sa(p[0],Va(n,.5));a=Sa(s,Va(o,e.bend));const _=p.map(((t,n)=>Sa(t,Va(Ca(a,t),e.pinch))));const h=If.map(((t,n)=>[Sa(p[n],Va(d[n],e[t].height)),Sa(p[n],Va(u[n],e[t].width/2)),Sa(p[n],Va(u[n],-e[t].width/2))]));return{line:`M${Uf(p[0])}C${Uf(_[0])},${Uf(_[1])},${Uf(p[1])}`,tail:Qf(h[0]),head:Qf(h[1])}};const qf=(e,t,n)=>{if(typeof t===Lo){e.options[n].visible=t}else if(typeof t===Qo){Object.assign(e.options[n],t);if(t.visible==null){e.options[n].visible=true}}else if(t==null){e.options[n].visible=true}};const Wf=(e,t={},n=ta)=>{const s=e.getElementsByClassName(`${ea}-${n}`)[0];Object.keys(t).map((e=>({key:e,fn:s[Si(e)]}))).filter((e=>typeof e.fn===$o&&e.key!=="class")).forEach((e=>e.fn(t[e.key])));Object.keys(t).filter((e=>e==="class")).forEach((e=>s.classList.add(t[e])))};const Gf=e=>{const t=Df(e.options);Object.keys(t).map((t=>({path:t,element:e.getElementsByClassName(`${ea}-${t}`)[0]}))).filter((e=>e.element)).map((e=>{e.element.setAttribute("d",t[e.path]);return e})).filter((t=>e.options[t.path])).forEach((t=>t.element.setAttribute("visibility",e.options[t.path].visible?"visible":"hidden")));return e};const Hf=(e,...t)=>{e.options.points=_i(...uf(...t)).slice(0,4);return Gf(e)};const Jf=(e,t)=>{e.options.bend=t;return Gf(e)};const Zf=(e,t)=>{e.options.pinch=t;return Gf(e)};const Yf=(e,t)=>{e.options.padding=t;return Gf(e)};const Xf=(e,t)=>{qf(e,t,ta);Wf(e,t,ta);return Gf(e)};const Kf=(e,t)=>{qf(e,t,na);Wf(e,t,na);return Gf(e)};const el=e=>e.getElementsByClassName(`${ea}-line`)[0];const tl=e=>e.getElementsByClassName(`${ea}-${ta}`)[0];const nl=e=>e.getElementsByClassName(`${ea}-${na}`)[0];const sl={setPoints:Hf,points:Hf,bend:Jf,pinch:Zf,padding:Yf,head:Xf,tail:Kf,getLine:el,getHead:tl,getTail:nl,...Fi};const rl=()=>({visible:false,width:8,height:10,padding:0});const cl=()=>({head:rl(),tail:rl(),bend:0,padding:0,pinch:.618,points:[]});const ol=Object.keys(cl());const al=(...e)=>{for(let t=0;t<e.length;t+=1){if(typeof e[t]!==Qo){continue}const n=Object.keys(e[t]);for(let s=0;s<n.length;s+=1){if(ol.includes(n[s])){return e[t]}}}return undefined};const il=function(...e){const t=ia().document.createElementNS(fa,"g");t.setAttribute(Bo,ea);const n=["line",na,ta].map((e=>{const n=ia().document.createElementNS(fa,qo);n.setAttribute(Bo,`${ea}-${e}`);t.appendChild(n);return n}));n[0].setAttribute(Go,"fill:none;");n[1].setAttribute(Yo,Ko);n[2].setAttribute(Yo,Ko);t.options=cl();sl.setPoints(t,...e);const s=al(...e);if(s){Object.keys(s).filter((e=>sl[e])).forEach((e=>sl[e](t,s[e])))}return t};const fl={arrow:{nodeName:"g",attributes:[],args:()=>[],methods:sl,init:il}};const ll=(e=[],t=0,n=.5)=>{const s=[e[0]||0,e[1]||0];const r=[e[2]||0,e[3]||0];const c=Ca(r,s);const o=Sa(s,Va(c,.5));const a=[c[1],-c[0]];const i=Sa(o,Va(a,t));const f=Sa(s,Va(Ca(i,s),n));const l=Sa(r,Va(Ca(i,r),n));return`M${s[0]},${s[1]}C${f[0]},${f[1]} ${l[0]},${l[1]} ${r[0]},${r[1]}`};const dl=(...e)=>[ll(_i(...e.flat()))];const ul=e=>e.slice(1).split(/[, ]+/).map((e=>parseFloat(e)));const ml=e=>e.match(/[Cc][(0-9), .-]+/).map((e=>ul(e)));const gl=e=>e.match(/[Mm][(0-9), .-]+/).map((e=>ul(e)));const pl=e=>{const t=gl(e).shift();const n=ml(e).shift();const s=t?[t[t.length-2],t[t.length-1]]:[0,0];const r=n?[n[n.length-2],n[n.length-1]]:[0,0];return[...s,...r]};const _l=(e,...t)=>{const n=_i(...t.flat()).slice(0,4);e.setAttribute("d",ll(n,e._bend,e._pinch));return e};const hl=(e,t)=>{e._bend=t;return _l(e,...pl(e.getAttribute("d")))};const vl=(e,t)=>{e._pinch=t;return _l(e,...pl(e.getAttribute("d")))};const bl={setPoints:_l,bend:hl,pinch:vl,...Fi};const yl={curve:{nodeName:qo,attributes:["d"],args:dl,methods:bl}};const El=(e,t,n,s,r)=>[$f(e,t,n,s,r,true)];const Ml={wedge:{nodeName:qo,args:El,attributes:["d"],methods:{setArc:(e,...t)=>e.setAttribute("d",El(...t)),...Fi}}};const Al={};const xl=(e,...t)=>{const n=ia().document.createElementNS(fa,"g");Al.ear.convert.foldToSvg.render(e,n,...t);return n};const wl={...Fi,...tf,...zi};const kl={origami:{nodeName:"g",init:xl,args:()=>[],methods:wl}};const Ol={...Ki,...nf,...of,...lf,...pf,...Ef,...wf,...kf,...Of,...Sf,...Bf,...Lf,...fl,...yl,...Ml,...kl};const jl=(...e)=>e;const Fl=(e,t,...n)=>{const s=Ol[e]&&Ol[e].nodeName?Ol[e].nodeName:e;const{init:r,args:c,methods:o}=Ol[e]||{};const a=ua[s]||[];const i=_a[s]||[];const f=r?r(...n):ia().document.createElementNS(fa,s);if(t){t.appendChild(f)}const l=c||jl;l(...n).forEach(((e,t)=>{f.setAttribute(ua[s][t],e)}));if(o){Object.keys(o).forEach((e=>Object.defineProperty(f,e,{value:function(){return o[e](f,...arguments)}})))}a.forEach((e=>{const t=Si(e);if(f[t]){return}Object.defineProperty(f,t,{value:function(){f.setAttribute(e,...arguments);return f}})}));i.forEach((e=>{if(f[e]){return}const t=function(){return Fl(e,f,...arguments)};Object.defineProperty(f,e,{value:t})}));return f};const Sl=(...e)=>{const t=Fl(Do,null,...e);const n=()=>e.filter((e=>typeof e===$o)).forEach((e=>e.call(t,t)));if(ia().document.readyState==="loading"){ia().document.addEventListener("DOMContentLoaded",n)}else{n()}return t};Object.assign(Sl,{NS:fa,nodes_attributes:ua,nodes_children:_a,extensions:Ol,...Fa,...xi});ha.forEach((e=>{Sl[e]=(...t)=>Fl(e,null,...t)}));Object.defineProperty(Sl,"window",{enumerable:false,set:aa});const Cl=e=>[e.min,e.span].flatMap((e=>[e[0],e[1]])).join(" ");const Vl=e=>{const t=po(e);return t===undefined?"":Cl(t)};const Pl=({vertices_coords:e,edges_vertices:t,edges_length:n},s=.1)=>{if(!e||!t){return undefined}if(!n){n=Rs({vertices_coords:e,edges_vertices:t})}const r=n.slice().sort(((e,t)=>e-t));const c=Math.max(0,Math.min(Math.floor(r.length*s),r.length-1));return r[c]};const Tl={min:[0,0],span:[1,1]};const Nl=1/100;const zl=(e,{vmax:t}={})=>{if(!t){const n=po(e)||Tl;t=Math.max(...n.span)}const n=Pl(e,.1);return n?n*Nl*10:t*Nl};const Bl=(e,t={})=>{const n=t&&t.vertices?t.vertices:{};const s=Sl.g();if(!e||!e.vertices_coords){return s}e.vertices_coords.map((e=>Sl.circle(e[0],e[1],.01))).forEach((e=>s.appendChild(e)));s.setAttributeNS(null,"fill","none");Object.keys(n).forEach((e=>s.setAttributeNS(null,e,n[e])));return s};const $l={B:"black",M:"crimson",V:"royalblue",F:"lightgray",J:"gold",C:"limegreen",U:"orchid"};Object.keys($l).forEach((e=>{$l[e.toLowerCase()]=$l[e]}));const Rl=4;const Ll={M:[1,0,0],V:[0,0,1],J:[1,1,0],U:[1,0,1],C:[0,1,0]};const Il=(e=0,t=0,n=0)=>{const s=M([e,t,n],1/255);const r=p(s);if(r<.05){return"B"}const c=s.reduce(((e,t)=>e+t),0)/3;const o=U(s,[c,c,c]);const a=Object.keys(Ll).map((e=>({key:e,dist:U(s,Ll[e])}))).sort(((e,t)=>e.dist-t.dist)).shift();if(a.dist<o*Rl){return a.key}return r<.1?"B":"F"};const Ul=Object.freeze({__proto__:null,assignmentColor:$l,rgbToAssignment:Il});const Ql={};const Dl={stroke:"black"};const ql={};const Wl={};Object.keys($l).forEach((e=>{Wl[e]={stroke:$l[e]}}));const Gl=(e,t,n)=>e.setAttribute(`data-${t}`,n);const Hl=e=>{const t={u:[],c:[],j:[],f:[],v:[],m:[],b:[]};const n=e.edges_assignment.map((e=>e.toLowerCase()));e.edges_vertices.map(((e,t)=>n[t]||"u")).forEach(((e,n)=>t[e].push(n)));return t};const Jl=({vertices_coords:e,edges_vertices:t})=>{if(!e||!t){return[]}return t.map((t=>t.map((t=>e[t]))))};const Zl=e=>`M${e[0][0]} ${e[0][1]}L${e[1][0]} ${e[1][1]}`;const Yl=e=>Jl(e).map((e=>Zl(e))).join("");const Xl=({vertices_coords:e,edges_vertices:t,edges_assignment:n})=>{if(!e||!t){return{}}if(!n){return{u:Yl({vertices_coords:e,edges_vertices:t})}}const s=Hl({vertices_coords:e,edges_vertices:t,edges_assignment:n});Object.keys(s).forEach((n=>{s[n]=Yl({vertices_coords:e,edges_vertices:s[n].map((e=>t[e]))})}));Object.keys(s).forEach((e=>{if(s[e]===""){delete s[e]}}));return s};const Kl=({vertices_coords:e,edges_vertices:t,edges_assignment:n})=>{const s=Xl({vertices_coords:e,edges_vertices:t,edges_assignment:n});Object.keys(s).forEach((e=>{const t=Sl.path(s[e]);Ka(t,Et[e]);s[e]=t}));return s};const ed=(e,t={})=>Object.keys(t).forEach((n=>e.setAttributeNS(null,n,t[n])));const td=(e,t={})=>{const n=t&&t.edges?t.edges:{};const s=Sl.g();if(!e){return s}const r=zt(e);const c=JSON.parse(JSON.stringify(r?Ql:Dl));const o=JSON.parse(JSON.stringify(r?ql:Wl));const a={};if(n.stroke){a.stroke=n.stroke}Object.assign(c,a);Object.keys(o).forEach((e=>{o[e]={...o[e],...a}}));const i=Kl(e);Object.keys(i).forEach((e=>{Ka(i[e],Et[e]);ed(i[e],o[e]);ed(i[e],n[e]);ed(i[e],n[Et[e]]);s.appendChild(i[e]);Object.defineProperty(s,Et[e],{get:()=>i[e]})}));ed(s,c);Object.keys(i).forEach((e=>Gl(i[e],"assignment",e)));Object.keys(i).forEach((e=>Gl(i[e],"foldAngle",Mt[e])));return s};const nd=e=>Math.abs(e)/180;const sd=(e,t={})=>{const n=t&&t.edges?t.edges:{};const s=Sl.g();if(!e){return s}const r=zt(e);const c=JSON.parse(JSON.stringify(r?Ql:Dl));const o=JSON.parse(JSON.stringify(r?ql:Wl));const a={};if(n.stroke){a.stroke=n.stroke}Object.assign(c,a);yt.forEach((e=>{if(o[e]===undefined){o[e]={}}o[e]={...o[e],...a}}));const i={};Array.from(new Set(yt.map((e=>e.toLowerCase())))).forEach((e=>{const t=Sl.g();s.appendChild(t);Ka(t,Et[e]);ed(t,o[e]);ed(t,n[Et[e]]);Object.defineProperty(s,Et[e],{get:()=>t});i[e]=t}));const f=e.edges_vertices.map((t=>t.map((t=>e.vertices_coords[t])))).map((e=>Sl.line(e[0][0],e[0][1],e[1][0],e[1][1])));if(e.edges_foldAngle){e.edges_foldAngle.forEach(((e,t)=>Gl(f[t],"foldAngle",e)))}if(e.edges_assignment){e.edges_assignment.forEach(((e,t)=>Gl(f[t],"assignment",e)))}if(e.edges_foldAngle){f.forEach(((t,n)=>{const s=e.edges_foldAngle[n];if(s===0||s===180||s===-180){return}t.setAttributeNS(null,"opacity",nd(s))}))}const l=(e.edges_assignment?e.edges_assignment:Ts(e)).map((e=>e.toLowerCase()));f.forEach(((e,t)=>i[l[t]].appendChild(e)));ed(s,c);return s};const rd=(e,t)=>jt(e)?td(e,t):sd(e,t);const cd=e=>e.map((e=>e[0]*e[4]-e[1]*e[3])).map((e=>e>=0));const od=e=>e.map((e=>e[0]*e[3]-e[1]*e[2])).map((e=>e>=0));const ad=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])).map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>(e[1][0]-e[0][0])*(e[1][1]+e[0][1]))).reduce(((e,t)=>e+t),0))).map((e=>e<0));const id=Object.freeze({__proto__:null,makeFacesWinding:ad,makeFacesWindingFromMatrix:cd,makeFacesWindingFromMatrix2:od});const fd=e=>{const t=an(e.flat());const n=[];t.forEach((e=>{n[e]=[]}));e.forEach((e=>{n[e[1]].push(e[0])}));const s=[];const r={};const c=e=>{if(r[e]){return}r[e]=true;n[e].forEach(c);s.push(e)};t.forEach(c);return s};const ld=Object.freeze({__proto__:null,topologicalSort:fd});const dd=(e,t)=>{const n={};t.forEach((e=>{n[e]=true}));return e.filter((e=>n[e[0]]&&n[e[1]]))};const ud=({faceOrders:e,faces_normal:t},n)=>{if(!e||!e.length){return[]}if(!t){throw new Error("linearizeFaceOrders: faces_normal required")}const s=an(e.flatMap((e=>[e[0],e[1]])));const r=n!==undefined&&s.includes(n)?t[n]:t[s[0]];const c=[];s.forEach((e=>{c[e]=F(t[e],r)>0}));const o=e.map((e=>e[2]===-1^!c[e[1]]?[e[0],e[1]]:[e[1],e[0]]));return fd(o)};const md=({faces_vertices:e},t)=>{if(!e){return t}const n=e.map(((e,t)=>t)).filter((e=>t[e]==null));return n.concat(ar(t))};const gd=({vertices_coords:e,faces_vertices:t,faceOrders:n,faces_layer:s,faces_normal:r},c)=>{if(!r){r=ms({vertices_coords:e,faces_vertices:t})}if(n){return md({faces_vertices:t},ar(ud({faceOrders:n,faces_normal:r},c)))}if(s){return md({faces_vertices:t},s)}return t.map(((e,t)=>t)).filter((()=>true))};const pd=({vertices_coords:e,faces_vertices:t,faceOrders:n,faces_normal:s})=>{if(!s){s=ms({vertices_coords:e,faces_vertices:t})}const r=io(Es({edges_vertices:n.map((e=>[e[0],e[1]]))}));const c=ir(r);const o=c.map((e=>dd(n,e))).map((e=>ud({faceOrders:e,faces_normal:s})));const a=c.map((e=>s[e[0]]));const i=[];o.forEach(((e,t)=>e.forEach(((e,n)=>{i[e]={vector:a[t],layer:n}}))));return i};const _d=({faces_layer:e})=>{const t=[];const n=ar(e);n.forEach(((e,n)=>{t[e]={vector:[0,0,1],layer:n}}));return t};const hd=({vertices_coords:e,faces_vertices:t,faceOrders:n,faces_normal:s})=>{if(!s){s=ms({vertices_coords:e,faces_vertices:t})}return ar(ud({faceOrders:n,faces_normal:s}))};const vd=Object.freeze({__proto__:null,faceOrdersSubset:dd,linearize2DFaces:gd,linearizeFaceOrders:ud,makeFacesLayer:hd,nudgeFacesWithFaceOrders:pd,nudgeFacesWithFacesLayer:_d});const bd={back:{fill:"white"},front:{fill:"#ddd"}};const yd={back:{opacity:.1},front:{opacity:.1}};const Ed={};const Md={stroke:"black","stroke-linejoin":"bevel"};const Ad={stroke:"none",fill:"black","stroke-linejoin":"bevel"};const xd={fill:"none"};const wd=(e,t,n)=>e.setAttribute(`data-${t}`,n);const kd=(e,t={})=>Object.keys(t).forEach((n=>e.setAttributeNS(null,n,t[n])));const Od=(e,t,n,s={})=>{const r=s&&s.faces?s.faces:{};const c=zt(e);const o=!!(e.faceOrders||e.faces_layer);const a=[["front"],["back"]];const i=ad(e);i.map((e=>e?a[0]:a[1])).forEach(((e,n)=>{Ka(t[n],e);wd(t[n],"side",e);kd(t[n],c?o?bd[e]:yd[e]:Ed[e]);kd(t[n],r[e])}));gd(e).forEach((e=>n.appendChild(t[e])));Object.defineProperty(n,"front",{get:()=>t.filter(((e,t)=>i[t]))});Object.defineProperty(n,"back",{get:()=>t.filter(((e,t)=>!i[t]))});kd(n,c?o?Md:Ad:xd);return n};const jd=(e,t)=>{const n=Sl.g();if(!e||!e.vertices_coords||!e.faces_vertices){return n}const s=e.faces_vertices.map((t=>t.map((t=>[0,1].map((n=>e.vertices_coords[t][n])))))).map((e=>Sl.polygon(e)));s.forEach(((e,t)=>e.setAttributeNS(null,"index",t)));n.setAttributeNS(null,"fill","white");return Od(e,s,n,t)};const Fd=function(e,t){const n=Sl.g();if(!e||"faces_edges"in e===false||"edges_vertices"in e===false||"vertices_coords"in e===false){return n}const s=e["faces_edges"].map((t=>t.map((t=>e["edges_vertices"][t])).map(((e,t,n)=>{const s=n[(t+1)%n.length];return e[1]===s[0]||e[1]===s[1]?e[0]:e[1]})).map((t=>[0,1].map((n=>e["vertices_coords"][t][n])))))).map((e=>Sl.polygon(e)));s.forEach(((e,t)=>e.setAttributeNS(null,"index",t)));n.setAttributeNS(null,"fill","white");return Od(e,s,n,t)};const Sd=(e,t)=>{if(e&&e["faces_vertices"]){return jd(e,t)}if(e&&e["faces_edges"]){return Fd(e,t)}return Sl.g()};const Cd={fill:"none"};const Vd={stroke:"black",fill:"white"};const Pd=(e,t={})=>Object.keys(t).forEach((n=>e.setAttributeNS(null,n,t[n])));const Td=(e,t={})=>{const n=t&&t.boundaries?t.boundaries:{};const s=Sl.g();if(!e){return s}const r=vo(e).polygon;if(!r.length){return s}const c=Sl.polygon(r);Ka(c,"boundary");s.appendChild(c);Pd(s,zt(e)?Cd:Vd);Object.keys(n).forEach((e=>s.setAttributeNS(null,e,n[e])));return s};const Nd={vertices:Bl,edges:rd,faces:Sd,boundaries:Td,edgesPaths:td,edgesLines:sd,facesVerticesPolygon:jd,facesEdgesPolygon:Fd};const zd=1/50;const Bd={min:[0,0],span:[1,1]};const $d=["boundaries","faces","edges","vertices"];const Rd=(e,t)=>{for(let n=0;n<e.childNodes.length;n+=1){e.childNodes[n].setAttributeNS(null,"r",t)}};const Ld=(e,t,n,s)=>{const r=t[3]&&t[3].childNodes.length;if(!(s.strokeWidth||s.viewBox||r)){return}const c=po(n)||Bd;const o=Math.max(...c.span);const a=Ya(e,"svg");if(a&&s.viewBox){const e=Cl(c);a.setAttributeNS(null,"viewBox",e)}if(a&&s.padding){const e=a.getAttribute("viewBox");if(e!=null){const t=s.padding*o;const n=e.split(" ").map((e=>parseFloat(e)));const r=[-t,-t,t*2,t*2].map(((e,t)=>n[t]+e)).join(" ");a.setAttributeNS(null,"viewBox",r)}}if(s.strokeWidth||s["stroke-width"]){const t=s.strokeWidth?s.strokeWidth:s["stroke-width"];const r=typeof t==="number"?o*t:zl(n);e.setAttributeNS(null,"stroke-width",r)}if(r){const e=s.vertices&&s.vertices.radius!=null?s.vertices.radius:s.radius;const n=typeof e==="string"?parseFloat(e):e;const r=typeof n==="number"&&!Number.isNaN(n)?o*n:o*zd;Rd(t[3],r)}};const Id=(e,t={})=>$d.map((n=>t[n]===false?Sl.g():Nd[n](e,t))).map(((e,t)=>{Ka(e,$d[t]);return e}));const Ud=(e,t,n={})=>{if(!zt(e)){if(n.faces===undefined){n.faces=false}}const s=Id(e,n);s.filter((e=>e.childNodes.length>0)).forEach((e=>t.appendChild(e)));Ld(t,s,e,n);Ka(t,...[e.file_classes||[],e.frame_classes||[]].flat());return t};const Qd=(e,t={})=>{const n=Ud(typeof e==="string"?JSON.parse(e):e,Sl.svg(),{viewBox:true,strokeWidth:true,...t});return t&&t.string?(new(o().XMLSerializer)).serializeToString(n):n};Object.assign(Qd,{...Nd,render:Ud,getViewBox:Vl,getStrokeWidth:zl,boundingBoxToViewBox:Cl});const Dd=e=>{const t=["file_title","file_author","file_description","frame_title","frame_author","frame_description"];return t.filter((t=>e[t])).map((t=>`# ${t.split("_")[1]}: ${e[t]}`)).join("\n")};const qd=e=>{const t=typeof e==="string"?JSON.parse(e):e;const n=Dd(t);const s=(t.vertices_coords||[]).map((e=>e.join(" "))).map((e=>`v ${e}`)).join("\n");const r=(t.faces_vertices||[]).map((e=>e.map((e=>e+1)).join(" "))).map((e=>`f ${e}`)).join("\n");const c=[n,s,r].filter((e=>e!=="")).join("\n");return`${c}\n`};const Wd={};Wd.prototype=Object.create(Object.prototype);Wd.prototype.constructor=Wd;Object.entries({clean:ur,validate:ao,populate:Ac,subgraph:no,boundary:vo,boundingBox:po,nearest:Qr,splitEdge:Pc,splitFace:Kc,invertAssignments:Ut,svg:Qd,obj:qd,...pr,...Yt}).forEach((([e,t])=>{Wd.prototype[e]=function(){return t(this,...arguments)}}));Wd.prototype.clone=function(){return Object.assign(Object.create(Object.getPrototypeOf(this)),zo(this))};Wd.prototype.folded=function(){const e=this.faces_matrix2?Oo(this,this.faces_matrix2):Vo(this,...arguments);return{...this,vertices_coords:e,frame_classes:["foldedForm"]}};Wd.prototype.flatFolded=function(){const e=this.faces_matrix2?Oo(this,this.faces_matrix2):Po(this,...arguments);return{...this,vertices_coords:e,frame_classes:["foldedForm"]}};const Gd=(e,t,n,s)=>{t.forEach((t=>{e.edges_assignment[t]=n;e.edges_foldAngle[t]=s}));return t};Wd.prototype.setValley=function(e=[],t=180){return Gd(this,e,"V",Math.abs(t))};Wd.prototype.setMountain=function(e=[],t=-180){return Gd(this,e,"M",-Math.abs(t))};Wd.prototype.setFlat=function(e=[]){return Gd(this,e,"F",0)};Wd.prototype.setUnassigned=function(e=[]){return Gd(this,e,"U",0)};Wd.prototype.setCut=function(e=[]){return Gd(this,e,"C",0)};const Hd=Wd.prototype;const Jd=({vector:e,origin:t},{min:n,max:s,span:r})=>eu();const Zd=(e,t,n,s,r=lt,c=a)=>{const o=$(v(e),v(n));if(Math.abs(o)<c){return undefined}const i=$(e,n);const f=-i;const l=O(s,t);const d=Q(l);const u=$(l,n)/i;const m=$(d,e)/f;if(r(m,c/g(n))){return u}return undefined};const Yd=(e,t,n)=>x(t,E(e,n));const Xd=(e,t,n,s,r)=>e.map(((e,t,n)=>[O(n[(t+1)%n.length],e),e])).map((e=>Zd(t,n,e[0],e[1],s,r))).filter((e=>e!==undefined)).sort(((e,t)=>e-t));const Kd=(e,t,n)=>{let s=0;let r=e.length-1;while(s<r){if(t(e[s+1]-e[s],n)){break}s+=1}while(r>s){if(t(e[r]-e[r-1],n)){break}r-=1}if(s>=r){return undefined}return[e[s],e[r]]};const eu=(e,{vector:t,origin:n},s=rt,r=ot,c=a)=>{const o=Xd(e,t,n,lt,c);if(o.length<2){return undefined}const i=c*2/g(t);const f=Kd(o,s,i);if(f===undefined){return undefined}const l=e=>{if(r(e)){return e}return e<.5?0:1};const d=f.map(l);if(Math.abs(d[0]-d[1])<c*2/g(t)){return undefined}const u=Yd(t,n,(d[0]+d[1])/2);return Pr(e,u,s,c)?d.map((e=>Yd(t,n,e))):undefined};const tu=(e,t,n=a)=>{const s=(e,t,s)=>(s[0]-t[0])*(e[1]-t[1])>(s[1]-t[1])*(e[0]-t[0])+n;const r=(e,t,n,s)=>{const r=O(e,t);const c=O(s,n);const o=$(e,t);const a=$(s,n);const i=1/$(r,c);return E(O(E(c,o),E(r,a)),i)};let c=e;let o=t[t.length-1];for(let e=0;e<t.length;e+=1){const n=t[e];const a=c;c=[];let i=a[a.length-1];for(let e=0;e<a.length;e+=1){const t=a[e];if(s(t,o,n)){if(!s(i,o,n)){c.push(r(o,n,t,i))}c.push(t)}else if(s(i,o,n)){c.push(r(o,n,t,i))}i=t}o=n}return c.length===0?undefined:c};const nu=Object.freeze({__proto__:null,clipLineConvexPolygon:eu,clipLineInBoundingBox:Jd,clipPolygonPolygon:tu});const su=(e,{vector:t,origin:n},s)=>{if(e.length<2){return e}const r=e.map((e=>O(e[1],e[0]))).map((e=>S(e,t)<s));e.map(((e,t)=>t)).filter((e=>r[e])).forEach((t=>{e[t]=[e[t][1],e[t][0]]}));const c=v(t);const o=e.map((e=>e.map((e=>S(O(e,n),c))))).sort(((e,t)=>e[0]-t[0]));const a=[[o[0][0],o[0][1]]];for(let e=1;e<o.length;e+=1){const t=o[e];if(t[0]-s<a[a.length-1][1]+s){a[a.length-1][1]=Math.max(t[1],a[a.length-1][1])}else{a.push([t])}}return a.map((e=>e.map((e=>x(n,E(c,e))))))};const ru=(e,t,n,s=ot,r=a)=>{const c=t.map((t=>e.faces_vertices[t].map((t=>e.vertices_coords[t])))).map((e=>eu(e,n,rt,s,r))).filter((e=>e!==undefined));return su(c,n,r)};const cu=(e,t,n=a)=>{const s=Hc(e,t,n);return ru(e,s,t,ot,n)};const ou=(e,t,n=a)=>{const s=Jc(e,t,n);return ru(e,s,t,it,n)};const au=(e,t,n=a)=>{const s=O(t[1],t[0]);const r=t[0];const c=Zc(e,t,n);return ru(e,c,{vector:s,origin:r},lt,n)};const iu=Object.freeze({__proto__:null,clipLine:cu,clipRay:ou,clipSegment:au});const fu=({vertices_coords:e},{vector:t,origin:n},s=a)=>{const r=h(t);const c=e=>{const t=k(e,n);const c=m(t);if(Math.abs(c)<s){return true}const o=t.map((e=>e/c));const a=Math.abs(F(o,r));return Math.abs(1-a)<s};return e.map(c).map(((e,t)=>({a:e,i:t}))).filter((e=>e.a)).map((e=>e.i))};const lu=Object.freeze({__proto__:null,getVerticesCollinearToLine:fu});const du=({vertices_coords:e,edges_vertices:t,vertices_edges:n},{vector:s,origin:r},c=a)=>{if(!n){n=_s({edges_vertices:t})}const o=fu({vertices_coords:e},{vector:s,origin:r},c);const i=t.map((()=>0));o.forEach((e=>n[e].forEach((e=>{i[e]+=1}))));return i.map(((e,t)=>({count:e,i:t}))).filter((e=>e.count===2)).map((e=>e.i))};const uu=({vertices_coords:e,edges_vertices:t},{min:n,max:s},r=a)=>{const c=Bs({vertices_coords:e,edges_vertices:t});const o=n.map((e=>e-r));const i=s.map((e=>e+r));return t.map(((e,t)=>t)).filter((e=>!(c[e][0][0]<o[0]&&c[e][1][0]<o[0]))).filter((e=>!(c[e][0][0]>i[0]&&c[e][1][0]>i[0]))).filter((e=>!(c[e][0][1]<o[1]&&c[e][1][1]<o[1]))).filter((e=>!(c[e][0][1]>i[1]&&c[e][1][1]>i[1])))};const mu=({vertices_coords:e,edges_vertices:t},n,s,r=a)=>{const c=Ke([n,s]);const o=O(s,n);const i={vector:o,origin:n};const f=uu({vertices_coords:e,edges_vertices:t},c,r);const l=[];f.forEach((n=>{const s=t[n].map((t=>e[t]));const c=O(s[1],s[0]);const o={vector:c,origin:s[0]};const a=qr(i,o,lt,lt,r).point;if(!a){return}l[n]=a}));return l};const gu=({vertices_coords:e,edges_vertices:t},{vector:n,origin:s},r=a,c=lt)=>t.map((t=>{const o=t.map((t=>e[t]));const a=O(o[1],o[0]);const i={vector:a,origin:o[0]};return qr({vector:n,origin:s},i,ot,c,r).point}));const pu=Object.freeze({__proto__:null,getEdgesCollinearToLine:du,getEdgesLineIntersection:gu,getEdgesRectOverlap:uu,getEdgesSegmentIntersection:mu});const _u=(e,t,n=a)=>{if(!e.vertices_coords){e.vertices_coords=[]}if(typeof t[0]==="number"){t=[t]}const s=t.map((t=>e.vertices_coords.map((e=>L(e,t)<n)).map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined)).shift()));let r=e.vertices_coords.length;const c=t.filter(((e,t)=>s[t]===undefined));e.vertices_coords.push(...c);return s.map((e=>e===undefined?r++:e))};const hu=(e,t,n)=>{const s=Array.from(Array(t.length-1)).map(((e,n)=>[t[n],t[n+1]]));const r=s.map((e=>e.join(" "))).map((e=>n[e]===undefined));const c=s.filter(((e,t)=>r[t]));const o=Array.from(Array(c.length)).map(((t,n)=>e.edges_vertices.length+n));o.forEach(((t,n)=>{e.edges_vertices[t]=c[n]}));if(e.edges_assignment){o.forEach((t=>{e.edges_assignment[t]="U"}))}if(e.edges_foldAngle){o.forEach((t=>{e.edges_foldAngle[t]=0}))}for(let n=0;n<t.length;n+=1){const s=t[n];const c=r[n-1]?t[n-1]:undefined;const o=r[n]?t[n+1]:undefined;const a=[c,o].filter((e=>e!==undefined));const i=e.vertices_vertices[s]?e.vertices_vertices[s]:[];const f=i.concat(a);e.vertices_vertices[s]=ls(e,f,t[n])}const a=xs(e);for(let n=0;n<t.length;n+=1){const s=t[n];e.vertices_edges[s]=e.vertices_vertices[s].map((e=>a[`${s} ${e}`]))}t.map((t=>e.vertices_vertices[t].length===1?[l]:Wn(e.vertices_vertices[t].map((n=>O(e.vertices_coords[n],e.vertices_coords[t])))))).forEach(((n,s)=>{e.vertices_sectors[t[s]]=n}));return o};const vu=(e,t,n,s=a)=>{if(!e.vertices_sectors){e.vertices_sectors=js(e)}const r=[t,n].map((e=>[e[0],e[1]]));const c=O(r[1],r[0]);const o=mu(e,r[0],r[1],s);const i=o.map(((e,t)=>t)).filter(ot);const f={};i.forEach((t=>e.edges_faces[t].forEach((e=>{f[e]=true}))));const l=Object.keys(f).map((e=>parseInt(e,10))).sort(((e,t)=>e-t));const d=i.reverse().map((t=>Pc(e,t,o[t],s)));const u=d.map((e=>e.vertex));const m=_u(e,r,s);const g={};u.forEach((e=>{g[e]=true}));m.forEach((e=>{g[e]=true}));const p=Object.keys(g).map((e=>parseInt(e,10)));const _=ds(e,p,c);const h=xs(e);const v=hu(e,_,h);v.forEach((t=>{const n=e.edges_vertices[t];h[`${n[0]} ${n[1]}`]=t;h[`${n[1]} ${n[0]}`]=t}));const b=_.map((t=>e.vertices_vertices[t].map((e=>[[e,t],[t,e]])))).reduce(((e,t)=>e.concat(t)),[]).reduce(((e,t)=>e.concat(t)),[]);const y={};const E=b.map((t=>Kn(e,t[0],t[1],y))).filter((e=>e!==undefined));const M=ts(E);yn(e,"faces",l);const A=M.map(((t,n)=>e.faces_vertices.length+n));if(e.faces_vertices){A.forEach(((t,n)=>{e.faces_vertices[t]=M[n].vertices}))}if(e.faces_edges){A.forEach(((t,n)=>{e.faces_edges[t]=M[n].edges.map((e=>h[e]))}))}if(e.faces_angles){A.forEach(((t,n)=>{e.faces_angles[t]=M[n].faces_angles}))}if(e.vertices_faces){e.vertices_faces=As(e)}if(e.edges_faces){e.edges_faces=Ss(e)}if(e.faces_faces){e.faces_faces=Ds(e)}if(e.vertices_coords.length!==e.vertices_vertices.length||e.vertices_coords.length!==e.vertices_edges.length||e.vertices_coords.length!==e.vertices_faces.length){console.warn("vertices mismatch",JSON.parse(JSON.stringify(e)))}if(e.edges_vertices.length!==e.edges_faces.length||e.edges_vertices.length!==e.edges_assignment.length){console.warn("edges mismatch",JSON.parse(JSON.stringify(e)))}if(e.faces_vertices.length!==e.faces_edges.length||e.faces_vertices.length!==e.faces_faces.length){console.warn("faces mismatch",JSON.parse(JSON.stringify(e)))}return v};const bu=({vertices_vertices:e},t)=>{const n=[t[1],t[0]];t.map(((t,s)=>e[t].indexOf(n[s]))).forEach(((n,s)=>e[t[s]].splice(n,1)))};const yu=({vertices_edges:e},t,n)=>{n.map(((n,s)=>e[n].indexOf(t))).forEach(((t,s)=>e[n[s]].splice(t,1)))};const Eu=(e,t,n,s)=>{const r=t.map((t=>e.faces_edges[t].indexOf(n)));const c=[];t.forEach(((t,n)=>e.faces_vertices[t].forEach(((e,t,r)=>{const o=r[(t+1)%r.length];if(e===s[0]&&o===s[1]||e===s[1]&&o===s[0]){c[n]=t}}))));if(c[0]===undefined||c[1]===undefined){console.warn("removePlanarEdge error joining faces")}const o=t.map((t=>e.faces_edges[t].length));const a=t.map((t=>e.faces_vertices[t].length));const i=o.map((e=>e-1));const f=a.map((e=>e-1));const l=r.map(((e,t)=>(e+1)%o[t]));const d=c.map(((e,t)=>(e+1)%a[t]));const u=t.map(((t,n)=>Array.from(Array(i[n])).map(((e,t)=>(l[n]+t)%o[n])).map((n=>e.faces_edges[t][n]))));const m=t.map(((t,n)=>Array.from(Array(f[n])).map(((e,t)=>(d[n]+t)%a[n])).map((n=>e.faces_vertices[t][n]))));const g=t.map((t=>e.faces_faces[t])).reduce(((e,t)=>e.concat(t)),[]).filter((e=>e!==t[0]&&e!==t[1]));return{vertices:m[0].concat(m[1]),edges:u[0].concat(u[1]),faces:g}};const Mu=(e,t)=>{const n=[...e.edges_vertices[t]].sort(((e,t)=>t-e));const s=[...e.edges_faces[t]];bu(e,n);yu(e,t,n);const r=n.map((t=>e.vertices_vertices[t].length===0));const c=n.filter(((e,t)=>r[t]));if(s.length===2&&s[0]!==s[1]){const r=e.faces_vertices.length;const c=Eu(e,s,t,n);e.faces_vertices.push(c.vertices);e.faces_edges.push(c.edges);e.faces_faces.push(c.faces);e.vertices_faces.forEach(((t,n)=>{let c=false;t.forEach(((o,a)=>{if(o===s[0]||o===s[1]){e.vertices_faces[n][a]=r;const s=c?[n,1]:[n,1,r];t.splice(...s);c=true}}))}));e.edges_faces.forEach(((t,n)=>t.forEach(((t,c)=>{if(t===s[0]||t===s[1]){e.edges_faces[n][c]=r}}))));e.faces_faces.forEach(((t,n)=>t.forEach(((t,c)=>{if(t===s[0]||t===s[1]){e.faces_faces[n][c]=r}}))));e.faces_vertices.forEach((t=>t.forEach((t=>{if(t===undefined){console.log("FOUND ONE before remove",e.faces_vertices)}}))));yn(e,"faces",s)}if(s.length===2&&s[0]===s[1]&&c.length){const n=s[0];e.faces_vertices[n]=e.faces_vertices[n].filter((e=>!c.includes(e))).filter(((e,t,n)=>e!==n[(t+1)%n.length]));e.faces_edges[n]=e.faces_edges[n].filter((e=>e!==t))}yn(e,"edges",[t]);yn(e,"vertices",c)};const Au=(e,t)=>{const n=e.vertices_edges[t];const s=an(e.vertices_faces[t].filter((e=>e!=null)));if(n.length!==2||s.length>2){console.warn("cannot remove non 2-degree vertex yet (e,f)",n,s);return}const r=uc(e,t,n);const c=r.slice().reverse();n.sort(((e,t)=>e-t));r.forEach((t=>{const s=e.vertices_edges[t].indexOf(n[1]);if(s===-1){return}e.vertices_edges[t][s]=n[0]}));r.forEach(((n,s)=>{const r=e.vertices_vertices[n].indexOf(t);if(r===-1){console.warn("removePlanarVertex unknown vertex issue");return}e.vertices_vertices[n][r]=c[s]}));e.edges_vertices[n[0]]=[...r];s.forEach((n=>{const s=e.faces_vertices[n].indexOf(t);if(s===-1){console.warn("removePlanarVertex unknown face_vertex issue");return}e.faces_vertices[n].splice(s,1)}));s.forEach((t=>{const s=e.faces_edges[t].indexOf(n[1]);if(s===-1){console.warn("removePlanarVertex unknown face_edge issue");return}e.faces_edges[t].splice(s,1)}));yn(e,"vertices",[t]);yn(e,"edges",[n[1]])};const xu=e=>[0,1].map((t=>e.filter(((e,n)=>n%2===t)).reduce(((e,t)=>e+t),0)));const wu=e=>{const t=e.reduce(((e,t)=>e+t),0)/2;return xu(e).map((e=>e-t))};const ku=e=>e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>Tn(...e))).map(((e,t,n)=>n.slice(t+1,n.length).concat(n.slice(0,t)))).map((e=>xu(e).map((e=>Math.PI-e)))).map(((t,n)=>e[n]+t[0])).map(((t,n)=>Vn(t,e[n],e[(n+1)%e.length])?t:undefined));const Ou=e=>{const t=e.map((e=>Math.atan2(e[1],e[0])));return ku(t).map((e=>e===undefined?undefined:[Math.cos(e),Math.sin(e)]))};const ju=({vertices_coords:e,vertices_edges:t,edges_assignment:n,edges_vertices:s},r)=>{if(!t){t=_s({edges_vertices:s})}const c=n?t[r].filter((e=>At[n[e]])):t[r];if(c.length%2===0){return[]}const o=c.map((e=>s[e][0]===r?s[e]:[s[e][1],s[e][0]]));const a=o.map((t=>t.map((t=>e[t]))));const i=a.map((e=>O(e[1],e[0])));const f=Dn(i).map((e=>i[e]));const l=Ou(f);const d=f.map(v);const u=l.filter((e=>e!==undefined)).filter((e=>!d.map((t=>S(e,t))).map((e=>Math.abs(1-e)<.001)).reduce(((e,t)=>e||t),false)));return u};const Fu=Object.freeze({__proto__:null,alternatingSum:xu,alternatingSumDifference:wu,kawasakiSolutions:ju,kawasakiSolutionsRadians:ku,kawasakiSolutionsVectors:Ou});const Su=({vertices_edges:e,edges_assignment:t})=>e.map((e=>e.map((e=>!At[t[e]])).reduce(((e,t)=>e&&t),true))).map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined));const Cu=({edges_vertices:e,vertices_edges:t,edges_assignment:n})=>{if(!t){t=_s({edges_vertices:e})}const s=t.map((e=>e.map((e=>Mt[n[e]])).filter((e=>e!==0)).map(Math.sign).reduce(((e,t)=>e+t),0))).map((e=>e===2||e===-2));_o({edges_vertices:e,edges_assignment:n}).forEach((e=>{s[e]=true}));Su({vertices_edges:t,edges_assignment:n}).forEach((e=>{s[e]=true}));return s.map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined))};const Vu=({vertices_coords:e,vertices_vertices:t,vertices_edges:n,edges_vertices:s,edges_assignment:r},c=a)=>{if(!t){t=ys({vertices_coords:e,vertices_edges:n,edges_vertices:s})}if(!n){n=_s({edges_vertices:s})}const o=Os({vertices_coords:e,vertices_vertices:t,edges_vertices:s}).map(((e,t)=>e.filter(((e,s)=>At[r[n[t][s]]])))).map((e=>e.length>1?Wn(e):[0,0])).map((e=>xu(e))).map((e=>Math.abs(e[0]-e[1])<c));_o({edges_vertices:s,edges_assignment:r}).forEach((e=>{o[e]=true}));Su({vertices_edges:n,edges_assignment:r}).forEach((e=>{o[e]=true}));return o.map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined))};const Pu=Object.freeze({__proto__:null,validateKawasaki:Vu,validateMaekawa:Cu});const Tu={};Tu.prototype=Object.create(Hd);Tu.prototype.constructor=Tu;const Nu=function(e){e.valley=t=>this.setValley(e,t);e.mountain=t=>this.setMountain(e,t);e.flat=()=>this.setFlat(e);e.unassigned=()=>this.setUnassigned(e);e.cut=()=>this.setCut(e);return e};Tu.prototype.line=function(...e){const t=Le(...e);if(!t){return undefined}const n=cu(this,t);const s=n.flatMap((e=>vu(this,e[0],e[1])));return Nu.call(this,s)};Tu.prototype.ray=function(...e){const t=Le(...e);if(!t){return undefined}const n=ou(this,t);const s=n.flatMap((e=>vu(this,e[0],e[1])));return Nu.call(this,s)};Tu.prototype.segment=function(...e){const t=$e(...e);if(!t){return undefined}const n=au(this,t);const s=n.flatMap((e=>vu(this,e[0],e[1])));return Nu.call(this,s)};Tu.prototype.polygon=function(...e){const t=Be(...e);if(!t){return undefined}const n=t.map(((e,t,n)=>[e,n[(t+1)%n.length]]));const s=n.flatMap((e=>au(this,e)));const r=s.flatMap((e=>vu(this,e[0],e[1])));return Nu.call(this,r)};Tu.prototype.removeEdge=function(e){const t=this.edges_vertices[e];Mu(this,e);t.map((e=>gc(this,e))).map(((e,n)=>e?t[n]:undefined)).filter((e=>e!==undefined)).sort(((e,t)=>t-e)).forEach((e=>Au(this,e)));return true};Tu.prototype.validate=function(e){const t=ao(this,e);t.vertices.kawasaki=Vu(this,e);t.vertices.maekawa=Cu(this);if(this.edges_foldAngle){t.edges.not_flat=this.edges_foldAngle.map(((e,t)=>Ot(e)?undefined:t)).filter((e=>e!==undefined))}if(t.summary==="valid"){if(t.vertices.kawasaki.length||t.vertices.maekawa.length){t.summary="invalid"}else if(t.edges.not_flat.length){t.summary="not flat"}}return t};Tu.prototype.defer=false;const zu=Tu.prototype;const Bu=(e,t)=>{const n=[];const s=e.map(((e,t)=>t));const r=s.filter((e=>t[e]));const c=s.filter((e=>!t[e]));c.sort(((t,n)=>e[t]-e[n])).forEach(((e,t)=>{n[e]=t}));r.sort(((t,n)=>e[n]-e[t])).forEach(((e,t)=>{n[e]=c.length+t}));return n};const $u=(e,t,n,s=a)=>{const r=Lr(e,t);if(r.length===0){return undefined}if(r.length===1){return r[0]}return r[0]};const Ru=(e,t,n,s)=>{const r=O(n,t);const c=$(e,r);return s?c>0:c<0};const Lu=(e,t)=>!e.faces_vertices[t]?[0,0]:e.faces_vertices[t].map((t=>e.vertices_coords[t])).reduce(((e,t)=>[e[0]+t[0],e[1]+t[1]]),[0,0]).map((n=>n/e.faces_vertices[t].length));const Iu={F:true,f:true,U:true,u:true};const Uu={M:"V",m:"V",V:"M",v:"M"};const Qu=e=>Uu[e]||e;const Du=(e,t)=>({center:e.faces_center[t],matrix:e.faces_matrix2[t],winding:e.faces_winding[t],crease:e.faces_crease[t],side:e.faces_side[t],layer:e.faces_layer[t]});const qu=(e,{vector:t,origin:n},s="V",r=a)=>{const c=Qu(s);Ac(e);if(!e.faces_layer){e.faces_layer=Array(e.faces_vertices.length).fill(0)}e.faces_center=e.faces_vertices.map(((t,n)=>Lu(e,n)));if(!e.faces_matrix2){e.faces_matrix2=So(e,$u(e,n,t,r))}e.faces_winding=od(e.faces_matrix2);e.faces_crease=e.faces_matrix2.map(ie).map((e=>ce(e,t,n)));e.faces_side=e.faces_vertices.map(((t,n)=>Ru(e.faces_crease[n].vector,e.faces_crease[n].origin,e.faces_center[n],e.faces_winding[n])));const o=Oo(e,e.faces_matrix2);const i=du({vertices_coords:o,edges_vertices:e.edges_vertices},{vector:t,origin:n},r).filter((t=>Iu[e.edges_assignment[t]]));i.map((t=>e.edges_faces[t].find((e=>e!=null)))).map((t=>e.faces_winding[t])).map((e=>e?s:c)).forEach(((t,n)=>{e.edges_assignment[i[n]]=t;e.edges_foldAngle[i[n]]=wt(t)}));const f=Du(e,0);const l=e.faces_vertices.map(((e,t)=>t)).reverse().map((t=>{const n=Du(e,t);const o=Kc(e,t,n.crease,r);if(o===undefined){return undefined}e.edges_assignment[o.edges.new]=n.winding?s:c;e.edges_foldAngle[o.edges.new]=wt(e.edges_assignment[o.edges.new]);const a=o.faces.map[o.faces.remove];a.forEach((t=>{e.faces_center[t]=Lu(e,t);e.faces_side[t]=Ru(n.crease.vector,n.crease.origin,e.faces_center[t],n.winding);e.faces_layer[t]=n.layer}));return o})).filter((e=>e!==undefined));const d=rr(...l.map((e=>e.faces.map)));const u=rr(...l.map((e=>e.edges.map)).filter((e=>e!==undefined)));const m=l.map((e=>e.faces.remove)).reverse();e.faces_layer=Bu(e.faces_layer,e.faces_side);const g=d&&d[0]&&d[0].length===2;const p=g?d[0].filter((t=>e.faces_side[t])).shift():0;let _=f.matrix;if(s!==c){_=!g&&!e.faces_side[0]?f.matrix:oe(f.matrix,me(f.crease.vector,f.crease.origin))}e.faces_matrix2=So(e,p).map((e=>oe(_,e)));delete e.faces_center;delete e.faces_winding;delete e.faces_crease;delete e.faces_side;return{faces:{map:d,remove:m},edges:{map:u}}};const Wu={};Wu.prototype=Object.create(Hd);Wu.prototype.constructor=Wu;Wu.prototype.flatFold=function(){qu(this,Le(arguments));return this};const Gu=Wu.prototype;const Hu=1.1;const Ju="Rabbit Ear";const Zu=(e,t)=>[[0,0],[e,0],[e,t],[0,t]];const Yu=e=>Ac({vertices_coords:e,edges_vertices:e.map(((e,t,n)=>[t,(t+1)%n.length])),edges_assignment:Array(e.length).fill("B")});const Xu=(e=1)=>Yu(Zu(e,e));const Ku=(e=1,t=1)=>Yu(Zu(e,t));const em=(e=3,t=1)=>Yu(De(e,t));const tm=()=>Ac({vertices_coords:[[0,0],[1,0],[1,Math.SQRT2-1],[1,1],[Math.SQRT2-1,1],[0,1]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,2],[0,4],[0,3]],edges_assignment:Array.from("BBBBBBVVF")});const nm=()=>Ac({vertices_coords:[[0,0],[Math.SQRT1_2,0],[1,0],[1,1-Math.SQRT1_2],[1,1],[1-Math.SQRT1_2,1],[0,1],[0,Math.SQRT1_2],[.5,.5],[Math.SQRT1_2,1-Math.SQRT1_2],[1-Math.SQRT1_2,Math.SQRT1_2]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[9,0],[9,2],[9,4],[10,0],[10,6],[10,4],[9,1],[10,7],[9,3],[10,5],[8,0],[8,9],[8,4],[8,10]],edges_assignment:Array.from("BBBBBBBBVVVVVVMMFFFFFF")});const sm=()=>Ac({vertices_coords:[[0,0],[.5,0],[1,0],[1,.5],[1,1],[.5,1],[0,1],[0,.5],[.5,.5],[.5,(Math.SQRT2-1)/2],[(3-Math.SQRT2)/2,.5],[.5,(3-Math.SQRT2)/2],[(Math.SQRT2-1)/2,.5],[Math.SQRT1_2/2,Math.SQRT1_2/2],[1-Math.SQRT1_2/2,1-Math.SQRT1_2/2]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[0,9],[9,2],[2,10],[10,4],[4,11],[11,6],[6,12],[12,0],[1,9],[9,8],[3,10],[10,8],[5,11],[11,8],[7,12],[12,8],[2,8],[6,8],[0,13],[13,8],[13,9],[13,12],[4,14],[14,8],[14,10],[14,11]],edges_assignment:Array.from("BBBBBBBBVVVVVVVVMVMVMVMVMMFFFFFFFF")});const rm=()=>Ac({vertices_coords:[[0,1],[0,Math.SQRT1_2],[0,.5],[0,1-Math.SQRT1_2],[0,0],[.5,.5],[1,1],[(1-Math.SQRT1_2)/2,Math.SQRT1_2/2],[Math.SQRT1_2/2,(1-Math.SQRT1_2)/2],[1-Math.SQRT1_2,0],[.5,0],[Math.SQRT1_2,0],[1,0],[.5,(1-Math.SQRT1_2)/2],[1-Math.SQRT1_2/2,(1-Math.SQRT1_2)/2],[(1-Math.SQRT1_2)/2,1-Math.SQRT1_2/2],[(1-Math.SQRT1_2)/2,.5],[(1+Math.SQRT1_2)/2,1-Math.SQRT1_2/2],[1,Math.SQRT1_2],[Math.SQRT1_2,1],[1-Math.SQRT1_2/2,(1+Math.SQRT1_2)/2],[Math.SQRT1_2/2,(1+Math.SQRT1_2)/2],[.5,1],[1,.5],[(1+Math.SQRT1_2)/2,Math.SQRT1_2/2],[.5,(1+Math.SQRT1_2)/2],[(1+Math.SQRT1_2)/2,.5],[1-Math.SQRT1_2,1],[1,1-Math.SQRT1_2]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[4,7],[4,8],[4,9],[9,10],[10,11],[11,12],[8,13],[13,14],[15,16],[16,7],[3,7],[7,5],[5,17],[17,18],[19,20],[20,5],[5,8],[8,9],[2,15],[14,10],[21,22],[23,24],[10,8],[7,2],[12,14],[0,15],[22,25],[25,5],[5,13],[13,10],[2,16],[16,5],[5,26],[26,23],[6,17],[6,20],[11,14],[14,5],[5,21],[21,27],[28,24],[24,5],[5,15],[15,1],[12,5],[5,0],[20,25],[25,21],[24,26],[26,17],[12,24],[0,21],[12,28],[28,23],[23,18],[18,6],[6,19],[19,22],[22,27],[27,0],[22,20],[17,23]],edges_assignment:Array.from("BBBBFFVVBBBBMMMMFVVFFVVFVVVVVVVVVMMVVMMVVVFVVFFVVFMMMMMMVVBBBBBBBBVV")});const cm=()=>Ac({vertices_coords:[[0,0],[.25,0],[.5,0],[.75,0],[1,0],[0,1],[0,.75],[0,.5],[0,.25],[.25,.25],[.5,.5],[.75,.75],[1,1],[.25,1],[.25,.75],[.25,.5],[1,.25],[.75,.25],[.5,.25],[.5,1],[1,.5],[.5,.75],[.75,.5],[.75,1],[1,.75]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[5,6],[6,7],[7,8],[8,0],[0,9],[9,10],[10,11],[11,12],[13,14],[14,15],[15,9],[9,1],[16,17],[17,18],[18,9],[9,8],[7,14],[14,19],[20,17],[17,2],[2,9],[9,7],[19,21],[21,10],[10,18],[18,2],[20,22],[22,10],[10,15],[15,7],[4,17],[17,10],[10,14],[14,5],[23,11],[11,22],[22,17],[17,3],[6,14],[14,21],[21,11],[11,24],[12,23],[23,19],[19,13],[13,5],[4,16],[16,20],[20,24],[24,12],[19,11],[11,20]],edges_assignment:Array.from("BBBBBBBBVFFVFVVFFVVFMFMFMFFFFFFFFFVFFVFVVFFVVFBBBBBBBBMF")});const om=()=>Ac({vertices_coords:[[0,0],[2-Math.SQRT2,0],[1,0],[0,1],[0,2-Math.SQRT2],[.5,.5],[Math.SQRT1_2,Math.SQRT1_2],[1,1],[Math.SQRT1_2,1-Math.SQRT1_2],[1,Math.SQRT2-1],[1-Math.SQRT1_2,Math.SQRT1_2],[Math.SQRT2-1,1],[Math.SQRT1_2,1],[1,Math.SQRT1_2]],edges_vertices:[[0,1],[1,2],[3,4],[4,0],[0,5],[5,6],[6,7],[0,8],[8,9],[0,10],[10,11],[8,1],[10,4],[8,6],[6,12],[3,10],[10,5],[5,8],[8,2],[10,6],[6,13],[7,12],[12,11],[11,3],[11,6],[6,9],[2,9],[9,13],[13,7]],edges_assignment:Array.from("BBBBFFFVFVFMMVVVFFVVVBBBMMBBB")});const am=Object.freeze({__proto__:null,base1:om,bird:sm,fish:nm,frog:rm,kite:tm,polygon:em,rectangle:Ku,square:Xu,windmill:cm});const im=(...e)=>Ac(Object.assign(Object.create(Hd),{...e.reduce(((e,t)=>({...e,...t})),{}),file_spec:Hu,file_creator:Ju}));const fm=(...e)=>Ac(Object.assign(Object.create(zu),{...e.length?e.reduce(((e,t)=>({...e,...t})),{}):Xu(),file_spec:Hu,file_creator:Ju,frame_classes:["creasePattern"]}));const lm=(...e)=>Ac(Object.assign(Object.create(Gu),{...e.length?e.reduce(((e,t)=>({...e,...t})),{}):Xu(),file_spec:Hu,file_creator:Ju,frame_classes:["foldedForm"]}));im.prototype=Hd;im.prototype.constructor=im;fm.prototype=zu;fm.prototype.constructor=fm;lm.prototype=Gu;lm.prototype.constructor=lm;Object.keys(am).forEach((e=>{im[e]=(...t)=>im(am[e](...t));fm[e]=(...t)=>fm(am[e](...t));lm[e]=(...t)=>lm(am[e](...t))}));const dm=(e,t)=>{const n=$(e.normal,t.normal);if(Math.abs(n)<a){return undefined}const s=e.distance*t.normal[1]-t.distance*e.normal[1];const r=t.distance*e.normal[0]-e.distance*t.normal[0];return[s/n,r/n]};const um=(e,t)=>{const n=v(D(O(t,e)));return[{normal:n,distance:S(x(e,t),n)/2}]};const mm=(e,t)=>{const n=v(O(t,e));return[{normal:n,distance:S(x(e,t),n)/2}]};const gm=(e,t)=>{const n=dm(e,t);return n===undefined?[{normal:e.normal,distance:(e.distance+t.distance*S(e.normal,t.normal))/2}]:[x,O].map((n=>v(n(e.normal,t.normal)))).map((e=>({normal:e,distance:S(n,e)})))};const pm=(e,t)=>{const n=D(e.normal);const s=S(t,n);return[{normal:n,distance:s}]};const _m=(e,t,n)=>{const s=S(t,e.normal);const r=e.distance-s;const c=I(t,n);if(r>c){return[]}const o=Math.sqrt(c*c-r*r);const i=E(e.normal,r);const f=x(t,i);const l=E(D(e.normal),o);const d=o<a?[f]:[x(f,l),O(f,l)];return d.map((e=>v(O(n,e)))).map((e=>({normal:e,distance:S(t,e)})))};const hm=e=>e<0?-((-e)**(1/3)):e**(1/3);const vm=(e,t,n,s,r)=>{switch(e){case 1:return[-r/s];case 2:{const e=s**2-4*n*r;if(e<-a){return[]}const t=-s/(2*n);if(e<a){return[t]}const c=Math.sqrt(e)/(2*n);return[t+c,t-c]}case 3:{const e=n/t;const c=s/t;const o=r/t;const i=(3*c-e**2)/9;const f=(9*e*c-27*o-2*e**3)/54;const l=i**3+f**2;const d=-e/3;if(l>0){const e=Math.sqrt(l);const t=hm(f+e);const n=hm(f-e);return[d+t+n]}if(Math.abs(l)<a){const e=f**(1/3);if(f<0){return[]}return[d+2*e,d-e]}const u=Math.sqrt(-l);const m=Math.atan2(u,f)/3;const g=(f**2-l)**(1/6);const p=g*Math.cos(m);const _=g*Math.sin(m);return[d+2*p,d-p-Math.sqrt(3)*_,d-p+Math.sqrt(3)*_]}default:return[]}};const bm=(e,t,n,s)=>{if(Math.abs(1-S(e.normal,n)/e.distance)<.02){return[]}const r=D(e.normal);const c=O(x(n,E(e.normal,e.distance)),E(s,2));const o=O(E(e.normal,e.distance),n);const i=S(s,t.normal)-t.distance;const f=2*S(o,r);const l=S(o,o);const d=S(x(c,o),r);const u=S(c,o);const m=S(r,t.normal);const g=S(o,t.normal);const p=m;const _=i+d*m+g;const h=i*f+u*m+d*g;const b=i*l+u*g;let y=0;if(Math.abs(h)>a){y=1}if(Math.abs(_)>a){y=2}if(Math.abs(p)>a){y=3}return vm(y,p,_,h,b).map((t=>x(E(e.normal,e.distance),E(r,t)))).map((e=>({p:e,normal:v(O(e,n))}))).map((e=>({normal:e.normal,distance:S(e.normal,P(e.p,n))})))};const ym=(e,t,n)=>{const s=D(e.normal);const r=S(s,t.normal);if(Math.abs(r)<a){return undefined}const c=S(n,s);const o=S(n,t.normal);const i=(t.distance+2*c*r-o)/(2*r);return[{normal:s,distance:i}]};const Em=(e,...t)=>[null,um,mm,gm,pm,_m,bm,ym][e](...t);const Mm=Object.freeze({__proto__:null,normalAxiom:Em,normalAxiom1:um,normalAxiom2:mm,normalAxiom3:gm,normalAxiom4:pm,normalAxiom5:_m,normalAxiom6:bm,normalAxiom7:ym});const Am=(e,t)=>[{vector:v(O(...Y(t,e))),origin:e}];const xm=(e,t)=>[{vector:v(D(O(...Y(t,e)))),origin:P(e,t)}];const wm=(e,t)=>Mr(e,t);const km=(e,t)=>[{vector:D(v(e.vector)),origin:t}];const Om=(e,t,n)=>(Wr({radius:I(t,n),origin:t},e)||[]).map((e=>({vector:v(D(O(...Y(e,n)))),origin:P(n,e)})));const jm=(e,t,n,s)=>bm(Fn(e),Fn(t),n,s).map(Sn);const Fm=(e,t,n)=>{const s=qr(e,{vector:t.vector,origin:n},ot,ot).point;return s===undefined?[]:[{vector:v(D(O(...Y(s,n)))),origin:P(n,s)}]};const Sm=(e,...t)=>[null,Am,xm,wm,km,Om,jm,Fm][e](...t);const Cm=Object.freeze({__proto__:null,axiom:Sm,axiom1:Am,axiom2:xm,axiom3:wm,axiom4:km,axiom5:Om,axiom6:jm,axiom7:Fm});const Vm=(e,t)=>{const n=me(e.vector,e.origin);return re(n,t)};const Pm=(e,t,n,s)=>[[n,s].map((t=>Pr(e,t,rt))).reduce(((e,t)=>e&&t),true)];const Tm=Pm;const Nm=(e,t,n,s)=>{const r=[n,s].map((t=>eu(e,t,rt,ot)));if(r[0]===undefined||r[1]===undefined){return[false,false]}const c=t.map((t=>t===undefined?undefined:eu(e,t,rt,ot)));const o=[0,1].map((e=>c[e]!==undefined));const a=t.map((e=>e===undefined?undefined:[Vm(e,r[0][0]),Vm(e,r[0][1])]));const i=a.map((e=>e===undefined?false:Sr({vector:k(r[1][1],r[1][0]),origin:r[1][0]},e[0],lt)||Sr({vector:k(r[1][1],r[1][0]),origin:r[1][0]},e[1],lt)||Sr({vector:k(e[1],e[0]),origin:e[0]},r[1][0],lt)||Sr({vector:k(e[1],e[0]),origin:e[0]},r[1][1],lt)));return[0,1].map((e=>i[e]===true&&o[e]===true))};const zm=(e,t,n,s)=>{const r=qr(n,{vector:D(n.vector),origin:s},ot,ot).point;return[[s,r].filter((e=>e!==undefined)).map((t=>Pr(e,t,rt))).reduce(((e,t)=>e&&t),true)]};const Bm=(e,t,n,s,r)=>{if(t.length===0){return[]}const c=[s,r].map((t=>Pr(e,t,rt))).reduce(((e,t)=>e&&t),true);const o=t.map((e=>Vm(e,r))).map((t=>Pr(e,t,rt)));return o.map((e=>e&&c))};const $m=function(e,t,n,s,r,c){if(t.length===0){return[]}const o=[r,c].map((t=>Pr(e,t,rt))).reduce(((e,t)=>e&&t),true);if(!o){return t.map((()=>false))}const a=t.map((e=>Vm(e,r))).map((t=>Pr(e,t,rt)));const i=t.map((e=>Vm(e,c))).map((t=>Pr(e,t,rt)));return t.map(((e,t)=>a[t]&&i[t]))};const Rm=(e,t,n,s,r)=>{const c=Pr(e,r,rt);if(!t.length){return[false]}const o=Vm(t[0],r);const a=Pr(e,o,rt);const i=Xr(e,s,lt,ot)!==undefined;const f=qr(s,t[0],ot,ot).point;const l=f?Pr(e,f,rt):false;return[c&&a&&i&&l]};const Lm=(e,t,n,...s)=>[null,Pm,Tm,Nm,zm,Bm,$m,Rm][e](t,n,...s);const Im=Object.freeze({__proto__:null,validateAxiom:Lm,validateAxiom1:Pm,validateAxiom2:Tm,validateAxiom3:Nm,validateAxiom4:zm,validateAxiom5:Bm,validateAxiom6:$m,validateAxiom7:Rm});const Um=e=>e.map((e=>typeof e==="object"&&e.vector?Sn(e):e));const Qm=(e,t,...n)=>{const s=Sm(e,...n);Lm(e,t,s,...n).map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined)).forEach((e=>delete s[e]));return s};const Dm=(e,t,...n)=>{const s=Em(e,...n).map(Sn);Lm(e,t,s,...Um(n)).map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined)).forEach((e=>delete s[e]));return s};const qm=Object.freeze({__proto__:null,axiomWithBoundary:Qm,normalAxiomWithBoundary:Dm});const Wm={...Cm,...Mm,...qm,...Im};const Gm=()=>{const e={};e.file_spec=Hu;e.file_creator=Ju;e.file_classes=["singleModel"];e.frame_classes=[];e.frame_attributes=[];e.vertices_coords=[];e.faces_vertices=[];return e};const Hm=e=>{if(!e.edges_foldAngle||!e.edges_foldAngle.length){return}let t=true;for(let n=0;n<e.edges_foldAngle.length;n+=1){if(e.edges_foldAngle[n]!==0&&e.edges_foldAngle[n]!==-180&&e.edges_foldAngle[n]!==180){t=false;break}}e.frame_classes.push(t?"creasePattern":"foldedForm");e.frame_attributes.push(t?"2D":"3D")};const Jm=e=>e.map(((e,t,n)=>[e,n[(t+1)%n.length]]));const Zm=({faces_vertices:e})=>{const t={};const n=[];e.flatMap(Jm).forEach((e=>{const s=[e.join(" "),`${e[1]} ${e[0]}`];if(s[0]in t||s[1]in t){return}n.push(e);t[s[0]]=true}));return n};const Ym=e=>e.slice(1).map((e=>parseInt(e,10)-1));const Xm=e=>e.slice(1).map((e=>parseFloat(e)));const Km=e=>{const t=e.split("\n").map((e=>e.trim().split(/\s+/)));const n=Gm();for(let e=0;e<t.length;e+=1){switch(t[e][0].toLowerCase()){case"f":n.faces_vertices.push(Ym(t[e]));break;case"v":n.vertices_coords.push(Xm(t[e]));break}}n.faces_normal=ms(n);n.faces_center=Hs(n);n.edges_vertices=Zm(n);n.faces_edges=Qs(n);n.edges_faces=Ss(n);n.edges_foldAngle=zs(n);n.edges_assignment=Ts(n);n.vertices_vertices=bs(n);delete n.faces_normal;delete n.faces_center;delete n.edges_faces;Hm(n);return n};const eg=(e,t)=>{const n=yc(e,t);n.vertices_vertices=ys(n);const s=Is(n);n.faces_vertices=s.faces_vertices;n.faces_edges=s.faces_edges;delete n.vertices_edges;return n};const tg=({vertices_coords:e,edges_vertices:t})=>{const n=t.map((t=>t.map((t=>e[t])))).map((e=>L(...e))).filter((e=>e>1e-4));const s=n.reduce(((e,t)=>Math.min(e,t)),Infinity);return s===Infinity?undefined:s};const ng=({vertices_coords:e,edges_vertices:t})=>{const n=tg({vertices_coords:e,edges_vertices:t});const s=po({vertices_coords:e});const r=s&&s.span?Math.max(...s.span):1;const c=r*.01;const o=n/20;return n===undefined?c:Math.min(c,o)};const sg=function(e){const t=`${e}`.match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);return Math.max(0,(t[1]?t[1].length:0)-(t[2]?+t[2]:0))};const rg=function(e,t=15){const n=typeof e==="number"?e:parseFloat(e);if(Number.isNaN(n)){return e}const s=parseFloat(n.toFixed(t));if(sg(s)===Math.min(t,sg(n))){return n}return s};const cg=Object.freeze({__proto__:null,cleanNumber:rg});const og=(e,t,n="epsilon")=>{if(typeof t==="object"&&typeof t[n]==="number"){return t[n]}return typeof t==="number"?t:ng(e)};const ag=e=>{const t=po({vertices_coords:e});const n=t.min[1]+t.span[1]/2;const s=Math.min(-t.min[1],-t.max[1]);const r=Math.max(-t.min[1],-t.max[1]);const c=r-s;const o=s+c/2;const a=n-o;const i=rg(a,8);for(let t=0;t<e.length;t+=1){e[t][1]=-e[t][1]+i}};const ig=(e,t)=>e==null?null:Array.from(e.childNodes).filter((e=>e.attributes&&e.attributes.length)).filter((e=>Array.from(e.attributes).filter((e=>e.nodeValue===t)).shift()!==undefined)).shift();const fg=(e,t)=>{const n=ig(e,t);const s=n?Array.from(n.childNodes).shift():null;return s?s.textContent:undefined};const lg=e=>{const t=ig(e,"lines");const n=t?Array.from(t.childNodes).filter((e=>e.getAttribute)).filter((e=>e.getAttribute("class").split(" ").includes("oripa.OriLineProxy"))).shift():undefined;return n?Array.from(n.childNodes):[]};const dg=e=>e.filter((e=>e.nodeName==="void")).filter((e=>e.childNodes)).map((e=>ig(e,"oripa.OriLineProxy"))).filter((e=>e)).map((e=>["type","x0","x1","y0","y1"].map((t=>ig(e,t))).map((e=>e?Array.from(e.childNodes):[])).map((e=>e.filter((e=>e.nodeName==="double"||e.nodeName==="int")).shift())).map((e=>e&&e.childNodes[0]?e.childNodes[0].data:"0")).map(parseFloat)));const ug=["F","B","M","V","U"];const mg=e=>{const t={};t.vertices_coords=e.flatMap((e=>[[e[1],e[3]],[e[2],e[4]]]));t.edges_vertices=e.map(((e,t)=>[t*2,t*2+1]));t.edges_assignment=e.map((e=>ug[e[0]]));t.edges_foldAngle=Ns(t);return t};const gg=e=>{const t=Ja(e,"text/xml");const n=Array.from(t.childNodes).filter((e=>e.getAttribute)).filter((e=>e.getAttribute("class").split(" ").includes("oripa.DataSet"))).shift();return mg(dg(lg(n)))};const pg=(e,t)=>{const n={file_description:"memo",file_author:"originalAuthorName",file_title:"title"};Object.keys(n).forEach((t=>{n[t]=fg(e,n[t])}));Object.keys(n).filter((e=>n[e])).forEach((e=>{t[e]=n[e]}));t.file_classes=["singleModel"];t.frame_classes=["creasePattern"]};const _g=(e,t)=>{const n=Ja(e,"text/xml");const s=n&&n.childNodes?Array.from(n.childNodes):[];const r=s.filter((e=>e.getAttribute)).filter((e=>e.getAttribute("class").split(" ").includes("oripa.DataSet"))).shift();const c=mg(dg(lg(r)));if(t&&t.invertVertical&&c.vertices_coords){ag(c.vertices_coords)}const o=og(c,t);const a=eg(c,o);pg(r,a);return a};Object.assign(_g,{opxEdgeGraph:gg});const hg=(e,t)=>{const n=Oa(e).toUpperCase();return t&&t[n]?t[n]:Il(...ka(e))};const vg=(e,t)=>{switch(t){case"M":case"m":return-180*e;case"V":case"v":return 180*e;default:return 0}};const bg=(e,t)=>{const n=o().getComputedStyle!=null?o().getComputedStyle(e).stroke:"";if(n!==""&&n!=="none"){return n}if(t.stroke!==undefined){return t.stroke}return undefined};const yg=(e,t)=>{const n=o().getComputedStyle!=null?o().getComputedStyle(e).opacity:"";if(n!==""){const e=parseFloat(n);if(!Number.isNaN(e)){return e}}if(t.opacity!==undefined){const e=parseFloat(t.opacity);if(!Number.isNaN(e)){return e}}return undefined};const Eg=Object.freeze({__proto__:null,colorToAssignment:hg,getEdgeOpacity:yg,getEdgeStroke:bg,opacityToFoldAngle:vg});const Mg=(e,t)=>t.map((t=>e.getAttribute(t))).map((e=>e==null?0:e)).map(parseFloat);const Ag=e=>[Mg(e,["x1","y1","x2","y2"])];const xg=function(e){const[t,n,s,r]=Mg(e,["x","y","width","height"]);return[[t,n,t+s,n],[t+s,n,t+s,n+r],[t+s,n+r,t,n+r],[t,n+r,t,n]]};const wg=e=>{const t=e.split(/[\s,]+/).map(parseFloat);return Array.from(Array(Math.floor(t.length/2))).map(((e,n)=>[t[n*2+0],t[n*2+1]]))};const kg=e=>wg(e.getAttribute("points")||"").map(((e,t,n)=>[n[t][0],n[t][1],n[(t+1)%n.length][0],n[(t+1)%n.length][1]]));const Og=function(e){const t=kg(e);t.pop();return t};const jg={L:true,V:true,H:true,Z:true};const Fg=e=>gi(e.getAttribute("d")||"").filter((e=>jg[e.command.toUpperCase()])).map((e=>[e.start,e.end])).filter((e=>!st(...e))).map((e=>e.flat()));const Sg={line:Ag,rect:xg,polygon:kg,polyline:Og,path:Fg};const Cg=(e,t)=>{const n=[[e[0],e[1]],[e[2],e[3]]];if(!t){return n}const s=Ga(t);return s?n.map((e=>re(s,e))):n};const Vg=e=>ci(e).filter((e=>Sg[e.element.nodeName])).flatMap((e=>Sg[e.element.nodeName](e.element).map((t=>Cg(t,e.attributes.transform))).map((t=>({...e,segment:t})))));const Pg=e=>{if(!o().document.body){return undefined}const t=o().document.createElement("div");t.setAttribute("display","none");o().document.body.appendChild(t);t.appendChild(e);return t};const Tg=e=>ei(e).map((e=>e.nodeName==="style")).reduce(((e,t)=>e||t),false);const Ng=e=>{const s=typeof e==="string"?Ja(e,"image/svg+xml"):e;if(Tg(s)&&t){console.warn(n.backendStylesheet)}const r=Za(s)===o().document?undefined:Pg(s);const c=Vg(s);c.map((e=>({data:{assignment:e.attributes["data-assignment"],foldAngle:e.attributes["data-foldAngle"]},stroke:bg(e.element,e.attributes),opacity:yg(e.element,e.attributes)}))).forEach(((e,t)=>{c[t]={...c[t],...e}}));if(r&&r.parentNode){r.parentNode.removeChild(r)}return c};const zg=e=>{if(!e||!e.assignments){return undefined}const t={};Object.keys(e.assignments).forEach((n=>{const s=Oa(n).toUpperCase();t[s]=e.assignments[n]}));return t};const Bg=(e,t="#f0f",n=undefined)=>{if(e){return e}return hg(t,n)};const $g=(e,t=1,n=undefined)=>{if(e){return parseFloat(e)}return vg(t,n)};const Rg=(e,t)=>{const n=zg(t);if(n){e.forEach((e=>{delete e.data.assignment;delete e.data.foldAngle}))}const s=e.map((e=>Bg(e.data.assignment,e.stroke,n)));const r=e.map(((e,t)=>$g(e.data.foldAngle,e.opacity,s[t])));return{edges_assignment:s,edges_foldAngle:r}};const Lg=(e,t)=>{const n=Ng(e);const{edges_assignment:s,edges_foldAngle:r}=Rg(n,t);const c=t&&t.fast?e=>e:rg;const o=n.flatMap((e=>e.segment)).map((e=>e.map((e=>c(e,12)))));const a=n.map(((e,t)=>[t*2,t*2+1]));return{vertices_coords:o,edges_vertices:a,edges_assignment:s,edges_foldAngle:r}};const Ig=(e,t)=>{const n=Lg(e,t);const s=og(n,t);if(t&&t.invertVertical&&n.vertices_coords){ag(n.vertices_coords)}const r=eg(n,s);const c=t&&t.fast?e=>e:rg;r.vertices_coords=r.vertices_coords.map((e=>e.map((e=>c(e,12)))));if(typeof t!=="object"||t.boundary!==false){r.edges_assignment.map(((e,t)=>t)).filter((e=>r.edges_assignment[e]==="B"||r.edges_assignment[e]==="b")).forEach((e=>{r.edges_assignment[e]="F"}));const{edges:e}=bo(r);e.forEach((e=>{r.edges_assignment[e]="B"}))}return{file_spec:1.1,file_creator:"Rabbit Ear",frame_classes:["creasePattern"],...r}};Object.assign(Ig,{...Eg,svgSegments:Ng,svgEdgeGraph:Lg,planarizeGraph:eg,makeEpsilon:ng});const Ug={objToFold:Km,opxToFold:_g,svgToFold:Ig,foldToSvg:Qd,foldToObj:qd};const Qg=e=>e.replace(/([-_][a-z])/gi,(e=>e.toUpperCase().replace("-","").replace("_","")));const Dg=e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z])([A-Z])(?=[a-z])/g,"$1-$2").toLowerCase();const qg=e=>e.charAt(0).toUpperCase()+e.slice(1);const Wg=Object.freeze({__proto__:null,capitalized:qg,toCamel:Qg,toKebab:Dg});const Gg={...pn,...rc,...Ie,...cg,...fs,...Wg};const Hg=e=>!e.file_frames?1:e.file_frames.length+1;const Jg=(e,t=1)=>{if(!e.file_frames||e.file_frames.length<t){return e}const s=["frame_parent","frame_inherit"];const r={visited_frames:[]};const c={};St(e,"file").filter((e=>e!=="file_frames")).forEach((t=>{c[t]=e[t]}));const o=(e,t,s)=>{if(r.visited_frames.indexOf(t)!==-1){throw new Error(n.graphCycle)}r.visited_frames.push(t);s=[t].concat(s);if(t===0){return s}if(e.file_frames[t-1].frame_inherit&&e.file_frames[t-1].frame_parent!=null){return o(e,e.file_frames[t-1].frame_parent,s)}return s};return o(e,t,[]).map((t=>{if(t===0){const t=e.file_frames;e.file_frames=null;const n=zo(e);e.file_frames=t;delete n.file_frames;s.forEach((e=>delete n[e]));return n}const n=zo(e.file_frames[t-1]);s.forEach((e=>delete n[e]));return n})).reduce(((e,t)=>Object.assign(e,t)),c)};const Zg=e=>{const t={...e};delete t.file_frames;return t};const Yg=e=>{if(!e){return[]}if(!e.file_frames||!e.file_frames.length){return[e]}return[Zg(e),...e.file_frames]};const Xg=(e,t)=>Array.from(Array(Hg(e))).map(((t,n)=>Jg(e,n))).filter((e=>e.frame_classes&&e.frame_classes.includes(t)));const Kg=Object.freeze({__proto__:null,countFrames:Hg,flattenFrame:Jg,getFramesAsFlatArray:Yg,getFramesByClassName:Xg});const ep=({vertices_coords:e,edges_vertices:t},n,s=a)=>{const r=t=>t.map((t=>e[t])).map((e=>O(e,n.origin))).map((e=>$(n.vector,e))).sort(((e,t)=>Math.abs(t)-Math.abs(e))).map(Math.sign).shift();const c=gu({vertices_coords:e,edges_vertices:t},n,s,dt);const o={};du({vertices_coords:e,edges_vertices:t},n,s).forEach((e=>{o[e]=true}));return t.map(((e,t)=>{if(o[t]===true){return 2}if(c[t]!==undefined){return 0}return r(e)}))};const tp=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},r,c=a)=>{if(!s){s=Qs({edges_vertices:t,faces_vertices:n})}const o=ep({vertices_coords:e,edges_vertices:t},r,c);const i=s.map((e=>e.map((e=>o[e])).filter((e=>e!==2))));const f=i.map((e=>e.includes(0)));const l=i.map(((e,t)=>f[t]?false:e.reduce(((t,n)=>t&&n===e[0]),true)));return l.map(((e,t)=>e?i[t][0]:0))};const np=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s,faceOrders:r},c,o=a)=>{if(!r){throw new Error("faceOrders required")}const i=tp({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},c,o);const f=[-1,1].map((e=>i.map(((e,t)=>({s:e,f:t}))).filter((t=>t.s===e||t.s===0)).map((e=>e.f))));const l=f.map((e=>dd(r,e)));console.log("facesSide",i);console.log("sidesFaces",f);console.log("sidesFaceOrders",l);const d=ms({vertices_coords:e,faces_vertices:n});const u=l.map((e=>ud({faceOrders:e,faces_normal:d})));console.log("sidesLayersFace",u)};const sp=Object.freeze({__proto__:null,getEdgesSide:ep,getFacesSide:tp,getFlapsThroughLine:np});const rp=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},r,c=[],o=ot)=>{if(!e||!t||!n){return{vertices:[],edges:[]}}if(!s){s=Qs({edges_vertices:t,faces_vertices:n})}const a=t.map((t=>t.map((t=>e[t]))));a.forEach(((e,t)=>{if(e.includes(undefined)){delete a[t]}}));const i=a.map((e=>jn(...e))).map((e=>qr(e,r,lt,o)));const f={};const l={};i.forEach(((e,n)=>{if(e.a!==undefined){const s=tt(e.a,0);const r=tt(e.a,1);if(s){l[t[n][0]]=true}if(r){l[t[n][1]]=true}if(!s&&!r){f[n]=true}}}));const d=t.map((e=>!!(l[e[0]]&&l[e[1]])));const u=s.map((e=>e.filter((e=>d[e]))));const m=s.map((e=>e.filter((e=>f[e]))));const g=n.map((e=>e.filter((e=>l[e]))));const p=c.length?Ws({vertices_coords:e,faces_vertices:n}).map((e=>c.map((t=>({...Tr(e,t),point:t}))))).map((e=>e.filter((e=>e.overlap)))):undefined;const _=n.map(((e,t)=>{if(u[t].length){return undefined}const n=m[t];const s=g[t];const r=p?p[t]:[];return n.length+s.length+r.length===2?{edges:n,vertices:s,points:r}:undefined}));Object.keys(_).filter((e=>_[e]===undefined)).forEach((e=>delete _[e]));const h={};_.filter((e=>e.edges)).forEach((({edges:e})=>e.forEach((e=>{h[e]=true}))));Object.keys(i).filter((e=>!h[e])).forEach((e=>delete i[e]));const v=d.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined));return{faces:_,edges:i,edges_collinear:v}};const cp=(e,t)=>rp(e,t,[],ot);const op=(e,t)=>rp(e,t,[t.origin],it);const ap=(e,t)=>rp(e,jn(...t),t,lt);const ip=Object.freeze({__proto__:null,intersectGraphLine:cp,intersectGraphRay:op,intersectGraphSegment:ap});const fp=Object.keys(vt);const lp=(e,t)=>{const n=$t(t);const s=$t(e);const r={};fp.forEach((e=>{const n=St(t,e).shift();r[e]=n!==undefined?t[n]:[]}));const c={};fp.forEach((t=>{c[t]=tn(e,t)}));const o={vertices:[],edges:[],faces:[]};fp.forEach((e=>r[e].forEach(((t,n)=>{o[e][n]=c[e]++}))));const a=zo(t);fp.forEach((e=>lr(a,e,o[e])));Object.keys(a).filter((e=>a[e].constructor===Array)).filter((t=>!(t in e))).forEach((t=>{e[t]=[]}));Object.keys(a).filter((e=>a[e].constructor===Array)).forEach((t=>a[t].forEach(((n,s)=>{e[t][s]=n}))));const i={};const f={};fp.forEach((t=>{const n=St(e,t).shift();f[t]=n!==undefined?e[n]:[]}));fp.forEach((e=>{const t=f[e].map((()=>0));o[e].forEach((e=>{t[e]=1}));i[e]=ir(t)}));const l=n!==s?(e.vertices_coords||[]).map(((e,t)=>e.length===2?t:undefined)).filter((e=>e!==undefined)):[];l.forEach((t=>{e.vertices_coords[t][2]=0}));return i};const dp=Object.freeze({__proto__:null,join:lp});const up=Object.freeze({__proto__:null});const mp=(e,t=a)=>Ls(e,t).map((t=>e.vertices_coords.map((e=>e[0]>t.min[0]&&e[1]>t.min[1]&&e[0]<t.max[0]&&e[1]<t.max[1]))));const gp=({vertices_coords:e,edges_vertices:t,edges_coords:n},s=a)=>{const r=Ls({vertices_coords:e,edges_vertices:t,edges_coords:n},s);const c=t.map((()=>[]));for(let e=0;e<t.length-1;e+=1){for(let n=e+1;n<t.length;n+=1){const t=(r[e].max[0]<r[n].min[0]||r[n].max[0]<r[e].min[0])&&(r[e].max[1]<r[n].min[1]||r[n].max[1]<r[e].min[1]);c[e][n]=!t;c[n][e]=!t}}for(let e=0;e<t.length;e+=1){c[e][e]=true}return c};const pp=Object.freeze({__proto__:null,getEdgesEdgesOverlapingSpans:gp,getEdgesVerticesOverlappingSpan:mp});const _p=({normal:e,distance:t})=>t<0?{normal:Q(e),distance:-t}:{normal:e,distance:t};const hp=(e,t=a)=>{const{lines:n}=_c(e,t);const s=n.map(Fn).map(_p);const r=n.map((({vector:e,origin:t})=>me(e,t)));const c=r.map((e=>n.map((({vector:t,origin:n})=>ce(e,t,n)))));const o=c.map((e=>e.map((e=>e.vector[0]<0?{vector:Q(e.vector),origin:e.origin}:e)))).map((e=>e.map(Fn).map(_p))).map((e=>e.concat(s)));const i=o.map((e=>nc(e.map((e=>e.distance)))));const f=i.map(((e,n)=>e.map((e=>e.map((e=>o[n][e].normal)))).map((e=>sc(e,t)))));const l=f.map(((e,t)=>e.flatMap(((e,n)=>e.map((e=>e.map((e=>i[t][n][e]))))))));const d=l.map((e=>(e.length-n.length)/n.length));return d.map(((e,t)=>({error:e,i:t}))).map((e=>({line:n[e.i],error:e.error}))).sort(((e,t)=>e.error-t.error))};const vp=(e,t=a)=>hp(e,t)[0];const bp=Object.freeze({__proto__:null,findSymmetryLine:vp,findSymmetryLines:hp});const yp=e=>Array.from(Array(e.length-2)).map(((t,n)=>[e[0],e[n+1],e[n+2]]));const Ep=({faces_vertices:e})=>e.flatMap((e=>e.length<4?[e]:yp(e)));const Mp=e=>e.length===3?[e]:Array.from(Array(Math.floor(e.length/3))).map(((t,n)=>[n*3+0,n*3+1,n*3+2].map((t=>e[t]))));const Ap=({vertices_coords:e,faces_vertices:t},s)=>{if(!e||!e.length){throw new Error(n.nonConvexTriangulation)}const r=e.filter((()=>true)).shift().length;return t.map((t=>t.flatMap((t=>e[t])))).map((e=>s(e,null,r))).map(((e,n)=>e.map((e=>t[n][e])))).flatMap((e=>Mp(e)))};const xp=e=>{if(!e.edges_vertices){e.edges_vertices=[]}const t=xs(e);let n=e.edges_vertices.length;const s=[];e.faces_edges=e.faces_vertices.map((e=>e.map(((e,r,c)=>{const o=[e,c[(r+1)%c.length]];const a=o.join(" ");if(a in t){return t[a]}s.push(o);t[a]=n;t[o.reverse().join(" ")]=n;return n++}))));const r=s.length;e.edges_vertices.push(...s);if(e.edges_assignment){e.edges_assignment.push(...Array(r).fill("J"))}if(e.edges_foldAngle){e.edges_foldAngle.push(...Array(r).fill(0))}if(e.vertices_vertices){delete e.vertices_vertices}if(e.vertices_edges){delete e.vertices_edges}if(e.vertices_faces){delete e.vertices_faces}if(e.edges_faces){delete e.edges_faces}if(e.faces_faces){delete e.faces_faces}if(e.faceOrders){delete e.faceOrders}return e};const wp=({faces_vertices:e})=>{let t=0;return e.map((e=>Math.max(3,e.length))).map((e=>Array.from(Array(e-2)).map((()=>t++))))};const kp=(e,t)=>{if(!e.faces_vertices){return{}}const n=e.edges_vertices?e.edges_vertices.length:0;const s=wp(e);e.faces_vertices=t?Ap(e,t):Ep(e);xp(e);const r=Array.from(Array(e.edges_vertices.length-n)).map(((e,t)=>n+t));return{faces:{map:s},edges:{new:r}}};const Op=Object.freeze({__proto__:null,triangulate:kp,triangulateConvexFacesVertices:Ep,triangulateNonConvexFacesVertices:Ap});const jp=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);const Fp=e=>jp.map(((t,n)=>Math.abs(t-e[n])<a)).reduce(((e,t)=>e&&t),true);const Sp=(e,t)=>[e[0]*t[0]+e[4]*t[1]+e[8]*t[2]+e[12],e[1]*t[0]+e[5]*t[1]+e[9]*t[2]+e[13],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]+e[14]];const Cp=(e,t,n)=>({vector:[e[0]*t[0]+e[4]*t[1]+e[8]*t[2],e[1]*t[0]+e[5]*t[1]+e[9]*t[2],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]],origin:[e[0]*n[0]+e[4]*n[1]+e[8]*n[2]+e[12],e[1]*n[0]+e[5]*n[1]+e[9]*n[2]+e[13],e[2]*n[0]+e[6]*n[1]+e[10]*n[2]+e[14]]});const Vp=(e,t)=>[e[0]*t[0]+e[4]*t[1]+e[8]*t[2]+e[12]*t[3],e[1]*t[0]+e[5]*t[1]+e[9]*t[2]+e[13]*t[3],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]+e[14]*t[3],e[3]*t[0]+e[7]*t[1]+e[11]*t[2]+e[15]*t[3],e[0]*t[4]+e[4]*t[5]+e[8]*t[6]+e[12]*t[7],e[1]*t[4]+e[5]*t[5]+e[9]*t[6]+e[13]*t[7],e[2]*t[4]+e[6]*t[5]+e[10]*t[6]+e[14]*t[7],e[3]*t[4]+e[7]*t[5]+e[11]*t[6]+e[15]*t[7],e[0]*t[8]+e[4]*t[9]+e[8]*t[10]+e[12]*t[11],e[1]*t[8]+e[5]*t[9]+e[9]*t[10]+e[13]*t[11],e[2]*t[8]+e[6]*t[9]+e[10]*t[10]+e[14]*t[11],e[3]*t[8]+e[7]*t[9]+e[11]*t[10]+e[15]*t[11],e[0]*t[12]+e[4]*t[13]+e[8]*t[14]+e[12]*t[15],e[1]*t[12]+e[5]*t[13]+e[9]*t[14]+e[13]*t[15],e[2]*t[12]+e[6]*t[13]+e[10]*t[14]+e[14]*t[15],e[3]*t[12]+e[7]*t[13]+e[11]*t[14]+e[15]*t[15]];const Pp=e=>{const t=e[10]*e[15]-e[11]*e[14];const n=e[9]*e[15]-e[11]*e[13];const s=e[9]*e[14]-e[10]*e[13];const r=e[8]*e[15]-e[11]*e[12];const c=e[8]*e[14]-e[10]*e[12];const o=e[8]*e[13]-e[9]*e[12];return e[0]*(e[5]*t-e[6]*n+e[7]*s)-e[1]*(e[4]*t-e[6]*r+e[7]*c)+e[2]*(e[4]*n-e[5]*r+e[7]*o)-e[3]*(e[4]*s-e[5]*c+e[6]*o)};const Tp=e=>{const t=Pp(e);if(Math.abs(t)<1e-12||Number.isNaN(t)||!Number.isFinite(e[12])||!Number.isFinite(e[13])||!Number.isFinite(e[14])){return undefined}const n=e[10]*e[15]-e[11]*e[14];const s=e[9]*e[15]-e[11]*e[13];const r=e[9]*e[14]-e[10]*e[13];const c=e[8]*e[15]-e[11]*e[12];const o=e[8]*e[14]-e[10]*e[12];const a=e[8]*e[13]-e[9]*e[12];const i=e[6]*e[15]-e[7]*e[14];const f=e[5]*e[15]-e[7]*e[13];const l=e[5]*e[14]-e[6]*e[13];const d=e[6]*e[11]-e[7]*e[10];const u=e[5]*e[11]-e[7]*e[9];const m=e[5]*e[10]-e[6]*e[9];const g=e[4]*e[15]-e[7]*e[12];const p=e[4]*e[14]-e[6]*e[12];const _=e[4]*e[11]-e[7]*e[8];const h=e[4]*e[10]-e[6]*e[8];const v=e[4]*e[13]-e[5]*e[12];const b=e[4]*e[9]-e[5]*e[8];const y=[+(e[5]*n-e[6]*s+e[7]*r),-(e[1]*n-e[2]*s+e[3]*r),+(e[1]*i-e[2]*f+e[3]*l),-(e[1]*d-e[2]*u+e[3]*m),-(e[4]*n-e[6]*c+e[7]*o),+(e[0]*n-e[2]*c+e[3]*o),-(e[0]*i-e[2]*g+e[3]*p),+(e[0]*d-e[2]*_+e[3]*h),+(e[4]*s-e[5]*c+e[7]*a),-(e[0]*s-e[1]*c+e[3]*a),+(e[0]*f-e[1]*g+e[3]*v),-(e[0]*u-e[1]*_+e[3]*b),-(e[4]*r-e[5]*o+e[6]*a),+(e[0]*r-e[1]*o+e[2]*a),-(e[0]*l-e[1]*p+e[2]*v),+(e[0]*m-e[1]*h+e[2]*b)];const E=1/t;return y.map((e=>e*E))};const Np=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0]);const zp=(e=0,t=0,n=0)=>[...Np,e,t,n,1];const Bp=(e,t,n,s,r)=>{const c=Math.cos(e);const o=Math.sin(e);const a=[...jp];a[n*4+n]=c;a[n*4+s]=(r?+1:-1)*o;a[s*4+n]=(r?-1:+1)*o;a[s*4+s]=c;const i=[0,1,2].map((e=>t[e]||0));const f=[...jp];const l=[...jp];[12,13,14].forEach(((e,t)=>{f[e]=-i[t];l[e]=i[t]}));return Vp(l,Vp(a,f))};const $p=(e,t=[0,0,0])=>Bp(e,t,1,2,true);const Rp=(e,t=[0,0,0])=>Bp(e,t,0,2,false);const Lp=(e,t=[0,0,0])=>Bp(e,t,0,1,true);const Ip=(e,t=[0,0,1],n=[0,0,0])=>{const s=[0,1,2].map((e=>n[e]||0));const[r,c,o]=Z(3,h(t));const a=Math.cos(e);const i=Math.sin(e);const f=1-a;const l=zp(-s[0],-s[1],-s[2]);const d=zp(s[0],s[1],s[2]);return Vp(d,Vp([f*r*r+a,f*c*r+o*i,f*o*r-c*i,0,f*r*c-o*i,f*c*c+a,f*o*c+r*i,0,f*r*o+c*i,f*c*o-r*i,f*o*o+a,0,0,0,0,1],l))};const Up=(e=[1,1,1],t=[0,0,0])=>[e[0],0,0,0,0,e[1],0,0,0,0,e[2],0,e[0]*-t[0]+t[0],e[1]*-t[1]+t[1],e[2]*-t[2]+t[2],1];const Qp=(e=1,t=[0,0,0])=>Up([e,e,e],t);const Dp=(e,t=[0,0])=>{const n=me(e,t);return[n[0],n[1],0,0,n[2],n[3],0,0,0,0,1,0,n[4],n[5],0,1]};const qp=(e,t,n,s)=>{const r=Math.tan(Math.PI*.5-.5*e);const c=1/(n-s);const o=t<1?r:r/t;const a=t<1?r*t:r;return[o,0,0,0,0,a,0,0,0,0,(n+s)*c,-1,0,0,n*s*c*2,0]};const Wp=(e,t,n,s,r,c)=>[2/(t-s),0,0,0,0,2/(e-n),0,0,0,0,2/(r-c),0,(s+t)/(s-t),(n+e)/(n-e),(r+c)/(r-c),1];const Gp=(e,t,n)=>{const s=b(j(e,t));const r=b(R(n,s));const c=b(R(s,r));return[r[0],r[1],r[2],0,c[0],c[1],c[2],0,s[0],s[1],s[2],0,e[0],e[1],e[2],1]};const Hp=Object.freeze({__proto__:null,determinant4:Pp,identity4x4:jp,invertMatrix4:Tp,isIdentity4x4:Fp,makeLookAtMatrix4:Gp,makeMatrix4ReflectZ:Dp,makeMatrix4Rotate:Ip,makeMatrix4RotateX:$p,makeMatrix4RotateY:Rp,makeMatrix4RotateZ:Lp,makeMatrix4Scale:Up,makeMatrix4Translate:zp,makeMatrix4UniformScale:Qp,makeOrthographicMatrix4:Wp,makePerspectiveMatrix4:qp,multiplyMatrices4:Vp,multiplyMatrix4Line3:Cp,multiplyMatrix4Vector3:Sp});const Jp=(e,t)=>{const n=R(e,t);const s=[n[0],n[1],n[2],F(e,t)];s[3]+=m(s);return h(s)};const Zp=e=>Vp([e[3],e[2],-e[1],e[0],-e[2],e[3],e[0],e[1],e[1],-e[0],e[3],e[2],-e[0],-e[1],-e[2],e[3]],[e[3],e[2],-e[1],-e[0],-e[2],e[3],e[0],-e[1],e[1],-e[0],e[3],-e[2],e[0],e[1],e[2],e[3]]);const Yp=Object.freeze({__proto__:null,matrix4FromQuaternion:Zp,quaternionFromTwoVectors:Jp});const Xp=({vertices_coords:e,faces_vertices:t},n=a)=>{const s=ms({vertices_coords:e,faces_vertices:t});const r=t.map((()=>[]));for(let e=0;e<t.length-1;e+=1){for(let c=e+1;c<t.length;c+=1){if(e===c){continue}if(G(s[e],s[c],n)){r[e].push(c);r[c].push(e)}}}const c=io(r);const o=ar(c).map((e=>typeof e==="number"?[e]:e));const i=o.map((e=>s[e[0]]));const f=[];o.forEach(((e,t)=>e.forEach((e=>{f[e]=C(s[e],i[t])>0}))));const l=t.map((t=>e[t[0]])).map((e=>Z(3,e)));const d=o.map(((e,t)=>e.map((e=>C(i[t],l[e])))));const u=d.map(((e,t)=>nc(e).map((e=>e.map((e=>o[t][e]))))));const m=u.flatMap(((e,t)=>e.map((()=>[...i[t]]))));const g=u.flat();const p=g.map((e=>e[0])).map((e=>l[e])).map(((e,t)=>C(m[t],e))).map(((e,t)=>M(m[t],e)));const _=g.map(((e,t)=>({normal:m[t],origin:p[t]})));return g.map(((e,t)=>({faces:e,facesAligned:e.map((e=>f[e])),plane:_[t]})))};const Kp=(e,t,n,s)=>{const r=e.vertices_coords.map((e=>Z(3,e)));const c=t.map((t=>t.faces.map(((n,s)=>t.facesAligned[s]?e.faces_vertices[n]:e.faces_vertices[n].slice().reverse())).map((e=>e.map((e=>r[e])))).map((e=>Ze(e,s)))));const o=[];const a=c.map(((e,t)=>e.map((e=>e.map((e=>Sp(n[t],e))).map((e=>[e[0],e[1]]))))));t.map((e=>e.faces)).forEach(((e,t)=>e.forEach(((e,n)=>{o[e]=a[t][n]}))));return o};const e_=({vertices_coords:e,faces_vertices:t,faces_faces:n},s=a)=>{if(!n){n=Ds({faces_vertices:t})}const r=Xp({vertices_coords:e,faces_vertices:t},s);const c=[];r.forEach((e=>e.facesAligned.forEach(((t,n)=>{c[e.faces[n]]=t}))));const o=[0,0,1];const i=r.map((e=>e.plane.normal)).map((e=>{const t=F(e,o);return Math.abs(t+1)<.01?Ip(Math.PI,[1,0,0]):Zp(Jp(e,o))}));const f=Kp({vertices_coords:e,faces_vertices:t},r,i,s);const l=r.map((e=>e.faces)).map((e=>eo(n,e)));const d=l.map((e=>io(e)));const u=d.map((e=>ar(e).map((e=>e.constructor===Array?e:[e]))));const m=d.map((e=>{const t=e.map(((e,t)=>t));return e.map((n=>t.filter((t=>e[t]!==n))))}));const g=t.map((()=>[]));m.forEach((e=>e.forEach(((e,t)=>{for(let n=0;n<e.length;n+=1){const r=e[n];const c=[t,r].map((e=>f[e]));const o=Nr(...c,s);if(o){g[t][r]=true;g[r][t]=true}}}))));const p=m.map((e=>e.map(((e,t)=>e.filter((e=>g[t][e]))))));const _=[];p.forEach(((e,t)=>{_[t]=[];e.forEach(((e,n)=>{const s=d[t][n];const r=e.map((e=>d[t][e]));if(!_[t][s]){_[t][s]=new Set}r.forEach((e=>{if(!_[t][e]){_[t][e]=new Set}}));r.forEach((e=>{_[t][s].add(e);_[t][e].add(s)}))}))}));_.forEach(((e,t)=>e.forEach(((e,n)=>{_[t][n]=[...e]}))));const h=_.map((e=>ar(io(e)).map((e=>e.constructor===Array?e:[e]))));const v=h.flatMap(((e,t)=>e.map((()=>t))));const b=r.map(((e,t)=>h[t].map((e=>e.flatMap((e=>u[t][e]))))));const y=b.flatMap(((e,t)=>e.map((e=>({faces:e,facesAligned:e.map((e=>c[e])),plane:r[t].plane})))));const E=v.map((e=>r[e].plane));const M=v.map((e=>i[e]));const A=y.map((e=>e.faces));const x=ar(A);return{sets_faces:A,sets_plane:E,sets_transformXY:M,faces_set:x,faces_winding:c}};const t_=Object.freeze({__proto__:null,coplanarFacesGroups:Xp,coplanarOverlappingFacesGroups:e_});const n_=({vertices_coords:e,edges_vertices:t,edges_vector:n},s=a)=>{if(!n){n=$s({vertices_coords:e,edges_vertices:t})}const r=n.map((e=>h(e)));const c=t.map((()=>[]));r.forEach(((e,t)=>{r.forEach(((e,n)=>{if(n>=t){return}if(1-Math.abs(F(r[t],r[n]))<s){c[t].push(n);c[n].push(t)}}))}));return c};const s_=({vertices_coords:e,edges_vertices:t,edges_vector:n},s)=>{if(!n){n=$s({vertices_coords:e,edges_vertices:t})}const r=t.map((t=>e[t[0]]));const c=n.map(((e,t)=>({vector:e,origin:r[t]})));return n_({vertices_coords:e,edges_vertices:t,edges_vector:n},.001).map(((e,t)=>e.filter((e=>Cr(c[t],c[e],dt,dt,s)))))};const r_=Object.freeze({__proto__:null,makeEdgesEdgesParallelOverlap:s_});const c_=e=>e.map((e=>e.map(((e,t)=>e===true?t:undefined)).filter((e=>e!==undefined))));const o_=({vertices_coords:e,edges_vertices:t,edges_coords:n,edges_boundingBox:s},r=a)=>{if(!n){n=Bs({vertices_coords:e,edges_vertices:t})}if(!s){s=Ls({vertices_coords:e,edges_vertices:t,edges_coords:n})}const c=t.map(((e,t)=>t)).shift();const o=Array.from(Array(n.length)).map((()=>[]));if(c===undefined){return c_(o)}const i=s[c].min.length;for(let e=0;e<n.length-1;e+=1){if(!s[e]){continue}for(let t=e+1;t<n.length;t+=1){if(!s[t]){continue}let n=true;for(let c=0;c<i;c+=1){if(!tt(s[e].min[c],s[t].min[c],r)||!tt(s[e].max[c],s[t].max[c],r)){n=false}}o[e][t]=n;o[t][e]=n}}for(let e=0;e<n.length-1;e+=1){for(let t=e+1;t<n.length;t+=1){if(!o[e][t]){continue}const s=st(n[e][0],n[t][0],r)&&st(n[e][1],n[t][1],r);const c=st(n[e][0],n[t][1],r)&&st(n[e][1],n[t][0],r);const a=s||c;o[e][t]=a;o[t][e]=a}}return c_(o)};const a_=({vertices_coords:e,edges_vertices:t,edges_vector:n,edges_faces:s,faces_vertices:r},c=a)=>{if(!n){n=$s({vertices_coords:e,edges_vertices:t})}const o=t.map((t=>e[t[0]]));const i=t.map((()=>Array.from(Array(r.length))));s.forEach(((e,t)=>e.forEach((e=>{i[t][e]=false}))));const f=t.map((t=>t.map((t=>e[t]))));const l=r.map((t=>t.map((t=>e[t]))));ad({vertices_coords:e,faces_vertices:r}).map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined)).forEach((e=>l[e].reverse()));const d=Ls({edges_coords:f});const u=l.map((e=>Ke(e)));for(let e=0;e<i.length;e+=1){if(!d[e]){continue}for(let t=0;t<i[e].length;t+=1){if(i[e][t]===false){continue}if(!u[t]){continue}if(!zr(u[t],d[e],c)){i[e][t]=false;continue}}}const m=o_({vertices_coords:e,edges_vertices:t,edges_coords:f,edges_boundingBox:d});const g={};for(let e=0;e<i.length;e+=1){if(g[e]){continue}if(!f[e]){continue}for(let t=0;t<i[e].length;t+=1){if(i[e][t]!==undefined){continue}if(!l[t]){continue}const s=f[e].map((e=>Pr(l[t],e,ct,.001))).reduce(((e,t)=>e||t),false);if(s){i[e][t]=true;continue}const r=Xr(l[t],{vector:n[e],origin:o[e]},dt,dt,c);if(r){i[e][t]=true;continue}i[e][t]=false}m[e].forEach((t=>{i[t]=i[e].slice();g[t]=true}))}return i.map((e=>e.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined))))};const i_=Object.freeze({__proto__:null,getEdgesFacesOverlap:a_});const f_=({vertices_coords:e,faces_vertices:t},n=a)=>{const s=qs({vertices_coords:e,faces_vertices:t});const r=s.map((e=>Ke(e)));const c=[];const o=[];fc({vertices_coords:e,faces_vertices:t},0,n).forEach((e=>{e.start.forEach((e=>{o[e]=true}));o.forEach(((t,o)=>e.start.forEach((e=>{if(o===e){return}if(!zr(r[o],r[e],n)||!Nr(s[o],s[e],n)){return}if(!c[o]){c[o]=[]}if(!c[e]){c[e]=[]}c[o][e]=true;c[e][o]=true}))));e.end.forEach((e=>delete o[e]))}));return c.map((e=>Object.keys(e).map((e=>parseInt(e,10)))))};const l_=Object.freeze({__proto__:null,getFacesFacesOverlap:f_});const d_=(e,t)=>{if(!e.vertices_coords){e.vertices_coords=[]}const n=e.vertices_coords.length;St(e,"vertices").forEach((t=>{e[t][n]=[]}));e.vertices_coords[n]=t;return n};const u_=(e,t)=>{if(t.length!==2){return undefined}if(!e.edges_vertices){e.edges_vertices=[]}const n=e.edges_vertices.length;St(e,"edges").forEach((t=>{e[t][n]=[]}));e.edges_vertices[n]=t;if(e.edges_assignment){e.edges_assignment[n]="U"}if(e.edges_foldAngle){e.edges_foldAngle[n]=0}if(e.vertices_edges){t.forEach((t=>{e.vertices_edges[t]=e.vertices_edges[t].filter((e=>e!==n));e.vertices_edges[t].push(n)}))}if(e.vertices_vertices){const n=[t[1],t[0]];t.forEach(((t,s)=>{e.vertices_vertices[t]=e.vertices_vertices[t].filter((e=>e!==n[s]));e.vertices_vertices[t].push(n[s])}))}return n};const m_=(e,{vector:t,origin:n},s=a)=>{const r=gu(e,{vector:t,origin:n},s).filter(Boolean);const c=r.map((e=>k(e,n))).map((e=>F(e,t)));const o=fn(c);const i=o.map((e=>A(y(t,e),n)));const f=Array.from(Array(i.length-1)).map(((e,t)=>[i[t],i[t+1]])).map((t=>vu(e,t[0],t[1],s)));return f};const g_=(e,t,n,s=a)=>{e.faces_vertices[t].map((t=>e.vertices_coords[t])).map((e=>n.map((t=>st(e,t,s)))));e.faces_vertices[t].map((t=>e.vertices_coords[t])).map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>jn(...e))).map((e=>n.map((t=>Sr(e,t,dt,s)))))};const p_=(e,t,n=a)=>{const s=O(t[1],t[0]);const r=t[0];const c=Zc(e,t,n);const o=c.map((t=>e.faces_vertices[t].map((t=>e.vertices_coords[t])))).map((e=>eu(e,{vector:s,origin:r},rt,lt,n)));const i=[];c.forEach(((e,t)=>{if(o[t]){i[e]=o[t]}}));return i};const __=(e,t,n=a)=>{const s=p_(e,t,n);console.log("facesSegment",s);const r=s.map(((t,s)=>g_(e,s,t,n)));return r};const h_=(e,t,n)=>{const s=ar(n);Ct(e,t).forEach((t=>e[t].forEach(((s,r)=>e[t][r].forEach(((s,c)=>{e[t][r][c]=n[s]}))))));Ct(e,t).forEach((t=>e[t].forEach(((n,s)=>{e[t][s]=e[t][s].filter((e=>e!==undefined))}))));St(e,t).forEach((t=>{e[t]=s.map((n=>e[t][n]))}))};const v_=e=>{const t={vertices:[],edges:[],faces:[]};let n=0;let s=0;let r=0;e.vertices_coords.forEach(((e,s)=>{t.vertices[s]=n++}));e.edges_vertices.forEach(((e,n)=>{t.edges[n]=s++}));e.faces_vertices.forEach(((e,n)=>{t.faces[n]=r++}));h_(e,"vertices",t.vertices);h_(e,"edges",t.edges);h_(e,"faces",t.faces);return e};const b_=(e,t,n=ot,s=ot,r=a)=>{const c=$(v(e.vector),v(t.vector));if(Math.abs(c)<r){return undefined}const o=$(e.vector,t.vector);const i=-o;const f=[t.origin[0]-e.origin[0],t.origin[1]-e.origin[1]];const l=[-f[0],-f[1]];const d=$(f,t.vector)/o;const u=$(l,e.vector)/i;if(n(d,r/g(e.vector))&&s(u,r/g(t.vector))){return{point:x(e.origin,E(e.vector,d)),a:d,b:u}}return undefined};const y_=({vertices_coords:e,faces_vertices:t},n,s)=>{const r=Lr({vertices_coords:e,faces_vertices:t},n,rt);switch(r.length){case 0:return undefined;case 1:return r[0]}const c=x(n,E(s,.01));const o=r.map((n=>t[n].map((t=>e[t]))));const a=r.filter(((e,t)=>Pr(o[t],c,ct)));switch(a.length){case 0:return r.filter(((e,t)=>Pr(o[t],c,rt))).shift();case 1:return a[0];default:return a[0]}};const E_=({vertices_coords:e,edges_vertices:t},{vector:n,origin:s},r=a,c=lt)=>t.map((t=>{const o=t.map((t=>e[t]));const a=O(o[1],o[0]);const i={vector:a,origin:o[0]};return b_(i,{vector:n,origin:s},c,ot,r)}));const M_=({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_edges:c,faces_faces:o},{vector:i,origin:f},l="V",d=a)=>{if(!c){c=Qs({edges_vertices:t,faces_vertices:r})}const u=y_({vertices_coords:e,faces_vertices:r},f,i);const m=It(l);const g=Po({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_faces:o},u);const p=ad({vertices_coords:g,faces_vertices:r});if(!p[u]){p.forEach(((e,t)=>{p[t]=!e}))}const _=E_({vertices_coords:g,edges_vertices:t},{vector:i,origin:f},d).map(((e,t)=>e===undefined?undefined:{...e,edge:t}));const h=t.map((t=>e[t[0]]));const v=$s({vertices_coords:e,edges_vertices:t});const b=[];c.map((e=>e.map((e=>_[e])).filter((e=>e!==undefined)))).forEach(((e,t)=>{switch(e.length){case 0:case 1:break;default:b[t]=e;break}}));const y=(e,t)=>Math.abs(e.b-t.b)<d*2;const M=[];b.map((e=>e.sort(((e,t)=>e.b-t.b)))).map((e=>tc(e,y).map((t=>t.map((t=>e[t])))))).forEach(((e,t)=>{if(e.length===2){M[t]=[e[0][0],e[e.length-1][0]]}if(e.length>2){console.log("repeatFoldLine, non-convex polygons.")}}));return M.map(((e,t)=>({edges:e.map((e=>e.edge)),assignment:p[t]?l:m,points:e.map((e=>x(E(v[e.edge],e.a),h[e.edge])))})))};const A_={count:tn,countImplied:Xn,validate:ao,clean:ur,populate:Ac,remove:yn,replace:_n,removePlanarVertex:Au,removePlanarEdge:Mu,splitEdge:Pc,splitFace:Kc,flatFold:qu,normalize:v_,repeatFold:M_,addVertex:d_,addNonPlanarEdge:u_,addPlanarLine:m_,addPlanarSegment:vu,addPlanarSegmentNew:__,planarize:yc,...lo,...Ul,...Kg,...ht,...Dt,...Eo,...iu,...pr,...sp,...ip,...dp,...Js,...dr,...Dr,...ps,...vd,...up,...pp,...co,...dc,...bp,...ld,...go,...Yt,...ko,...Op,...ns,...Kt,...pc,...bn,...To,...wn,...us,...nr,...Xs,...mc,...hc,...t_,...Ao,...Co,...id,...lu,...pu,...r_,...i_,...Xc,...l_};const x_=(e,t=a)=>{if(!e||!e.length){return undefined}const n=(e,n)=>nt(e[0],n[0],t);const s=ec(e,n);let r=0;for(let t=1;t<s.length;t+=1){if(e[s[t]][1]<e[s[r]][1]){r=t}}return s[r]};const w_=(e,t=a)=>{const n=x_(e,t);if(n===undefined){return[]}const s=e.map((t=>O(t,e[n]))).map((e=>v(e))).map((e=>S([0,1],e)));const r=s.map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).map((e=>e.i)).filter((e=>e!==n));return[[n]].concat(nc(r.map((e=>s[e])),t).map((e=>e.map((e=>r[e])))).map((t=>t.length===1?t:t.map((t=>({i:t,len:I(e[t],e[n])}))).sort(((e,t)=>e.len-t.len)).map((e=>e.i)))))};const k_=(e=[],t=false,n=a)=>{if(e.length<2){return[]}const s=w_(e,n).map((e=>e.length===1?e:nn(e))).flat();s.push(s[0]);const r=[s[0]];let c=1;const o={"-1":()=>r.pop(),1:e=>{r.push(e);c+=1},undefined:()=>{c+=1}};o[0]=t?o["1"]:o["-1"];while(c<s.length){if(r.length<2){r.push(s[c]);c+=1;continue}const t=r[r.length-2];const a=r[r.length-1];const i=s[c];const f=Gn(...[t,a,i].map((t=>e[t])),n);o[f](i)}r.pop();return r};const O_=Object.freeze({__proto__:null,convexHull:k_,convexHullRadialSortPoints:w_,smallestVector2:x_});const j_=(e,t,n)=>{const s=e.map(((e,t)=>({vector:n[t],origin:e}))).map(((e,t,n)=>qr(e,n[(t+1)%n.length],ft,ft).point));const r=t.map(((e,t)=>kr(e,s[t],(e=>e))));if(e.length===3){return e.map((e=>({type:"skeleton",points:[e,s[0]]}))).concat([{type:"perpendicular",points:[r[0],s[0]]}])}const c=s.map(((e,t)=>L(e,r[t])));let o=0;c.forEach(((e,t)=>{if(e<c[o]){o=t}}));const a=[{type:"skeleton",points:[e[o],s[o]]},{type:"skeleton",points:[e[(o+1)%e.length],s[o]]},{type:"perpendicular",points:[r[o],s[o]]}];const i=Bn(Q(t[(o+t.length-1)%t.length].vector),t[(o+1)%t.length].vector);const f=o===e.length-1;e.splice(o,2,s[o]);t.splice(o,1);n.splice(o,2,i);if(f){e.splice(0,1);n.splice(0,1);t.push(t.shift())}return a.concat(j_(e,t,n))};const F_=e=>{const t=e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>({vector:k(e[1],e[0]),origin:e[0]})));const n=e.map(((e,t,n)=>[(t-1+n.length)%n.length,t,(t+1)%n.length].map((e=>n[e])))).map((e=>[k(e[0],e[1]),k(e[2],e[1])])).map((e=>Bn(...e)));return j_([...e],t,n)};const S_=(e,t)=>{if(e[0]===undefined||e[1]===undefined||e[2]===undefined){return undefined}const n=E(O(e[1],e[0]),1/I(e[1],e[0]));const s=S(n,O(e[2],e[0]));const r=E(n,s);const c=O(O(e[2],e[0]),r);const o=E(c,1/g(c));const a=I(e[1],e[0]);const i=S(o,O(e[2],e[0]));const f=(t[0]**2-t[1]**2+a**2)/(2*a);const l=(t[0]**2-t[2]**2+s**2+i**2)/(2*i)-s*f/i;return x(x(e[0],E(n,f)),E(o,l))};const C_=(e,t,n)=>{const s=t[0]-e[0];const r=t[1]-e[1];const c=n[0]-e[0];const o=n[1]-e[1];const i=s*(e[0]+t[0])+r*(e[1]+t[1]);const f=c*(e[0]+n[0])+o*(e[1]+n[1]);const l=2*(s*(n[1]-t[1])-r*(n[0]-t[0]));if(Math.abs(l)<a){const s=Math.min(e[0],t[0],n[0]);const r=Math.min(e[1],t[1],n[1]);const c=(Math.max(e[0],t[0],n[0])-s)*.5;const o=(Math.max(e[1],t[1],n[1])-r)*.5;return{origin:[s+c,r+o],radius:Math.sqrt(c*c+o*o)}}const d=[(o*i-r*f)/l,(s*f-c*i)/l];const u=d[0]-e[0];const m=d[1]-e[1];return{origin:d,radius:Math.sqrt(u*u+m*m)}};const V_=Object.freeze({__proto__:null,circumcircle:C_,trilateration:S_});const P_=(e,t,n=a)=>{for(let s=0;s<e.length;s+=1){if(e[s]<t.min[s]-n||e[s]>t.max[s]+n){return false}}return true};const T_=(e,t,n=a)=>{const s=Math.min(e.min.length,t.min.length);for(let r=0;r<s;r+=1){if(t.min[r]<e.min[r]-n||t.max[r]>e.max[r]+n){return false}}return true};const N_=Object.freeze({__proto__:null,enclosingBoundingBoxes:T_,pointInBoundingBox:P_});const z_=(e,t)=>{const n=e.map(((e,n)=>{const s=Sr(t,e,ot);return{point:s?e:null,at_index:n}})).filter((e=>e.point!=null));const s=e.map(((e,t,n)=>({vector:k(e,n[(t+1)%n.length]),origin:n[(t+1)%n.length]}))).map(((e,n)=>({point:qr(t,e,at,dt).point,at_index:n}))).filter((e=>e.point!=null));if(s.length===2){const t=s.slice().sort(((e,t)=>e.at_index-t.at_index));const n=e.slice(t[1].at_index+1).concat(e.slice(0,t[0].at_index+1));n.push(t[0].point);n.push(t[1].point);const r=e.slice(t[0].at_index+1,t[1].at_index+1);r.push(t[1].point);r.push(t[0].point);return[n,r]}if(s.length===1&&n.length===1){n[0].type="v";s[0].type="e";const t=n.concat(s).sort(((e,t)=>e.at_index-t.at_index));const r=e.slice(t[1].at_index+1).concat(e.slice(0,t[0].at_index+1));if(t[0].type==="e"){r.push(t[0].point)}r.push(t[1].point);const c=e.slice(t[0].at_index+1,t[1].at_index+1);if(t[1].type==="e"){c.push(t[1].point)}c.push(t[0].point);return[r,c]}if(n.length===2){const t=n.slice().sort(((e,t)=>e.at_index-t.at_index));const s=e.slice(t[1].at_index).concat(e.slice(0,t[0].at_index+1));const r=e.slice(t[0].at_index,t[1].at_index+1);return[s,r]}return[e.slice()]};const B_=Object.freeze({__proto__:null,splitConvexPolygon:z_});const $_=e=>{if(typeof e!=="object"){return typeof e}if(e.radius!==undefined){return"circle"}if(e.min&&e.max&&e.span){return"box"}if(typeof e[0]==="number"){return"vector"}if(e.vector!==undefined&&e.origin!==undefined){return"line"}if(e[0]!==undefined&&e[0].length&&typeof e[0][0]==="number"){return e.length===2?"segment":"polygon"}return"object"};const R_=e=>e.charAt(0).toUpperCase()+e.slice(1);const L_={polygon:lt,circle:rt,line:ot,ray:it,segment:lt};const I_=(e,t,n=a)=>{const s=e=>e==="polygon"?"ConvexPolygon":R_(e);const r=[e,t].map($_);const c=[r,r.slice().reverse()].map((e=>e.map(s).join(""))).map((e=>Kr[`intersect${e}`]));const o=[e.domain,t.domain].map(((e,t)=>e||L_[r[t]]));const i=[[e,t,...o],[t,e,...o.slice().reverse()]];const f=c.map(((e,t)=>({fn:e,params:i[t]}))).filter((e=>e.fn)).shift();return f?f.fn(...f.params,n):undefined};const U_={...d,...Cn,...ut,...te,...ge,...Ve,...Hp,...Yp,...O_,...Ar,...Fr,...rs,...et,...Hn,straightSkeleton:F_,...V_,...N_,...Br,...Kr,...nu,...B_,intersect:I_};const Q_=e=>{const t=e.map((e=>e.toUpperCase()));const n=t.filter((e=>e==="M")).length;const s=t.filter((e=>e==="V")).length;return n>s?t.indexOf("V"):t.indexOf("M")};const D_=(e,t,n=0)=>{const s=Q_(t);if(s===-1){return undefined}const r=e[(s+1)%e.length];const c=e[(s+2)%e.length];const o=Math.max(-Math.PI,Math.min(Math.PI,n));const a=-Math.cos(r)*Math.cos(c)+Math.sin(r)*Math.sin(c)*Math.cos(Math.PI-o);const i=Math.cos(Math.PI-o)-Math.sin(Math.PI-o)**2*Math.sin(r)*Math.sin(c)/(1-a);const f=-Math.acos(i)+Math.PI;return s%2===0?[f,o,f,o].map(((e,t)=>s===t?-e:e)):[o,f,o,f].map(((e,t)=>s===t?-e:e))};const q_=Object.freeze({__proto__:null,foldDegree4:D_});const W_=({vertices_coords:e,vertices_vertices:t,vertices_edges:n,vertices_faces:s,edges_vertices:r,edges_foldAngle:c,edges_vector:o,faces_vertices:i},l=a)=>{if(!t){t=ys({vertices_coords:e,vertices_edges:n,vertices_faces:s,edges_vertices:r,faces_vertices:i})}if(!n){n=hs({edges_vertices:r,vertices_vertices:t})}if(!s){s=As({vertices_coords:e,vertices_vertices:t,faces_vertices:i})}const d=Os({vertices_coords:e,vertices_vertices:t,vertices_edges:n,vertices_faces:s,edges_vertices:r,edges_vector:o,faces_vertices:i});return e.map(((e,t)=>{if(s[t].includes(undefined)||s[t].includes(null)){return true}const r=d[t].map((e=>Math.atan2(e[1],e[0])));const o=n[t].map((e=>c[e])).map((e=>e*f));const a=r.map((e=>Oe(e)));const i=a.map((e=>Me(e)));const u=o.map((e=>we(e)));const m=d[t].map(((e,t)=>ye(a[t],ye(u[t],i[t]))));let g=_e;m.forEach((e=>{g=ye(g,e)}));return Array.from(Array(9)).map(((e,t)=>Math.abs(g[t]-_e[t])<l)).reduce(((e,t)=>e&&t),true)}))};const G_=Object.freeze({__proto__:null,verticesFoldable:W_});const H_={U:true,u:true};const J_=e=>e.map(((e,t)=>t)).filter((t=>H_[e[t]]));const Z_=e=>{const t=J_(e);const n=Array.from(Array(2**t.length)).map(((e,t)=>t.toString(2))).map((e=>Array(t.length-e.length+1).join("0")+e)).map((e=>Array.from(e).map((e=>e==="0"?"V":"M"))));const s=n.map((n=>{const s=e.slice();t.forEach(((e,t)=>{s[e]=n[t]}));return s}));const r=e.filter((e=>xt[e])).length;if(r>0){return s}const c=s.map((e=>e.filter((e=>e==="M"||e==="m")).length));const o=s.map((e=>e.filter((e=>e==="V"||e==="v")).length));return s.filter(((e,t)=>Math.abs(c[t]-o[t])===2))};const Y_=Object.freeze({__proto__:null,maekawaSolver:Z_});const X_={...q_,...G_,...Fu,...Y_,...Pu};const K_=(e,t,n)=>{const s=e.createShader(n);e.shaderSource(s,t);e.compileShader(s);if(!e.getShaderParameter(s,e.COMPILE_STATUS)){throw new Error(e.getShaderInfoLog(s))}return s};const eh=(e,t,n)=>{const s=e.createProgram();e.attachShader(s,t);e.attachShader(s,n);e.linkProgram(s);if(!e.getProgramParameter(s,e.LINK_STATUS)){throw new Error(e.getProgramInfoLog(s))}e.deleteShader(t);e.deleteShader(n);return s};const th=(e,t,n)=>{const s=K_(e,t,e.VERTEX_SHADER);const r=K_(e,n,e.FRAGMENT_SHADER);return eh(e,s,r)};const nh=(e,t)=>{const s=[null,"webgl","webgl2"];const r=window.devicePixelRatio||1;e.width=e.clientWidth*r;e.height=e.clientHeight*r;if(t){return{gl:e.getContext(s[t]),version:t}}const c=e.getContext(s[2]);if(c){return{gl:c,version:2}}const o=e.getContext(s[1]);if(o){return{gl:o,version:1}}throw new Error(n.noWebGL)};const sh=(e,t)=>{if(!e){return}const n=window.devicePixelRatio||1;const s=[t.clientWidth,t.clientHeight].map((e=>e*n));if(t.width!==s[0]||t.height!==s[1]){t.width=s[0];t.height=s[1]}e.viewport(0,0,e.canvas.width,e.canvas.height)};const rh=(e,t="perspective",n=45)=>{if(!e){return jp}const s=.1;const r=20;const c=-100;const o=100;const a=[e.clientWidth,e.clientHeight];const i=Math.min(...a);const f=[0,1].map((e=>(a[e]-i)/i/2));const l=f.map((e=>e+.5));return t==="orthographic"?Wp(l[1],l[0],-l[1],-l[0],c,o):qp(n*(Math.PI/180),a[0]/a[1],s,r)};const ch=e=>{if(!e){return jp}const t=po(e);if(!t){return jp}const n=Math.max(...t.span);if(n===0){return jp}const s=Z(3,V(t.min,t.max));const r=[n,0,0,0,0,n,0,0,0,0,n,0,...s,1];return Tp(r)||jp};const oh=Object.freeze({__proto__:null,makeModelMatrix:ch,makeProjectionMatrix:rh,rebuildViewport:sh});const ah=(e,t,n,s)=>{switch(n){case"uniformMatrix4fv":e[n](t,false,s);break;default:e[n](t,s);break}};const ih=(e,t,n,s={})=>{e.useProgram(n.program);n.flags.forEach((t=>e.enable(t)));const r=e.getProgramParameter(n.program,e.ACTIVE_UNIFORMS);for(let t=0;t<r;t+=1){const r=e.getActiveUniform(n.program,t).name;const c=s[r];if(c){const t=e.getUniformLocation(n.program,r);ah(e,t,c.func,c.value)}}n.vertexArrays.forEach((t=>{e.bindBuffer(e.ARRAY_BUFFER,t.buffer);e.bufferData(e.ARRAY_BUFFER,t.data,e.STATIC_DRAW);e.vertexAttribPointer(t.location,t.length,t.type,false,0,0);e.enableVertexAttribArray(t.location)}));n.elementArrays.forEach((n=>{e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n.buffer);e.bufferData(e.ELEMENT_ARRAY_BUFFER,n.data,e.STATIC_DRAW);e.drawElements(n.mode,n.data.length,t===2?e.UNSIGNED_INT:e.UNSIGNED_SHORT,n.buffer)}));n.flags.forEach((t=>e.disable(t)))};const fh=(e,t)=>{t.vertexArrays.forEach((t=>e.disableVertexAttribArray(t.location)));t.vertexArrays.forEach((t=>e.deleteBuffer(t.buffer)));t.elementArrays.forEach((t=>e.deleteBuffer(t.buffer)));e.deleteProgram(t.program)};const lh=Object.freeze({__proto__:null,deallocProgram:fh,drawProgram:ih});const dh={B:[.5,.5,.5],b:[.5,.5,.5],V:[.2,.4,.6],v:[.2,.4,.6],M:[.75,.25,.15],m:[.75,.25,.15],F:[.3,.3,.3],f:[.3,.3,.3],J:[.3,.2,0],j:[.3,.2,0],C:[.5,.8,.1],c:[.5,.8,.1],U:[.6,.25,.9],u:[.6,.25,.9]};const uh={B:[0,0,0],b:[0,0,0],V:[.2,.5,.8],v:[.2,.5,.8],M:[.75,.25,.15],m:[.75,.25,.15],F:[.75,.75,.75],f:[.75,.75,.75],J:[1,.75,.25],j:[1,.75,.25],C:[.5,.8,.1],c:[.5,.8,.1],U:[.6,.25,.9],u:[.6,.25,.9]};const mh=e=>e!==undefined&&e.constructor===Array?e.slice(0,3):ka(e).slice(0,3).map((e=>e/255));const gh=({vertices_coords:e,edges_assignment:t,faces_vertices:n,faces_edges:s,faces_normal:r},c={})=>{const o=e.map((e=>[...e].concat(Array(3-e.length).fill(0))));const a=gs({vertices_coords:o,faces_vertices:n,faces_normal:r});const i=o.map(((e,t)=>t%3)).map((e=>[e===0?1:0,e===1?1:0,e===2?1:0]));const f=s.map((e=>e.map((e=>t[e])).map((e=>e==="J"||e==="j"))));if(!c.showTrianglulation){for(let e=0;e<f.length;e+=1){if(f[e][0]){i[e*3+0][2]=i[e*3+1][2]=100}if(f[e][1]){i[e*3+1][0]=i[e*3+2][0]=100}if(f[e][2]){i[e*3+0][1]=i[e*3+2][1]=100}}}return{vertices_coords:o,vertices_normal:a,vertices_barycentric:i}};const ph=(e,t)=>{if(!e||!e.vertices_coords||!e.edges_vertices){return[]}const n=t&&t.dark?dh:uh;const s={...n,...t};const r=e.vertices_coords.map((e=>[...e].concat(Array(3-e.length).fill(0))));const c=e.edges_vertices.flatMap((e=>e.map((e=>r[e])))).flatMap((e=>[e,e,e,e]));const o=$s(e);const a=e.edges_assignment?e.edges_assignment.flatMap((e=>Array(8).fill(s[e]))):e.edges_vertices.flatMap((()=>Array(8).fill(s.U)));const i=o.flatMap((e=>[e,e,e,e,e,e,e,e]));const f=e.edges_vertices.flatMap((()=>[[1,0],[0,1],[-1,0],[0,-1],[1,0],[0,1],[-1,0],[0,-1]]));return{vertices_coords:c,vertices_color:a,verticesEdgesVector:i,vertices_vector:f}};const _h=Object.freeze({__proto__:null,makeFacesVertexData:gh,makeThickEdgesVertexData:ph});const hh=(e,t,{vertices_coords:n,edges_vertices:s,edges_assignment:r,faces_vertices:c,faces_edges:o,faces_normal:a}={},i={})=>{if(!n||!c){return[]}if(!o){o=Qs({edges_vertices:s,faces_vertices:c})}const{vertices_coords:f,vertices_normal:l,vertices_barycentric:d}=gh({vertices_coords:n,edges_assignment:r,faces_vertices:c,faces_edges:o,faces_normal:a},i);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:f.length?f[0].length:3,data:new Float32Array(f.flat())},{location:e.getAttribLocation(t,"v_normal"),buffer:e.createBuffer(),type:e.FLOAT,length:l.length?l[0].length:3,data:new Float32Array(l.flat())},{location:e.getAttribLocation(t,"v_barycentric"),buffer:e.createBuffer(),type:e.FLOAT,length:3,data:new Float32Array(d.flat())}].filter((e=>e.location!==-1))};const vh=(e,t=1,n={})=>{if(!n||!n.vertices_coords||!n.faces_vertices){return[]}return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:t===2?new Uint32Array(n.faces_vertices.flat()):new Uint16Array(n.faces_vertices.flat())}]};const bh=(e,t,n,s={})=>{if(!n||!n.vertices_coords||!n.edges_vertices){return[]}const{vertices_coords:r,vertices_color:c,verticesEdgesVector:o,vertices_vector:a}=ph(n,s.assignment_color);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:r.length?r[0].length:3,data:new Float32Array(r.flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:c.length?c[0].length:3,data:new Float32Array(c.flat())},{location:e.getAttribLocation(t,"edge_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:o.length?o[0].length:3,data:new Float32Array(o.flat())},{location:e.getAttribLocation(t,"vertex_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:a.length?a[0].length:3,data:new Float32Array(a.flat())}].filter((e=>e.location!==-1))};const yh=(e,t=1,n={})=>{if(!n||!n.edges_vertices){return[]}const s=n.edges_vertices.map(((e,t)=>t*8)).flatMap((e=>[e+0,e+1,e+4,e+4,e+1,e+5,e+1,e+2,e+5,e+5,e+2,e+6,e+2,e+3,e+6,e+6,e+3,e+7,e+3,e+0,e+7,e+7,e+0,e+4]));return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:t===2?new Uint32Array(s):new Uint16Array(s)}]};const Eh=Object.freeze({__proto__:null,makeFoldedElementArrays:vh,makeFoldedVertexArrays:hh,makeThickEdgesElementArrays:yh,makeThickEdgesVertexArrays:bh});const Mh=5e-6;const Ah=(e,t=Mh)=>{const n=zo(e);if(!n.edges_assignment){const e=tn.edges(n)||Xn.edges(n);n.edges_assignment=Array(e).fill("U")}let s=[];if(n.faceOrders){s=pd(n)}else if(n.faces_layer){s=_d(n)}const r=kp(n);const c=mr(n);if(r.faces){const e=ar(r.faces.map);e.forEach(((e,n)=>{const r=s[e];if(!r){return}c.faces_vertices[n].forEach((e=>{const n=y(r.vector,r.layer*t);c.vertices_coords[e]=A(Z(3,c.vertices_coords[e]),n)}))}))}return c};const xh=(e,{projectionMatrix:t,modelViewMatrix:n,frontColor:s,backColor:r,strokeWidth:c,opacity:o})=>({u_matrix:{func:"uniformMatrix4fv",value:Vp(t,n)},u_projection:{func:"uniformMatrix4fv",value:t},u_modelView:{func:"uniformMatrix4fv",value:n},u_frontColor:{func:"uniform3fv",value:mh(s)},u_backColor:{func:"uniform3fv",value:mh(r)},u_strokeWidth:{func:"uniform1f",value:c},u_opacity:{func:"uniform1f",value:o}});const wh=`#version 300 es\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nin vec3 v_position;\nin vec3 v_normal;\nout vec3 front_color;\nout vec3 back_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tvec3 light = abs(normalize((vec4(v_normal, 1) * u_modelView).xyz));\n\tfloat brightness = 0.5 + light.x * 0.15 + light.z * 0.35;\n\tfront_color = u_frontColor * brightness;\n\tback_color = u_backColor * brightness;\n}\n`;const kh=`#version 300 es\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\nin vec3 v_position;\nin vec3 v_color;\nin vec3 edge_vector;\nin vec2 vertex_vector;\nout vec3 blend_color;\nvoid main () {\n\tvec3 edge_norm = normalize(edge_vector);\n\t// axis most dissimilar to edge_vector\n\tvec3 absNorm = abs(edge_norm);\n\tvec3 xory = absNorm.x < absNorm.y ? vec3(1,0,0) : vec3(0,1,0);\n\tvec3 axis = absNorm.x > absNorm.z && absNorm.y > absNorm.z ? vec3(0,0,1) : xory;\n\t// two perpendiculars. with edge_vector these make basis vectors\n\tvec3 one = cross(axis, edge_norm);\n\tvec3 two = cross(one, edge_norm);\n\tvec3 displaceNormal = normalize(\n\t\tone * vertex_vector.x + two * vertex_vector.y\n\t);\n\tvec3 displace = displaceNormal * (u_strokeWidth * 0.5);\n\tgl_Position = u_matrix * vec4(v_position + displace, 1);\n\tblend_color = v_color;\n}\n`;const Oh=`#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nuniform float u_opacity;\nin vec3 front_color;\nin vec3 back_color;\nin vec3 barycentric;\nout vec4 outColor;\nfloat edgeFactor(vec3 barycenter) {\n\tvec3 d = fwidth(barycenter);\n\tvec3 a3 = smoothstep(vec3(0.0), d*3.5, barycenter);\n\treturn min(min(a3.x, a3.y), a3.z);\n}\nvoid main () {\n\tgl_FragDepth = gl_FragCoord.z;\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\toutColor = vec4(mix(vec3(0.0), color, edgeFactor(barycentric)), u_opacity);\n}\n`;const jh=`#version 100\nprecision mediump float;\nuniform float u_opacity;\nvarying vec3 barycentric;\nvarying vec3 front_color;\nvarying vec3 back_color;\nvoid main () {\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\tvec3 boundary = vec3(0.0, 0.0, 0.0)\n\t// gl_FragDepth = 0.5;\n\tgl_FragColor = any(lessThan(barycentric, vec3(0.02)))\n\t\t? vec4(boundary, u_opacity)\n\t\t: vec4(color, u_opacity);\n}\n`;const Fh=`#version 100\nattribute vec3 v_position;\nattribute vec3 v_normal;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nvarying vec3 normal_color;\nvarying vec3 front_color;\nvarying vec3 back_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tvec3 light = abs(normalize((vec4(v_normal, 1) * u_modelView).xyz));\n\tfloat brightness = 0.5 + light.x * 0.15 + light.z * 0.35;\n\tfront_color = u_frontColor * brightness;\n\tback_color = u_backColor * brightness;\n}\n`;const Sh=`#version 100\nattribute vec3 v_position;\nattribute vec3 v_color;\nattribute vec3 edge_vector;\nattribute vec2 vertex_vector;\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\nvarying vec3 blend_color;\nvoid main () {\n\tvec3 edge_norm = normalize(edge_vector);\n\t// axis most dissimilar to edge_vector\n\tvec3 absNorm = abs(edge_norm);\n\tvec3 xory = absNorm.x < absNorm.y ? vec3(1,0,0) : vec3(0,1,0);\n\tvec3 axis = absNorm.x > absNorm.z && absNorm.y > absNorm.z ? vec3(0,0,1) : xory;\n\t// two perpendiculars. with edge_vector these make basis vectors\n\tvec3 one = cross(axis, edge_norm);\n\tvec3 two = cross(one, edge_norm);\n\tvec3 displaceNormal = normalize(\n\t\tone * vertex_vector.x + two * vertex_vector.y\n\t);\n\tvec3 displace = displaceNormal * (u_strokeWidth * 0.5);\n\tgl_Position = u_matrix * vec4(v_position + displace, 1);\n\tblend_color = v_color;\n}\n`;const Ch=`#version 100\nprecision mediump float;\nuniform float u_opacity;\nvarying vec3 front_color;\nvarying vec3 back_color;\nvoid main () {\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\tgl_FragColor = vec4(color, u_opacity);\n}\n`;const Vh=`#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nin vec3 blend_color;\nout vec4 outColor;\n \nvoid main() {\n\toutColor = vec4(blend_color.rgb, 1);\n}\n`;const Ph=`#version 100\nattribute vec3 v_position;\nattribute vec3 v_normal;\nattribute vec3 v_barycentric;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nvarying vec3 normal_color;\nvarying vec3 barycentric;\nvarying vec3 front_color;\nvarying vec3 back_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tbarycentric = v_barycentric;\n\tvec3 light = abs(normalize((vec4(v_normal, 1) * u_modelView).xyz));\n\tfloat brightness = 0.5 + light.x * 0.15 + light.z * 0.35;\n\tfront_color = u_frontColor * brightness;\n\tback_color = u_backColor * brightness;\n}\n`;const Th=`#version 300 es\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nin vec3 v_position;\nin vec3 v_normal;\nin vec3 v_barycentric;\nin float v_rawEdge;\nout vec3 front_color;\nout vec3 back_color;\nout vec3 barycentric;\n// flat out int rawEdge;\nflat out int provokedVertex;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tprovokedVertex = gl_VertexID;\n\tbarycentric = v_barycentric;\n\t// rawEdge = int(v_rawEdge);\n\tvec3 light = abs(normalize((vec4(v_normal, 1) * u_modelView).xyz));\n\tfloat brightness = 0.5 + light.x * 0.15 + light.z * 0.35;\n\tfront_color = u_frontColor * brightness;\n\tback_color = u_backColor * brightness;\n}\n`;const Nh=`#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nuniform float u_opacity;\nin vec3 front_color;\nin vec3 back_color;\nout vec4 outColor;\nvoid main () {\n\tgl_FragDepth = gl_FragCoord.z;\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\toutColor = vec4(color, u_opacity);\n}\n`;const zh=`#version 100\nprecision mediump float;\nvarying vec3 blend_color;\nvoid main () {\n\tgl_FragColor = vec4(blend_color.rgb, 1);\n}\n`;const Bh=(e,t=1,n={},s={})=>{const r=Ah(n,s.layerNudge);const c=t===1?th(e,Fh,Ch):th(e,wh,Nh);return{program:c,vertexArrays:hh(e,c,r,s),elementArrays:vh(e,t,r),flags:[e.DEPTH_TEST],makeUniforms:xh}};const $h=(e,t=1,n={},s={})=>{const r=t===1?th(e,Sh,zh):th(e,kh,Vh);return{program:r,vertexArrays:bh(e,r,n,s),elementArrays:yh(e,t,n),flags:[e.DEPTH_TEST],makeUniforms:xh}};const Rh=(e,t=1,n={},s={})=>{const r=Ah(n,s.layerNudge);const c=t===1?th(e,Ph,jh):th(e,Th,Oh);return{program:c,vertexArrays:hh(e,c,r,s),elementArrays:vh(e,t,r),flags:[e.DEPTH_TEST],makeUniforms:xh}};const Lh=Object.freeze({__proto__:null,foldedFormEdges:$h,foldedFormFaces:Bh,foldedFormFacesOutlined:Rh});const Ih=(e,t=1,n={},s={})=>{const r=[];if(s.faces!==false){if(s.outlines===false){r.push(Bh(e,t,n,s))}else{r.push(Rh(e,t,n,s))}}if(s.edges===true){r.push($h(e,t,n,s))}return r};const Uh=e=>e.map((e=>[0,1].map((t=>e[t]||0))));const Qh=(e,t)=>{if(!e||!e.vertices_coords||!e.edges_vertices){return[]}const n=t&&t.dark?dh:uh;const s={...n,...t};const r=Uh(e.edges_vertices.flatMap((t=>t.map((t=>e.vertices_coords[t])))).flatMap((e=>[e,e])));const c=Uh($s(e));const o=e.edges_assignment?e.edges_assignment.flatMap((e=>[s[e],s[e],s[e],s[e]])):e.edges_vertices.flatMap((()=>[s.U,s.U,s.U,s.U]));const a=c.flatMap((e=>[e,e,e,e]));const i=e.edges_vertices.flatMap((()=>[[1,0],[-1,0],[-1,0],[1,0]]));return{vertices_coords:r,vertices_color:o,verticesEdgesVector:a,vertices_vector:i}};const Dh=Object.freeze({__proto__:null,makeCPEdgesVertexData:Qh});const qh=(e,t,n,s)=>{if(!n||!n.vertices_coords||!n.edges_vertices){return[]}const{vertices_coords:r,vertices_color:c,verticesEdgesVector:o,vertices_vector:a}=Qh(n,s);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:2,data:new Float32Array(r.flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:c.length?c[0].length:2,data:new Float32Array(c.flat())},{location:e.getAttribLocation(t,"edge_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:o.length?o[0].length:2,data:new Float32Array(o.flat())},{location:e.getAttribLocation(t,"vertex_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:a.length?a[0].length:2,data:new Float32Array(a.flat())}].filter((e=>e.location!==-1))};const Wh=(e,t=1,n={})=>{if(!n||!n.edges_vertices){return[]}const s=n.edges_vertices.map(((e,t)=>t*4)).flatMap((e=>[e+0,e+1,e+2,e+2,e+3,e+0]));return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:t===2?new Uint32Array(s):new Uint16Array(s)}]};const Gh=e=>e.map((e=>[0,1].map((t=>e[t]||0))));const Hh=(e,t,n)=>{if(!n||!n.vertices_coords){return[]}return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:2,data:new Float32Array(Gh(n.vertices_coords).flat())}].filter((e=>e.location!==-1))};const Jh=(e,t=1,n={})=>{if(!n||!n.vertices_coords||!n.faces_vertices){return[]}return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:t===2?new Uint32Array(Ep(n).flat()):new Uint16Array(Ep(n).flat())}]};const Zh=Object.freeze({__proto__:null,makeCPEdgesElementArrays:Wh,makeCPEdgesVertexArrays:qh,makeCPFacesElementArrays:Jh,makeCPFacesVertexArrays:Hh});const Yh=(e,{projectionMatrix:t,modelViewMatrix:n,cpColor:s,strokeWidth:r})=>({u_matrix:{func:"uniformMatrix4fv",value:Vp(t,n)},u_projection:{func:"uniformMatrix4fv",value:t},u_modelView:{func:"uniformMatrix4fv",value:n},u_cpColor:{func:"uniform3fv",value:mh(s)},u_strokeWidth:{func:"uniform1f",value:r}});const Xh=`#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nin vec3 blend_color;\nout vec4 outColor;\nvoid main() {\n\toutColor = vec4(blend_color.rgb, 1);\n}\n`;const Kh=`#version 100\nprecision mediump float;\nvarying vec3 blend_color;\nvoid main () {\n\tgl_FragColor = vec4(blend_color.rgb, 1);\n}\n`;const ev=`#version 300 es\nuniform mat4 u_matrix;\nuniform float u_strokeWidth;\nin vec2 v_position;\nin vec3 v_color;\nin vec2 edge_vector;\nin vec2 vertex_vector;\nout vec3 blend_color;\nvoid main () {\n\tfloat sign = vertex_vector[0];\n\tfloat halfWidth = u_strokeWidth * 0.5;\n\tvec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * halfWidth;\n\tgl_Position = u_matrix * vec4(side + v_position, 0, 1);\n\tblend_color = v_color;\n}\n`;const tv=`#version 100\nuniform mat4 u_matrix;\nuniform float u_strokeWidth;\nattribute vec2 v_position;\nattribute vec3 v_color;\nattribute vec2 edge_vector;\nattribute vec2 vertex_vector;\nvarying vec3 blend_color;\nvoid main () {\n\tfloat sign = vertex_vector[0];\n\tfloat halfWidth = u_strokeWidth * 0.5;\n\tvec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * halfWidth;\n\tgl_Position = u_matrix * vec4(side + v_position, 0, 1);\n\tblend_color = v_color;\n}\n`;const nv=`#version 100\nuniform mat4 u_matrix;\nuniform vec3 u_cpColor;\nattribute vec2 v_position;\nvarying vec3 blend_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 0, 1);\n\tblend_color = u_cpColor;\n}\n`;const sv=`#version 300 es\nuniform mat4 u_matrix;\nuniform vec3 u_cpColor;\nin vec2 v_position;\nout vec3 blend_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 0, 1);\n\tblend_color = u_cpColor;\n}\n`;const rv=(e,t={},n=undefined)=>{const s=th(e,nv,Kh);return{program:s,vertexArrays:Hh(e,s,t),elementArrays:Jh(e,1,t),flags:[],makeUniforms:Yh}};const cv=(e,t={},n=undefined)=>{const s=th(e,tv,Kh);return{program:s,vertexArrays:qh(e,s,t,n),elementArrays:Wh(e,1,t),flags:[],makeUniforms:Yh}};const ov=(e,t={},n=undefined)=>{const s=th(e,sv,Xh);return{program:s,vertexArrays:Hh(e,s,t),elementArrays:Jh(e,2,t),flags:[],makeUniforms:Yh}};const av=(e,t={},n=undefined)=>{const s=th(e,ev,Xh);return{program:s,vertexArrays:qh(e,s,t,n),elementArrays:Wh(e,2,t),flags:[],makeUniforms:Yh}};const iv=Object.freeze({__proto__:null,cpEdgesV1:cv,cpEdgesV2:av,cpFacesV1:rv,cpFacesV2:ov});const fv=(e,t=1,n={},s=undefined)=>{switch(t){case 1:return[rv(e,n,s),cv(e,n,s)];case 2:default:return[ov(e,n,s),av(e,n,s)]}};const lv=Object.assign(Object.create(null),{createProgram:th,initialize:nh,foldedForm:Ih,creasePattern:fv},oh,lh,Eh,_h,Lh,Zh,Dh,iv);const dv=({vertices_coords:e,edges_vertices:t})=>{const n=t.map((t=>t.map((t=>e[t])))).map((e=>L(...e)));const s=n.reduce(((e,t)=>Math.min(e,t)),Infinity);return s===Infinity?undefined:s};const uv=({vertices_coords:e,edges_vertices:t})=>{const n=dv({vertices_coords:e,edges_vertices:t});if(n){return Math.max(n*1e-4,1e-10)}const s=po({vertices_coords:e});return s&&s.span?Math.max(1e-6*Math.max(...s.span),1e-10):1e-6};const mv=e=>ar(ar(e).reverse());const gv=(e,t)=>{const n=[];const s=ad(e);const r=e.edges_faces?e.edges_faces:Cs(e);r.forEach(((e,r)=>{if(e.length===1){n[r]="B"}if(e.length===2){const c=e.map((e=>s[e]));if(c[0]===c[1]){n[r]="F";return}const o=e.map((e=>t[e]));const a=o[0]<o[1];const i=c[0]?a:!a;n[r]=i?"V":"M"}}));return n};const pv=e=>{const t=[];e.forEach((e=>{t[e[0]]=undefined;t[e[1]]=undefined}));const n=t.map((()=>[]));e.forEach((([e,t,s])=>{n[e][t]=s;n[t][e]=-s}));return n};const _v=Object.freeze({__proto__:null,faceOrdersToMatrix:pv,facesLayerToEdgesAssignments:gv,flipFacesLayer:mv,makeEpsilon:uv});const hv={taco_taco:e=>[[e[0],e[2]],[e[1],e[3]],[e[1],e[2]],[e[0],e[3]],[e[0],e[1]],[e[2],e[3]]],taco_tortilla:e=>[[e[0],e[2]],[e[0],e[1]],[e[1],e[2]]],tortilla_tortilla:e=>[[e[0],e[2]],[e[1],e[3]]],transitivity:e=>[[e[0],e[1]],[e[1],e[2]],[e[2],e[0]]]};const vv=e=>e[0]<e[1]?`${e[0]} ${e[1]}`:`${e[1]} ${e[0]}`;const bv={taco_taco:e=>[vv([e[0],e[2]]),vv([e[1],e[3]]),vv([e[1],e[2]]),vv([e[0],e[3]]),vv([e[0],e[1]]),vv([e[2],e[3]])],taco_tortilla:e=>[vv([e[0],e[2]]),vv([e[0],e[1]]),vv([e[1],e[2]])],tortilla_tortilla:e=>[vv([e[0],e[2]]),vv([e[1],e[3]])],transitivity:e=>[vv([e[0],e[1]]),vv([e[1],e[2]]),vv([e[2],e[0]])]};const yv={0:0,1:1,2:-1};const Ev=(e,t)=>{const n=Object.keys(e);const s=n.map((e=>e.split(" ").map((e=>parseInt(e,10)))));s.forEach(((s,r)=>{const c=yv[e[n[r]]];const o=!t[s[1]]?-c:c;s.push(o)}));return s};const Mv=Object.freeze({__proto__:null,constraintToFacePairs:hv,constraintToFacePairsStrings:bv,solverSolutionToFaceOrders:Ev});const Av=({taco_taco:e,taco_tortilla:t,tortilla_tortilla:n,transitivity:s})=>{const r={};r.taco_taco=e.map((e=>[e[0][0],e[1][0],e[0][1],e[1][1]]));r.taco_tortilla=t.map((e=>[e.taco[0],e.tortilla,e.taco[1]]));r.tortilla_tortilla=n.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]]));r.transitivity=s.map((e=>[e[0],e[1],e[2]]));return r};const xv=e=>{const t={};Object.keys(e).forEach((e=>{t[e]={}}));Object.keys(e).forEach((n=>{e[n].forEach(((e,s)=>bv[n](e).forEach((e=>{if(t[n][e]===undefined){t[n][e]=[]}t[n][e].push(s)}))))}));return t};const wv=({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_center:s})=>{const r=t.map((t=>e[t[0]]));const c=t.map((t=>O(e[t[1]],e[t[0]])));return n.map(((e,t)=>e.map((e=>$(O(s[e],r[t]),c[t]))).map((e=>Math.sign(e)))))};const kv=({vertices_coords:e,edges_vertices:t,faces_center:n},s,r)=>{const c=s.map((n=>t[n[0]].map((t=>e[t]))));const o=c.map((e=>e[0]));const a=c.map((e=>O(e[1],e[0])));const i=r.map((e=>e.map((e=>e.map((e=>n[e]))))));return i.map(((e,t)=>e.map((e=>e.map((e=>$(O(e,o[t]),a[t]))).map((e=>Math.sign(e)))))))};const Ov=e=>{if(e[0]===1&&e[1]===-1||e[0]===-1&&e[1]===1){return"both"}if(e[0]===1&&e[1]===1){return"right"}if(e[0]===-1&&e[1]===-1){return"left"}return undefined};const jv=e=>e[0]===e[1]&&e[0]!=="both";const Fv=e=>e[0]===e[1]&&e[0]==="both";const Sv=e=>e[0]!==e[1]&&(e[0]==="both"||e[1]==="both");const Cv=(e,t,n)=>{const s=t[0]==="left"||t[1]==="left"?-1:1;const r=t[0]==="both"?[...e[1]]:[...e[0]];const c=t[0]==="both"?0:1;const o=n[c][0]===s?e[c][0]:e[c][1];return{taco:r,tortilla:o}};const Vv=(e,t)=>{if(e===undefined){return undefined}return t[0][0]===t[1][0]?e:[e[0],[e[1][1],e[1][0]]]};const Pv=(e,t,n)=>{const s=t.map((e=>e.length===2&&e[0]!==e[1])).map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined));const r=[];s.forEach((e=>{r[e]=n[e]}));const c=r.map(((t,n)=>t.map((t=>[e[n],[t,t]])))).reduce(((e,t)=>e.concat(t)),[]);return c};const Tv=({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:s,faces_center:r,edges_vector:c},o=a)=>{if(!r){r=Hs({vertices_coords:e,faces_vertices:s})}const i=wv({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_center:r});const f=s_({vertices_coords:e,edges_vertices:t,edges_vector:c},o);const l=a_({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:s},o);const d=fo(f).filter((e=>e.map((e=>n[e].length>1)).reduce(((e,t)=>e&&t),true)));const u=d.map((e=>e.map((e=>n[e]))));const m=kv({vertices_coords:e,edges_vertices:t,faces_center:r},d,u);const g=m.map((e=>e.map(Ov)));const p=g.map(((e,t)=>jv(e)?u[t]:undefined)).filter((e=>e!==undefined));const _=g.map(((e,t)=>Fv(e)?u[t]:undefined)).map(((e,t)=>Vv(e,m[t]))).filter((e=>e!==undefined));const h=Pv(n,i,l);const v=_.concat(h);const b=g.map(((e,t)=>Sv(e)?Cv(u[t],g[t],m[t]):undefined)).filter((e=>e!==undefined));const y=l.map(((e,t)=>i[t].length>1&&i[t][0]===i[t][1]?e:[]));const E=y.map(((e,t)=>({taco:n[t],tortillas:e}))).filter((e=>e.tortillas.length));const M=E.flatMap((e=>e.tortillas.map((t=>({taco:[...e.taco],tortilla:t})))));const A=b.concat(M);return{taco_taco:p,tortilla_tortilla:v,taco_tortilla:A}};const Nv=({faces_polygon:e},t,n=a)=>{const s=t.map((()=>[]));t.forEach(((e,t)=>e.forEach((e=>{s[t][e]=true;s[e][t]=true}))));const r=[];t.forEach(((t,s)=>t.forEach((t=>{const c=tu(e[s],e[t],n);if(c){if(!r[s]){r[s]=[]}if(!r[t]){r[t]=[]}r[s][t]=c;r[t][s]=c}}))));const c=[];for(let t=0;t<r.length-1;t+=1){if(!r[t]){continue}for(let o=t+1;o<r.length;o+=1){if(!r[t][o]){continue}for(let a=o+1;a<r.length;a+=1){if(t===a||o===a){continue}if(!s[t][a]||!s[o][a]){continue}const i=tu(r[t][o],e[a],n);if(i){c.push([t,o,a].sort(((e,t)=>e-t)))}}}}return c};const zv=(e,{taco_taco:t,taco_tortilla:n})=>{const s={};t.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]].sort(((e,t)=>e-t)))).forEach((e=>[`${e[0]} ${e[1]} ${e[2]}`,`${e[0]} ${e[1]} ${e[3]}`,`${e[0]} ${e[2]} ${e[3]}`,`${e[1]} ${e[2]} ${e[3]}`].forEach((e=>{s[e]=true}))));n.map((e=>[e.taco[0],e.taco[1],e.tortilla].sort(((e,t)=>e-t)).join(" "))).forEach((e=>{s[e]=true}));return e.filter((e=>s[e.join(" ")]===undefined))};const Bv=Object.freeze({__proto__:null,filterTransitivity:zv,makeTransitivity:Nv});const $v=({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:s,faces_edges:r,edges_vector:c},o=a)=>{const i=ad({vertices_coords:e,faces_vertices:s});const f=qs({vertices_coords:e,faces_vertices:s},o);i.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined)).forEach((e=>f[e].reverse()));const l=f_({vertices_coords:e,faces_vertices:s},o);const{taco_taco:d,taco_tortilla:u,tortilla_tortilla:m}=Tv({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:s,faces_edges:r,edges_vector:c},o);const g=Nv({faces_polygon:f},l,o);const p=zv(g,{taco_taco:d,taco_tortilla:u});const _=fo(l).map((e=>e.join(" ")));const h=Av({taco_taco:d,taco_tortilla:u,tortilla_tortilla:m,transitivity:p});const v=xv(h);return{constraints:h,lookup:v,facePairs:_,faces_winding:i}};const Rv=Object.freeze({__proto__:null,setup:$v});const Lv=({edges_faces:e,edges_assignment:t},n,s)=>{const r={0:0,1:2,2:1};const c={M:1,m:1,V:2,v:2};const o={};n.forEach((e=>{o[e]=true}));const a={};e.forEach(((e,n)=>{const i=t[n];const f=c[i];if(e.length<2||f===undefined){return}const l=s[e[0]];const d=l?f:r[f];const u=`${e[0]} ${e[1]}`;const m=`${e[1]} ${e[0]}`;if(u in o){a[u]=d}if(m in o){a[m]=r[d]}}));return a};const Iv=["111112","111121","111222","112111","121112","121222","122111","122212","211121","211222","212111","212221","221222","222111","222212","222221"];const Uv=["112","121","212","221"];const Qv=["11","22"];const Dv=["112","121","122","211","212","221"];const qv=(e,t,n)=>{const s=Array.from(n).map((e=>parseInt(e,10)));if(s.filter((e=>e===0)).length!==t){return}e[t][n]=false;let r=false;for(let n=0;n<s.length;n+=1){const c=[];if(s[n]!==0){continue}for(let r=1;r<=2;r+=1){s[n]=r;if(e[t-1][s.join("")]!==false){c.push([n,r])}}s[n]=0;if(c.length>0&&r===false){r=[]}if(c.length===1){r.push(c[0])}}if(r!==false&&r.length===0){r=true}e[t][n]=r};const Wv=e=>{const t=e[0].length;const n=Array.from(Array(t+1)).map((()=>({})));Array.from(Array(2**t)).map(((e,t)=>t.toString(2))).map((e=>Array.from(e).map((e=>parseInt(e,10)+1)).join(""))).map((e=>`11111${e}`.slice(-t))).forEach((e=>{n[0][e]=false}));e.forEach((e=>{n[0][e]=true}));Array.from(Array(t)).map(((e,t)=>t+1)).map((e=>Array.from(Array(3**t)).map(((e,t)=>t.toString(3))).map((e=>`000000${e}`.slice(-t))).forEach((t=>qv(n,e,t)))));let s=[];Array.from(Array(t+1)).map(((e,n)=>t-n)).forEach((e=>{const t=[];Object.keys(n[e]).forEach((s=>{let r=n[e][s];if(r.constructor===Array){r=r[0]}t.push([s,r])}));s=s.concat(t)}));s.sort(((e,t)=>parseInt(e[0],10)-parseInt(t[0],10)));const r={};s.forEach((e=>{r[e[0]]=Object.freeze(e[1])}));return Object.freeze(r)};const Gv={taco_taco:Wv(Iv),taco_tortilla:Wv(Uv),tortilla_tortilla:Wv(Qv),transitivity:Wv(Dv)};const Hv=Object.freeze(Object.keys(Gv));const Jv=(e,t,...n)=>{const s={0:0,1:2,2:1};const r=hv[e](t);const c=r.map((e=>e[1]<e[0]));const o=r.map(((e,t)=>c[t]?`${e[1]} ${e[0]}`:`${e[0]} ${e[1]}`));const a=o.map(((e,t)=>{for(let r=0;r<n.length;r+=1){if(n[r][e]){return c[t]?s[n[r][e]]:n[r][e]}}return 0})).join("");if(Gv[e][a]===true||Gv[e][a]===false){return Gv[e][a]}const i=Gv[e][a];const f=o[i[0]];const l=c[i[0]]?s[i[1]]:i[1];return[f,l]};const Zv=(e,t,n)=>{const s={};Hv.forEach((r=>{const c=n.flatMap((e=>t[r][e]));s[r]=cn(c).filter((t=>e[r][t]))}));return s};const Yv=(e,t,n,...s)=>{let r=n;const c={};do{const n=Zv(e,t,r);const o={};for(let t=0;t<Hv.length;t+=1){const r=Hv[t];const a=n[r];for(let t=0;t<a.length;t+=1){const n=Jv(r,e[r][a[t]],...s,c);if(n===true){continue}if(n===false){throw new Error(`invalid ${r} ${a[t]}:${e[r][a[t]]}`)}if(c[n[0]]){if(c[n[0]]!==n[1]){throw new Error(`conflict ${r} ${a[t]}:${e[r][a[t]]}`)}}else{const[e,t]=n;o[e]=true;c[n[0]]=t}}}r=Object.keys(o)}while(r.length);return c};const Xv=(e,t,n)=>{const s=Object.keys(t);const r={};e.forEach((e=>{r[e]=true}));let c=0;const o=[];while(c<e.length){if(!r[e[c]]){c+=1;continue}const a=[];const i=[e[c]];const f={[e[c]]:true};do{const e=i.pop();delete r[e];a.push(e);const c={};s.forEach((s=>{const r=n[s][e];if(!r){return}r.map((e=>t[s][e])).map((e=>bv[s](e).forEach((e=>{c[e]=true}))))}));const o=Object.keys(c).filter((e=>r[e])).filter((e=>!f[e]));i.push(...o);o.forEach((e=>{f[e]=true}))}while(i.length);c+=1;o.push(a)}return o};const Kv=(e,t,n,...s)=>{if(!n.length){return[]}const r=n[0];const c=[];const o=[];[1,2].forEach((a=>{let i;try{i=Yv(e,t,[r],...s,{[r]:a})}catch(e){return}i[r]=a;if(Object.keys(i).length===n.length){c.push(i)}else{o.push(i)}}));const a=o.map((r=>Kv(e,t,n.filter((e=>!(e in r))),...s,r)));return c.map((e=>[...s,e])).concat(...a)};const eb=({constraints:e,lookup:t,facePairs:s,orders:r})=>{let c;try{c=Yv(e,t,Object.keys(r),r)}catch(e){throw new Error(n.noLayerSolution,{cause:e})}const o=s.filter((e=>!(e in r))).filter((e=>!(e in c)));let a;try{a=Xv(o,e,t).map((n=>Kv(e,t,n,r,c)))}catch(e){throw new Error(n.noLayerSolution,{cause:e})}const i={...r,...c};const f=a.map((e=>e.map((e=>Object.assign({},...e)))));return{root:i,branches:f}};const tb=e=>{const t=e.reduce(((e,t)=>e*t),1);const n=e.slice();for(let e=n.length-2;e>=0;e-=1){n[e]*=n[e+1]}n.push(1);n.shift();return Array.from(Array(t)).map(((t,s)=>e.map(((e,t)=>Math.floor(s/n[t])%e))))};const nb={count:function(){return this.branches.map((e=>e.length))},faceOrders:function(...e){return Ev(this.compile(...e),this.faces_winding)},facesLayer:function(...e){return ar(this.linearize(...e).reverse())},compile:function(...e){const t=Array(this.branches.length).fill(0).map(((t,n)=>e[n]!=null?e[n]:t));const n=this.branches?this.branches.map(((e,n)=>e[t[n]])):[];return Object.assign({},this.root,...n)},directedPairs:function(...e){const t=this.compile(...e);return Object.keys(t).map((e=>t[e]===1?e.split(" "):e.split(" ").reverse())).map((e=>e.map((e=>parseInt(e,10)))))},linearize:function(...e){return fd(this.directedPairs(...e))},allSolutions:function(){return tb(this.count()).map((e=>this.compile(...e)))},allFacesLayers:function(){return tb(this.count()).map((e=>this.facesLayer(...e)))}};const sb=()=>({root:{},branches:[],faces_winding:[]});const rb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,faces_vertices:r,faces_edges:c,edges_vector:o},a)=>{if(!e||!t||!r){return Object.assign(Object.create(nb),sb())}if(!c){c=Qs({edges_vertices:t,faces_vertices:r})}if(!n){n=Ss({edges_vertices:t,faces_edges:c})}if(a===undefined){a=uv({vertices_coords:e,edges_vertices:t})}const{constraints:i,lookup:f,facePairs:l,faces_winding:d}=$v({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:r,faces_edges:c,edges_vector:o},a);const u=Lv({edges_faces:n,edges_assignment:s},l,d);const{root:m,branches:g}=eb({constraints:i,lookup:f,facePairs:l,orders:u});return Object.assign(Object.create(nb),{root:m,branches:g,faces_winding:d})};const cb=(e,t,n=a)=>{const s=e[0]<e[1]?e:[e[1],e[0]];const r=t[0]<t[1]?t:[t[1],t[0]];const c=Math.min(s[1],r[1])-Math.max(s[0],r[0]);return c>n};const ob=({vertices_coords:e,edges_vertices:t},n,s,r=a)=>{const c=n.map((n=>t[n].map((t=>e[t]))));const o=c.map((e=>e.map((e=>F(e,s)))));const i=cb(...o,r);return i};const ab=(e,t)=>{if(e.orders){e.orders=e.orders.flatMap((e=>Ev(e,t)))}if(e.leaves){e.leaves=e.leaves.map((e=>Ev(e,t)))}if(e.partitions){e.partitions.forEach((e=>ab(e,t)))}if(e.node){e.node.forEach((e=>ab(e,t)))}return e};const ib=Object.freeze({__proto__:null,doEdgesOverlap:ob,doRangesOverlap:cb,reformatSolution:ab});const fb=({vertices_coords:e,edges_vertices:t},n=a)=>{const{lines:s,edges_line:r}=_c({vertices_coords:e,edges_vertices:t},n);const c=r.map((e=>s[e].vector));const o=Bs({vertices_coords:e,edges_vertices:t}).map(((e,t)=>e.map((e=>F(c[t],e)))));return ar(r).map((e=>e.constructor===Array?e:[e])).flatMap((e=>dn(e).filter((e=>cb(...e.map((e=>o[e])))))))};const lb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s,faces_center:r},c,o,i,f=a)=>{const l=s.map(Ot);const d=fb({vertices_coords:e,edges_vertices:t},f).map((e=>e[0]<e[1]?e:e.slice().reverse())).filter((e=>!(l[e[0]]&&l[e[1]]))).filter((e=>e.map((e=>n[e].length===2)).reduce(((e,t)=>e&&t),true))).filter((e=>e.map((e=>c[e]!==undefined)).reduce(((e,t)=>e&&t),true))).filter((e=>Array.from(new Set(e.flatMap((e=>c[e])))).length!==4));const u=d.map((e=>e.map((e=>c[e]))));const m=u.map((e=>Array.from(new Set(e.flat()))));const g=u.map(((e,t)=>{const n={};e.flat().forEach((e=>{n[e]=[]}));e.forEach(((e,s)=>e.forEach((e=>n[e].push(d[t][s])))));return n}));const p=d.map((e=>e.map((e=>n[e]))));const _=p.map(((e,t)=>{const n={};m[t].forEach((e=>{n[e]=[]}));e.flat().forEach((e=>n[o[e]].push(e)));return n}));const h=Bs({vertices_coords:e,edges_vertices:t});const v=m.map(((e,t)=>{const n=h[d[t][0]];const s={};e.forEach((e=>{s[e]=n.map((t=>Sp(i[e],t))).map((e=>[e[0],e[1]]))}));return s}));const b=_.map(((e,t)=>{const n={};m[t].forEach((s=>{const c=v[t][s][0];n[s]=e[s].map((e=>$(O(r[e],c),O(v[t][s][1],c)))).map((e=>Math.sign(e)))}));return n}));const y=b.map(((e,t)=>{const n={};m[t].forEach((t=>{n[t]=e[t].reduce(((n,s)=>n&&s===e[t][0]),true)}));return n}));const E=d.map(((e,t)=>{const n={};Object.keys(g[t]).forEach((e=>{n[e]={edges:g[t][e],faces:_[t][e],facesSides:b[t][e],facesSameSide:y[t][e]}}));return{edges:e,sets:n}}));const M=E.filter((e=>{const t=Object.values(e.sets).map((e=>e.faces.length===2)).reduce(((e,t)=>e&&t),true);const n=Object.values(e.sets).map((e=>e.facesSameSide)).reduce(((e,t)=>e&&t),true);return t&&n}));const A=E.filter((e=>{const t=Object.values(e.sets).length===3;const n=Object.values(e.sets).map((e=>e.facesSameSide)).reduce(((e,t)=>e&&t),true);return t&&n}));const x=E.filter((e=>{const t=Object.values(e.sets).map((e=>e.faces.length===2)).reduce(((e,t)=>e&&t),true);const n=Object.values(e.sets).map((e=>e.facesSameSide));const s=n[0]!==n[1];return t&&s}));const w=E.filter((e=>{const t=Object.values(e.sets).filter((e=>e.faces.length===3)).shift();const s=t!==undefined;if(!s){return false}const r=t.facesSides.reduce(((e,t)=>e+t),0);const c=Math.abs(r)===1;if(!c){return false}const o=t.faces.filter(((e,n)=>t.facesSides[n]===r));const a=t.edges.map((e=>n[e].map((e=>o.includes(e))).reduce(((e,t)=>e&&t),true))).reduce(((e,t)=>e||t),false);const i=!a;return s&&c&&i}));if(w.length){console.log("This model contains the third case",w)}return{tortillaTortillaEdges:M,solvable1:A,solvable2:x,solvable3:[]}};const db=({edges_faces:e},t,n,s)=>{const r=t.map((e=>e.edges)).map((t=>t.map((t=>e[t].slice()))));r.forEach(((e,t)=>{if(n[e[0][0]]!==n[e[1][0]]){r[t][1].reverse()}}));r.map((e=>[e[0][0],e[0][1]])).map((e=>e.map((e=>s[e])))).map(((e,t)=>e[0]!==e[1]?t:undefined)).filter((e=>e!==undefined)).forEach((e=>{const t=r[e][0][1];r[e][0][1]=r[e][1][1];r[e][1][1]=t}));return r};const ub=(e,t,n=a)=>{const s=t.map((t=>Pr(e,t,ct,n))).reduce(((e,t)=>e||t),false);if(s){return true}const r=eu(e,{vector:O(t[1],t[0]),origin:t[0]},ct,dt,n);return r!==undefined};const mb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s},r,c,o,i,f,l,d,u=a)=>{const m=o.slice();m.forEach(((e,t)=>{if(e.length<2){delete m[t]}}));const g=n.map((e=>{const t={};e.forEach((e=>{t[e]=true}));return t}));const p=d.map((e=>e.filter((e=>m[e]!==undefined)).map((e=>m[e]))));d.map(((e,t)=>t)).filter((e=>p[e].length<2)).forEach((e=>delete p[e]));const _=p.map(((e,t)=>e.map((e=>e.filter((e=>g[t][e]))))));const h=p.map(((e,t)=>e.map((e=>e.filter((e=>!g[t][e]))))));const v=p.map(((n,s)=>t[s].map((t=>e[t]))));const b=h.map(((e,t)=>e.map((e=>e.map((e=>{const n=v[t].map((t=>Sp(c[i[e]],t)));const s=n.map((e=>[e[0],e[1]]));return ub(f[e],s,u)?e:undefined})).filter((e=>e!==undefined))))));const y=p.flatMap(((e,t)=>b[t].flatMap(((e,n)=>{const s=1-n;const r=_[t];return e.map((e=>({edge:t,faces:[r[n][0],r[s][0]],overlap:e,set:i[e]})))}))));const E=y.map((e=>[e.faces[0],e.overlap]));const M=E.map((e=>e[0]<e[1]));M.forEach(((e,t)=>{if(!e){E[t].reverse()}}));const A=y.map((e=>l[e.faces[0]]));const x=y.map((e=>s[e.edge])).map(Math.sign).map((e=>e===1));const w=y.map(((e,t)=>A[t]^x[t]));const k=w.map(((e,t)=>M[t]?e:1-e)).map((e=>e+1));const O={};E.forEach(((e,t)=>{O[e.join(" ")]=k[t]}));return O};const gb=({edges_foldAngle:e,faces_winding:t},n,s)=>{const r=n.map((t=>t.map((t=>e[t]))));const c=s.map((e=>e.map((e=>t[e]))));const o=r.map(((e,t)=>e.map(((e,n)=>c[t][n]?e:-e))));const a=o.map((e=>e[0]>e[1]));const i=s.map((e=>e[0]<e[1]));const f=s.map(((e,t)=>a[t]^i[t]));const l={};const d=s.map(((e,t)=>i[t]?e:e.slice().reverse())).map((e=>e.join(" ")));f.map((e=>e+1)).forEach(((e,t)=>{l[d[t]]=e}));return l};const pb=({edges_foldAngle:e,faces_winding:t},n)=>{const s=n.map((e=>Object.values(e.sets).sort(((e,t)=>t.faces.length-e.faces.length)).shift()));const r=s.map((e=>e.edges));const c=s.map((e=>e.faces));return gb({edges_foldAngle:e,faces_winding:t},r,c)};const _b=({edges_foldAngle:e,faces_winding:t},n)=>{const s=n.map((e=>Object.values(e.sets).filter((e=>e.facesSameSide)).shift()));const r=s.map((e=>e.edges));const c=s.map((e=>e.faces));return gb({edges_foldAngle:e,faces_winding:t},r,c)};const hb=({edges_foldAngle:e,faces_winding:t},n)=>({});const vb=({edges_foldAngle:e,faces_winding:t},n,s,r)=>{const c=pb({edges_foldAngle:e,faces_winding:t},n);const o=_b({edges_foldAngle:e,faces_winding:t},s);const a=hb({edges_foldAngle:e,faces_winding:t});return{...c,...o,...a}};const bb=(e,t,n)=>{const s=(e,t)=>{const n=Sp(e,t);return[n[0],n[1]]};const r=e.vertices_coords.map((e=>Z(3,e)));const c=t.map((t=>so(e,t)));n.forEach(((e,t)=>{c[t].vertices_coords=c[t].vertices_coords.map(((t,n)=>s(e,r[n])))}));const o=e.edges_foldAngle.map(Ot).map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined));const a=St(e,"edges");c.forEach((e=>o.forEach((t=>a.forEach((n=>{delete e[n][t]}))))));return c};const yb=Object.freeze({__proto__:null,graphGroupCopies:bb});const Eb=({edges_vertices:e,faces_edges:t},n)=>{const s=e.map((()=>({})));n.forEach(((e,n)=>t[n].forEach((t=>{s[t][e]=true}))));const r=s.map((e=>Object.keys(e).map((e=>parseInt(e,10))).sort(((e,t)=>e-t))));return r};const Mb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s,faces_edges:r,faces_winding:c,faces_center:o},a,i,f,l,d,u,m)=>{const g=u.map((e=>f[e[0]]));const p=ar(g).map((e=>e.constructor===Array?e:[e]));const _=p.map((e=>e.map((e=>d[e]))));const h=Eb({edges_vertices:t,faces_edges:r},f);h.map(((e,t)=>e.length!==2?t:undefined)).filter((e=>e!==undefined)).forEach((e=>delete h[e]));const{tortillaTortillaEdges:v,solvable1:b,solvable2:y,solvable3:E}=lb({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s,faces_center:o},h,f,i,m);const M=db({edges_faces:n},v,f,c);const A=mb({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s},_,i,a,f,l,c,h,m);const x=vb({edges_foldAngle:s,faces_winding:c},b,y);const w={...A,...x};return{tortillas3D:M,orders:w}};const Ab=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,edges_foldAngle:r,faces_vertices:c,faces_edges:o,faces_faces:i},f=a)=>{if(!o){o=Qs({edges_vertices:t,faces_vertices:c})}if(!n){n=Ss({edges_vertices:t,faces_edges:o})}if(!i){i=Ds({faces_vertices:c})}if(!r&&s){r=Ns({edges_assignment:s})}if(!s){s=Ps({edges_foldAngle:r})}const{sets_faces:l,sets_transformXY:d,faces_set:u,faces_winding:m}=e_({vertices_coords:e,faces_vertices:c,faces_faces:i},f);const g=bb({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,edges_foldAngle:r,faces_vertices:c,faces_edges:o,faces_faces:i},l,d);const p=sn(...g.map((e=>qs(e,f))));m.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined)).forEach((e=>p[e].reverse()));const _=sn(...g.map((e=>f_(e,f))));const h=p.map((e=>z(...e)));g.forEach((e=>{e.faces_center=e.faces_vertices.map(((e,t)=>h[t]))}));const v=g.map((e=>Tv(e,f)));const b=v.flatMap((e=>e.taco_taco));const y=v.flatMap((e=>e.taco_tortilla));const E=v.flatMap((e=>e.tortilla_tortilla));const M=Nv({faces_polygon:p},_,f);const A=zv(M,{taco_taco:b,taco_tortilla:y});const x=fo(_);const w=x.map((e=>e.join(" ")));const{tortillas3D:k,orders:O}=Mb({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:r,faces_edges:o,faces_winding:m,faces_center:h},l,d,u,p,w,x,f);E.push(...k);const j=Av({taco_taco:b,taco_tortilla:y,tortilla_tortilla:E,transitivity:A});const F=xv(j);g.map((e=>Lv(e,w,m))).forEach((e=>Object.assign(O,e)));return{constraints:j,lookup:F,facePairs:w,faces_winding:m,orders:O}};const xb=Object.freeze({__proto__:null,setup:Ab});const wb=()=>({root:{},branches:[],faces_winding:[]});const kb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,edges_foldAngle:r,faces_vertices:c,faces_edges:o,faces_faces:a},i)=>{if(!e||!t||!c){return Object.assign(Object.create(nb),wb())}if(i===undefined){i=uv({vertices_coords:e,edges_vertices:t})}const{constraints:f,lookup:l,facePairs:d,faces_winding:u,orders:m}=Ab({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,edges_foldAngle:r,faces_vertices:c,faces_edges:o,faces_faces:a},i);const{root:g,branches:p}=eb({constraints:f,lookup:l,facePairs:d,orders:m});return Object.assign(Object.create(nb),{root:g,branches:p,faces_winding:u})};const Ob=(e,t,n)=>{const s=e.map((e=>e?(e[0]+e[1])/2:undefined));const r=[];e.forEach(((c,o)=>{if(!c){return}if(!t&&o===e.length-1){return}const a=c[1];const i=a-n*2;const f=a+n*2;const l=[o,(o+1)%e.length];const d=l.map((e=>s[e])).map((e=>e>a));const u=(!d[0]&&!d[1])*1+(d[0]&&d[1])*2;const m=r.filter((e=>e.min<a&&e.max>a)).shift();const g={faces:l,taco_type:u};if(m){m.pairs.push(g)}else{r.push({min:i,max:f,pairs:[g]})}}));return r.map((e=>e.pairs)).filter((e=>e.length>1)).map((e=>({both:e.filter((e=>e.taco_type===0)).map((e=>e.faces)),left:e.filter((e=>e.taco_type===1)).map((e=>e.faces)),right:e.filter((e=>e.taco_type===2)).map((e=>e.faces))})))};const jb=(e,t,n)=>t<n?e.slice(t+1,n):e.slice(n+1,t);const Fb=(e,t,n=true,s=a)=>{const r=ar(t);const c=e.map((e=>e?e[1]:undefined));const o=e.map((e=>e?Math.min(...e):undefined)).map((e=>e+s));const i=e.map((e=>e?Math.max(...e):undefined)).map((e=>e-s));const f=r.length+(n?0:-1);for(let e=0;e<f;e+=1){const n=(e+1)%r.length;if(r[e]===r[n]){continue}const s=jb(t,r[e],r[n]).flat();const a=s.map((t=>c[e]<o[t])).reduce(((e,t)=>e&&t),true);const f=s.map((t=>c[e]>i[t])).reduce(((e,t)=>e&&t),true);if(!a&&!f){return false}}return true};const Sb=e=>{const t=on(e);const n={};let s=0;for(let e=0;e<t.length;e+=1){if(n[t[e]]===undefined){s+=1;n[t[e]]=s}else if(n[t[e]]!==undefined){if(n[t[e]]!==s){return false}s-=1;n[t[e]]=undefined}}return true};const Cb=(e,t)=>e.map((e=>t[e])).filter((e=>e!==undefined));const Vb=(e,t,n,s,r)=>{const c=t.flat();if(!Fb(e,t,s,r)){return false}for(let e=0;e<n.length;e+=1){const t=Cb(c,n[e]);if(!Sb(t)){return false}}return true};const Pb={V:true,v:true,M:true,m:true};const Tb=e=>{let t=0;const n=e.slice(1);return[false].concat(n.map((e=>Pb[e]?++t:t)).map((e=>e%2===1)))};const Nb={V:1,v:1,M:-1,m:-1};const zb=(e,t)=>t%2===0?Nb[e]||0:-(Nb[e]||0);const Bb=e=>{let t=0;return e.slice(1).concat([e[0]]).map((e=>{const n=zb(e,t);t+=Nb[e]===undefined?0:1;return n}))};const $b=(e,t)=>{const n=Tb(t).map(((t,n)=>e[n]*(t?-1:1)));const s=e.map((()=>undefined));s[0]=[0,n[0]];for(let r=1;r<e.length;r+=1){if(t[r]==="B"||t[r]==="b"){break}const c=(r-1+e.length)%e.length;const o=s[c][1];s[r]=[o,o+n[r]]}return s};const Rb={B:true,b:true};const Lb=(e,t,n=a)=>{const s=$b(e,t);const r=Bb(t);const c=t.map((e=>!Rb[e])).reduce(((e,t)=>e&&t),true);if(c){const e=s[0][0];const t=s[s.length-1][1];if(Math.abs(e-t)>n){return[]}}const o=Ob(s,c,n).map((e=>[e.left,e.right].map(ar).filter((e=>e.length>1)))).reduce(((e,t)=>e.concat(t)),[]);const i=(t=[0],a=0,f=0)=>{const l=a+1;const d=r[a];const u=a>=e.length-1;const m=c&&u;if(!Vb(s,t,o,m,n)){return[]}if(m){const e=ar(t);const n=e[0];const s=e[a];if(d>0&&s>n){return[]}if(d<0&&s<n){return[]}}if(u){return[t]}if(d===0){t[f]=[l].concat(t[f]);return i(t,l,f)}const g=d===1?Array.from(Array(t.length-f)).map(((e,t)=>f+t+1)):Array.from(Array(f+1)).map(((e,t)=>t));const p=g.map((()=>zo(t)));p.forEach(((e,t)=>e.splice(g[t],0,l)));return p.map(((e,t)=>i(e,l,g[t]))).reduce(((e,t)=>e.concat(t)),[])};return i().map(ar)};const Ib=(e,t,n)=>{if(t==null){t=e.map((()=>"U"))}const s=Z_(t);const r=s.map((t=>Lb(e,t,n)));return s.map(((e,t)=>t)).filter((e=>r[e].length>0)).map((e=>({assignment:s[e],layer:r[e]})))};Object.assign(rb,{table:Gv,makeTacosAndTortillas:Tv,...Bv,..._v,...Mv,...Rv,layer3d:kb,...xb,...ib,...yb,singleVertexSolver:Lb,singleVertexAssignmentSolver:Ib,foldStripWithAssignments:$b});Object.assign(im,A_);const Ub={graph:im,cp:fm,origami:lm,axiom:Wm,convert:Ug,general:Gg,math:U_,singleVertex:X_,svg:Sl,webgl:lv,layer:rb};Al.ear=Ub;Object.defineProperty(Ub,"window",{enumerable:false,set:e=>{Sl.window=c(e)}});export{Ub as default};