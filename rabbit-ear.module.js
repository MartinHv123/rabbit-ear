const e=typeof window!=="undefined"&&typeof window.document!=="undefined";const t=typeof process!=="undefined"&&process.versions!=null&&process.versions.node!=null;const n={planarize:"graph could not planarize",manifold:"valid manifold required",graphCycle:"cycle not allowed",planarBoundary:"planar boundary detection error, bad graph",circularEdge:"circular edges not allowed",replaceModifyParam:"replace() index < value. indices parameter modified",replaceUndefined:"replace() generated undefined",flatFoldAngles:"foldAngles cannot be determined from flat-folded faces without an assignment",noWebGL:"WebGl not Supported",convexFace:"only convex faces are supported",window:"window not set; if using node/deno include package @xmldom/xmldom and set ear.window = xmldom",nonConvexTriangulation:"non-convex triangulation requires vertices_coords",backendStylesheet:"svgToFold found <style> in <svg>. rendering will be incomplete unless run in a major browser.",noLayerSolution:"LayerSolver bad input. no solution possible"};const s={window:undefined};const r=e=>(new e.DOMParser).parseFromString("<!DOCTYPE html><title>.</title>","text/html");const c=e=>{if(!e.document){e.document=r(e)}s.window=e;return s.window};if(e){s.window=window}const o=()=>{if(s.window===undefined){throw new Error(n.window)}return s.window};const a=1e-6;const i=180/Math.PI;const f=Math.PI/180;const l=Math.PI*2;const d=Object.freeze({__proto__:null,D2R:f,EPSILON:a,R2D:i,TWO_PI:l});const u=(e,t)=>e+(t||0);const m=e=>Math.sqrt(e.map((e=>e*e)).reduce(u,0));const g=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]);const p=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);const _=e=>e[0]*e[0]+e[1]*e[1];const h=e=>e.map((e=>e*e)).reduce(u,0);const v=e=>{const t=m(e);return t===0?e:e.map((e=>e/t))};const b=e=>{const t=g(e);return t===0?e:[e[0]/t,e[1]/t]};const y=e=>{const t=p(e);return t===0?e:[e[0]/t,e[1]/t,e[2]/t]};const E=(e,t)=>e.map((e=>e*t));const M=(e,t)=>[e[0]*t,e[1]*t];const A=(e,t)=>[e[0]*t,e[1]*t,e[2]*t];const x=(e,t)=>e.map(((e,n)=>e+(t[n]||0)));const w=(e,t)=>[e[0]+t[0],e[1]+t[1]];const k=(e,t)=>[e[0]+t[0],e[1]+t[1],e[2]+t[2]];const O=(e,t)=>e.map(((e,n)=>e-(t[n]||0)));const j=(e,t)=>[e[0]-t[0],e[1]-t[1]];const F=(e,t)=>[e[0]-t[0],e[1]-t[1],e[2]-t[2]];const S=(e,t)=>e.map(((n,s)=>e[s]*t[s])).reduce(u,0);const C=(e,t)=>e[0]*t[0]+e[1]*t[1];const V=(e,t)=>e[0]*t[0]+e[1]*t[1]+e[2]*t[2];const P=(e,t)=>e.map(((e,n)=>(e+t[n])/2));const T=(e,t)=>M(w(e,t),.5);const N=(e,t)=>A(k(e,t),.5);const z=function(){if(arguments.length===0){return undefined}const e=arguments[0].length>0?arguments[0].length:0;const t=Array(e).fill(0);Array.from(arguments).forEach((e=>t.forEach(((n,s)=>{t[s]+=e[s]||0}))));return t.map((e=>e/arguments.length))};const B=(...e)=>{if(!e||!e.length){return undefined}const t=1/e.length;return e.reduce(((e,t)=>w(e,t)),[0,0]).map((e=>e*t))};const $=(e,t,n=0)=>{const s=1-n;return e.map(((e,r)=>e*s+(t[r]||0)*n))};const R=(e,t)=>e[0]*t[1]-e[1]*t[0];const L=(e,t)=>[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]];const I=(e,t)=>Math.sqrt(e.map(((n,s)=>(e[s]-t[s])**2)).reduce(u,0));const U=(e,t)=>{const n=e[0]-t[0];const s=e[1]-t[1];return Math.sqrt(n*n+s*s)};const Q=(e,t)=>{const n=e[0]-t[0];const s=e[1]-t[1];const r=e[2]-t[2];return Math.sqrt(n*n+s*s+r*r)};const D=e=>e.map((e=>-e));const q=e=>[-e[1],e[0]];const W=e=>[e[1],-e[0]];const G=(e,t=a)=>e.map((e=>Math.abs(e))).reduce(u,0)<t;const H=(e,t,n=a)=>1-Math.abs(S(e,t))<n;const J=(e,t,n=a)=>H(v(e),v(t),n);const Z=(e,t,n=a)=>Math.abs(R(e,t))<n;const Y=(e,t)=>t.length===e?t:Array(e).fill(0).map(((e,n)=>t[n]?t[n]:e));const X=(e,t)=>[e,t].map((n=>Y(Math.max(e.length,t.length),n)));const K=(e=[1,0])=>{const t=b(e);return[t,q(t)]};const ee=(e=[1,0,0])=>{const t=y(e);const n=[[1,0,0],[0,1,0],[0,0,1]].map((e=>L(e,t)));const s=n.map(p).map(((e,t)=>({n:e,i:t}))).sort(((e,t)=>t.n-e.n)).map((e=>e.i)).shift();const r=y(n[s]);return[t,r,L(t,r)]};const te=e=>e.length===2?K(e):ee(e);const ne=Object.freeze({__proto__:null,add:x,add2:w,add3:k,average:z,average2:B,basisVectors:te,basisVectors2:K,basisVectors3:ee,cross2:R,cross3:L,degenerate:G,distance:I,distance2:U,distance3:Q,dot:S,dot2:C,dot3:V,flip:D,lerp:$,magSquared:h,magSquared2:_,magnitude:m,magnitude2:g,magnitude3:p,midpoint:P,midpoint2:T,midpoint3:N,normalize:v,normalize2:b,normalize3:y,parallel:J,parallel2:Z,parallelNormalized:H,resize:Y,resizeUp:X,rotate270:W,rotate90:q,scale:E,scale2:M,scale3:A,subtract:O,subtract2:j,subtract3:F});const se=[1,0,0,1];const re=se.concat(0,0);const ce=(e,t)=>[e[0]*t[0]+e[2]*t[1]+e[4],e[1]*t[0]+e[3]*t[1]+e[5]];const oe=(e,t,n)=>({vector:[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1]],origin:[e[0]*n[0]+e[2]*n[1]+e[4],e[1]*n[0]+e[3]*n[1]+e[5]]});const ae=(e,t)=>[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1],e[0]*t[2]+e[2]*t[3],e[1]*t[2]+e[3]*t[3],e[0]*t[4]+e[2]*t[5]+e[4],e[1]*t[4]+e[3]*t[5]+e[5]];const ie=e=>e[0]*e[3]-e[1]*e[2];const fe=e=>{const t=ie(e);if(Math.abs(t)<1e-12||Number.isNaN(t)||!Number.isFinite(e[4])||!Number.isFinite(e[5])){return undefined}return[e[3]/t,-e[1]/t,-e[2]/t,e[0]/t,(e[2]*e[5]-e[3]*e[4])/t,(e[1]*e[4]-e[0]*e[5])/t]};const le=(e=0,t=0)=>se.concat(e,t);const de=(e=[1,1],t=[0,0])=>[e[0],0,0,e[1],e[0]*-t[0]+t[0],e[1]*-t[1]+t[1]];const ue=(e=1,t=[0,0])=>de([e,e],t);const me=(e,t=[0,0])=>{const n=Math.cos(e);const s=Math.sin(e);return[n,s,-s,n,t[0],t[1]]};const ge=(e,t=[0,0])=>{const n=Math.atan2(e[1],e[0]);const s=Math.cos(n);const r=Math.sin(n);const c=Math.cos(-n);const o=Math.sin(-n);const a=s*c+r*o;const i=s*-o+r*c;const f=r*c+-s*o;const l=r*-o+-s*c;const d=t[0]+a*-t[0]+-t[1]*f;const u=t[1]+i*-t[0]+-t[1]*l;return[a,i,f,l,d,u]};const pe=Object.freeze({__proto__:null,determinant2:ie,identity2x2:se,identity2x3:re,invertMatrix2:fe,makeMatrix2Reflect:ge,makeMatrix2Rotate:me,makeMatrix2Scale:de,makeMatrix2Translate:le,makeMatrix2UniformScale:ue,multiplyMatrices2:ae,multiplyMatrix2Line2:oe,multiplyMatrix2Vector2:ce});const _e=Object.freeze([1,0,0,0,1,0,0,0,1]);const he=Object.freeze(_e.concat(0,0,0));const ve=e=>he.map(((t,n)=>Math.abs(t-e[n])<a)).reduce(((e,t)=>e&&t),true);const be=(e,t)=>[e[0]*t[0]+e[3]*t[1]+e[6]*t[2]+e[9],e[1]*t[0]+e[4]*t[1]+e[7]*t[2]+e[10],e[2]*t[0]+e[5]*t[1]+e[8]*t[2]+e[11]];const ye=(e,t,n)=>({vector:[e[0]*t[0]+e[3]*t[1]+e[6]*t[2],e[1]*t[0]+e[4]*t[1]+e[7]*t[2],e[2]*t[0]+e[5]*t[1]+e[8]*t[2]],origin:[e[0]*n[0]+e[3]*n[1]+e[6]*n[2]+e[9],e[1]*n[0]+e[4]*n[1]+e[7]*n[2]+e[10],e[2]*n[0]+e[5]*n[1]+e[8]*n[2]+e[11]]});const Ee=(e,t)=>[e[0]*t[0]+e[3]*t[1]+e[6]*t[2],e[1]*t[0]+e[4]*t[1]+e[7]*t[2],e[2]*t[0]+e[5]*t[1]+e[8]*t[2],e[0]*t[3]+e[3]*t[4]+e[6]*t[5],e[1]*t[3]+e[4]*t[4]+e[7]*t[5],e[2]*t[3]+e[5]*t[4]+e[8]*t[5],e[0]*t[6]+e[3]*t[7]+e[6]*t[8],e[1]*t[6]+e[4]*t[7]+e[7]*t[8],e[2]*t[6]+e[5]*t[7]+e[8]*t[8],e[0]*t[9]+e[3]*t[10]+e[6]*t[11]+e[9],e[1]*t[9]+e[4]*t[10]+e[7]*t[11]+e[10],e[2]*t[9]+e[5]*t[10]+e[8]*t[11]+e[11]];const Me=e=>e[0]*e[4]*e[8]-e[0]*e[7]*e[5]-e[3]*e[1]*e[8]+e[3]*e[7]*e[2]+e[6]*e[1]*e[5]-e[6]*e[4]*e[2];const Ae=e=>{const t=Me(e);if(Math.abs(t)<1e-12||Number.isNaN(t)||!Number.isFinite(e[9])||!Number.isFinite(e[10])||!Number.isFinite(e[11])){return undefined}const n=[e[4]*e[8]-e[7]*e[5],-e[1]*e[8]+e[7]*e[2],e[1]*e[5]-e[4]*e[2],-e[3]*e[8]+e[6]*e[5],e[0]*e[8]-e[6]*e[2],-e[0]*e[5]+e[3]*e[2],e[3]*e[7]-e[6]*e[4],-e[0]*e[7]+e[6]*e[1],e[0]*e[4]-e[3]*e[1],-e[3]*e[7]*e[11]+e[3]*e[8]*e[10]+e[6]*e[4]*e[11]-e[6]*e[5]*e[10]-e[9]*e[4]*e[8]+e[9]*e[5]*e[7],e[0]*e[7]*e[11]-e[0]*e[8]*e[10]-e[6]*e[1]*e[11]+e[6]*e[2]*e[10]+e[9]*e[1]*e[8]-e[9]*e[2]*e[7],-e[0]*e[4]*e[11]+e[0]*e[5]*e[10]+e[3]*e[1]*e[11]-e[3]*e[2]*e[10]-e[9]*e[1]*e[5]+e[9]*e[2]*e[4]];const s=1/t;return n.map((e=>e*s))};const xe=(e=0,t=0,n=0)=>_e.concat(e,t,n);const we=(e,t,n,s,r)=>{const c=Math.cos(e);const o=Math.sin(e);const a=_e.concat([0,0,0]);a[n*3+n]=c;a[n*3+s]=(r?+1:-1)*o;a[s*3+n]=(r?-1:+1)*o;a[s*3+s]=c;const i=[0,1,2].map((e=>t[e]||0));const f=_e.concat(D(i));const l=_e.concat(i);return Ee(l,Ee(a,f))};const ke=(e,t=[0,0,0])=>we(e,t,1,2,true);const Oe=(e,t=[0,0,0])=>we(e,t,0,2,false);const je=(e,t=[0,0,0])=>we(e,t,0,1,true);const Fe=(e,t=[0,0,1],n=[0,0,0])=>{const s=[0,1,2].map((e=>n[e]||0));const[r,c,o]=Y(3,v(t));const a=Math.cos(e);const i=Math.sin(e);const f=1-a;const l=_e.concat(-s[0],-s[1],-s[2]);const d=_e.concat(s[0],s[1],s[2]);return Ee(d,Ee([f*r*r+a,f*c*r+o*i,f*o*r-c*i,f*r*c-o*i,f*c*c+a,f*o*c+r*i,f*r*o+c*i,f*c*o-r*i,f*o*o+a,0,0,0],l))};const Se=(e=[1,1,1],t=[0,0,0])=>[e[0],0,0,0,e[1],0,0,0,e[2],e[0]*-t[0]+t[0],e[1]*-t[1]+t[1],e[2]*-t[2]+t[2]];const Ce=(e=1,t=[0,0,0])=>Se([e,e,e],t);const Ve=(e,t=[0,0])=>{const n=ge(e,t);return[n[0],n[1],0,n[2],n[3],0,0,0,1,n[4],n[5],0]};const Pe=Object.freeze({__proto__:null,determinant3:Me,identity3x3:_e,identity3x4:he,invertMatrix3:Ae,isIdentity3x4:ve,makeMatrix3ReflectZ:Ve,makeMatrix3Rotate:Fe,makeMatrix3RotateX:ke,makeMatrix3RotateY:Oe,makeMatrix3RotateZ:je,makeMatrix3Scale:Se,makeMatrix3Translate:xe,makeMatrix3UniformScale:Ce,multiplyMatrices3:Ee,multiplyMatrix3Line3:ye,multiplyMatrix3Vector3:be});const Te=e=>e!=null&&typeof e[Symbol.iterator]==="function";const Ne=function(){switch(arguments.length){case 0:return Array.from(arguments);case 1:return Te(arguments[0])&&typeof arguments[0]!=="string"?Ne(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>Te(e)?[...Ne(e)]:e))}};const ze=function(){switch(arguments.length){case 0:return Array.from(arguments);case 1:return Te(arguments[0])&&typeof arguments[0]!=="string"?ze(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>Te(e)?[...ze(e)]:e)).flat()}};const Be=function(){let e=ze(arguments);const t=e[0];if(typeof t==="object"&&t!==null&&!Number.isNaN(t.x)){e=["x","y","z"].map((e=>t[e])).filter((e=>e!==undefined))}return e.filter((e=>typeof e==="number"))};const $e=function(){return Ne(arguments).map((e=>Be(e)))};const Re=function(){const e=Ne(arguments);return e.length===4?[[0,1],[2,3]].map((t=>t.map((t=>e[t])))):e.map((e=>Be(e)))};const Le=(e,t=[])=>({vector:e,origin:t});const Ie=function(){const e=Ne(arguments);if(e.length===0||e[0]==null){return Le([],[])}if(e[0].constructor===Object&&e[0].vector!==undefined){return Le(e[0].vector,e[0].origin||[])}return typeof e[0]==="number"?Le(Be(e)):Le(...e.map((e=>Be(e))))};const Ue=Object.freeze({__proto__:null,getArrayOfVectors:$e,getLine:Ie,getSegment:Re,getVector:Be});const Qe=e=>Array.from(Array(Math.floor(e))).map(((t,n)=>l*(n/e)));const De=(e,t)=>e.map((e=>[t*Math.cos(e),t*Math.sin(e)]));const qe=(e=3,t=1)=>De(Qe(e),t);const We=(e=3,t=1)=>{const n=Math.PI/e;const s=Qe(e).map((e=>e+n));return De(s,t)};const Ge=(e=3,t=1)=>qe(e,t/Math.cos(Math.PI/e));const He=(e=3,t=1)=>We(e,t/Math.cos(Math.PI/e));const Je=(e=3,t=1)=>qe(e,t/2/Math.sin(Math.PI/e));const Ze=(e=3,t=1)=>We(e,t/2/Math.sin(Math.PI/e));const Ye=(e,t=a)=>{const n=e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>O(e[1],e[0])));const s=n.map(((e,t,n)=>[e,n[(t+n.length-1)%n.length]])).map((e=>!J(e[1],e[0],t)));return e.filter(((e,t)=>s[t]))};const Xe=e=>.5*e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>R(...e))).reduce(((e,t)=>e+t),0);const Ke=e=>{const t=1/(6*Xe(e));return e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>M(w(...e),R(...e)))).reduce(((e,t)=>w(e,t)),[0,0]).map((e=>e*t))};const et=(e,t=0)=>{if(!e||!e.length){return undefined}const n=Array(e[0].length).fill(Infinity);const s=Array(e[0].length).fill(-Infinity);e.filter((e=>e!==undefined)).forEach((e=>e.forEach(((e,r)=>{if(e<n[r]){n[r]=e-t}if(e>s[r]){s[r]=e+t}}))));const r=s.map(((e,t)=>e-n[t]));return{min:n,max:s,span:r}};const tt=Object.freeze({__proto__:null,boundingBox:et,centroid:Ke,makePolygonCircumradius:qe,makePolygonCircumradiusSide:We,makePolygonInradius:Ge,makePolygonInradiusSide:He,makePolygonNonCollinear:Ye,makePolygonSideLength:Je,makePolygonSideLengthSide:Ze,signedArea:Xe});const nt=(e,t,n=a)=>Math.abs(e-t)<n;const st=(e,t,n=a)=>nt(e,t,n)?0:Math.sign(e-t);const rt=(e,t,n=a)=>{for(let s=0;s<Math.max(e.length,t.length);s+=1){if(!nt(e[s]||0,t[s]||0,n)){return false}}return true};const ct=(e,t=a)=>e>-t;const ot=(e,t=a)=>e>t;const at=()=>true;const it=()=>true;const ft=ct;const lt=ot;const dt=(e,t=a)=>e>-t&&e<1+t;const ut=(e,t=a)=>e>t&&e<1-t;const mt=Object.freeze({__proto__:null,epsilonCompare:st,epsilonEqual:nt,epsilonEqualVectors:rt,exclude:ot,excludeL:it,excludeR:lt,excludeS:ut,include:ct,includeL:at,includeR:ft,includeS:dt});const gt={file:["file_spec","file_creator","file_author","file_title","file_description","file_classes","file_frames"],frame:["frame_author","frame_title","frame_description","frame_attributes","frame_classes","frame_unit","frame_parent","frame_inherit"],graph:["vertices_coords","vertices_vertices","vertices_faces","edges_vertices","edges_faces","edges_assignment","edges_foldAngle","edges_length","faces_vertices","faces_edges","vertices_edges","edges_edges","faces_faces"],orders:["edgeOrders","faceOrders"]};const pt=["singleModel","multiModel","animation","diagrams"];const _t=["creasePattern","foldedForm","graph","linkage"];const ht=["2D","3D","abstract","manifold","nonManifold","orientable","nonOrientable","selfTouching","nonSelfTouching","selfIntersecting","nonSelfIntersecting"];const vt=Object.freeze({__proto__:null,foldFileClasses:pt,foldFrameAttributes:ht,foldFrameClasses:_t,foldKeys:gt});const bt={vertices:"vertex",edges:"edge",faces:"face"};const yt={vertex:"vertices",edge:"edges",face:"faces"};const Et=Array.from("BbMmVvFfJjCcUu");const Mt={B:"boundary",M:"mountain",V:"valley",F:"flat",J:"join",C:"cut",U:"unassigned"};Object.keys(Mt).forEach((e=>{Mt[e.toLowerCase()]=Mt[e]}));const At={B:0,b:0,M:-180,m:-180,V:180,v:180,F:0,f:0,J:0,j:0,C:0,c:0,U:0,u:0};const xt={B:false,b:false,M:true,m:true,V:true,v:true,F:false,f:false,J:false,j:false,C:false,c:false,U:true,u:true};const wt={B:true,b:true,M:false,m:false,V:false,v:false,F:false,f:false,J:false,j:false,C:true,c:true,U:false,u:false};const kt=e=>At[e]||0;const Ot=e=>{if(e>a){return"V"}if(e<-a){return"M"}return"U"};const jt=e=>nt(0,e)||nt(-180,e)||nt(180,e);const Ft=({edges_foldAngle:e})=>{if(!e){return true}for(let t=0;t<e.length;t+=1){if(!jt(e[t])){return false}}return true};const St=(e,t)=>Object.keys(e).filter((e=>t(e)));const Ct=(e,t)=>St(e,(e=>e.substring(0,t.length+1)===`${t}_`));const Vt=(e,t)=>St(e,(e=>e.substring(e.length-t.length-1,e.length)===`_${t}`));const Pt=(e,t)=>{const n=Ct(e,t);if(n.length===0){return[]}const s=Math.max(...n.map((t=>e[t].length)));const r=Array.from(Array(s)).map((()=>({})));n.forEach((t=>r.forEach(((n,s)=>{r[s][t]=e[t][s]}))));return r};const Tt=(e,t,n)=>{const s=Ct(e,t);if(s.length===0){return undefined}const r={};s.forEach((t=>{r[t]=e[t][n]}));return r};const Nt=Object.freeze([].concat(gt.file).concat(gt.frame).concat(gt.graph).concat(gt.orders));const zt=(e={})=>Object.keys(e).length===0?0:Nt.filter((t=>e[t])).length/Object.keys(e).length;const Bt=({frame_classes:e,file_classes:t})=>e&&e.includes("foldedForm")||t&&t.includes("foldedForm");const $t=({vertices_coords:e},t=a)=>{for(let n=0;n<e.length;n+=1){if(e[n]&&e[n].length===3&&!nt(0,e[n][2],t)){return 3}}return 2};const Rt=({vertices_coords:e})=>{if(e[0]!==undefined){return e[0].length}const t=e.filter((()=>true)).shift();if(!t){return undefined}return t.length};const Lt=({edges_vertices:e,edges_foldAngle:t,edges_assignment:n})=>{if(n===undefined){return t===undefined?e.map((()=>true)):t.map((e=>e<-a||e>a))}return n.map((e=>xt[e]))};const It={M:"V",m:"v",V:"M",v:"m"};const Ut=e=>It[e]||e;const Qt=e=>{if(e.edges_assignment){e.edges_assignment=e.edges_assignment.map((e=>It[e]?It[e]:e))}if(e.edges_foldAngle){e.edges_foldAngle=e.edges_foldAngle.map((e=>-e))}return e};const Dt=(e={})=>{const t={};gt.file.filter((e=>e!=="file_frames")).filter((t=>e[t]!==undefined)).forEach((n=>{t[n]=e[n]}));return t};const qt=Object.freeze({__proto__:null,assignmentCanBeFolded:xt,assignmentFlatFoldAngle:At,assignmentIsBoundary:wt,edgeAssignmentToFoldAngle:kt,edgeFoldAngleIsFlat:jt,edgeFoldAngleToAssignment:Ot,edgesAssignmentNames:Mt,edgesAssignmentValues:Et,edgesFoldAngleAreAllFlat:Ft,filterKeysWithPrefix:Ct,filterKeysWithSuffix:Vt,getDimension:$t,getDimensionQuick:Rt,getFileMetadata:Dt,invertAssignment:Ut,invertAssignments:Qt,isFoldObject:zt,isFoldedForm:Bt,makeEdgesIsFolded:Lt,pluralize:yt,singularize:bt,transposeGraphArrayAtIndex:Tt,transposeGraphArrays:Pt});const Wt=function(e,t){Vt(e,"coords").forEach((n=>{e[n]=e[n].map((e=>Y(3,e))).map((e=>be(t,e)))}));Vt(e,"matrix").forEach((n=>{e[n]=e[n].map((e=>Ee(e,t)))}));return e};const Gt=(e,...t)=>{const n=t.flat();const s=n.length===1?[n[0],n[0],n[0]]:[1,1,1].map(((e,t)=>n[t]===undefined?e:n[t]));const r=Se(s);return Wt(e,r)};const Ht=(e,...t)=>{const n=Be(...t);const s=Y(3,n);const r=xe(...s);return Wt(e,r)};const Jt=(e,t,n,s)=>Wt(e,Fe(t,n,s));const Zt=(e,t,...n)=>{const s=Be(...n);const r=Y(3,s);const c=je(t,r);return Wt(e,c)};const Yt=function(e){if(!e.vertices_coords){return e}const t=et(e.vertices_coords);const n=Math.max(...t.span);const s=n===0?1:1/n;const r=t.min;e.vertices_coords=e.vertices_coords.map((e=>O(e,r))).map((e=>e.map((e=>e*s))));return e};const Xt=Object.freeze({__proto__:null,rotate:Jt,rotateZ:Zt,scale:Gt,transform:Wt,translate:Ht,unitize:Yt});const Kt=({vertices_coords:e},t=a)=>{if(!e){return[]}const n=Rt({vertices_coords:e});const s=Array.from(Array(n));const r=[];const c=[];const o=e.map(((e,t)=>({i:t,d:e[0]}))).sort(((e,t)=>e.d-t.d)).map((e=>e.i));let i=0;const f=s.map((()=>[0,0]));const l=t=>s.map(((n,s)=>e[t][s]>f[s][0]&&e[t][s]<f[s][1])).reduce(((e,t)=>e&&t),true);const d=s=>{const r=s[s.length-1];while(e[r][0]-e[s[i]][0]>t){i+=1}const c=s.slice(i,s.length).map((t=>e[t]));f[0]=[c[0][0]-t,c[c.length-1][0]+t];for(let e=1;e<n;e+=1){const n=c.map((t=>t[e]));f[e]=[Math.min(...n)-t,Math.max(...n)+t]}};while(c.length!==e.length){const t=[];const n=o.shift();t.push(n);c.push(n);i=0;d(t);let s=0;while(s<o.length&&e[o[s]][0]<f[0][1]){if(l(o[s])){const e=o.splice(s,1).shift();t.push(e);c.push(e);d(t)}else{s+=1}}r.push(t)}return r};const en=Object.freeze({__proto__:null,getVerticesClusters:Kt});const tn=(...e)=>Math.max(0,...e.filter((e=>e!==undefined)).map((e=>e.length)));const nn=(e,t)=>tn(...Ct(e,t).map((t=>e[t])));nn.vertices=({vertices_coords:e,vertices_faces:t,vertices_vertices:n})=>tn(e,t,n);nn.edges=({edges_vertices:e,edges_edges:t,edges_faces:n})=>tn(e,t,n);nn.faces=({faces_vertices:e,faces_edges:t,faces_faces:n})=>tn(e,t,n);const sn=e=>e.concat(e.slice(0,-1).reverse());const rn=(...e)=>{const t=[];e.forEach((e=>e.forEach(((e,n)=>{t[n]=e}))));return t};const cn=(e,t)=>{t.sort(((e,t)=>e-t));return[e.slice(t[1]).concat(e.slice(0,t[0]+1)),e.slice(t[0],t[1]+1)]};const on=e=>Array.from(new Set(e));const an=e=>{const t={};e.forEach((e=>{if(t[e]===undefined){t[e]=0}t[e]+=1}));return e.filter((e=>t[e]>1))};const fn=e=>{const t={};e.forEach((e=>{t[e]=true}));return Object.keys(t).map(parseFloat)};const ln=(e,t=a)=>{const n=e.slice().sort(((e,t)=>e-t));if(n.length<2){return n}const s=[true];for(let e=1;e<n.length;e+=1){s[e]=!nt(n[e],n[e-1],t)}return n.filter(((e,t)=>s[t]))};const dn=(e,t,n=a)=>{const s=[];let r=0;let c=0;while(r<e.length&&c<t.length){if(nt(e[r],t[c],n)){r+=1;continue}if(e[r]>t[c]){c+=1;continue}if(t[c]>e[r]){s.push(e[r]);r+=1;continue}}return s};const un=e=>{const t=Array(e.length*(e.length-1)/2);let n=0;for(let s=0;s<e.length-1;s+=1){for(let r=s+1;r<e.length;r+=1,n+=1){t[n]=[e[s],e[r]]}}return t};const mn=(e,t)=>{const n=t===undefined?e.map(((e,t)=>({i:t,value:e}))):e.map(((e,n)=>({i:n,value:t(e)})));let s;let r=Infinity;for(let e=0;e<n.length;e+=1){if(n[e].value<r){s=e;r=n[e].value}}return s};const gn=e=>{let t=0;for(let n=1;n<e.length;n+=1){if(e[n]<e[t]){t=n}}return t};const pn=e=>{let t=0;for(let n=1;n<e.length;n+=1){if(e[n]>e[t]){t=n}}return t};const _n=Object.freeze({__proto__:null,arrayMaxIndex:pn,arrayMinIndex:gn,arrayMinimum:mn,chooseTwoPairs:un,epsilonUniqueSortedNumbers:ln,mirrorArray:sn,nonUniqueElements:an,setDifferenceSortedNumbers:dn,splitCircularArray:cn,uniqueElements:on,uniqueSortedNumbers:fn,zipperArrays:rn});const hn=(e,t,s)=>{const r=nn(e,t);let c=false;Object.entries(s).filter((([e,t])=>e<t)).forEach((([e,t])=>{c=true;delete s[e];s[t]=e}));if(c){console.warn(n.replaceModifyParam)}const o=Object.keys(s).map((e=>parseInt(e,10)));const a=fn(o);const i=[];for(let e=0,t=0,c=0;e<r;e+=1,t+=1){while(e===a[c]){i[e]=i[s[a[c]]];if(i[e]===undefined){throw new Error(n.replaceUndefined)}e+=1;c+=1}if(e<r){i[e]=t}}Vt(e,t).forEach((t=>e[t].forEach(((n,s)=>e[t][s].forEach(((n,r)=>{e[t][s][r]=i[n]}))))));a.reverse();Ct(e,t).forEach((t=>a.forEach((n=>e[t].splice(n,1)))));return i};const vn=(e,t)=>Kt(e,t).filter((e=>e.length>1));const bn=(e,t=a)=>{const n=[];const s=[];const r=Kt(e,t).filter((e=>e.length>1));r.forEach((e=>{if(Math.min(...e)!==e[0]){e.sort(((e,t)=>e-t))}for(let t=1;t<e.length;t+=1){n[e[t]]=e[0];s.push(e[t])}}));r.map((t=>t.map((t=>e.vertices_coords[t])))).map((e=>z(...e))).forEach(((t,n)=>{e.vertices_coords[r[n][0]]=t}));return{map:hn(e,"vertices",n),remove:s}};const yn=Object.freeze({__proto__:null,duplicateVertices:vn,removeDuplicateVertices:bn});const En=(e,t,n)=>{const s=nn(e,t);const r=fn(n);const c=[];for(let e=0,t=0,n=0;e<s;e+=1,t+=1){while(e===r[n]){c[e]=undefined;e+=1;n+=1}if(e<s){c[e]=t}}Vt(e,t).forEach((t=>e[t].forEach(((n,s)=>e[t][s].forEach(((n,r)=>{e[t][s][r]=c[n]}))))));r.reverse();Ct(e,t).forEach((t=>r.forEach((n=>e[t].splice(n,1)))));Vt(e,t).forEach((t=>e[t].forEach(((n,s)=>{e[t][s]=e[t][s].filter((e=>e!==undefined))}))));return c};const Mn=({vertices_coords:e,edges_vertices:t})=>{if(!e||!t){return[]}let n=e.length;const s=Array(n).fill(false);t.forEach((e=>{e.filter((e=>!s[e])).forEach((e=>{s[e]=true;n-=1}))}));return s.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined))};const An=({vertices_coords:e,faces_vertices:t})=>{if(!e||!t){return[]}let n=e.length;const s=Array(n).fill(false);t.forEach((e=>{e.filter((e=>!s[e])).forEach((e=>{s[e]=true;n-=1}))}));return s.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined))};const xn=({vertices_coords:e,edges_vertices:t,faces_vertices:n})=>{if(!e){return[]}let s=e.length;const r=Array(s).fill(false);if(t){t.forEach((e=>{e.filter((e=>!r[e])).forEach((e=>{r[e]=true;s-=1}))}))}if(n){n.forEach((e=>{e.filter((e=>!r[e])).forEach((e=>{r[e]=true;s-=1}))}))}return r.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined))};const wn=(e,t)=>{if(!t){t=xn(e)}return{map:En(e,"vertices",t),remove:t}};const kn=Object.freeze({__proto__:null,edgeIsolatedVertices:Mn,faceIsolatedVertices:An,isolatedVertices:xn,removeIsolatedVertices:wn});const On=e=>Math.atan2(e[1],e[0]);const jn=e=>[Math.cos(e),Math.sin(e)];const Fn=(e,t)=>({vector:O(t,e),origin:e});const Sn=({vector:e,origin:t})=>{const n=m(e);const s=q(e);const r=S(t,s)/n;return{normal:E(s,1/n),distance:r}};const Cn=({normal:e,distance:t})=>({vector:W(e),origin:E(e,t)});const Vn=Object.freeze({__proto__:null,angleToVector:jn,pointsToLine:Fn,uniqueLineToVecLine:Cn,vecLineToUniqueLine:Sn,vectorToAngle:On});const Pn=(e,t,n)=>{while(n<t){n+=l}while(e>t){e-=l}while(e<t){e+=l}return e<n};const Tn=(e,t)=>{while(e<0){e+=l}while(t<0){t+=l}while(e>l){e-=l}while(t>l){t-=l}const n=e-t;return n>=0?n:l-(t-e)};const Nn=(e,t)=>{while(e<0){e+=l}while(t<0){t+=l}while(e>l){e-=l}while(t>l){t-=l}const n=t-e;return n>=0?n:l-(e-t)};const zn=(e,t)=>{const n=t[0]*e[0]+t[1]*e[1];const s=t[0]*e[1]-t[1]*e[0];let r=Math.atan2(s,n);if(r<0){r+=l}return r};const Bn=(e,t)=>{const n=e[0]*t[0]+e[1]*t[1];const s=e[0]*t[1]-e[1]*t[0];let r=Math.atan2(s,n);if(r<0){r+=l}return r};const $n=(e,t)=>jn(On(e)-zn(e,t)/2);const Rn=(e,t)=>jn(On(e)+Bn(e,t)/2);const Ln=(e,t,n)=>{const s=Tn(e,t)/n;return Array.from(Array(n-1)).map(((t,n)=>e+s*(n+1)))};const In=(e,t,n)=>{const s=Nn(e,t)/n;return Array.from(Array(n-1)).map(((t,n)=>e+s*(n+1)))};const Un=(e,t,n)=>{const s=Math.atan2(e[1],e[0]);const r=Math.atan2(t[1],t[0]);return Ln(s,r,n).map(jn)};const Qn=(e,t,n)=>{const s=Math.atan2(e[1],e[0]);const r=Math.atan2(t[1],t[0]);return In(s,r,n).map(jn)};const Dn=e=>{const t=e.map(((e,t)=>t)).sort(((t,n)=>e[t]-e[n]));return t.slice(t.indexOf(0),t.length).concat(t.slice(0,t.indexOf(0)))};const qn=e=>Dn(e.map(On));const Wn=e=>Dn(e).map((t=>e[t])).map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>Nn(e[0],e[1])));const Gn=e=>Wn(e.map(On));const Hn=(e,t,n,s=a)=>{const r=b(j(t,e));const c=b(j(n,e));const o=R(r,c);if(!nt(o,0,s)){return Math.sign(o)}return nt(U(e,t)+U(t,n),U(e,n))?0:undefined};const Jn=Object.freeze({__proto__:null,clockwiseAngle2:zn,clockwiseAngleRadians:Tn,clockwiseBisect2:$n,clockwiseSubsect2:Un,clockwiseSubsectRadians:Ln,counterClockwiseAngle2:Bn,counterClockwiseAngleRadians:Nn,counterClockwiseBisect2:Rn,counterClockwiseOrder2:qn,counterClockwiseOrderRadians:Dn,counterClockwiseSectors2:Gn,counterClockwiseSectorsRadians:Wn,counterClockwiseSubsect2:Qn,counterClockwiseSubsectRadians:In,isCounterClockwiseBetween:Pn,threePointTurnDirection:Hn});const Zn=e=>{let t=-1;e.filter((e=>e!==undefined)).forEach((e=>e.forEach((e=>e.forEach((e=>{if(e>t){t=e}}))))));return t};const Yn=e=>{let t=-1;e.forEach((e=>{if(e[0]>t){t=e[0]}if(e[1]>t){t=e[1]}}));return t};const Xn={edges:"edgeOrders",faces:"faceOrders"};const Kn=(e,t)=>Math.max(Zn(Vt(e,t).map((t=>e[t]))),e[Xn[t]]?Yn(e[Xn[t]]):-1)+1;Kn.vertices=e=>Kn(e,"vertices");Kn.edges=e=>Kn(e,"edges");Kn.faces=e=>Kn(e,"faces");const es=({vertices_vertices:e,vertices_sectors:t},n,s,r={})=>{const c={};const o={vertices:[n],edges:[],angles:[]};let a=n;let i=s;while(true){const n=e[i];const s=n.indexOf(a);const f=(s+n.length-1)%n.length;const l=n[f];const d=`${i} ${l}`;if(c[d]){Object.assign(r,c);o.vertices.pop();return o}c[d]=true;if(r[d]){return undefined}o.vertices.push(i);o.edges.push(d);if(t){o.angles.push(t[i][f])}a=i;i=l}};const ts=({vertices_vertices:e,vertices_sectors:t})=>{const n={vertices_vertices:e,vertices_sectors:t};const s={};return e.map(((e,t)=>e.map((e=>es(n,t,e,s))).filter((e=>e!==undefined)))).flat()};const ns=e=>e.filter((e=>e.angles.map((e=>Math.PI-e)).reduce(((e,t)=>e+t),0)>0));const ss=Object.freeze({__proto__:null,counterClockwiseWalk:es,filterWalkedBoundaryFace:ns,planarVertexWalk:ts});const rs=(e,t=[1,0,0],n=[0,0,0])=>{const s=Y(3,e);const r=F(s,Y(3,n));const c=y(Y(3,t));const o=V(c,r);const a=A(c,o);return F(s,a)};const cs=Object.freeze({__proto__:null,projectPointOnPlane:rs});const os=(e,t,n)=>e.map(((e,s)=>({i:s,n:n(e,t)}))).sort(((e,t)=>e.n-t.n)).map((e=>e.i));const as=(e,t)=>os(e,t,S);const is=e=>{const t=[e=>e[0]>=0&&e[1]>=0,e=>e[0]<0&&e[1]>=0,e=>e[0]<0&&e[1]<0,e=>e[0]>=0&&e[1]<0];const n=[(t,n)=>e[n][0]-e[t][0],(t,n)=>e[n][0]-e[t][0],(t,n)=>e[t][0]-e[n][0],(t,n)=>e[t][0]-e[n][0]];const s=e.map((e=>t.map(((t,n)=>t(e)?n:undefined)).filter((e=>e!==undefined)).shift()));const r=[[],[],[],[]];s.forEach(((e,t)=>{r[e].push(t)}));return r.flatMap(((e,t)=>e.sort(n[t])))};const fs=(e,t=[1,0,0],n=[0,0,0])=>{const s=ee(t);const r=[s[1],s[2],s[0]];const c=e.map((e=>rs(e,t,n)));const o=c.map((e=>O(e,n)));const a=o.map((e=>[S(e,r[0]),S(e,r[1])]));const i=a.map(b);return is(i)};const ls=Object.freeze({__proto__:null,radialSortPointIndices3:fs,radialSortUnitVectors2:is,sortAgainstItem:os,sortPointsAlongVector:as});const ds=({vertices_coords:e},t,n)=>t.map((t=>e[t])).map((t=>O(t,e[n]))).map((e=>Math.atan2(e[1],e[0]))).map((e=>e>-a?e:e+Math.PI*2)).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).map((e=>e.i)).map((e=>t[e]));const us=({vertices_coords:e},t,n)=>as(t.map((t=>e[t])),n).map((e=>t[e]));const ms=Object.freeze({__proto__:null,sortVerticesAlongVector:us,sortVerticesCounterClockwise:ds});const gs=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))).map((e=>{let t;let n;let s=0;do{t=O(e[(s+1)%e.length],e[s]);n=O(e[(s+2)%e.length],e[s]);s+=1}while(s<e.length&&J(t,n));return y(L(Y(3,t),Y(3,n)))}));const ps=({vertices_coords:e,faces_vertices:t,faces_normal:n})=>{const s=(e,t)=>{e[0]+=t[0];e[1]+=t[1];e[2]+=t[2]};if(!n){n=gs({vertices_coords:e,faces_vertices:t})}const r=e.map((()=>[0,0,0]));t.forEach(((e,t)=>e.forEach((e=>s(r[e],n[t])))));return r.map((e=>y(e)))};const _s=Object.freeze({__proto__:null,makeFacesNormal:gs,makeVerticesNormal:ps});const hs=({edges_vertices:e})=>{const t=[];e.forEach(((e,n)=>e.forEach((e=>{if(t[e]===undefined){t[e]=[]}t[e].push(n)}))));return t};const vs=({edges_vertices:e,vertices_vertices:t})=>{const n=ws({edges_vertices:e});return t.map(((e,t)=>e.map((e=>n[`${t} ${e}`]))))};const bs=({vertices_coords:e,vertices_edges:t,edges_vertices:n})=>{if(!t){t=hs({edges_vertices:n})}const s=t.map(((e,t)=>e.map((e=>n[e].filter((e=>e!==t)))).reduce(((e,t)=>e.concat(t)),[])));return e===undefined?s:s.map(((t,n)=>ds({vertices_coords:e},t,n)))};const ys=({vertices_coords:e,vertices_faces:t,faces_vertices:n})=>{if(!t){t=As({vertices_coords:e,faces_vertices:n})}const s=t.map((e=>e.map((e=>n[e]))));const r=s.map(((e,t)=>e.map((e=>e.indexOf(t)))));const c=s.map(((e,t)=>e.map(((e,n)=>[(r[t][n]+e.length-1)%e.length,r[t][n],(r[t][n]+1)%e.length]))));const o=c.map(((e,t)=>e.map(((e,n)=>e.map((e=>s[t][n][e]))))));const a=o.map((e=>{const t=e.map((e=>[[0,1],[1,2]].map((t=>t.map((t=>e[t])).join(" ")))));const n={};const s={};t.forEach(((e,t)=>{n[e[0]]=t;s[e[1]]=t}));return{facesVerts:t,to:s,from:n}}));return a.map((e=>{const t=Object.keys(e.to);const n=t.map((e=>e.split(" ").reverse().join(" ")));const s=t.filter(((t,s)=>!(n[s]in e.from)));if(s.length>2){console.warn("vertices_vertices found an unsolvable vertex");return[]}const r=s.length?s:[t[0]];const c=[];const o={};for(let t=0;t<r.length;t+=1){const n=r[t];const s=[n];o[n]=true;let a=false;do{const t=s[s.length-1];const n=e.to[t];if(!(n in e.facesVerts)){break}let r;if(e.facesVerts[n][0]===t){r=e.facesVerts[n][1]}if(e.facesVerts[n][1]===t){r=e.facesVerts[n][0]}if(r===undefined){return"not found"}const c=r.split(" ").reverse().join(" ");s.push(r);a=c in o;if(!a){s.push(c)}o[r]=true;o[c]=true}while(!a);const i=s.filter(((e,t)=>t%2===0)).map((e=>e.split(" ")[1])).map((e=>parseInt(e,10)));c.push(...i)}return c}))};const Es=e=>{if(!e.vertices_coords||!e.vertices_coords.length){return[]}const t=e.vertices_coords.filter((()=>true)).shift().length;switch(t){case 3:return ys(e);default:return bs(e)}};const Ms=({vertices_edges:e,edges_vertices:t})=>{if(!e){e=hs({edges_vertices:t})}return e.map(((e,n)=>e.flatMap((e=>t[e].filter((e=>e!==n))))))};const As=({vertices_coords:e,vertices_edges:t,faces_vertices:n})=>{const s=e||t;if(!n){return(s||[]).map((()=>[]))}const r=s!==undefined?s.map((()=>[])):Array.from(Array(Kn.vertices({faces_vertices:n}))).map((()=>[]));n.forEach(((e,t)=>{const n=[];e.forEach((e=>{n[e]=t}));n.forEach(((e,t)=>r[t].push(e)))}));return r};const xs=({vertices_coords:e,vertices_vertices:t,faces_vertices:n})=>{if(!n){return e.map((()=>[]))}if(!t){return As({vertices_coords:e,faces_vertices:n})}const s=Os({faces_vertices:n});return t.map(((e,t)=>e.map(((e,n,s)=>[s[(n+1)%s.length],t,e].join(" "))))).map((e=>e.map((e=>s[e]))))};const ws=({edges_vertices:e})=>{const t={};e.map((e=>e.join(" "))).forEach(((e,n)=>{t[e]=n}));e.map((e=>`${e[1]} ${e[0]}`)).forEach(((e,n)=>{t[e]=n}));return t};const ks=({edges_vertices:e})=>{const t={};e.map((e=>e.join(" "))).forEach(((e,n)=>{t[e]=n}));return t};const Os=({faces_vertices:e})=>{const t={};e.forEach(((e,n)=>e.map(((t,n)=>[0,1,2].map((t=>(n+t)%e.length)).map((t=>e[t])).join(" "))).forEach((e=>{t[e]=n}))));return t};const js=({vertices_coords:e,vertices_vertices:t,vertices_edges:n,vertices_faces:s,edges_vertices:r,edges_vector:c,faces_vertices:o})=>{if(!c){c=Rs({vertices_coords:e,edges_vertices:r})}if(!t){t=Es({vertices_coords:e,vertices_edges:n,vertices_faces:s,edges_vertices:r,faces_vertices:o})}const a=ks({edges_vertices:r});return t.map(((e,n)=>t[n].map((e=>{const t=a[`${n} ${e}`];const s=a[`${e} ${n}`];if(t!==undefined){return c[t]}if(s!==undefined){return D(c[s])}}))))};const Fs=({vertices_coords:e,vertices_vertices:t,edges_vertices:n,edges_vector:s})=>js({vertices_coords:e,vertices_vertices:t,edges_vertices:n,edges_vector:s}).map((e=>e.length===1?[l]:Gn(e)));const Ss=({edges_vertices:e,vertices_edges:t})=>e.map(((e,n)=>{const s=t[e[0]].filter((e=>e!==n));const r=t[e[1]].filter((e=>e!==n));return s.concat(r)}));const Cs=({edges_vertices:e,faces_edges:t})=>{const n=e!==undefined?e.map((()=>[])):Array.from(Array(Kn.edges({faces_edges:t}))).map((()=>[]));t.forEach(((e,t)=>{const s=[];e.forEach((e=>{s[e]=t}));s.forEach(((e,t)=>n[t].push(e)))}));return n};const Vs=({vertices_coords:e,edges_vertices:t,edges_vector:n,faces_vertices:s,faces_edges:r,faces_center:c})=>{if(!t||!s&&!r){return Cs({faces_edges:r})}if(!s){s=Qs({edges_vertices:t,faces_edges:r})}if(!r){r=Ds({edges_vertices:t,faces_vertices:s})}if(!n){n=Rs({vertices_coords:e,edges_vertices:t})}const o=t.map((t=>e[t[0]]));if(!c){c=Js({vertices_coords:e,faces_vertices:s})}const a=t.map((()=>[]));r.forEach(((e,t)=>{const n=[];e.forEach((e=>{n[e]=t}));n.forEach(((e,t)=>a[t].push(e)))}));a.forEach(((e,t)=>{const s=e.map((e=>c[e])).map((e=>j(e,o[t]))).map((e=>R(e,n[t])));e.sort(((e,t)=>s[e]-s[t]))}));return a};const Ps={M:-180,m:-180,V:180,v:180};const Ts=({edges_foldAngle:e})=>e.map((e=>{if(e===0){return"F"}return e<0?"M":"V"}));const Ns=({edges_vertices:e,edges_foldAngle:t,edges_faces:n,faces_vertices:s,faces_edges:r})=>{if(e&&!n){if(!r&&s){r=Ds({edges_vertices:e,faces_vertices:s})}if(r){n=Cs({edges_vertices:e,faces_edges:r})}}if(t){return n?t.map(((e,t)=>{if(n[t].length<2){return"B"}if(e===0){return"F"}return e<0?"M":"V"})):Ts({edges_foldAngle:t})}return e.map((()=>"U"))};const zs=({edges_assignment:e})=>e.map((e=>Ps[e]||0));const Bs=({vertices_coords:e,edges_vertices:t,edges_faces:s,edges_assignment:r,faces_vertices:c,faces_edges:o,faces_normal:a,faces_center:i})=>{if(!s){if(!o){o=Ds({edges_vertices:t,faces_vertices:c})}s=Cs({edges_vertices:t,faces_edges:o})}if(!a){a=gs({vertices_coords:e,faces_vertices:c})}if(!i){i=Js({vertices_coords:e,faces_vertices:c})}return s.map(((e,t)=>{if(e.length>2){throw new Error(n.manifold)}if(e.length<2){return 0}const s=a[e[0]];const c=a[e[1]];const o=v(O(i[e[1]],i[e[0]]));let f=Math.sign(S(s,o));if(f===0){if(r&&r[t]){if(r[t]==="F"||r[t]==="F"){f=0}if(r[t]==="M"||r[t]==="m"){f=-1}if(r[t]==="V"||r[t]==="v"){f=1}}else{throw new Error(n.flatFoldAngles)}}return Math.acos(S(s,c))*(180/Math.PI)*f}))};const $s=({vertices_coords:e,edges_vertices:t})=>t.map((t=>t.map((t=>e[t]))));const Rs=({vertices_coords:e,edges_vertices:t})=>$s({vertices_coords:e,edges_vertices:t}).map((e=>O(e[1],e[0])));const Ls=({vertices_coords:e,edges_vertices:t})=>Rs({vertices_coords:e,edges_vertices:t}).map((e=>m(e)));const Is=({vertices_coords:e,edges_vertices:t,edges_coords:n},s=0)=>{if(!n){n=$s({vertices_coords:e,edges_vertices:t})}return n.map((e=>et(e,s)))};const Us=({vertices_coords:e,vertices_vertices:t,vertices_edges:n,vertices_sectors:s,edges_vertices:r,edges_vector:c})=>{if(!t){t=Es({vertices_coords:e,edges_vertices:r,vertices_edges:n})}if(!s){s=Fs({vertices_coords:e,vertices_vertices:t,edges_vertices:r,edges_vector:c})}const o=ws({edges_vertices:r});const a=ns(ts({vertices_vertices:t,vertices_sectors:s})).map((e=>({...e,edges:e.edges.map((e=>o[e]))})));return{faces_vertices:a.map((e=>e.vertices)),faces_edges:a.map((e=>e.edges)),faces_sectors:a.map((e=>e.angles))}};const Qs=({edges_vertices:e,faces_edges:t})=>t.map((t=>t.map((t=>e[t])).map(((e,t,n)=>{const s=n[(t+1)%n.length];return e[0]===s[0]||e[0]===s[1]?e[1]:e[0]}))));const Ds=({edges_vertices:e,faces_vertices:t})=>{const n=ws({edges_vertices:e});return t.map((e=>e.map(((e,t,n)=>[e,n[(t+1)%n.length]].join(" "))))).map((e=>e.map((e=>n[e]))))};const qs=({faces_vertices:e})=>{const t=e.map((()=>[]));const n={};e.forEach(((e,t)=>e.forEach(((s,r,c)=>{let o=c[(r+1)%e.length];if(o<s){[s,o]=[o,s]}const a=`${s} ${o}`;if(n[a]===undefined){n[a]={}}n[a][t]=true}))));Object.values(n).map((e=>Object.keys(e))).filter((e=>e.length>1)).forEach((e=>{t[e[0]].push(parseInt(e[1],10));t[e[1]].push(parseInt(e[0],10))}));return t};const Ws=({vertices_coords:e,faces_vertices:t},n)=>t.map((t=>t.map((t=>e[t])))).map((e=>Ye(e,n)));const Gs=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t]))));const Hs=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))).map((e=>Ke(e)));const Js=({vertices_coords:e,faces_vertices:t})=>{const n=e.filter((()=>true)).shift();if(!n){return t.map((()=>[]))}const s=n.length;return t.map((t=>t.map((t=>e[t])).reduce(((e,t)=>x(e,t)),Array(s).fill(0)).map((e=>e/t.length))))};const Zs=Object.freeze({__proto__:null,makeEdgesAssignment:Ns,makeEdgesAssignmentSimple:Ts,makeEdgesBoundingBox:Is,makeEdgesCoords:$s,makeEdgesEdges:Ss,makeEdgesFaces:Vs,makeEdgesFacesUnsorted:Cs,makeEdgesFoldAngle:zs,makeEdgesFoldAngleFromFaces:Bs,makeEdgesLength:Ls,makeEdgesVector:Rs,makeFacesCenter2D:Hs,makeFacesConvexCenter:Js,makeFacesEdgesFromVertices:Ds,makeFacesFaces:qs,makeFacesPolygon:Ws,makeFacesPolygonQuick:Gs,makeFacesVerticesFromEdges:Qs,makePlanarFaces:Us,makeVerticesEdges:vs,makeVerticesEdgesUnsorted:hs,makeVerticesFaces:xs,makeVerticesFacesUnsorted:As,makeVerticesSectors:Fs,makeVerticesToEdge:ks,makeVerticesToEdgeBidirectional:ws,makeVerticesToFace:Os,makeVerticesVertices:Es,makeVerticesVertices2D:bs,makeVerticesVerticesFromFaces:ys,makeVerticesVerticesUnsorted:Ms,makeVerticesVerticesVector:js});const Ys=({edges_vertices:e})=>{if(!e){return[]}const t=[];const n={};for(let s=0;s<e.length;s+=1){const r=`${e[s][0]} ${e[s][1]}`;const c=`${e[s][1]} ${e[s][0]}`;if(n[r]!==undefined){t[s]=n[r]}else{n[r]=s;n[c]=s}}return t};const Xs=(e,t)=>{if(!t){t=Ys(e)}const n=Object.keys(t).map((e=>parseInt(e,10)));const s=hn(e,"edges",t);if(n.length){if(e.vertices_edges||e.vertices_vertices||e.vertices_faces){e.vertices_edges=hs(e);e.vertices_vertices=Es(e);e.vertices_edges=vs(e);e.vertices_faces=xs(e)}}return{map:s,remove:n}};const Ks=Object.freeze({__proto__:null,duplicateEdges:Ys,removeDuplicateEdges:Xs});const er=({edges_vertices:e})=>{if(!e){return[]}const t=[];for(let n=0;n<e.length;n+=1){if(e[n][0]===e[n][1]){t.push(n)}}return t};const tr=(e,t,n)=>{const s={};n.forEach((e=>{s[e]=true}));Vt(e,t).forEach((t=>e[t].forEach(((n,r)=>{for(let c=n.length-1;c>=0;c-=1){if(s[n[c]]===true){e[t][r].splice(c,1)}}}))))};const nr=(e,t)=>{if(!t){t=er(e)}if(t.length){tr(e,"edges",t)}return{map:En(e,"edges",t),remove:t}};const sr=Object.freeze({__proto__:null,circularEdges:er,removeCircularEdges:nr});const rr=(...e)=>{if(e.length===0){return[]}const t=e[0].map(((e,t)=>t));e.forEach((e=>t.forEach(((n,s)=>{t[s]=e[n]}))));return t};const cr=(...e)=>{if(e.length===0){return[]}const t=e[0].map(((e,t)=>[t]));e.forEach((e=>{t.forEach(((n,s)=>n.forEach(((n,r)=>{t[s][r]=e[n]}))));t.forEach(((e,n)=>{t[n]=e.reduce(((e,t)=>e.concat(t)),[]).filter((e=>e!==undefined))}))}));return t};const or=(...e)=>{if(e.length===0){return[]}let t=e[0].map(((e,t)=>t));e.forEach((e=>{const n=e.map((e=>t[e]));t=n}));return t};const ar=(...e)=>{if(e.length===0){return[]}let t=e[0].reduce(((e,t)=>e.concat(t)),[]).map(((e,t)=>[t]));e.forEach((e=>{const n=[];e.forEach(((e,s)=>{if(typeof e==="number"){n[s]=t[e]}else{n[s]=e.map((e=>t[e])).reduce(((e,t)=>e.concat(t)),[])}}));t=n}));return t};const ir=e=>{const t=[];e.forEach(((e,n)=>{t[e]=n}));return t};const fr=e=>{const t=[];const n=(e,n)=>{if(t[e]===undefined){t[e]=[]}t[e].push(n)};e.forEach(((e,t)=>{if(e==null){return}if(typeof e==="number"){n(e,t)}if(e.constructor===Array){e.forEach((e=>n(e,t)))}}));return t};const lr=e=>{const t=[];const n=(e,n)=>{if(t[e]!==undefined){if(typeof t[e]==="number"){t[e]=[t[e],n]}else{t[e].push(n)}}else{t[e]=n}};e.forEach(((e,t)=>{if(e==null){return}if(typeof e==="number"){n(e,t)}if(e.constructor===Array){e.forEach((e=>n(e,t)))}}));return t};const dr=(e,t,n=[])=>{Vt(e,t).forEach((t=>e[t].forEach(((s,r)=>e[t][r].forEach(((s,c)=>{e[t][r][c]=n[s]}))))));const s=ir(n);Ct(e,t).forEach((t=>{e[t]=s.map((n=>e[t][n]))}))};const ur=Object.freeze({__proto__:null,invertArrayMap:fr,invertMap:lr,invertSimpleMap:ir,mergeBackmaps:ar,mergeNextmaps:cr,mergeSimpleBackmaps:or,mergeSimpleNextmaps:rr,remapComponent:dr});const mr=(e,t)=>{const n=bn(e,t);const s=nr(e);const r=Xs(e);const c=wn(e);const o=ir(n.map);const a=c.remove.map((e=>o[e]));const i=ir(s.map);const f=r.remove.map((e=>i[e]));return{vertices:{map:rr(n.map,c.map),remove:n.remove.concat(a)},edges:{map:rr(s.map,r.map),remove:s.remove.concat(f)}}};const gr=({vertices_coords:e,edges_vertices:t,edges_assignment:n,edges_foldAngle:s,faces_vertices:r,faces_edges:c})=>{if(!r){return undefined}let o=0;let a=0;const i={faces_vertices:r.map((e=>e.map((()=>a++))))};if(!e){return i}i.vertices_coords=structuredClone(r.flatMap((t=>t.map((t=>e[t])))));if(!t){return i}if(!c){c=Ds({edges_vertices:t,faces_vertices:r})}i.edges_vertices=c.flatMap((e=>e.map(((e,t,n)=>t===n.length-1?[o,++o-n.length]:[o,++o]))));const f=c.flatMap((e=>e));if(n){i.edges_assignment=structuredClone(f.map((e=>n[e])))}if(s){i.edges_foldAngle=structuredClone(f.map((e=>s[e])))}return i};const pr=({vertices_coords:e,edges_vertices:t,edges_assignment:n,edges_foldAngle:s})=>{if(!t){return undefined}let r=0;const c={edges_vertices:t.map((e=>e.map((()=>r++))))};if(n){c.edges_assignment=n}if(s){c.edges_foldAngle=s}if(e){c.vertices_coords=structuredClone(t.flatMap((t=>t.map((t=>e[t])))))}return c};const _r=Object.freeze({__proto__:null,explodeEdges:pr,explodeFaces:gr});const hr=e=>e;const vr=e=>e<-a?0:e;const br=e=>{if(e<-a){return 0}if(e>1+a){return 1}return e};const yr=(e,t,n,s=false,r=a)=>{const c=[e,n].map((e=>rt(t,e,r))).reduce(((e,t)=>e||t),false);if(c){return s}const o=[[e,t],[t,n]].map((e=>O(e[1],e[0]))).map((e=>v(e)));return nt(1,S(...o),a)};const Er=(e,t,n)=>{const s=$(e.vector,t.vector,n);const r=$(e.origin,t.origin,n);return{vector:s,origin:r}};const Mr=(e,t,n,s=a)=>{const r=S(e.vector,t.vector);const c=R(e.vector,t.vector);const o=R(j(t.origin,e.origin),t.vector);const i=o/c;const f=[e.vector,t.vector].map((e=>v(e)));const l=c>-s?[[e.vector,t.vector],[D(t.vector),e.vector]]:[[t.vector,e.vector],[D(e.vector),t.vector]];const d=l.map((e=>Qn(e[0],e[1],n)));const u=Math.abs(R(...f))<s;const m=u?undefined:w(e.origin,M(e.vector,i));const g=Array.from(Array(n-1));const p=u?g.map(((s,r)=>$(e.origin,t.origin,(r+1)/n))):g.map((()=>m));const _=d.map((e=>e.map(((e,t)=>({vector:e,origin:[...p[t]]})))));if(u){_[r>-s?1:0]=[]}return _};const Ar=(e,t,n=a)=>{const s=Mr(e,t,2,n).map((e=>e[0]));s.forEach(((e,t)=>{if(e===undefined){delete s[t]}}));return s};const xr=Object.freeze({__proto__:null,bisectLines2:Ar,clampLine:hr,clampRay:vr,clampSegment:br,collinearBetween:yr,lerpLines:Er,pleat:Mr});const wr=(e,t)=>{const n=mn(e,(e=>U(e,t)));return n===undefined?undefined:e[n]};const kr=(e,t)=>{const n=mn(e,(e=>I(e,t)));return n===undefined?undefined:e[n]};const Or=({vector:e,origin:t},n,s=hr,r=a)=>{t=Y(e.length,t);n=Y(e.length,n);const c=h(e);const o=O(n,t);const i=S(e,o);const f=i/c;const l=s(f,r);return x(t,E(e,l))};const jr=(e,t)=>e.map(((e,t,n)=>O(n[(t+1)%n.length],e))).map(((t,n)=>({vector:t,origin:e[n]}))).map((e=>Or(e,t,br))).map(((e,n)=>({point:e,edge:n,distance:I(e,t)}))).sort(((e,t)=>e.distance-t.distance)).shift();const Fr=({radius:e,origin:t},n)=>x(t,E(v(O(n,t)),e));const Sr=Object.freeze({__proto__:null,nearestPoint:kr,nearestPoint2:wr,nearestPointOnCircle:Fr,nearestPointOnLine:Or,nearestPointOnPolygon:jr});const Cr=({vector:e,origin:t},n,s=at,r=a)=>{const c=j(n,t);const o=h(e);const i=Math.sqrt(o);if(i<r){return false}const f=R(c,e.map((e=>e/i)));const l=C(c,e)/o;return Math.abs(f)<r&&s(l,r/i)};const Vr=(e,t,n=at,s=at,r=a)=>{const c=R(e.vector,t.vector);const o=-c;const i=j(t.origin,e.origin);const f=[-i[0],-i[1]];if(Math.abs(c)<r){if(Math.abs(R(i,e.vector))>r){return false}const c=f;const o=w(c,e.vector);const a=T(c,o);const l=i;const d=w(l,t.vector);const u=T(l,d);const m=C(e.vector,e.vector);const g=C(t.vector,t.vector);const p=C(c,t.vector)/g;const _=C(o,t.vector)/g;const h=C(a,t.vector)/g;const v=C(l,e.vector)/m;const b=C(d,e.vector)/m;const y=C(u,e.vector)/m;return n(v,r)||n(b,r)||s(p,r)||s(_,r)||n(y,r)||s(h,r)}const l=R(i,t.vector)/c;const d=R(f,e.vector)/o;return n(l,r/g(e.vector))&&s(d,r/g(t.vector))};const Pr=({radius:e,origin:t},n,s=ot,r=a)=>s(e-U(t,n),r);const Tr=(e,t,n=ot,s=a)=>e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>R(b(j(e[1],e[0])),j(t,e[0])))).map((e=>n(e,s))).map(((e,t,n)=>e===n[0])).reduce(((e,t)=>e&&t),true);const Nr=(e,t,n=ot,s=a)=>{const r=e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((([e,n])=>[j(n,e),j(t,e)])).map((([e,t])=>R(e,t)));const c=Math.sign(r.reduce(((e,t)=>e+t),0));const o=r.map((e=>e*c)).map((e=>n(e,s))).map(((e,t,n)=>e===n[0])).reduce(((e,t)=>e&&t),true);return{overlap:o,t:r}};const zr=(e,t,n=a)=>{for(let s=0;s<2;s+=1){const r=s===0?e:t;const c=s===0?t:e;for(let e=0;e<r.length;e+=1){const t=r[e];const s=q(j(r[(e+1)%r.length],r[e]));const o=c.map((e=>j(e,t))).map((e=>C(s,e)));const a=r[(e+2)%r.length];const i=C(s,j(a,t));const f=i>0;const l=o.map((e=>f?e<n:e>-n)).reduce(((e,t)=>e&&t),true);if(l){return false}}}return true};const Br=(e,t,n=a)=>{const s=Math.min(e.min.length,t.min.length);for(let r=0;r<s;r+=1){if(e.min[r]>t.max[r]+n||e.max[r]<t.min[r]-n){return false}}return true};const $r=Object.freeze({__proto__:null,overlapBoundingBoxes:Br,overlapCirclePoint:Pr,overlapConvexPolygonPoint:Tr,overlapConvexPolygonPointNew:Nr,overlapConvexPolygons:zr,overlapLineLine:Vr,overlapLinePoint:Cr});const Rr=({vertices_coords:e},t)=>{if(!e){return undefined}const n=Rt({vertices_coords:e});if(n===undefined){return undefined}const s=Y(n,t);const r=e.map(((e,t)=>({d:I(s,e),i:t}))).sort(((e,t)=>e.d-t.d)).shift();return r?r.i:undefined};const Lr=({vertices_coords:e,edges_vertices:t},n)=>{if(!e||!t){return undefined}const s=t.map((t=>t.map((t=>e[t])))).map((e=>Or({vector:O(e[1],e[0]),origin:e[0]},n,br)));return mn(s,(e=>I(e,n)))};const Ir=({vertices_coords:e,faces_vertices:t},n,s=ot)=>!e||!t?[]:t.map(((t,n)=>({face:t.map((t=>e[t])),i:n}))).filter((e=>Tr(e.face,n,s))).map((e=>e.i));const Ur=({vertices_coords:e,faces_vertices:t},n)=>{const s=Ir({vertices_coords:e,faces_vertices:t},n);return s.length?s.shift():undefined};const Qr=(e,t)=>{const n=Ur(e,t);if(n!==undefined){return n}if(e.edges_faces){const n=Lr(e,t);if(n===undefined){return undefined}const s=e.edges_faces[n];if(s.length===1){return s[0]}if(s.length>1){const n=Js({vertices_coords:e.vertices_coords,faces_vertices:s.map((t=>e.faces_vertices[t]))});const r=n.map((e=>I(e,t)));let c=0;for(let e=0;e<r.length;e+=1){if(r[e]<r[c]){c=e}}return s[c]}}return undefined};const Dr=(e,...t)=>{const n={vertices:Rr,edges:Lr,faces:Qr};const s=Be(...t);const r=Object.create(null);["vertices","edges","faces"].forEach((t=>{Object.defineProperty(r,bt[t],{enumerable:true,get:()=>n[t](e,s)});Ct(e,t).forEach((n=>Object.defineProperty(r,n,{enumerable:true,get:()=>e[n][r[bt[t]]]})))}));return r};const qr=Object.freeze({__proto__:null,faceContainingPoint:Ur,facesContainingPoint:Ir,nearest:Dr,nearestEdge:Lr,nearestFace:Qr,nearestVertex:Rr});const Wr=(e,t,n=at,s=at,r=a)=>{const c=R(b(e.vector),b(t.vector));if(Math.abs(c)<r){return{a:undefined,b:undefined,point:undefined}}const o=R(e.vector,t.vector);const i=-o;const f=[t.origin[0]-e.origin[0],t.origin[1]-e.origin[1]];const l=[-f[0],-f[1]];const d=R(f,t.vector)/o;const u=R(l,e.vector)/i;if(n(d,r/g(e.vector))&&s(u,r/g(t.vector))){return{a:d,b:u,point:w(e.origin,M(e.vector,d))}}return{a:undefined,b:undefined,point:undefined}};const Gr=(e,t,n=ct,s=at,r=a)=>{const c=t.vector[0]**2+t.vector[1]**2;const o=Math.sqrt(c);const i=o===0?t.vector:t.vector.map((e=>e/o));const f=q(i);const l=j(t.origin,e.origin);const d=R(l,i);if(Math.abs(d)>e.radius+r){return undefined}const u=Math.sqrt(e.radius**2-d**2);const m=(t,n)=>e.origin[n]-f[n]*d+i[n]*t;const g=Math.abs(e.radius-Math.abs(d))<r?[u].map((e=>[e,e].map(m))):[-u,u].map((e=>[e,e].map(m)));const p=g.map((e=>e.map(((e,n)=>e-t.origin[n])))).map((e=>e[0]*t.vector[0]+t.vector[1]*e[1])).map((e=>e/c));return g.filter(((e,t)=>s(p[t],r)))};const Hr=e=>{if(e>=1)return 0;if(e<=-1)return Math.PI;return Math.acos(e)};const Jr=(e,t,n)=>{const s=t[0]-e[0];const r=t[1]-e[1];const c=s*Math.cos(n)+r*Math.sin(n);const o=r*Math.cos(n)-s*Math.sin(n);return[e[0]+c,e[1]+o]};const Zr=(e,t,n=ct,s=ct,r=a)=>{const c=e.radius<t.radius?e.radius:t.radius;const o=e.radius<t.radius?t.radius:e.radius;const i=e.radius<t.radius?e.origin:t.origin;const f=e.radius<t.radius?t.origin:e.origin;const l=[i[0]-f[0],i[1]-f[1]];const d=Math.sqrt(l[0]**2+l[1]**2);if(d<r){return undefined}const u=l.map(((e,t)=>e/d*o+f[t]));if(Math.abs(o+c-d)<r||Math.abs(o-(c+d))<r){return[u]}if(d+c<o||o+c<d){return undefined}const m=Hr((c*c-d*d-o*o)/(-2*d*o));const g=Jr(f,u,+m);const p=Jr(f,u,-m);return[g,p]};const Yr=e=>{for(let t=1;t<e.length;t+=1){if(!rt(e[0],e[t])){return[e[0],e[t]]}}return undefined};const Xr=(e,{vector:t,origin:n},s=dt,r=at,c=a)=>{const o=e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>Wr({vector:j(e[1],e[0]),origin:e[0]},{vector:t,origin:n},s,r,c).point)).filter((e=>e!==undefined));switch(o.length){case 0:return undefined;case 1:return[o];default:return Yr(o)||[o[0]]}};const Kr=(e,{vector:t,origin:n},s=dt,r=it,c=a)=>{const o=Xr(e,{vector:t,origin:n},s,r,c);let i;switch(r){case lt:i=ft;break;case ut:i=dt;break;default:return o}const f=Xr(e,{vector:t,origin:n},dt,i,c);if(f===undefined){return undefined}const l=Yr(f);if(l===undefined){switch(r){case lt:return Tr(e,n,ot,.001)?f:undefined;case ut:return Tr(e,w(n,t),ot,.001)||Tr(e,n,ot,.001)?f:undefined;case it:return undefined;default:return undefined}}return Tr(e,T(...l),ot,.001)?l:o};const ec=Object.freeze({__proto__:null,intersectCircleCircle:Zr,intersectCircleLine:Gr,intersectConvexPolygonLine:Kr,intersectLineLine:Wr});const tc=(e,t)=>{let n=[0];for(let s=1;s<e.length;s+=1){switch(t(e[n[0]],e[s])){case 0:n.push(s);break;case 1:n=[s];break}}return n};const nc=(e,t)=>{if(!e.length){return[]}const n=e.map(((e,t)=>t));const s=[[n[0]]];for(let r=1;r<n.length;r+=1){const c=n[r];if(c===undefined){continue}const o=s.length-1;const a=s[o][s[o].length-1];if(t(e[a],e[c])){s[o].push(c)}else{s.push([c])}}return s};const sc=(e,t=a)=>{const n=e.map(((e,t)=>({v:e,i:t}))).sort(((e,t)=>e.v-t.v)).map((e=>e.i));const s=n.map((t=>e[t]));const r=(e,n)=>Math.abs(e-n)<t;return nc(s,r).map((e=>e.map((e=>n[e]))))};const rc=(e,t=a)=>{const n=[[0]];for(let s=1;s<e.length;s+=1){let r=false;for(let c=0;c<n.length;c+=1){const o=n[c][0];if(J(e[s],e[o],t)){n[c].push(s);r=true;break}}if(!r){n.push([s])}}return n};const cc=Object.freeze({__proto__:null,clusterParallelVectors:rc,clusterScalars:sc,clusterSortedGeneric:nc,minimumCluster:tc});const oc=({vertices_coords:e,faces_vertices:t},n=0)=>t.map((t=>[t.reduce(((t,s)=>e[t][n]<e[s][n]?t:s)),t.reduce(((t,s)=>e[t][n]>e[s][n]?t:s))]));const ac=({vertices_coords:e},t=0,n=a)=>sc(e.map((e=>e[t])),n).map((n=>({vertices:n,t:n.reduce(((n,s)=>n+e[s][t]),0)/n.length})));const ic=(e,{edges_vertices:t,vertices_edges:n},s=a)=>{if(!n){n=hs({edges_vertices:t})}const r=t.map((t=>t.map((t=>e[t]))));const c=r.map((e=>nt(...e,s)));const o=r.map((([e,t])=>Math.sign(e-t)));const i=t.map((([e,t],n)=>c[n]?{[e]:0,[t]:0}:{[e]:o[n],[t]:-o[n]}));return sc(e,s).map((e=>e.filter((e=>n[e])))).filter((e=>e.length)).map((t=>({vertices:t,t:t.reduce(((t,n)=>t+e[n]),0)/t.length,start:on(t.flatMap((e=>n[e].filter((t=>i[t][e]<=0))))),end:on(t.flatMap((e=>n[e].filter((t=>i[t][e]>=0)))))})))};const fc=({vertices_coords:e,edges_vertices:t,vertices_edges:n},s=0,r=a)=>ic(e.map((e=>e[s])),{edges_vertices:t,vertices_edges:n},r);const lc=({vertices_coords:e,faces_vertices:t},n=0,s=a)=>ic(e.map((e=>e[n])),{edges_vertices:oc({vertices_coords:e,faces_vertices:t},n)},s);const dc=({vertices_coords:e,edges_vertices:t,faces_vertices:n},s=0,r=a)=>{const c=e.map((e=>e[s]));const o=oc({vertices_coords:e,faces_vertices:n},s);const i=hs({edges_vertices:t});const f=hs({edges_vertices:o});const l=t.map((e=>e.map((e=>c[e]))));const d=o.map((e=>e.map((e=>c[e]))));const u=l.map((e=>nt(...e,r)));const m=d.map((e=>nt(...e,r)));const g=l.map((([e,t])=>Math.sign(e-t)));const p=d.map((([e,t])=>Math.sign(e-t)));const _=t.map((([e,t],n)=>u[n]?{[e]:0,[t]:0}:{[e]:g[n],[t]:-g[n]}));const h=n.map((([e,t],n)=>m[n]?{[e]:0,[t]:0}:{[e]:p[n],[t]:-p[n]}));return sc(c,r).map((e=>({vertices:e,t:e.reduce(((e,t)=>e+c[t]),0)/e.length,edges:{start:on(e.filter((e=>i[e]!==undefined)).flatMap((e=>i[e].filter((t=>_[t][e]<=0))))),end:on(e.filter((e=>i[e]!==undefined)).flatMap((e=>i[e].filter((t=>_[t][e]>=0)))))},faces:{start:on(e.filter((e=>f[e]!==undefined)).flatMap((e=>f[e].filter((t=>h[t][e]<=0))))),end:on(e.filter((e=>f[e]!==undefined)).flatMap((e=>f[e].filter((t=>h[t][e]>=0)))))}})))};const uc=Object.freeze({__proto__:null,sweep:dc,sweepEdges:fc,sweepFaces:lc,sweepValues:ic,sweepVertices:ac});const mc=({edges_vertices:e},t,n)=>n.map((n=>e[n][0]===t?e[n][1]:e[n][0]));const gc=Object.freeze({__proto__:null,getOtherVerticesInEdges:mc});const pc=({vertices_coords:e,vertices_edges:t,edges_vertices:n},s,r=a)=>{if(!e||!n){return false}if(!t){t=hs({edges_vertices:n})}const c=t[s];if(c===undefined||c.length!==2){return false}const o=mc({edges_vertices:n},s,c);const i=[o[0],s,o[1]].map((t=>e[t]));return yr(...i,false,r)};const _c=Object.freeze({__proto__:null,isVertexCollinear:pc});const hc=({vertices_coords:e,edges_vertices:t},n=a)=>{if(!e||!t||!t.length){return{edges_line:[],lines:[]}}const s=$s({vertices_coords:e,edges_vertices:t});const r=s.map((e=>O(e[1],e[0]))).map(v);const c=r.map(((e,t)=>({vector:e,origin:s[t][0]})));const o=c.map((e=>Or(e,[0,0,0],hr))).map((e=>m(e)));const i=sc(o,n);const f=i.map((e=>e.map((e=>r[e])))).map((e=>rc(e,.001))).map(((e,t)=>e.map((e=>e.map((e=>i[t][e]))))));const l=f.map((s=>s.map((s=>{if(Math.abs(o[s[0]])<n){return[s]}const r=c[s[0]].vector;const a=s.map((n=>e[t[n][0]])).map((e=>rs(e,r)));const i=fs(a,r);const f=(e,t)=>rt(a[e],a[t],n);const l=e=>e.map((e=>i[e])).map((e=>s[e]));const d=nc(i,f);if(d.length===1){return d.map(l)}const u=d[0][0];const m=d[d.length-1];const g=m[m.length-1];const p=[u,g].map((e=>i[e]));if(f(...p)){const e=d.pop();d[0]=e.concat(d[0])}return d.map(l)}))));const d=l.flatMap((e=>e.flatMap((e=>e))));const u=lr(d);const g=d.map((e=>e.flatMap((e=>t[e])))).map(on);const p=d.map((e=>r[e[0]]));const _=g.map(((t,n)=>t.map((t=>S(p[n],e[t])))));const h=_.map(((e,t)=>g[t][gn(e)]));const b=_.map(((e,t)=>g[t][pn(e)]));const y=g.map(((t,n)=>O(e[b[n]],e[h[n]])));const E=h.map((t=>e[t]));const M=y.map(((e,t)=>({vector:e,origin:E[t]})));return{lines:M,edges_line:u}};const vc=Object.freeze({__proto__:null,getEdgesLine:hc});const bc=(e,t=a)=>{const n=e.map((()=>[]));for(let s=0;s<e.length-1;s+=1){for(let r=s+1;r<e.length;r+=1){const{a:c,b:o,point:a}=Wr(e[s],e[r],dt,dt,t);if(a===undefined){continue}n[s].push(c);n[r].push(o)}}return n};const yc=({edges_vertices:e,vertices_edges:t},n)=>{const s=t[n].sort(((e,t)=>e-t));const r=s.flatMap((t=>e[t])).filter((e=>e!==n)).slice(0,2);e[s[0]]=r;e[s[1]]=undefined;r.forEach((e=>{const n=t[e].indexOf(s[1]);if(n===-1){return}t[e][n]=s[0]}));return s[1]};const Ec=({vertices_coords:e,edges_vertices:t,edges_assignment:n,edges_foldAngle:s},r=a)=>{const{lines:c,edges_line:o}=hc({vertices_coords:e,edges_vertices:t},r);const i=c.map((({vector:e})=>_(e)));const f=fr(o);const l=t.map(((t,n)=>t.map((t=>e[t])).map((e=>C(j(e,c[o[n]].origin),c[o[n]].vector)))));const d=f.map((e=>e.flatMap((e=>l[e])))).map((e=>ln(e,r)));const u=bc(c,r).map((e=>ln(e,r))).map(((e,t)=>e.map((e=>e*i[t])))).map(((e,t)=>dn(e,d[t],r)));const m=f.map((e=>e.flatMap((e=>l[e]))));const g=f.map((e=>ir(e).map((e=>[e*2,e*2+1]))));const p=f.map(((e,t)=>ic(m[t],{edges_vertices:g[t]},r)));const h=p.map((e=>e.map((e=>e.t))));const v=p.map((e=>{const t={};const n=e.map((e=>{e.start.forEach((e=>{t[e]=true}));e.end.forEach((e=>{delete t[e]}));return Object.keys(t).map((e=>parseInt(e,10)))}));n.pop();return n}));u.forEach(((e,t)=>{const n=h[t];const s=v[t];let r=0;let c=0;while(r<e.length&&c<n.length-1){if(e[r]<=n[c]){throw new Error("bad algorithm")}if(e[r]>n[c+1]){c+=1;continue}n.splice(c+1,0,e[r]);s.splice(c+1,0,s[c]);r+=1}}));const b=h.flatMap(((e,t)=>e.map((e=>e/i[t])).map((e=>w(c[t].origin,M(c[t].vector,e))))));let y=0;const E=v.map((e=>{const t=e.map((()=>[y,++y]));y+=1;return t})).flatMap(((e,t)=>e.filter(((e,n)=>v[t][n].length))));const A={vertices_coords:b,edges_vertices:E};if(n||s){const e=v.flatMap((e=>e.filter((e=>e.length))));if(n){A.edges_assignment=e.map((e=>n[e[0]]))}if(s){A.edges_foldAngle=e.map((e=>s[e[0]]))}}wn(A,Mn(A));bn(A,r);nr(A);A.vertices_edges=hs(A);const x=A.vertices_edges.map(((e,t)=>e.length===2?t:undefined)).filter((e=>e!==undefined)).filter((e=>pc(A,e,r))).reverse();const k=x.map((e=>yc(A,e)));En(A,"edges",k);En(A,"vertices",x);const O=Ys(A);if(O.length){Xs(A,O)}if(er(A).length){console.error("planarize: found circular edges. place 3.")}delete A.vertices_edges;return A};const Mc=e=>{const t=e.edges_vertices.length;if(!e.edges_assignment){e.edges_assignment=[]}if(!e.edges_foldAngle){e.edges_foldAngle=[]}if(e.edges_assignment.length>e.edges_foldAngle.length){for(let t=e.edges_foldAngle.length;t<e.edges_assignment.length;t+=1){e.edges_foldAngle[t]=kt(e.edges_assignment[t])}}if(e.edges_foldAngle.length>e.edges_assignment.length){for(let t=e.edges_assignment.length;t<e.edges_foldAngle.length;t+=1){e.edges_assignment[t]=Ot(e.edges_foldAngle[t])}}for(let n=e.edges_assignment.length;n<t;n+=1){e.edges_assignment[n]="U";e.edges_foldAngle[n]=0}};const Ac=(e,t)=>{if(t===undefined&&!e.faces_vertices&&!e.faces_edges&&e.vertices_coords&&$t(e)===2){t=true}if(t&&e.vertices_coords){const t=Us(e);e.faces_vertices=t.faces_vertices;e.faces_edges=t.faces_edges;return}if(e.faces_vertices&&e.faces_edges){return}if(e.faces_vertices&&!e.faces_edges){e.faces_edges=Ds(e)}else if(e.faces_edges&&!e.faces_vertices){e.faces_vertices=Qs(e)}else{e.faces_vertices=[];e.faces_edges=[]}};const xc=(e,t)=>{if(typeof e!=="object"){return e}if(!e.edges_vertices){return e}e.vertices_edges=hs(e);e.vertices_vertices=Es(e);e.vertices_edges=vs(e);Mc(e);Ac(e,t);e.vertices_faces=xs(e);e.edges_faces=Cs(e);e.faces_faces=qs(e);return e};const wc=({vertices_vertices:e},t,n)=>{if(!e){return}e[t]=[...n];n.forEach(((n,s,r)=>{const c=r[(s+1)%r.length];const o=e[n].indexOf(c);e[n][o]=t}))};const kc=({vertices_coords:e,vertices_vertices:t,vertices_sectors:n},s)=>{if(!n){return}n[s]=t[s].length===1?[l]:Gn(t[s].map((t=>j(e[t],e[s]))))};const Oc=({vertices_edges:e},t,n,s,r)=>{if(!e){return}e[n]=[...r];s.map((n=>e[n].indexOf(t))).forEach(((t,n)=>{e[s[n]][t]=r[n]}))};const jc=({vertices_faces:e},t,n)=>{if(!e){return}e[t]=[...n]};const Fc=({edges_faces:e},t,n)=>{if(!e){return}t.forEach((t=>{e[t]=[...n]}))};const Sc=({faces_vertices:e},t,n,s)=>{if(!e){return}s.map((t=>e[t])).forEach((e=>e.map(((e,t,s)=>{const r=(t+1)%s.length;return e===n[0]&&s[r]===n[1]||e===n[1]&&s[r]===n[0]?r:undefined})).filter((e=>e!==undefined)).sort(((e,t)=>t-e)).forEach((n=>e.splice(n,0,t)))))};const Cc=({edges_vertices:e,faces_vertices:t,faces_edges:n},s)=>{const r=ws({edges_vertices:e});s.map((e=>t[e].map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>r[e.join(" ")])))).forEach(((e,t)=>{n[s[t]]=e}))};const Vc=({vertices_faces:e,edges_vertices:t,edges_faces:n,faces_edges:s,faces_vertices:r},c)=>{if(n&&n[c]){return n[c]}const o=t[c];if(e!==undefined){const t=[];for(let n=0;n<e[o[0]].length;n+=1){for(let s=0;s<e[o[1]].length;s+=1){if(e[o[0]][n]===e[o[1]][s]){if(e[o[0]][n]===undefined){continue}t.push(e[o[0]][n])}}}return t}if(s){const e=[];for(let t=0;t<s.length;t+=1){for(let n=0;n<s[t].length;n+=1){if(s[t][n]===c){e.push(t)}}}return e}if(r){console.warn("todo: findAdjacentFacesToEdge")}};const Pc=(e,t,n)=>{const s=e.edges_vertices[t];const r=[{edges_vertices:[s[0],n]},{edges_vertices:[n,s[1]]}];r.forEach((n=>["edges_assignment","edges_foldAngle"].filter((n=>e[n]&&e[n][t]!==undefined)).forEach((s=>{n[s]=e[s][t]}))));return r};const Tc=(e,t,n,s=a)=>{if(e.edges_vertices.length<t){return{}}const r=e.edges_vertices[t];if(!n){n=P(...r.map((t=>e.vertices_coords[t])))}const c=r.map((t=>e.vertices_coords[t])).map((e=>I(e,n)<s));if(c[0]){return{vertex:r[0],edges:{}}}if(c[1]){return{vertex:r[1],edges:{}}}const o=e.vertices_coords.length;e.vertices_coords[o]=n;const i=[0,1].map((t=>t+e.edges_vertices.length));Pc(e,t,o).forEach(((t,n)=>Object.keys(t).forEach((s=>{e[s][i[n]]=t[s]}))));wc(e,o,r);kc(e,o);Oc(e,t,o,r,i);const f=Vc(e,t);if(f){jc(e,o,f);Fc(e,i,f);Sc(e,o,r,f);Cc(e,f)}const l=En(e,"edges",[t]);i.forEach(((e,t)=>{i[t]=l[i[t]]}));l.splice(-2);l[t]=i;return{vertex:o,edges:{map:l,new:i,remove:t}}};const Nc=({vertices_coords:e},t,n)=>{const s=t.map((t=>e[t])).reverse();return{edges_vertices:[...t],edges_foldAngle:0,edges_assignment:"U",edges_length:I(...s),edges_vector:O(...s),edges_faces:[n,n]}};const zc=(e,t,n)=>{const s=e.edges_vertices.length;const r=Nc(e,n,t);Object.keys(r).filter((t=>e[t]!==undefined)).forEach((t=>{e[t][s]=r[t]}));return s};const Bc=({edges_vertices:e,faces_vertices:t,faces_edges:n},s,r)=>{const c=r.map((e=>t[s].indexOf(e)));const o=cn(t[s],c).map((e=>({faces_vertices:e})));if(n){const t=ws({edges_vertices:e});o.map((e=>e.faces_vertices.map(((e,t,n)=>`${e} ${n[(t+1)%n.length]}`)).map((e=>t[e])))).forEach(((e,t)=>{o[t].faces_edges=e}))}return o};const $c=(e,t,n)=>{const s=[0,1].map((t=>e.faces_vertices.length+t));Bc(e,t,n).forEach(((t,n)=>Object.keys(t).forEach((r=>{e[r][s[n]]=t[r]}))));return s};const Rc=(e,{vertices:t,edges:n})=>{let s;const r=n.map((t=>{const n=Tc(e,s?s[t.edge]:t.edge,t.coords);s=s?cr(s,n.edges.map):n.edges.map;return n}));t.push(...r.map((e=>e.vertex)));let c;r.forEach((e=>{e.edges.remove=c?c[e.edges.remove]:e.edges.remove;const t=ir(e.edges.map);c=c?ar(c,t):t}));return{vertices:t,edges:{map:s,remove:r.map((e=>e.edges.remove))}}};const Lc=({vertices_coords:e,vertices_vertices:t,edges_vertices:n},s)=>{const r=n[s][0];const c=n[s][1];t[r]=ds({vertices_coords:e},t[r].concat(c),r);t[c]=ds({vertices_coords:e},t[c].concat(r),c)};const Ic=({edges_vertices:e,vertices_edges:t,vertices_vertices:n},s)=>{if(!t||!n){return}const r=e[s];r.map((e=>n[e])).map(((e,t)=>e.indexOf(r[(t+1)%r.length]))).forEach(((e,n)=>t[r[n]].splice(e,0,s)))};const Uc=(e,t,s)=>{const r={};s.forEach((t=>e.faces_vertices[t].forEach((e=>{if(!r[e]){r[e]=[]}r[e].push(t)}))));e.faces_vertices[t].forEach((s=>{const c=e.vertices_faces[s].indexOf(t);const o=r[s];if(c===-1||!o){throw new Error(n.convexFace)}e.vertices_faces[s].splice(c,1,...o)}))};const Qc=(e,t,s,r)=>{const c={};r.forEach((t=>e.faces_edges[t].forEach((e=>{if(!c[e]){c[e]=[]}c[e].push(t)}))));const o=[...e.faces_edges[t],s];o.forEach((s=>{const r=c[s];const o=[];for(let n=0;n<e.edges_faces[s].length;n+=1){if(e.edges_faces[s][n]===t){o.push(n)}}if(o.length===0||!r){throw new Error(n.convexFace)}o.reverse().forEach((t=>e.edges_faces[s].splice(t,1)));const a=o[o.length-1];e.edges_faces[s].splice(a,0,...r)}))};const Dc=({faces_vertices:e,faces_faces:t},n,s)=>{const r=t[n];const c=s.map((t=>e[t]));const o=r.map((t=>{const n=e[t];const r=[0,0];for(let e=0;e<c.length;e+=1){let t=0;for(let s=0;s<n.length;s+=1){if(c[e].indexOf(n[s])!==-1){t+=1}}r[e]=t}if(r[0]>=2){return s[0]}if(r[1]>=2){return s[1]}}));s.forEach(((e,n,r)=>{t[e]=[r[(n+1)%s.length]]}));r.forEach(((e,s)=>{for(let r=0;r<t[e].length;r+=1){if(t[e][r]===n){t[e][r]=o[s];t[o[s]].push(e)}}}))};const qc=()=>0;const Wc=(e,t)=>e<-t?-1:0;const Gc=(e,t)=>e<-t?-1:e>1+t?1:0;const Hc=({vertices_coords:e,faces_vertices:t},{vector:n,origin:s},r=qc,c=a)=>{const o=C(n,n);const i=b(n);const f=e.map((e=>j(e,s))).map((e=>b(e))).map((e=>R(i,e))).map((e=>Math.abs(e)<c?0:Math.sign(e)));const l=e.map((e=>j(e,s))).map((e=>C(e,n))).map((e=>e/o)).map((e=>r(e,c)));const d=t.map((e=>e.map((e=>f[e])).map(((e,t,n)=>e===n[0])).reduce(((e,t)=>e&&t),true))).map((e=>!e));const u=t.map((e=>e.map((e=>l[e])).map(((e,t,n)=>e===n[0])).reduce(((e,t)=>e&&t),true))).map((e=>!e)).map(((e,n)=>e||l[t[n][0]]===0));return t.map(((e,t)=>t)).filter((e=>d[e]&&u[e]))};const Jc=(e,{vector:t,origin:n},s=a)=>Hc(e,{vector:t,origin:n},qc,s);const Zc=(e,{vector:t,origin:n},s=a)=>Hc(e,{vector:t,origin:n},Wc,s);const Yc=(e,t,n=a)=>{const s=j(t[1],t[0]);const r=t[0];return Hc(e,{vector:s,origin:r},Gc,n)};const Xc=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},r,{vector:c,origin:o},i=a)=>{const f=n[r].map((t=>e[t])).map((e=>Cr({vector:c,origin:o},e,(()=>true),i))).map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined));const l=f.map((e=>n[r][e]));const d=f.concat(f.map((e=>e+n[r].length))).map(((e,t,n)=>n[t+1]-e===1)).reduce(((e,t)=>e||t),false);if(d){return undefined}if(l.length>1){return{vertices:l,edges:[]}}const u=s[r].map((n=>t[n].map((t=>e[t])))).map((e=>Wr({vector:c,origin:o},{vector:j(e[1],e[0]),origin:e[0]},at,ut,i).point)).map(((e,t)=>({coords:e,edge:s[r][t]}))).filter((e=>e.coords!==undefined)).filter((e=>!l.map((n=>t[e.edge].includes(n))).reduce(((e,t)=>e||t),false)));return u.length+l.length===2?{vertices:l,edges:u}:undefined};const Kc=Object.freeze({__proto__:null,facesLineTypeOverlap:Hc,getFacesLineOverlap:Jc,getFacesRayOverlap:Zc,getFacesSegmentOverlap:Yc,intersectConvexFaceLine:Xc});const eo=(e,t,n,s)=>{const r=Xc(e,t,n,s);if(r===undefined){return undefined}const c=Rc(e,r);c.edges.new=zc(e,t,c.vertices);Lc(e,c.edges.new);Ic(e,c.edges.new);const o=$c(e,t,c.vertices);Uc(e,t,o);Qc(e,t,c.edges.new,o);Dc(e,t,o);const a=En(e,"faces",[t]);o.forEach(((e,t)=>{o[t]=a[o[t]]}));a.splice(-2);a[t]=o;c.faces={map:a,new:o,remove:t};return c};const to=(e,t)=>{const n={};t.forEach((e=>{n[e]=true}));const s=[];t.forEach((t=>{s[t]=e[t].filter((e=>n[e]))}));return s};const no=(e,t={})=>{const n={vertices:[],edges:[],faces:[],...t};const s=Object.keys(n);const r={...e};gt.graph.forEach((e=>delete r[e]));delete r.file_frames;const c={};s.forEach((e=>{c[e]={}}));s.forEach((e=>n[e].forEach((t=>{c[e][t]=true}))));const o={};s.forEach((t=>{Ct(e,t).forEach((e=>{o[e]={}}));Vt(e,t).forEach((e=>{o[e]={}}))}));s.forEach((t=>{Ct(e,t).forEach((e=>{o[e].prefix=t}));Vt(e,t).forEach((e=>{o[e].suffix=t}))}));Object.keys(o).forEach((e=>{r[e]=[]}));Object.keys(o).forEach((t=>{const{prefix:s,suffix:a}=o[t];if(s&&a){n[s].forEach((n=>{r[t][n]=e[t][n].filter((e=>c[a][e]))}))}else if(s){n[s].forEach((n=>{r[t][n]=e[t][n]}))}else if(a){r[t]=e[t].map((e=>e.filter((e=>c[a][e]))))}else{r[t]=e[t]}}));return r};const so=(e,t={})=>{const n={vertices:[],edges:[],faces:[],...t};const s={vertices:{},edges:{},faces:{}};n.vertices.forEach((e=>{s.vertices[e]=true}));n.edges.forEach((e=>{s.edges[e]=true}));n.edges.forEach((t=>e.edges_vertices[t].forEach((e=>{s.vertices[e]=true}))));n.faces.forEach((e=>{s.faces[e]=true}));n.faces.forEach((t=>e.faces_vertices[t].forEach((e=>{s.vertices[e]=true}))));e.faces_vertices.map(((e,t)=>t)).filter((t=>e.faces_vertices[t].map((e=>s.vertices[e])).reduce(((e,t)=>e&&t),true))).forEach((e=>{s.faces[e]=true}));e.edges_vertices.map(((e,t)=>t)).filter((t=>e.edges_vertices[t].map((e=>s.vertices[e])).reduce(((e,t)=>e&&t),true))).forEach((e=>{s.edges[e]=true}));return no(e,{vertices:Object.keys(s.vertices),edges:Object.keys(s.edges),faces:Object.keys(s.faces)})};const ro=(e,t)=>{let n=[];if(e.faces_vertices){n=fn(t.flatMap((t=>e.faces_vertices[t])))}let s=[];if(e.faces_edges){s=fn(t.flatMap((t=>e.faces_edges[t])))}else if(e.edges_vertices){const t={};n.forEach((e=>{t[e]=true}));s=e.edges_vertices.map(((e,n)=>t[e[0]]&&t[e[1]]?n:undefined)).filter((e=>e!==undefined))}return no(e,{vertices:n,edges:s,faces:t})};const co=(e,t=[])=>{const n={vertices:[],edges:[]};t.forEach((e=>{n.vertices[e]=true}));if(e.vertices_edges){n.vertices.forEach(((t,s)=>e.vertices_edges[s].forEach((e=>{n.edges[e]=true}))))}if(e.edges_vertices){n.edges.forEach(((t,s)=>e.edges_vertices[s].forEach((e=>{n.vertices[e]=true}))))}return no(e,{vertices:n.vertices.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined)),edges:n.edges.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined))})};const oo=Object.freeze({__proto__:null,selfRelationalArraySubset:to,subgraph:so,subgraphExclusive:no,subgraphWithFaces:ro,subgraphWithVertices:co});const ao=e=>{const t={vertices:nn.vertices(e),edges:nn.edges(e),faces:nn.faces(e)};const n={vertices:Kn.vertices(e),edges:Kn.edges(e),faces:Kn.faces(e)};return{vertices:t.vertices>=n.vertices,edges:t.edges>=n.edges,faces:t.faces>=n.faces}};const io=(e,t)=>{const n=Ys(e);const s=er(e);const r=xn(e);const c=vn(e,t);const o=ao(e);const a=n.length===0&&s.length===0&&r.length===0&&o.vertices&&o.edges&&o.faces;const i=a?"valid":"problematic";return{summary:i,vertices:{isolated:r,duplicate:c,references:o.vertices},edges:{circular:s,duplicate:n,references:o.edges},faces:{references:o.faces}}};const fo=e=>{const t=[];const n=(s,r)=>{if(t[s]!==undefined){return 0}t[s]=r;e[s].forEach((e=>n(e,r)));return 1};for(let t=0,s=0;t<e.length;t+=1){if(!(t in e)){continue}s+=n(t,s)}return t};const lo=e=>{const t=[];const n=[];e.forEach(((e,s)=>e.forEach((e=>{if(s<e){n.push([s,e])}if(s===e&&!t[s]){t[s]=true;n.push([s,e])}}))));return n};const uo=Object.freeze({__proto__:null,connectedComponents:fo,connectedComponentsPairs:lo});const mo=e=>{const t=e.edges_vertices||[];const n=e.faces_vertices||[];const s=e.vertices_edges?e.vertices_edges:hs({edges_vertices:t});const r=e.vertices_vertices?e.vertices_vertices:Ms({vertices_edges:s,edges_vertices:t});const c=e.vertices_faces?e.vertices_faces:As({vertices_edges:s,faces_vertices:n});const o=fr(fo(r));const a=o.map((e=>e.flatMap((e=>s[e])))).map(on);const i=o.map((e=>e.flatMap((e=>c[e])))).map(on);return Array.from(Array(o.length)).map(((e,t)=>({vertices:o[t]||[],edges:a[t]||[],faces:i[t]||[]})))};const go=e=>{const t=mo(e);const n=Ct(e,"vertices");const s=Ct(e,"edges");const r=Ct(e,"faces");return t.map((({vertices:t,edges:c,faces:o})=>{const a={};n.forEach((n=>{a[n]=[];t.forEach((t=>{a[n][t]=e[n][t]}))}));s.forEach((t=>{a[t]=[];c.forEach((n=>{a[t][n]=e[t][n]}))}));r.forEach((t=>{a[t]=[];o.forEach((n=>{a[t][n]=e[t][n]}))}));return a}))};const po=Object.freeze({__proto__:null,disjointGraphs:go,disjointGraphsIndices:mo});const _o=({vertices_coords:e},t)=>et(e,t);const ho=({edges_vertices:e,edges_assignment:t=[]})=>on(e.filter(((e,n)=>wt[t[n]])).flat());const vo=()=>({vertices:[],edges:[],polygon:[]});const bo=({vertices_coords:e,vertices_edges:t,edges_vertices:n,edges_assignment:s})=>{if(!s||!n){return vo()}if(!t){t=hs({edges_vertices:n})}const r=s.map((e=>e==="B"||e==="b"));const c=[];const o=[];let a=-1;for(let e=0;e<r.length;e+=1){if(r[e]){a=e;break}}if(a===-1){return vo()}r[a]=false;c.push(a);o.push(n[a][0]);let i=n[a][1];while(o[0]!==i){o.push(i);a=t[i].filter((e=>r[e])).shift();if(a===undefined){return vo()}if(n[a][0]===i){[,i]=n[a]}else{[i]=n[a]}r[a]=false;c.push(a)}return{vertices:o,edges:c,polygon:e?o.map((t=>e[t])):[]}};const yo=({vertices_coords:e,vertices_edges:t,vertices_vertices:n,edges_vertices:s})=>{if(!n){n=bs({vertices_coords:e,vertices_edges:t,edges_vertices:s})}const r=ws({edges_vertices:s});const c=[];const o=[];const a={vertices:o,edges:c};let i=-Infinity;let f=-1;e.forEach(((e,t)=>{if(e[0]>i){i=e[0];f=t}}));if(f===-1){return a}o.push(f);const l=e[f];const d=n[f];if(!d){return a}const u=d.map((t=>e[t])).map((e=>[e[0]-l[0],e[1]-l[1]])).map((e=>Math.atan2(e[1],e[0]))).map((e=>e<0?e+Math.PI*2:e)).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).shift().i;const m=d[u];const g=f<m?`${f} ${m}`:`${m} ${f}`;const p=r[g];c.push(p);let _=f;let h=m;const v={[`${_} ${h}`]:true};while(true){const e=n[h];const t=e.indexOf(_);const s=(t+1)%e.length;const i=e[s];const f=h<i?`${h} ${i}`:`${i} ${h}`;const l=r[f];if(v[`${h} ${i}`]){if(l!==c[0]){console.warn("bad boundary")}return a}v[`${h} ${i}`]=true;o.push(h);c.push(l);_=h;h=i}};const Eo=({vertices_coords:e,vertices_edges:t,vertices_vertices:n,edges_vertices:s})=>{if(!n){n=bs({vertices_coords:e,vertices_edges:t,edges_vertices:s})}return go({vertices_coords:e,vertices_vertices:n,edges_vertices:s}).map(yo)};const Mo=Object.freeze({__proto__:null,boundary:bo,boundaryVertices:ho,boundingBox:_o,planarBoundaries:Eo,planarBoundary:yo});const Ao=(e,t)=>{const n={};t.forEach((e=>{n[e]=true}));const s=e.map((e=>!!n[e]));const r=[];const c=s.indexOf(false);const o={};for(let t=c+1;t<s.length;t+=1){if(s[t]&&!o[e[t]]){r.push(e[t]);o[e[t]]=true}}for(let t=0;t<c;t+=1){if(s[t]&&!o[e[t]]){r.push(e[t]);o[e[t]]=true}}return r};const xo=Object.freeze({__proto__:null,getFaceFaceSharedVertices:Ao});const wo=(e=[],t=0)=>{if(e.length===0){return[]}const n=[];const s={};e.forEach(((e,t)=>{s[t]=true}));do{const r=t!==undefined?t:parseInt(Object.keys(s).shift(),10);t=undefined;const c=[];delete s[r];let o=[{index:r}];do{c.push(o);const t=o.flatMap((t=>e[t.index].filter((e=>s[e])).map((e=>({index:e,parent:t.index})))));const n={};t.forEach(((e,t)=>{if(!s[e.index]){n[t]=true}delete s[e.index]}));o=t.filter(((e,t)=>!n[t]))}while(o.length);n.push(c)}while(Object.keys(s).length);return n};const ko=(e,t)=>wo(e,t).shift();const Oo=Object.freeze({__proto__:null,minimumSpanningTree:ko,minimumSpanningTrees:wo});const jo=({vertices_coords:e,vertices_faces:t,faces_vertices:n},s)=>{if(!t){t=xs({faces_vertices:n})}const r=t.map((e=>e.filter((e=>e!=null)).shift())).map((e=>e===undefined?re:s[e]));return e.map(((e,t)=>ce(r[t],e)))};const Fo={U:true,u:true};const So=({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_faces:c},o=0)=>{if(!s&&n){s=Ts({edges_foldAngle:n})}if(!n){if(s){n=zs({edges_assignment:s})}else{n=Array(t.length).fill(0)}}if(!c){c=qs({faces_vertices:r})}const a=ws({edges_vertices:t});const i=r.map((()=>he));wo(c,o).forEach((t=>t.slice(1).forEach((t=>t.forEach((t=>{const c=Ao(r[t.index],r[t.parent]).slice(0,2);const o=c.map((t=>e[t]));const f=c.join(" ");const l=a[f];const d=Fo[s[l]]?Math.PI:n[l]*Math.PI/180;const u=Fe(d,O(...X(o[1],o[0])),o[0]);i[t.index]=Ee(i[t.parent],u)}))))));return i};const Co=({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_faces:c},o=0)=>{if(!n){if(s){n=zs({edges_assignment:s})}else{n=Array(t.length).fill(0)}}if(!c){c=qs({faces_vertices:r})}const a=Lt({edges_vertices:t,edges_foldAngle:n,edges_assignment:s});const i=ws({edges_vertices:t});const f=r.map((()=>re));wo(c,o).forEach((t=>t.slice(1).forEach((t=>t.forEach((t=>{const n=Ao(r[t.index],r[t.parent]).slice(0,2);const s=n.map((t=>e[t]));const c=n.join(" ");const o=i[c];const l=j(s[1],s[0]);const d=s[0];const u=a[o]?ge(l,d):re;f[t.index]=ae(f[t.parent],u)}))))));return f};const Vo=Object.freeze({__proto__:null,makeFacesMatrix:So,makeFacesMatrix2:Co,multiplyVerticesFacesMatrix2:jo});const Po=({vertices_coords:e,vertices_faces:t,edges_vertices:n,edges_foldAngle:s,edges_assignment:r,faces_vertices:c,faces_faces:o,faces_matrix:a},i)=>{if(!e||!e.length){return[]}if(!c||!c.length){return e}a=So({vertices_coords:e,edges_vertices:n,edges_foldAngle:s,edges_assignment:r,faces_vertices:c,faces_faces:o},i);if(!t){t=xs({faces_vertices:c})}const f=t.map((e=>e.filter((e=>e!=null)).shift())).map((e=>e===undefined?he:a[e]));return e.map((e=>Y(3,e))).map(((e,t)=>be(f[t],e)))};const To=({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_faces:c},o=0)=>{if(!e||!e.length){return[]}if(!r||!r.length){return e}if(!c){c=qs({faces_vertices:r})}const a=Lt({edges_vertices:t,edges_foldAngle:n,edges_assignment:s});const i=[];const f=[];const l=ws({edges_vertices:t});wo(c,o).forEach((n=>{const s=n.shift();if(!s||!s.length){return}const c=s[0];f[c.index]=false;r[c.index].forEach((t=>{i[t]=[...e[t]]}));n.forEach((n=>n.forEach((n=>{const s=Ao(r[n.index],r[n.parent]).slice(0,2).join(" ");const c=l[s];const o=t[c].map((e=>i[e]));if(o[0]===undefined||o[1]===undefined){return}const d=t[c].map((t=>e[t]));const u=d[0];const m=b(j(d[1],d[0]));const g=q(m);f[n.index]=a[c]?!f[n.parent]:f[n.parent];const p=b(j(o[1],o[0]));const _=o[0];const h=f[n.index]?W(p):q(p);r[n.index].filter((e=>i[e]===undefined)).forEach((t=>{const n=j(e[t],u);const s=S(n,g);const r=S(n,m);const c=M(p,r);const o=M(h,s);const a=w(w(_,c),o);i[t]=a}))}))))}));return i};const No=Object.freeze({__proto__:null,makeVerticesCoordsFlatFolded:To,makeVerticesCoordsFolded:Po});const zo=function(e){let t;let n;if(typeof e!=="object"){return e}if(!e){return e}if(Object.prototype.toString.apply(e)==="[object Array]"){t=[];for(n=0;n<e.length;n+=1){t[n]=zo(e[n])}return t}t={};for(n in e){if(e.hasOwnProperty(n)){t[n]=zo(e[n])}}return t};const Bo=typeof structuredClone==="function"?structuredClone:zo;const $o="class";const Ro="function";const Lo="undefined";const Io="boolean";const Uo="number";const Qo="string";const Do="object";const qo="svg";const Wo="path";const Go="id";const Ho="style";const Jo="viewBox";const Zo="transform";const Yo="points";const Xo="stroke";const Ko="fill";const ea="none";const ta="arrow";const na="head";const sa="tail";const ra=typeof window!==Lo&&typeof window.document!==Lo;typeof process!==Lo&&process.versions!=null&&process.versions.node!=null;const ca={window:"window not set; svg.window = @xmldom/xmldom"};const oa={window:undefined};const aa=e=>(new e.DOMParser).parseFromString("<!DOCTYPE html><title>.</title>","text/html");const ia=e=>{if(!e.document){e.document=aa(e)}oa.window=e;return oa.window};if(ra){oa.window=window}const fa=()=>{if(oa.window===undefined){throw ca.window}return oa.window};const la="http://www.w3.org/2000/svg";const da={presentation:["color","color-interpolation","cursor","direction","display","fill","fill-opacity","fill-rule","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","image-rendering","letter-spacing","opacity","overflow","paint-order","pointer-events","preserveAspectRatio","shape-rendering","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","tabindex","transform-origin","user-select","vector-effect","visibility"],animation:["accumulate","additive","attributeName","begin","by","calcMode","dur","end","from","keyPoints","keySplines","keyTimes","max","min","repeatCount","repeatDur","restart","to","values"],effects:["azimuth","baseFrequency","bias","color-interpolation-filters","diffuseConstant","divisor","edgeMode","elevation","exponent","filter","filterRes","filterUnits","flood-color","flood-opacity","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","lighting-color","limitingConeAngle","mode","numOctaves","operator","order","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","primitiveUnits","radius","result","seed","specularConstant","specularExponent","stdDeviation","stitchTiles","surfaceScale","targetX","targetY","type","xChannelSelector","yChannelSelector"],text:["dx","dy","alignment-baseline","baseline-shift","dominant-baseline","lengthAdjust","method","overline-position","overline-thickness","rotate","spacing","startOffset","strikethrough-position","strikethrough-thickness","text-anchor","text-decoration","text-rendering","textLength","underline-position","underline-thickness","word-spacing","writing-mode"],gradient:["gradientTransform","gradientUnits","spreadMethod"]};const ua={svg:["svg"],defs:["defs"],header:["desc","filter","metadata","style","script","title","view"],cdata:["cdata"],group:["g"],visible:["circle","ellipse","line","path","polygon","polyline","rect","arc","arrow","curve","parabola","roundRect","wedge","origami"],text:["text"],invisible:["marker","symbol","clipPath","mask"],patterns:["linearGradient","radialGradient","pattern"],childrenOfText:["textPath","tspan"],gradients:["stop"],filter:["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]};const ma={svg:[Jo],line:["x1","y1","x2","y2"],rect:["x","y","width","height"],circle:["cx","cy","r"],ellipse:["cx","cy","rx","ry"],polygon:[Yo],polyline:[Yo],path:["d"],text:["x","y"],mask:[Go],symbol:[Go],clipPath:[Go,"clip-rule"],marker:[Go,"markerHeight","markerUnits","markerWidth","orient","refX","refY"],linearGradient:["x1","x2","y1","y2"],radialGradient:["cx","cy","r","fr","fx","fy"],stop:["offset","stop-color","stop-opacity"],pattern:["patternContentUnits","patternTransform","patternUnits"]};const ga=[{nodes:[qo,"defs","g"].concat(ua.visible,ua.text),attr:da.presentation},{nodes:["filter"],attr:da.effects},{nodes:ua.childrenOfText.concat("text"),attr:da.text},{nodes:ua.filter,attr:da.effects},{nodes:ua.gradients,attr:da.gradient}];ga.forEach((e=>e.nodes.forEach((t=>{if(!ma[t]){ma[t]=[]}ma[t].push(...e.attr)}))));const pa=[ua.header,ua.invisible,ua.patterns].flat();const _a=[ua.group,ua.visible,ua.text].flat();const ha={svg:[["svg","defs"],pa,_a].flat(),defs:pa,filter:ua.filter,g:_a,text:ua.childrenOfText,marker:_a,symbol:_a,clipPath:_a,mask:_a,linearGradient:ua.gradients,radialGradient:ua.gradients};const va=Object.values(ua).flat();const ba={black:"#000000",silver:"#c0c0c0",gray:"#808080",white:"#ffffff",maroon:"#800000",red:"#ff0000",purple:"#800080",fuchsia:"#ff00ff",green:"#008000",lime:"#00ff00",olive:"#808000",yellow:"#ffff00",navy:"#000080",blue:"#0000ff",teal:"#008080",aqua:"#00ffff",orange:"#ffa500",aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",blanchedalmond:"#ffebcd",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",oldlace:"#fdf5e6",olivedrab:"#6b8e23",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",whitesmoke:"#f5f5f5",yellowgreen:"#9acd32"};const ya=e=>Math.round(e*100)/100;const Ea=(e,t,n,s)=>{const r=t/100;const c=n/100;const o=t=>(t+e/30)%12;const a=r*Math.min(c,1-c);const i=e=>c-a*Math.max(-1,Math.min(o(e)-3,Math.min(9-o(e),1)));return s===undefined?[i(0)*255,i(8)*255,i(4)*255]:[i(0)*255,i(8)*255,i(4)*255,s]};const Ma=(e,t)=>{const n=Array.from(Array(t.length)).map(((t,n)=>e[n]||"0"));return e.length<=4?t.map((e=>n[e])).join(""):n.join("")};const Aa=e=>{const t=e.replace(/#(?=\S)/g,"");const n=t.length===4||t.length===8;const s=n?Ma(t,[0,0,1,1,2,2,3,3]):Ma(t,[0,0,1,1,2,2]);const r=parseInt(s,16);return n?[r>>24&255,r>>16&255,r>>8&255,ya((r&255)/256)]:[r>>16&255,r>>8&255,r&255]};const xa=(e,t,n,s)=>{const r=e=>`00${Math.max(0,Math.min(Math.round(e),255)).toString(16)}`.slice(-2);const c=`#${[e,t,n].map(r).join("")}`;return s===undefined?c:`${c}${r(s*255)}`};const wa=Object.freeze({__proto__:null,hexToRgb:Aa,hslToRgb:Ea,rgbToHex:xa});const ka=e=>{const t=e.match(/\(([^\)]+)\)/g);if(t==null||!t.length){return[]}return t[0].substring(1,t[0].length-1).split(/[\s,]+/).map(parseFloat)};const Oa=e=>{if(ba[e]){return Aa(ba[e])}if(e[0]==="#"){return Aa(e)}if(e.substring(0,4)==="rgba"||e.substring(0,3)==="rgb"){const t=ka(e);[0,1,2].filter((e=>t[e]===undefined)).forEach((e=>{t[e]=0}));return t}if(e.substring(0,4)==="hsla"||e.substring(0,3)==="hsl"){const t=ka(e);[0,1,2].filter((e=>t[e]===undefined)).forEach((e=>{t[e]=0}));return Ea(...t)}return undefined};const ja=e=>{if(ba[e]){return ba[e].toUpperCase()}if(e[0]==="#"){return xa(...Aa(e))}if(e.substring(0,4)==="rgba"||e.substring(0,3)==="rgb"){return xa(...ka(e))}if(e.substring(0,4)==="hsla"||e.substring(0,3)==="hsl"){const t=ka(e);[0,1,2].filter((e=>t[e]===undefined)).forEach((e=>{t[e]=0}));const n=Ea(...t);if(t.length===4){n.push(t[3])}return xa(...n)}return undefined};const Fa=Object.freeze({__proto__:null,parseColorToHex:ja,parseColorToRgb:Oa});const Sa={cssColors:ba,...wa,...Fa};const Ca=(e,t)=>[e[0]+t[0],e[1]+t[1]];const Va=(e,t)=>[e[0]-t[0],e[1]-t[1]];const Pa=(e,t)=>[e[0]*t,e[1]*t];const Ta=e=>e[0]**2+e[1]**2;const Na=e=>Math.sqrt(Ta(e));const za=(e,t)=>Ta(Va(e,t));const Ba=(e,t)=>Math.sqrt(za(e,t));const $a=(e,t)=>[Math.cos(e)*t,Math.sin(e)*t];const Ra=(e,t)=>[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1],e[0]*t[2]+e[2]*t[3],e[1]*t[2]+e[3]*t[3],e[0]*t[4]+e[2]*t[5]+e[4],e[1]*t[4]+e[3]*t[5]+e[5]];const La=Object.freeze({__proto__:null,svg_add2:Ca,svg_distance2:Ba,svg_distanceSq2:za,svg_magnitude2:Na,svg_magnitudeSq2:Ta,svg_multiplyMatrices2:Ra,svg_polar_to_cart:$a,svg_scale2:Pa,svg_sub2:Va});const Ia=function(e){const t=e.match(/(\w+\((\-?\d+\.?\d*e?\-?\d*,?\s*)+\))+/g);if(!t){return[]}const n=t.map((e=>e.match(/[\w\.\-]+/g)));return n.map((e=>({transform:e.shift(),parameters:e.map((e=>parseFloat(e)))})))};const Ua=function(e){switch(e.length){case 1:return[1,0,0,1,e[0],0];case 2:return[1,0,0,1,e[0],e[1]];default:console.warn(`improper translate, ${e}`)}return undefined};const Qa=function(e){const t=Math.cos(e[0]/(180*Math.PI));const n=Math.sin(e[0]/(180*Math.PI));switch(e.length){case 1:return[t,n,-n,t,0,0];case 3:return[t,n,-n,t,-e[1]*t+e[2]*n+e[1],-e[1]*n-e[2]*t+e[2]];default:console.warn(`improper rotate, ${e}`)}return undefined};const Da=function(e){switch(e.length){case 1:return[e[0],0,0,e[0],0,0];case 2:return[e[0],0,0,e[1],0,0];default:console.warn(`improper scale, ${e}`)}return undefined};const qa=function(e){return[1,0,Math.tan(e[0]/(180*Math.PI)),1,0,0]};const Wa=function(e){return[1,Math.tan(e[0]/(180*Math.PI)),0,1,0,0]};const Ga=function(e,t){switch(e){case"translate":return Ua(t);case"rotate":return Qa(t);case"scale":return Da(t);case"skewX":return qa(t);case"skewY":return Wa(t);case"matrix":return t;default:console.warn(`unknown transform type ${e}`)}return undefined};const Ha=function(e){return Ia(e).map((e=>Ga(e.transform,e.parameters))).filter((e=>e!==undefined)).reduce(((e,t)=>Ra(e,t)),[1,0,0,1,0,0])};const Ja=Object.freeze({__proto__:null,parseTransform:Ia,transformStringToMatrix:Ha});const Za=(e,t="text/xml")=>{const n=(new(fa().DOMParser)).parseFromString(e,t);return n?n.documentElement:null};const Ya=e=>{let t=e;while(t.parentNode!=null){t=t.parentNode}return t};const Xa=(e,t)=>{if((e.nodeName||"")===t){return e}return e.parentNode?Xa(e.parentNode,t):undefined};const Ka=(e,...t)=>{const n={};const s=e.getAttribute("class");const r=s?s.split(" "):[];r.push(...t);r.forEach((e=>{n[e]=true}));const c=Object.keys(n).join(" ");e.setAttribute("class",c)};const ei=(e,...t)=>{if(!e||!t.length){return undefined}return e.classList?e.classList.add(...t):Ka(e,...t)};const ti=e=>e.childNodes==null||!e.childNodes.length?[e]:Array.from(e.childNodes).flatMap((e=>ti(e)));const ni={svg:["viewBox","xmlns","version"],line:["x1","y1","x2","y2"],rect:["x","y","width","height"],circle:["cx","cy","r"],ellipse:["cx","cy","rx","ry"],polygon:["points"],polyline:["points"],path:["d"]};const si=e=>{const t=e.attributes;if(t==null){return[]}const n=Array.from(t);return ni[e.nodeName]?n.filter((t=>!ni[e.nodeName].includes(t.name))):n};const ri=e=>{const t={};e.forEach((e=>{t[e.nodeName]=e.value}));return t};const ci=(e,t)=>{const n=ri(si(t));if(!n.transform&&!e.transform){return{...e,...n}}const s=n.transform||"";const r=e.transform||"";const c=Ha(s);const o=Ha(r);const a=Ra(o,c);const i=`matrix(${a.join(", ")})`;return{...e,...n,transform:i}};const oi=(e,t={})=>e.childNodes==null||!e.childNodes.length?[{element:e,attributes:t}]:Array.from(e.childNodes).flatMap((e=>oi(e,ci(t,e))));const ai=Object.freeze({__proto__:null,addClass:ei,findElementTypeInParents:Xa,flattenDomTree:ti,flattenDomTreeWithStyle:oi,getRootParent:Ya,xmlStringToElement:Za});const ii=e=>(new(fa().DOMParser)).parseFromString("<root></root>","text/xml").createCDATASection(e);const fi=/[MmLlSsQqLlHhVvCcSsQqTtAaZz]/g;const li=/-?[0-9]*\.?\d+/g;const di={m:"move",l:"line",v:"vertical",h:"horizontal",a:"ellipse",c:"curve",s:"smoothCurve",q:"quadCurve",t:"smoothQuadCurve",z:"close"};Object.keys(di).forEach((e=>{const t=di[e];di[e.toUpperCase()]=t.charAt(0).toUpperCase()+t.slice(1)}));const ui=(e,t)=>[e[0]+(t[0]||0),e[1]+(t[1]||0)];const mi=(e,t,n=[0,0])=>{const s=e.toUpperCase();let r=e===s?[0,0]:n;if(e==="V"){r=[n[0],0]}if(e==="H"){r=[0,n[1]]}switch(s){case"V":return ui(r,[0,t[0]]);case"H":return ui(r,[t[0],0]);case"M":case"L":case"T":return ui(r,t);case"A":return ui(r,[t[5],t[6]]);case"C":return ui(r,[t[4],t[5]]);case"S":case"Q":return ui(r,[t[2],t[3]]);case"Z":return undefined;default:return r}};const gi=e=>{const t=[];let n;while((n=fi.exec(e))!==null){t.push(n)}return t.map(((t,n,s)=>[t[0],t.index,n===s.length-1?e.length-1:s[(n+1)%s.length].index-1])).map((t=>{const n=t[0];const s=e.substring(t[1]+1,t[2]+1);const r=s.match(li);const c=r?r.map(parseFloat):[];return{command:n,values:c}}))};const pi=e=>{let t=[0,0];const n=gi(e);if(!n.length){return n}n.forEach(((e,s)=>{n[s].end=mi(e.command,e.values,t);n[s].start=s===0?t:n[s-1].end;t=n[s].end}));const s=n[n.length-1];const r=n.filter((e=>e.command.toUpperCase()!=="M"&&e.command.toUpperCase()!=="Z")).shift();if(s.command.toUpperCase()==="Z"){s.end=[...r.start]}return n};const _i=Object.freeze({__proto__:null,parsePathCommands:gi,parsePathCommandsWithEndpoints:pi,pathCommandNames:di});const hi=(...e)=>e.filter((e=>typeof e===Uo)).concat(e.filter((e=>typeof e===Do&&e!==null)).map((e=>{if(typeof e.x===Uo){return[e.x,e.y]}if(typeof e[0]===Uo){return[e[0],e[1]]}return undefined})).filter((e=>e!==undefined)).reduce(((e,t)=>e.concat(t)),[]));const vi=function(e,t,n,s,r=0){const c=1;const o=n/c-n;const a=e-o-r;const i=t-o-r;const f=n+o*2+r*2;const l=s+o*2+r*2;return[a,i,f,l].join(" ")};const bi=(...e)=>{const t=hi(...e.flat());if(t.length===2){t.unshift(0,0)}return t.length===4?vi(...t):undefined};const yi=(e,...t)=>{const n=t.length===1&&typeof t[0]===Qo?t[0]:bi(...t);if(n){e.setAttribute(Jo,n)}return e};const Ei=function(e){const t=e.getAttribute(Jo);return t==null?undefined:t.split(" ").map((e=>parseFloat(e)))};const Mi=function(e,t,n){const s=e.createSVGPoint();s.x=t;s.y=n;const r=s.matrixTransform(e.getScreenCTM().inverse());return[r.x,r.y]};const Ai=({vertices_coords:e})=>{if(!e){return undefined}const t=[Infinity,Infinity];const n=[-Infinity,-Infinity];e.forEach((e=>[0,1].forEach((s=>{t[s]=Math.min(e[s],t[s]);n[s]=Math.max(e[s],n[s])}))));return[t[0],t[1],n[0]-t[0],n[1]-t[1]].join(" ")};const xi=Object.freeze({__proto__:null,convertToViewBox:Mi,foldToViewBox:Ai,getViewBox:Ei,setViewBox:yi});const wi={...La,...ai,makeCDATASection:ii,..._i,...Ja,...xi};const ki=function(e){const t=Ei(e);if(t!==undefined){return t}if(typeof e.getBoundingClientRect===Ro){const t=e.getBoundingClientRect();return[t.x,t.y,t.width,t.height]}return[]};const Oi="svg-background-rectangle";const ji=function(e,t){let n=Array.from(e.childNodes).filter((e=>e.getAttribute($o)===Oi)).shift();if(n==null){n=fa().document.createElementNS(la,"rect");ki(e).forEach(((e,t)=>n.setAttribute(ma.rect[t],e)));n.setAttribute($o,Oi);n.setAttribute(Xo,ea);e.insertBefore(n,e.firstChild)}n.setAttribute(Ko,t);return e};const Fi=e=>{const t=e.getAttribute(Zo);return t==null||t===""?undefined:t};const Si={clearTransform:e=>{e.removeAttribute(Zo);return e}};["translate","rotate","scale","matrix"].forEach((e=>{Si[e]=(t,...n)=>{t.setAttribute(Zo,[Fi(t),`${e}(${n.join(" ")})`].filter((e=>e!==undefined)).join(" "));return t}}));const Ci=e=>e.replace(/([-_][a-z])/gi,(e=>e.toUpperCase().replace("-","").replace("_","")));const Vi=e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z])([A-Z])(?=[a-z])/g,"$1-$2").toLowerCase();const Pi=e=>e.charAt(0).toUpperCase()+e.slice(1);const Ti=e=>{while(e.lastChild){e.removeChild(e.lastChild)}return e};const Ni=(e,t)=>{if(t&&t.appendChild){t.appendChild(e)}return e};const zi=(e,t)=>{Object.keys(t).forEach((n=>e.setAttribute(Vi(n),t[n])));return e};const Bi=Object.freeze({__proto__:null,appendTo:Ni,removeChildren:Ti,setAttributes:zi});const $i=function(e,t){const n=Ei(e);if(n!==undefined){yi(e,...[-t,-t,t*2,t*2].map(((e,t)=>n[t]+e)))}return e};const Ri=function(e,t){const n=e.getElementsByTagName(t);return n.length?n[0]:null};const Li=function(e,t){let n=Ri(e,Ho);if(n==null){n=fa().document.createElementNS(la,Ho);n.setTextContent=e=>{n.textContent="";n.appendChild(ii(e));return n};e.insertBefore(n,e.firstChild)}n.textContent="";n.appendChild(ii(t));return n};const Ii=e=>{Array.from(e.attributes).filter((e=>e.name!=="xmlns"&&e.name!=="version")).forEach((t=>e.removeAttribute(t.name)));return Ti(e)};const Ui={clear:Ii,size:yi,setViewBox:yi,getViewBox:Ei,padding:$i,background:ji,getWidth:e=>ki(e)[2],getHeight:e=>ki(e)[3],stylesheet:function(e,t){return Li.call(this,e,t)},...Si,...Bi};const Qi={move:["mousemove","touchmove"],press:["mousedown","touchstart"],release:["mouseup","touchend"],leave:["mouseleave","touchcancel"]};const Di=(e,t)=>Object.values(Qi).flat().forEach((n=>{t[n].forEach((t=>e.removeEventListener(n,t)));t[n]=[]}));const qi=(e,t,n)=>Object.defineProperty(e,t,{get:()=>n,enumerable:true,configurable:true});const Wi=function(e){const t=[];Object.keys(Qi).forEach((e=>{Qi[e].forEach((e=>{t[e]=[]}))}));const n=n=>Qi[n].forEach((n=>t[n].forEach((t=>e.removeEventListener(n,t)))));Object.keys(Qi).forEach((s=>{Object.defineProperty(e,`on${Pi(s)}`,{set:r=>{if(!e.addEventListener){return}if(r==null){n(s);return}Qi[s].forEach((n=>{const s=t=>{const n=t.touches!=null?t.touches[0]:t;if(n!==undefined){const{clientX:s,clientY:r}=n;const[c,o]=Mi(e,s,r);qi(t,"x",c);qi(t,"y",o)}r(t)};t[n].push(s);e.addEventListener(n,s)}))},enumerable:true})}));Object.defineProperty(e,"off",{value:()=>Di(e,t)})};const Gi=()=>Math.random().toString(36).replace(/[^a-z]+/g,"").concat("aaaaa").substr(0,5);const Hi=function(e){let t;let n=0;let s;const r={};const c=()=>{if(fa().cancelAnimationFrame){fa().cancelAnimationFrame(s)}Object.keys(r).forEach((e=>delete r[e]))};const o=e=>{c();if(!e||!fa().requestAnimationFrame){return}t=performance.now();n=0;const o=Gi();r[o]=c=>{const a=(c-t)*.001;e({time:a,frame:n});n+=1;if(r[o]){s=fa().requestAnimationFrame(r[o])}};s=fa().requestAnimationFrame(r[o])};Object.defineProperty(e,"play",{set:o,enumerable:true});Object.defineProperty(e,"stop",{value:c,enumerable:true})};const Ji=e=>e&&e.parentNode?e.parentNode.removeChild(e):undefined;const Zi=[["cx","cy"],["x","y"]];const Yi=function(e,t={}){const n=[0,0];const s={selected:false,svg:undefined,updatePosition:e=>e};const r=()=>{if(!s.svg){return}if(!s.svg.parentNode){e.appendChild(s.svg)}Zi.filter((e=>s.svg[e[0]]!=null)).forEach((e=>e.forEach(((e,t)=>{s.svg.setAttribute(e,n[t])}))))};const c=new Proxy(n,{set:(e,t,n)=>{e[t]=n;r();return true}});const o=function(...e){hi(...e.flat()).forEach(((e,t)=>{n[t]=e}));r();if(typeof n.delegate===Ro){n.delegate.apply(n.pointsContainer,[c,n.pointsContainer])}};n.delegate=undefined;n.setPosition=o;n.onMouseMove=e=>s.selected?o(s.updatePosition(e)):undefined;n.onMouseUp=()=>{s.selected=false};n.distance=e=>Math.sqrt(za(e,n));["x","y"].forEach(((e,t)=>Object.defineProperty(n,e,{get:()=>n[t],set:e=>{n[t]=e}})));[qo,"updatePosition","selected"].forEach((e=>Object.defineProperty(n,e,{get:()=>s[e],set:t=>{s[e]=t}})));Object.defineProperty(n,"remove",{value:()=>{Ji(s.svg);n.delegate=undefined}});return c};const Xi=function(e,t,n){let s;let r;const c=Array.from(Array(t)).map((()=>Yi(e,n)));const o=e=>typeof r===Ro?r.call(c,e,s,c):undefined;c.forEach((e=>{e.delegate=o;e.pointsContainer=c}));const a=function(e){if(!(c.length>0)){return}s=c.map(((t,n)=>({i:n,d:za(t,[e.x,e.y])}))).sort(((e,t)=>e.d-t.d)).shift().i;c[s].selected=true};const i=function(e){c.forEach((t=>t.onMouseMove(e)))};const f=function(){c.forEach((e=>e.onMouseUp()));s=undefined};e.onPress=a;e.onMove=i;e.onRelease=f;Object.defineProperty(c,"selectedIndex",{get:()=>s});Object.defineProperty(c,"selected",{get:()=>c[s]});Object.defineProperty(c,"add",{value:t=>{c.push(Yi(e,t))}});c.removeAll=()=>{while(c.length>0){c.pop().remove()}};const l={onChange:(e,t)=>{r=e;if(t===true){const t=c.length-1;e.call(c,c[t],t,c)}},position:e=>c.forEach(((t,n)=>t.setPosition(e.call(c,t,n,c)))),svg:e=>c.forEach(((t,n)=>{t.svg=e.call(c,t,n,c)}))};Object.keys(l).forEach((e=>{c[e]=function(){if(typeof arguments[0]===Ro){l[e](...arguments)}return c}}));c.parent=function(e){if(e!=null&&e.appendChild!=null){c.forEach((t=>{e.appendChild(t.svg)}))}return c};return c};const Ki=e=>{e.controls=(...t)=>Xi.call(e,e,...t)};const ef={svg:{args:(...e)=>[bi(hi(...e))].filter((e=>e!=null)),methods:Ui,init:(...e)=>{const t=fa().document.createElementNS(la,"svg");t.setAttribute("version","1.1");t.setAttribute("xmlns",la);e.filter((e=>e!=null)).filter((e=>e.appendChild)).forEach((e=>e.appendChild(t)));Wi(t);Hi(t);Ki(t);return t}}};const tf=function(e){if(e==null){return""}if(typeof e===Qo){return e.slice(0,3)==="url"?e:`url(#${e})`}if(e.getAttribute!=null){const t=e.getAttribute(Go);return`url(#${t})`}return""};const nf={};["clip-path","mask","symbol","marker-end","marker-mid","marker-start"].forEach((e=>{nf[Ci(e)]=(t,n)=>{t.setAttribute(e,tf(n));return t}}));const sf={g:{methods:{...Si,...nf,...Bi}}};const rf=(e,t)=>{e.setAttribute(ma.circle[2],t);return e};const cf=(e,t,n)=>{[...hi(...[t,n].flat()).slice(0,2)].forEach(((t,n)=>e.setAttribute(ma.circle[n],t)));return e};const of=(e,t,n,s)=>[e,t,Ba([e,t],[n,s])];const af={circle:{args:(e,t,n,s)=>{const r=hi(...[e,t,n,s].flat());switch(r.length){case 0:case 1:return[,,...r];case 2:case 3:return r;default:return of(...r)}},methods:{radius:rf,setRadius:rf,origin:cf,setOrigin:cf,center:cf,setCenter:cf,position:cf,setPosition:cf,...Si,...nf,...Bi}}};const ff=(e,t,n)=>{[,,t,n].forEach(((t,n)=>e.setAttribute(ma.ellipse[n],t)));return e};const lf=(e,t,n)=>{[...hi(...[t,n].flat()).slice(0,2)].forEach(((t,n)=>e.setAttribute(ma.ellipse[n],t)));return e};const df={ellipse:{args:(e,t,n,s)=>{const r=hi(...[e,t,n,s].flat()).slice(0,4);switch(r.length){case 0:case 1:case 2:return[,,...r];default:return r}},methods:{radius:ff,setRadius:ff,origin:lf,setOrigin:lf,center:lf,setCenter:lf,position:lf,setPosition:lf,...Si,...nf,...Bi}}};const uf=e=>e!=null&&typeof e[Symbol.iterator]===Ro;const mf=function(){switch(arguments.length){case 0:return Array.from(arguments);case 1:return uf(arguments[0])&&typeof arguments[0]!==Qo?mf(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>uf(e)?[...mf(e)]:e))}};const gf=(...e)=>hi(...mf(...e)).slice(0,4);const pf=(e,...t)=>{gf(...t).forEach(((t,n)=>e.setAttribute(ma.line[n],t)));return e};const _f={line:{args:gf,methods:{setPoints:pf,...Si,...nf,...Bi}}};const hf=e=>{const t=e.getAttribute("d");return t==null?"":t};const vf=e=>{e.removeAttribute("d");return e};const bf=(e,t,...n)=>{e.setAttribute("d",`${hf(e)}${t}${n.flat().join(" ")}`);return e};const yf=e=>gi(hf(e));const Ef={addCommand:bf,appendCommand:bf,clear:vf,getCommands:yf,get:yf,getD:e=>e.getAttribute("d"),...Si,...nf,...Bi};Object.keys(di).forEach((e=>{Ef[di[e]]=(t,...n)=>bf(t,e,...n)}));const Mf={path:{methods:Ef}};const Af=(e,t,n)=>{[,,t,n].forEach(((t,n)=>e.setAttribute(ma.rect[n],t)));return e};const xf=(e,t,n)=>{[...hi(...[t,n].flat()).slice(0,2)].forEach(((t,n)=>e.setAttribute(ma.rect[n],t)));return e};const wf=function(e){[0,1].forEach((t=>{if(e[2+t]<0){if(e[0+t]===undefined){e[0+t]=0}e[0+t]+=e[2+t];e[2+t]=-e[2+t]}}));return e};const kf={rect:{args:(e,t,n,s)=>{const r=hi(...[e,t,n,s].flat()).slice(0,4);switch(r.length){case 0:case 1:case 2:case 3:return wf([,,...r]);default:return wf(r)}},methods:{origin:xf,setOrigin:xf,center:xf,setCenter:xf,size:Af,setSize:Af,...Si,...nf,...Bi}}};const Of={style:{init:e=>{const t=fa().document.createElementNS(la,"style");t.setAttribute("type","text/css");t.textContent="";t.appendChild(ii(e));return t},methods:{setTextContent:(e,t)=>{e.textContent="";e.appendChild(ii(t));return e}}}};const jf={text:{args:(e,t,n)=>hi(...[e,t,n].flat()).slice(0,2),init:(e,t,n,s)=>{const r=fa().document.createElementNS(la,"text");const c=[e,t,n,s].filter((e=>typeof e===Qo)).shift();r.appendChild(fa().document.createTextNode(c||""));return r},methods:{...Si,...nf,appendTo:Ni,setAttributes:zi}}};const Ff=function(){return Array.from(arguments).filter((e=>typeof e===Qo||e instanceof String)).shift()||Gi()};const Sf=(...e)=>[Ff(...e)];const Cf={mask:{args:Sf,methods:{...Si,...nf,...Bi}},clipPath:{args:Sf,methods:{...Si,...nf,...Bi}},symbol:{args:Sf,methods:{...Si,...nf,...Bi}},marker:{args:Sf,methods:{size:yi,setViewBox:yi,...Si,...nf,...Bi}}};const Vf=e=>{const t=e.getAttribute(Yo);return t==null?"":t};const Pf=function(){return Array.from(Array(Math.floor(arguments.length/2))).map(((e,t)=>`${arguments[t*2+0]},${arguments[t*2+1]}`)).join(" ")};const Tf=(...e)=>[Pf(...hi(...mf(...e)))];const Nf=(e,...t)=>{e.setAttribute(Yo,Tf(...t)[0]);return e};const zf=(e,...t)=>{e.setAttribute(Yo,[Vf(e),Tf(...t)[0]].filter((e=>e!=="")).join(" "));return e};const Bf=function(...e){return e.length===1&&typeof e[0]===Qo?[e[0]]:Tf(...e)};const $f={polyline:{args:Bf,methods:{setPoints:Nf,addPoint:zf,...Si,...nf,...Bi}},polygon:{args:Bf,methods:{setPoints:Nf,addPoint:zf,...Si,...nf,...Bi}}};const Rf=(e,t,n,s,r,c=false)=>{if(r==null){return""}const o=$a(s,n);const a=$a(r,n);const i=[a[0]-o[0],a[1]-o[1]];const f=o[0]*a[1]-o[1]*a[0];const l=o[0]*a[0]+o[1]*a[1];const d=Math.atan2(f,l)>0?0:1;let u=c?`M ${e},${t} l ${o[0]},${o[1]} `:`M ${e+o[0]},${t+o[1]} `;u+=["a ",n,n,0,d,1,i[0],i[1]].join(" ");if(c){u+=" Z"}return u};const Lf=(e,t,n,s,r)=>[Rf(e,t,n,s,r,false)];const If={arc:{nodeName:Wo,attributes:["d"],args:Lf,methods:{setArc:(e,...t)=>e.setAttribute("d",Lf(...t)),...Si}}};const Uf=[sa,na];const Qf=e=>e.join(",");const Df=e=>"M"+e.map((e=>e.join(","))).join("L")+"Z";const qf=function(e){let t=[[0,1],[2,3]].map((t=>t.map((t=>e.points[t]||0))));let n=Va(t[1],t[0]);let s=Ca(t[0],Pa(n,.5));const r=Na(n);const c=Uf.map((t=>e[t].visible?(1+e[t].padding)*e[t].height*2.5:0)).reduce(((e,t)=>e+t),0);if(r<c){const e=r===0?[c,0]:Pa(n,c/r);t=[Va,Ca].map((t=>t(s,Pa(e,.5))));n=Va(t[1],t[0])}let o=[n[1],-n[0]];let a=Ca(s,Pa(o,e.bend));const i=t.map((e=>Va(a,e)));const f=i.map((e=>Na(e)));const l=i.map(((e,t)=>f[t]===0?e:Pa(e,1/f[t])));const d=l.map((e=>Pa(e,-1)));const u=d.map((e=>[e[1],-e[0]]));const m=Uf.map(((t,n)=>e[t].padding?e[t].padding:e.padding?e.padding:0));const g=Uf.map(((t,n)=>e[t].height*(e[t].visible?1:0))).map(((e,t)=>e+m[t]));const p=t.map(((e,t)=>Ca(e,Pa(l[t],g[t]))));n=Va(p[1],p[0]);o=[n[1],-n[0]];s=Ca(p[0],Pa(n,.5));a=Ca(s,Pa(o,e.bend));const _=p.map(((t,n)=>Ca(t,Pa(Va(a,t),e.pinch))));const h=Uf.map(((t,n)=>[Ca(p[n],Pa(d[n],e[t].height)),Ca(p[n],Pa(u[n],e[t].width/2)),Ca(p[n],Pa(u[n],-e[t].width/2))]));return{line:`M${Qf(p[0])}C${Qf(_[0])},${Qf(_[1])},${Qf(p[1])}`,tail:Df(h[0]),head:Df(h[1])}};const Wf=(e,t,n)=>{if(typeof t===Io){e.options[n].visible=t}else if(typeof t===Do){Object.assign(e.options[n],t);if(t.visible==null){e.options[n].visible=true}}else if(t==null){e.options[n].visible=true}};const Gf=(e,t={},n=na)=>{const s=e.getElementsByClassName(`${ta}-${n}`)[0];Object.keys(t).map((e=>({key:e,fn:s[Ci(e)]}))).filter((e=>typeof e.fn===Ro&&e.key!=="class")).forEach((e=>e.fn(t[e.key])));Object.keys(t).filter((e=>e==="class")).forEach((e=>s.classList.add(t[e])))};const Hf=e=>{const t=qf(e.options);Object.keys(t).map((t=>({path:t,element:e.getElementsByClassName(`${ta}-${t}`)[0]}))).filter((e=>e.element)).map((e=>{e.element.setAttribute("d",t[e.path]);return e})).filter((t=>e.options[t.path])).forEach((t=>t.element.setAttribute("visibility",e.options[t.path].visible?"visible":"hidden")));return e};const Jf=(e,...t)=>{e.options.points=hi(...mf(...t)).slice(0,4);return Hf(e)};const Zf=(e,t)=>{e.options.bend=t;return Hf(e)};const Yf=(e,t)=>{e.options.pinch=t;return Hf(e)};const Xf=(e,t)=>{e.options.padding=t;return Hf(e)};const Kf=(e,t)=>{Wf(e,t,na);Gf(e,t,na);return Hf(e)};const el=(e,t)=>{Wf(e,t,sa);Gf(e,t,sa);return Hf(e)};const tl=e=>e.getElementsByClassName(`${ta}-line`)[0];const nl=e=>e.getElementsByClassName(`${ta}-${na}`)[0];const sl=e=>e.getElementsByClassName(`${ta}-${sa}`)[0];const rl={setPoints:Jf,points:Jf,bend:Zf,pinch:Yf,padding:Xf,head:Kf,tail:el,getLine:tl,getHead:nl,getTail:sl,...Si};const cl=()=>({visible:false,width:8,height:10,padding:0});const ol=()=>({head:cl(),tail:cl(),bend:0,padding:0,pinch:.618,points:[]});const al=Object.keys(ol());const il=(...e)=>{for(let t=0;t<e.length;t+=1){if(typeof e[t]!==Do){continue}const n=Object.keys(e[t]);for(let s=0;s<n.length;s+=1){if(al.includes(n[s])){return e[t]}}}return undefined};const fl=function(...e){const t=fa().document.createElementNS(la,"g");t.setAttribute($o,ta);const n=["line",sa,na].map((e=>{const n=fa().document.createElementNS(la,Wo);n.setAttribute($o,`${ta}-${e}`);t.appendChild(n);return n}));n[0].setAttribute(Ho,"fill:none;");n[1].setAttribute(Xo,ea);n[2].setAttribute(Xo,ea);t.options=ol();rl.setPoints(t,...e);const s=il(...e);if(s){Object.keys(s).filter((e=>rl[e])).forEach((e=>rl[e](t,s[e])))}return t};const ll={arrow:{nodeName:"g",attributes:[],args:()=>[],methods:rl,init:fl}};const dl=(e=[],t=0,n=.5)=>{const s=[e[0]||0,e[1]||0];const r=[e[2]||0,e[3]||0];const c=Va(r,s);const o=Ca(s,Pa(c,.5));const a=[c[1],-c[0]];const i=Ca(o,Pa(a,t));const f=Ca(s,Pa(Va(i,s),n));const l=Ca(r,Pa(Va(i,r),n));return`M${s[0]},${s[1]}C${f[0]},${f[1]} ${l[0]},${l[1]} ${r[0]},${r[1]}`};const ul=(...e)=>[dl(hi(...e.flat()))];const ml=e=>e.slice(1).split(/[, ]+/).map((e=>parseFloat(e)));const gl=e=>e.match(/[Cc][(0-9), .-]+/).map((e=>ml(e)));const pl=e=>e.match(/[Mm][(0-9), .-]+/).map((e=>ml(e)));const _l=e=>{const t=pl(e).shift();const n=gl(e).shift();const s=t?[t[t.length-2],t[t.length-1]]:[0,0];const r=n?[n[n.length-2],n[n.length-1]]:[0,0];return[...s,...r]};const hl=(e,...t)=>{const n=hi(...t.flat()).slice(0,4);e.setAttribute("d",dl(n,e._bend,e._pinch));return e};const vl=(e,t)=>{e._bend=t;return hl(e,..._l(e.getAttribute("d")))};const bl=(e,t)=>{e._pinch=t;return hl(e,..._l(e.getAttribute("d")))};const yl={setPoints:hl,bend:vl,pinch:bl,...Si};const El={curve:{nodeName:Wo,attributes:["d"],args:ul,methods:yl}};const Ml=(e,t,n,s,r)=>[Rf(e,t,n,s,r,true)];const Al={wedge:{nodeName:Wo,args:Ml,attributes:["d"],methods:{setArc:(e,...t)=>e.setAttribute("d",Ml(...t)),...Si}}};const xl={};const wl=(e,...t)=>{const n=fa().document.createElementNS(la,"g");xl.ear.convert.foldToSvg.render(e,n,...t);return n};const kl={...Si,...nf,...Bi};const Ol={origami:{nodeName:"g",init:wl,args:()=>[],methods:kl}};const jl={...ef,...sf,...af,...df,..._f,...Mf,...kf,...Of,...jf,...Cf,...$f,...If,...ll,...El,...Al,...Ol};const Fl=(...e)=>e;const Sl=(e,t,...n)=>{const s=jl[e]&&jl[e].nodeName?jl[e].nodeName:e;const{init:r,args:c,methods:o}=jl[e]||{};const a=ma[s]||[];const i=ha[s]||[];const f=r?r(...n):fa().document.createElementNS(la,s);if(t){t.appendChild(f)}const l=c||Fl;l(...n).forEach(((e,t)=>{f.setAttribute(ma[s][t],e)}));if(o){Object.keys(o).forEach((e=>Object.defineProperty(f,e,{value:function(){return o[e](f,...arguments)}})))}a.forEach((e=>{const t=Ci(e);if(f[t]){return}Object.defineProperty(f,t,{value:function(){f.setAttribute(e,...arguments);return f}})}));i.forEach((e=>{if(f[e]){return}const t=function(){return Sl(e,f,...arguments)};Object.defineProperty(f,e,{value:t})}));return f};const Cl=(...e)=>{const t=Sl(qo,null,...e);const n=()=>e.filter((e=>typeof e===Ro)).forEach((e=>e.call(t,t)));if(fa().document.readyState==="loading"){fa().document.addEventListener("DOMContentLoaded",n)}else{n()}return t};Object.assign(Cl,{NS:la,nodes_attributes:ma,nodes_children:ha,extensions:jl,...Sa,...wi});va.forEach((e=>{Cl[e]=(...t)=>Sl(e,null,...t)}));Object.defineProperty(Cl,"window",{enumerable:false,set:ia});const Vl=e=>[e.min,e.span].flatMap((e=>[e[0],e[1]])).join(" ");const Pl=e=>{const t=_o(e);return t===undefined?"":Vl(t)};const Tl=({vertices_coords:e,edges_vertices:t,edges_length:n},s=.1)=>{if(!e||!t){return undefined}if(!n){n=Ls({vertices_coords:e,edges_vertices:t})}const r=n.slice().sort(((e,t)=>e-t));const c=Math.max(0,Math.min(Math.floor(r.length*s),r.length-1));return r[c]};const Nl={min:[0,0],span:[1,1]};const zl=1/100;const Bl=(e,{vmax:t}={})=>{if(!t){const n=_o(e)||Nl;t=Math.max(...n.span)}const n=Tl(e,.1);return n?n*zl*10:t*zl};const $l=(e,t={})=>{const n=t&&t.vertices?t.vertices:{};const s=Cl.g();if(!e||!e.vertices_coords){return s}e.vertices_coords.map((e=>Cl.circle(e[0],e[1],.01))).forEach((e=>s.appendChild(e)));s.setAttributeNS(null,"fill","none");Object.keys(n).forEach((e=>s.setAttributeNS(null,e,n[e])));return s};const Rl={B:"black",M:"crimson",V:"royalblue",F:"lightgray",J:"gold",C:"limegreen",U:"orchid"};Object.keys(Rl).forEach((e=>{Rl[e.toLowerCase()]=Rl[e]}));const Ll=4;const Il={M:[1,0,0],V:[0,0,1],J:[1,1,0],U:[1,0,1],C:[0,1,0]};const Ul=(e=0,t=0,n=0)=>{const s=A([e,t,n],1/255);const r=p(s);if(r<.05){return"B"}const c=s.reduce(((e,t)=>e+t),0)/3;const o=Q(s,[c,c,c]);const a=Object.keys(Il).map((e=>({key:e,dist:Q(s,Il[e])}))).sort(((e,t)=>e.dist-t.dist)).shift();if(a.dist<o*Ll){return a.key}return r<.1?"B":"F"};const Ql=Object.freeze({__proto__:null,assignmentColor:Rl,rgbToAssignment:Ul});const Dl={};const ql={stroke:"black"};const Wl={};const Gl={};Object.keys(Rl).forEach((e=>{Gl[e]={stroke:Rl[e]}}));const Hl=(e,t,n)=>e.setAttribute(`data-${t}`,n);const Jl=e=>{const t={u:[],c:[],j:[],f:[],v:[],m:[],b:[]};const n=e.edges_assignment.map((e=>e.toLowerCase()));e.edges_vertices.map(((e,t)=>n[t]||"u")).forEach(((e,n)=>t[e].push(n)));return t};const Zl=({vertices_coords:e,edges_vertices:t})=>{if(!e||!t){return[]}return t.map((t=>t.map((t=>e[t]))))};const Yl=e=>`M${e[0][0]} ${e[0][1]}L${e[1][0]} ${e[1][1]}`;const Xl=e=>Zl(e).map((e=>Yl(e))).join("");const Kl=({vertices_coords:e,edges_vertices:t,edges_assignment:n})=>{if(!e||!t){return{}}if(!n){return{u:Xl({vertices_coords:e,edges_vertices:t})}}const s=Jl({vertices_coords:e,edges_vertices:t,edges_assignment:n});Object.keys(s).forEach((n=>{s[n]=Xl({vertices_coords:e,edges_vertices:s[n].map((e=>t[e]))})}));Object.keys(s).forEach((e=>{if(s[e]===""){delete s[e]}}));return s};const ed=({vertices_coords:e,edges_vertices:t,edges_assignment:n})=>{const s=Kl({vertices_coords:e,edges_vertices:t,edges_assignment:n});Object.keys(s).forEach((e=>{const t=Cl.path(s[e]);ei(t,Mt[e]);s[e]=t}));return s};const td=(e,t={})=>Object.keys(t).forEach((n=>e.setAttributeNS(null,n,t[n])));const nd=(e,t={})=>{const n=t&&t.edges?t.edges:{};const s=Cl.g();if(!e){return s}const r=Bt(e);const c=JSON.parse(JSON.stringify(r?Dl:ql));const o=JSON.parse(JSON.stringify(r?Wl:Gl));const a={};if(n.stroke){a.stroke=n.stroke}Object.assign(c,a);Object.keys(o).forEach((e=>{o[e]={...o[e],...a}}));const i=ed(e);Object.keys(i).forEach((e=>{ei(i[e],Mt[e]);td(i[e],o[e]);td(i[e],n[e]);td(i[e],n[Mt[e]]);s.appendChild(i[e]);Object.defineProperty(s,Mt[e],{get:()=>i[e]})}));td(s,c);Object.keys(i).forEach((e=>Hl(i[e],"assignment",e)));Object.keys(i).forEach((e=>Hl(i[e],"foldAngle",At[e])));return s};const sd=e=>Math.abs(e)/180;const rd=(e,t={})=>{const n=t&&t.edges?t.edges:{};const s=Cl.g();if(!e){return s}const r=Bt(e);const c=JSON.parse(JSON.stringify(r?Dl:ql));const o=JSON.parse(JSON.stringify(r?Wl:Gl));const a={};if(n.stroke){a.stroke=n.stroke}Object.assign(c,a);Et.forEach((e=>{if(o[e]===undefined){o[e]={}}o[e]={...o[e],...a}}));const i={};Array.from(new Set(Et.map((e=>e.toLowerCase())))).forEach((e=>{const t=Cl.g();s.appendChild(t);ei(t,Mt[e]);td(t,o[e]);td(t,n[Mt[e]]);Object.defineProperty(s,Mt[e],{get:()=>t});i[e]=t}));const f=e.edges_vertices.map((t=>t.map((t=>e.vertices_coords[t])))).map((e=>Cl.line(e[0][0],e[0][1],e[1][0],e[1][1])));if(e.edges_foldAngle){e.edges_foldAngle.forEach(((e,t)=>Hl(f[t],"foldAngle",e)))}if(e.edges_assignment){e.edges_assignment.forEach(((e,t)=>Hl(f[t],"assignment",e)))}if(e.edges_foldAngle){f.forEach(((t,n)=>{const s=e.edges_foldAngle[n];if(s===0||s===180||s===-180){return}t.setAttributeNS(null,"opacity",sd(s))}))}const l=(e.edges_assignment?e.edges_assignment:Ns(e)).map((e=>e.toLowerCase()));f.forEach(((e,t)=>i[l[t]].appendChild(e)));td(s,c);return s};const cd=(e,t)=>Ft(e)?nd(e,t):rd(e,t);const od=e=>e.map((e=>e[0]*e[4]-e[1]*e[3])).map((e=>e>=0));const ad=e=>e.map((e=>e[0]*e[3]-e[1]*e[2])).map((e=>e>=0));const id=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])).map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>(e[1][0]-e[0][0])*(e[1][1]+e[0][1]))).reduce(((e,t)=>e+t),0))).map((e=>e<0));const fd=Object.freeze({__proto__:null,makeFacesWinding:id,makeFacesWindingFromMatrix:od,makeFacesWindingFromMatrix2:ad});const ld=e=>{const t=fn(e.flat());const n=[];t.forEach((e=>{n[e]=[]}));e.forEach((e=>{n[e[1]].push(e[0])}));const s=[];const r={};const c=e=>{if(r[e]){return}r[e]=true;n[e].forEach(c);s.push(e)};t.forEach(c);return s};const dd=Object.freeze({__proto__:null,topologicalSort:ld});const ud=(e,t)=>{const n={};t.forEach((e=>{n[e]=true}));return e.filter((e=>n[e[0]]&&n[e[1]]))};const md=({faceOrders:e,faces_normal:t},n)=>{if(!e||!e.length){return[]}if(!t){throw new Error("linearizeFaceOrders: faces_normal required")}const s=fn(e.flatMap((e=>[e[0],e[1]])));const r=n!==undefined&&s.includes(n)?t[n]:t[s[0]];const c=[];s.forEach((e=>{c[e]=S(t[e],r)>0}));const o=e.map((e=>e[2]===-1^!c[e[1]]?[e[0],e[1]]:[e[1],e[0]]));return ld(o)};const gd=({faces_vertices:e},t)=>{if(!e){return t}const n=e.map(((e,t)=>t)).filter((e=>t[e]==null));return n.concat(lr(t))};const pd=({vertices_coords:e,faces_vertices:t,faceOrders:n,faces_layer:s,faces_normal:r},c)=>{if(!r){r=gs({vertices_coords:e,faces_vertices:t})}if(n){return gd({faces_vertices:t},lr(md({faceOrders:n,faces_normal:r},c)))}if(s){return gd({faces_vertices:t},s)}return t.map(((e,t)=>t)).filter((()=>true))};const _d=({vertices_coords:e,faces_vertices:t,faceOrders:n,faces_normal:s})=>{if(!s){s=gs({vertices_coords:e,faces_vertices:t})}const r=fo(Ms({edges_vertices:n.map((e=>[e[0],e[1]]))}));const c=fr(r);const o=c.map((e=>ud(n,e))).map((e=>md({faceOrders:e,faces_normal:s})));const a=c.map((e=>s[e[0]]));const i=[];o.forEach(((e,t)=>e.forEach(((e,n)=>{i[e]={vector:a[t],layer:n}}))));return i};const hd=({faces_layer:e})=>{const t=[];const n=lr(e);n.forEach(((e,n)=>{t[e]={vector:[0,0,1],layer:n}}));return t};const vd=({vertices_coords:e,faces_vertices:t,faceOrders:n,faces_normal:s})=>{if(!s){s=gs({vertices_coords:e,faces_vertices:t})}return lr(md({faceOrders:n,faces_normal:s}))};const bd=Object.freeze({__proto__:null,faceOrdersSubset:ud,linearize2DFaces:pd,linearizeFaceOrders:md,makeFacesLayer:vd,nudgeFacesWithFaceOrders:_d,nudgeFacesWithFacesLayer:hd});const yd={back:{fill:"white"},front:{fill:"#ddd"}};const Ed={back:{opacity:.1},front:{opacity:.1}};const Md={};const Ad={stroke:"black","stroke-linejoin":"bevel"};const xd={stroke:"none",fill:"black","stroke-linejoin":"bevel"};const wd={fill:"none"};const kd=(e,t,n)=>e.setAttribute(`data-${t}`,n);const Od=(e,t={})=>Object.keys(t).forEach((n=>e.setAttributeNS(null,n,t[n])));const jd=(e,t,n,s={})=>{const r=s&&s.faces?s.faces:{};const c=Bt(e);const o=!!(e.faceOrders||e.faces_layer);const a=[["front"],["back"]];const i=id(e);i.map((e=>e?a[0]:a[1])).forEach(((e,n)=>{ei(t[n],e);kd(t[n],"side",e);Od(t[n],c?o?yd[e]:Ed[e]:Md[e]);Od(t[n],r[e])}));pd(e).forEach((e=>n.appendChild(t[e])));Object.defineProperty(n,"front",{get:()=>t.filter(((e,t)=>i[t]))});Object.defineProperty(n,"back",{get:()=>t.filter(((e,t)=>!i[t]))});Od(n,c?o?Ad:xd:wd);return n};const Fd=(e,t)=>{const n=Cl.g();if(!e||!e.vertices_coords||!e.faces_vertices){return n}const s=e.faces_vertices.map((t=>t.map((t=>[0,1].map((n=>e.vertices_coords[t][n])))))).map((e=>Cl.polygon(e)));s.forEach(((e,t)=>e.setAttributeNS(null,"index",t)));n.setAttributeNS(null,"fill","white");return jd(e,s,n,t)};const Sd=function(e,t){const n=Cl.g();if(!e||"faces_edges"in e===false||"edges_vertices"in e===false||"vertices_coords"in e===false){return n}const s=e["faces_edges"].map((t=>t.map((t=>e["edges_vertices"][t])).map(((e,t,n)=>{const s=n[(t+1)%n.length];return e[1]===s[0]||e[1]===s[1]?e[0]:e[1]})).map((t=>[0,1].map((n=>e["vertices_coords"][t][n])))))).map((e=>Cl.polygon(e)));s.forEach(((e,t)=>e.setAttributeNS(null,"index",t)));n.setAttributeNS(null,"fill","white");return jd(e,s,n,t)};const Cd=(e,t)=>{if(e&&e["faces_vertices"]){return Fd(e,t)}if(e&&e["faces_edges"]){return Sd(e,t)}return Cl.g()};const Vd={fill:"none"};const Pd={stroke:"black",fill:"white"};const Td=(e,t={})=>Object.keys(t).forEach((n=>e.setAttributeNS(null,n,t[n])));const Nd=(e,t={})=>{const n=t&&t.boundaries?t.boundaries:{};const s=Cl.g();if(!e){return s}const r=bo(e).polygon;if(!r.length){return s}const c=Cl.polygon(r);ei(c,"boundary");s.appendChild(c);Td(s,Bt(e)?Vd:Pd);Object.keys(n).forEach((e=>s.setAttributeNS(null,e,n[e])));return s};const zd={vertices:$l,edges:cd,faces:Cd,boundaries:Nd,edgesPaths:nd,edgesLines:rd,facesVerticesPolygon:Fd,facesEdgesPolygon:Sd};const Bd=1/50;const $d={min:[0,0],span:[1,1]};const Rd=["boundaries","faces","edges","vertices"];const Ld=(e,t)=>{for(let n=0;n<e.childNodes.length;n+=1){e.childNodes[n].setAttributeNS(null,"r",t)}};const Id=(e,t,n,s)=>{const r=t[3]&&t[3].childNodes.length;if(!(s.strokeWidth||s.viewBox||r)){return}const c=_o(n)||$d;const o=Math.max(...c.span);const a=Xa(e,"svg");if(a&&s.viewBox){const e=Vl(c);a.setAttributeNS(null,"viewBox",e)}if(a&&s.padding){const e=a.getAttribute("viewBox");if(e!=null){const t=s.padding*o;const n=e.split(" ").map((e=>parseFloat(e)));const r=[-t,-t,t*2,t*2].map(((e,t)=>n[t]+e)).join(" ");a.setAttributeNS(null,"viewBox",r)}}if(s.strokeWidth||s["stroke-width"]){const t=s.strokeWidth?s.strokeWidth:s["stroke-width"];const r=typeof t==="number"?o*t:Bl(n);e.setAttributeNS(null,"stroke-width",r)}if(r){const e=s.vertices&&s.vertices.radius!=null?s.vertices.radius:s.radius;const n=typeof e==="string"?parseFloat(e):e;const r=typeof n==="number"&&!Number.isNaN(n)?o*n:o*Bd;Ld(t[3],r)}};const Ud=(e,t={})=>Rd.map((n=>t[n]===false?Cl.g():zd[n](e,t))).map(((e,t)=>{ei(e,Rd[t]);return e}));const Qd=(e,t,n={})=>{if(!Bt(e)){if(n.faces===undefined){n.faces=false}}const s=Ud(e,n);s.filter((e=>e.childNodes.length>0)).forEach((e=>t.appendChild(e)));Id(t,s,e,n);ei(t,...[e.file_classes||[],e.frame_classes||[]].flat());return t};const Dd=(e,t={})=>{const n=Qd(typeof e==="string"?JSON.parse(e):e,Cl.svg(),{viewBox:true,strokeWidth:true,...t});return t&&t.string?(new(o().XMLSerializer)).serializeToString(n):n};Object.assign(Dd,{...zd,render:Qd,getViewBox:Pl,getStrokeWidth:Bl,boundingBoxToViewBox:Vl});const qd=e=>{const t=["file_title","file_author","file_description","frame_title","frame_author","frame_description"];return t.filter((t=>e[t])).map((t=>`# ${t.split("_")[1]}: ${e[t]}`)).join("\n")};const Wd=e=>{const t=typeof e==="string"?JSON.parse(e):e;const n=qd(t);const s=(t.vertices_coords||[]).map((e=>e.join(" "))).map((e=>`v ${e}`)).join("\n");const r=(t.faces_vertices||[]).map((e=>e.map((e=>e+1)).join(" "))).map((e=>`f ${e}`)).join("\n");const c=[n,s,r].filter((e=>e!=="")).join("\n");return`${c}\n`};const Gd={};Gd.prototype=Object.create(Object.prototype);Gd.prototype.constructor=Gd;Object.entries({clean:mr,validate:io,populate:xc,subgraph:so,boundary:bo,boundingBox:_o,nearest:Dr,splitEdge:Tc,splitFace:eo,invertAssignments:Qt,svg:Dd,obj:Wd,..._r,...Xt}).forEach((([e,t])=>{Gd.prototype[e]=function(){return t(this,...arguments)}}));Gd.prototype.clone=function(){return Object.assign(Object.create(Object.getPrototypeOf(this)),Bo(this))};Gd.prototype.folded=function(){const e=this.faces_matrix2?jo(this,this.faces_matrix2):Po(this,...arguments);return{...this,vertices_coords:e,frame_classes:["foldedForm"]}};Gd.prototype.flatFolded=function(){const e=this.faces_matrix2?jo(this,this.faces_matrix2):To(this,...arguments);return{...this,vertices_coords:e,frame_classes:["foldedForm"]}};const Hd=(e,t,n,s)=>{t.forEach((t=>{e.edges_assignment[t]=n;e.edges_foldAngle[t]=s}));return t};Gd.prototype.setValley=function(e=[],t=180){return Hd(this,e,"V",Math.abs(t))};Gd.prototype.setMountain=function(e=[],t=-180){return Hd(this,e,"M",-Math.abs(t))};Gd.prototype.setFlat=function(e=[]){return Hd(this,e,"F",0)};Gd.prototype.setUnassigned=function(e=[]){return Hd(this,e,"U",0)};Gd.prototype.setCut=function(e=[]){return Hd(this,e,"C",0)};const Jd=Gd.prototype;const Zd=({vector:e,origin:t},{min:n,max:s,span:r})=>tu();const Yd=(e,t,n,s,r=dt,c=a)=>{const o=R(b(e),b(n));if(Math.abs(o)<c){return undefined}const i=R(e,n);const f=-i;const l=j(s,t);const d=D(l);const u=R(l,n)/i;const m=R(d,e)/f;if(r(m,c/g(n))){return u}return undefined};const Xd=(e,t,n)=>w(t,M(e,n));const Kd=(e,t,n,s,r)=>e.map(((e,t,n)=>[j(n[(t+1)%n.length],e),e])).map((e=>Yd(t,n,e[0],e[1],s,r))).filter((e=>e!==undefined)).sort(((e,t)=>e-t));const eu=(e,t,n)=>{let s=0;let r=e.length-1;while(s<r){if(t(e[s+1]-e[s],n)){break}s+=1}while(r>s){if(t(e[r]-e[r-1],n)){break}r-=1}if(s>=r){return undefined}return[e[s],e[r]]};const tu=(e,{vector:t,origin:n},s=ct,r=at,c=a)=>{const o=Kd(e,t,n,dt,c);if(o.length<2){return undefined}const i=c*2/g(t);const f=eu(o,s,i);if(f===undefined){return undefined}const l=e=>{if(r(e)){return e}return e<.5?0:1};const d=f.map(l);if(Math.abs(d[0]-d[1])<c*2/g(t)){return undefined}const u=Xd(t,n,(d[0]+d[1])/2);return Tr(e,u,s,c)?d.map((e=>Xd(t,n,e))):undefined};const nu=(e,t,n=a)=>{const s=(e,t,s)=>(s[0]-t[0])*(e[1]-t[1])>(s[1]-t[1])*(e[0]-t[0])+n;const r=(e,t,n,s)=>{const r=j(e,t);const c=j(s,n);const o=R(e,t);const a=R(s,n);const i=1/R(r,c);return M(j(M(c,o),M(r,a)),i)};let c=e;let o=t[t.length-1];for(let e=0;e<t.length;e+=1){const n=t[e];const a=c;c=[];let i=a[a.length-1];for(let e=0;e<a.length;e+=1){const t=a[e];if(s(t,o,n)){if(!s(i,o,n)){c.push(r(o,n,t,i))}c.push(t)}else if(s(i,o,n)){c.push(r(o,n,t,i))}i=t}o=n}return c.length===0?undefined:c};const su=Object.freeze({__proto__:null,clipLineConvexPolygon:tu,clipLineInBoundingBox:Zd,clipPolygonPolygon:nu});const ru=(e,{vector:t,origin:n},s)=>{if(e.length<2){return e}const r=e.map((e=>j(e[1],e[0]))).map((e=>C(e,t)<s));e.map(((e,t)=>t)).filter((e=>r[e])).forEach((t=>{e[t]=[e[t][1],e[t][0]]}));const c=b(t);const o=e.map((e=>e.map((e=>C(j(e,n),c))))).sort(((e,t)=>e[0]-t[0]));const a=[[o[0][0],o[0][1]]];for(let e=1;e<o.length;e+=1){const t=o[e];if(t[0]-s<a[a.length-1][1]+s){a[a.length-1][1]=Math.max(t[1],a[a.length-1][1])}else{a.push([t])}}return a.map((e=>e.map((e=>w(n,M(c,e))))))};const cu=(e,t,n,s=at,r=a)=>{const c=t.map((t=>e.faces_vertices[t].map((t=>e.vertices_coords[t])))).map((e=>tu(e,n,ct,s,r))).filter((e=>e!==undefined));return ru(c,n,r)};const ou=(e,t,n=a)=>{const s=Jc(e,t,n);return cu(e,s,t,at,n)};const au=(e,t,n=a)=>{const s=Zc(e,t,n);return cu(e,s,t,ft,n)};const iu=(e,t,n=a)=>{const s=j(t[1],t[0]);const r=t[0];const c=Yc(e,t,n);return cu(e,c,{vector:s,origin:r},dt,n)};const fu=Object.freeze({__proto__:null,clipLine:ou,clipRay:au,clipSegment:iu});const lu=({vertices_coords:e},{vector:t,origin:n},s=a)=>{const r=v(t);const c=e=>{const t=O(e,n);const c=m(t);if(Math.abs(c)<s){return true}const o=t.map((e=>e/c));const a=Math.abs(S(o,r));return Math.abs(1-a)<s};return e.map(c).map(((e,t)=>({a:e,i:t}))).filter((e=>e.a)).map((e=>e.i))};const du=Object.freeze({__proto__:null,getVerticesCollinearToLine:lu});const uu=({vertices_coords:e,edges_vertices:t,vertices_edges:n},{vector:s,origin:r},c=a)=>{if(!n){n=hs({edges_vertices:t})}const o=lu({vertices_coords:e},{vector:s,origin:r},c);const i=t.map((()=>0));o.forEach((e=>n[e].forEach((e=>{i[e]+=1}))));return i.map(((e,t)=>({count:e,i:t}))).filter((e=>e.count===2)).map((e=>e.i))};const mu=({vertices_coords:e,edges_vertices:t},{min:n,max:s},r=a)=>{const c=$s({vertices_coords:e,edges_vertices:t});const o=n.map((e=>e-r));const i=s.map((e=>e+r));return t.map(((e,t)=>t)).filter((e=>!(c[e][0][0]<o[0]&&c[e][1][0]<o[0]))).filter((e=>!(c[e][0][0]>i[0]&&c[e][1][0]>i[0]))).filter((e=>!(c[e][0][1]<o[1]&&c[e][1][1]<o[1]))).filter((e=>!(c[e][0][1]>i[1]&&c[e][1][1]>i[1])))};const gu=({vertices_coords:e,edges_vertices:t},n,s,r=a)=>{const c=et([n,s]);const o=j(s,n);const i={vector:o,origin:n};const f=mu({vertices_coords:e,edges_vertices:t},c,r);const l=[];f.forEach((n=>{const s=t[n].map((t=>e[t]));const c=j(s[1],s[0]);const o={vector:c,origin:s[0]};const a=Wr(i,o,dt,dt,r).point;if(!a){return}l[n]=a}));return l};const pu=({vertices_coords:e,edges_vertices:t},{vector:n,origin:s},r=a,c=dt)=>t.map((t=>{const o=t.map((t=>e[t]));const a=j(o[1],o[0]);const i={vector:a,origin:o[0]};return Wr({vector:n,origin:s},i,at,c,r).point}));const _u=Object.freeze({__proto__:null,getEdgesCollinearToLine:uu,getEdgesLineIntersection:pu,getEdgesRectOverlap:mu,getEdgesSegmentIntersection:gu});const hu=(e,t,n=a)=>{if(!e.vertices_coords){e.vertices_coords=[]}if(typeof t[0]==="number"){t=[t]}const s=t.map((t=>e.vertices_coords.map((e=>I(e,t)<n)).map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined)).shift()));let r=e.vertices_coords.length;const c=t.filter(((e,t)=>s[t]===undefined));e.vertices_coords.push(...c);return s.map((e=>e===undefined?r++:e))};const vu=(e,t,n)=>{const s=Array.from(Array(t.length-1)).map(((e,n)=>[t[n],t[n+1]]));const r=s.map((e=>e.join(" "))).map((e=>n[e]===undefined));const c=s.filter(((e,t)=>r[t]));const o=Array.from(Array(c.length)).map(((t,n)=>e.edges_vertices.length+n));o.forEach(((t,n)=>{e.edges_vertices[t]=c[n]}));if(e.edges_assignment){o.forEach((t=>{e.edges_assignment[t]="U"}))}if(e.edges_foldAngle){o.forEach((t=>{e.edges_foldAngle[t]=0}))}for(let n=0;n<t.length;n+=1){const s=t[n];const c=r[n-1]?t[n-1]:undefined;const o=r[n]?t[n+1]:undefined;const a=[c,o].filter((e=>e!==undefined));const i=e.vertices_vertices[s]?e.vertices_vertices[s]:[];const f=i.concat(a);e.vertices_vertices[s]=ds(e,f,t[n])}const a=ws(e);for(let n=0;n<t.length;n+=1){const s=t[n];e.vertices_edges[s]=e.vertices_vertices[s].map((e=>a[`${s} ${e}`]))}t.map((t=>e.vertices_vertices[t].length===1?[l]:Gn(e.vertices_vertices[t].map((n=>j(e.vertices_coords[n],e.vertices_coords[t])))))).forEach(((n,s)=>{e.vertices_sectors[t[s]]=n}));return o};const bu=(e,t,n,s=a)=>{if(!e.vertices_sectors){e.vertices_sectors=Fs(e)}const r=[t,n].map((e=>[e[0],e[1]]));const c=j(r[1],r[0]);const o=gu(e,r[0],r[1],s);const i=o.map(((e,t)=>t)).filter(at);const f={};i.forEach((t=>e.edges_faces[t].forEach((e=>{f[e]=true}))));const l=Object.keys(f).map((e=>parseInt(e,10))).sort(((e,t)=>e-t));const d=i.reverse().map((t=>Tc(e,t,o[t],s)));const u=d.map((e=>e.vertex));const m=hu(e,r,s);const g={};u.forEach((e=>{g[e]=true}));m.forEach((e=>{g[e]=true}));const p=Object.keys(g).map((e=>parseInt(e,10)));const _=us(e,p,c);const h=ws(e);const v=vu(e,_,h);v.forEach((t=>{const n=e.edges_vertices[t];h[`${n[0]} ${n[1]}`]=t;h[`${n[1]} ${n[0]}`]=t}));const b=_.map((t=>e.vertices_vertices[t].map((e=>[[e,t],[t,e]])))).reduce(((e,t)=>e.concat(t)),[]).reduce(((e,t)=>e.concat(t)),[]);const y={};const E=b.map((t=>es(e,t[0],t[1],y))).filter((e=>e!==undefined));const M=ns(E);En(e,"faces",l);const A=M.map(((t,n)=>e.faces_vertices.length+n));if(e.faces_vertices){A.forEach(((t,n)=>{e.faces_vertices[t]=M[n].vertices}))}if(e.faces_edges){A.forEach(((t,n)=>{e.faces_edges[t]=M[n].edges.map((e=>h[e]))}))}if(e.faces_angles){A.forEach(((t,n)=>{e.faces_angles[t]=M[n].faces_angles}))}if(e.vertices_faces){e.vertices_faces=xs(e)}if(e.edges_faces){e.edges_faces=Cs(e)}if(e.faces_faces){e.faces_faces=qs(e)}if(e.vertices_coords.length!==e.vertices_vertices.length||e.vertices_coords.length!==e.vertices_edges.length||e.vertices_coords.length!==e.vertices_faces.length){console.warn("vertices mismatch",JSON.parse(JSON.stringify(e)))}if(e.edges_vertices.length!==e.edges_faces.length||e.edges_vertices.length!==e.edges_assignment.length){console.warn("edges mismatch",JSON.parse(JSON.stringify(e)))}if(e.faces_vertices.length!==e.faces_edges.length||e.faces_vertices.length!==e.faces_faces.length){console.warn("faces mismatch",JSON.parse(JSON.stringify(e)))}return v};const yu=({vertices_vertices:e},t)=>{const n=[t[1],t[0]];t.map(((t,s)=>e[t].indexOf(n[s]))).forEach(((n,s)=>e[t[s]].splice(n,1)))};const Eu=({vertices_edges:e},t,n)=>{n.map(((n,s)=>e[n].indexOf(t))).forEach(((t,s)=>e[n[s]].splice(t,1)))};const Mu=(e,t,n,s)=>{const r=t.map((t=>e.faces_edges[t].indexOf(n)));const c=[];t.forEach(((t,n)=>e.faces_vertices[t].forEach(((e,t,r)=>{const o=r[(t+1)%r.length];if(e===s[0]&&o===s[1]||e===s[1]&&o===s[0]){c[n]=t}}))));if(c[0]===undefined||c[1]===undefined){console.warn("removePlanarEdge error joining faces")}const o=t.map((t=>e.faces_edges[t].length));const a=t.map((t=>e.faces_vertices[t].length));const i=o.map((e=>e-1));const f=a.map((e=>e-1));const l=r.map(((e,t)=>(e+1)%o[t]));const d=c.map(((e,t)=>(e+1)%a[t]));const u=t.map(((t,n)=>Array.from(Array(i[n])).map(((e,t)=>(l[n]+t)%o[n])).map((n=>e.faces_edges[t][n]))));const m=t.map(((t,n)=>Array.from(Array(f[n])).map(((e,t)=>(d[n]+t)%a[n])).map((n=>e.faces_vertices[t][n]))));const g=t.map((t=>e.faces_faces[t])).reduce(((e,t)=>e.concat(t)),[]).filter((e=>e!==t[0]&&e!==t[1]));return{vertices:m[0].concat(m[1]),edges:u[0].concat(u[1]),faces:g}};const Au=(e,t)=>{const n=[...e.edges_vertices[t]].sort(((e,t)=>t-e));const s=[...e.edges_faces[t]];yu(e,n);Eu(e,t,n);const r=n.map((t=>e.vertices_vertices[t].length===0));const c=n.filter(((e,t)=>r[t]));if(s.length===2&&s[0]!==s[1]){const r=e.faces_vertices.length;const c=Mu(e,s,t,n);e.faces_vertices.push(c.vertices);e.faces_edges.push(c.edges);e.faces_faces.push(c.faces);e.vertices_faces.forEach(((t,n)=>{let c=false;t.forEach(((o,a)=>{if(o===s[0]||o===s[1]){e.vertices_faces[n][a]=r;const s=c?[n,1]:[n,1,r];t.splice(...s);c=true}}))}));e.edges_faces.forEach(((t,n)=>t.forEach(((t,c)=>{if(t===s[0]||t===s[1]){e.edges_faces[n][c]=r}}))));e.faces_faces.forEach(((t,n)=>t.forEach(((t,c)=>{if(t===s[0]||t===s[1]){e.faces_faces[n][c]=r}}))));e.faces_vertices.forEach((t=>t.forEach((t=>{if(t===undefined){console.log("FOUND ONE before remove",e.faces_vertices)}}))));En(e,"faces",s)}if(s.length===2&&s[0]===s[1]&&c.length){const n=s[0];e.faces_vertices[n]=e.faces_vertices[n].filter((e=>!c.includes(e))).filter(((e,t,n)=>e!==n[(t+1)%n.length]));e.faces_edges[n]=e.faces_edges[n].filter((e=>e!==t))}En(e,"edges",[t]);En(e,"vertices",c)};const xu=(e,t)=>{const n=e.vertices_edges[t];const s=fn(e.vertices_faces[t].filter((e=>e!=null)));if(n.length!==2||s.length>2){console.warn("cannot remove non 2-degree vertex yet (e,f)",n,s);return}const r=mc(e,t,n);const c=r.slice().reverse();n.sort(((e,t)=>e-t));r.forEach((t=>{const s=e.vertices_edges[t].indexOf(n[1]);if(s===-1){return}e.vertices_edges[t][s]=n[0]}));r.forEach(((n,s)=>{const r=e.vertices_vertices[n].indexOf(t);if(r===-1){console.warn("removePlanarVertex unknown vertex issue");return}e.vertices_vertices[n][r]=c[s]}));e.edges_vertices[n[0]]=[...r];s.forEach((n=>{const s=e.faces_vertices[n].indexOf(t);if(s===-1){console.warn("removePlanarVertex unknown face_vertex issue");return}e.faces_vertices[n].splice(s,1)}));s.forEach((t=>{const s=e.faces_edges[t].indexOf(n[1]);if(s===-1){console.warn("removePlanarVertex unknown face_edge issue");return}e.faces_edges[t].splice(s,1)}));En(e,"vertices",[t]);En(e,"edges",[n[1]])};const wu=e=>[0,1].map((t=>e.filter(((e,n)=>n%2===t)).reduce(((e,t)=>e+t),0)));const ku=e=>{const t=e.reduce(((e,t)=>e+t),0)/2;return wu(e).map((e=>e-t))};const Ou=e=>e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>Nn(...e))).map(((e,t,n)=>n.slice(t+1,n.length).concat(n.slice(0,t)))).map((e=>wu(e).map((e=>Math.PI-e)))).map(((t,n)=>e[n]+t[0])).map(((t,n)=>Pn(t,e[n],e[(n+1)%e.length])?t:undefined));const ju=e=>{const t=e.map((e=>Math.atan2(e[1],e[0])));return Ou(t).map((e=>e===undefined?undefined:[Math.cos(e),Math.sin(e)]))};const Fu=({vertices_coords:e,vertices_edges:t,edges_assignment:n,edges_vertices:s},r)=>{if(!t){t=hs({edges_vertices:s})}const c=n?t[r].filter((e=>xt[n[e]])):t[r];if(c.length%2===0){return[]}const o=c.map((e=>s[e][0]===r?s[e]:[s[e][1],s[e][0]]));const a=o.map((t=>t.map((t=>e[t]))));const i=a.map((e=>j(e[1],e[0])));const f=qn(i).map((e=>i[e]));const l=ju(f);const d=f.map(b);const u=l.filter((e=>e!==undefined)).filter((e=>!d.map((t=>C(e,t))).map((e=>Math.abs(1-e)<.001)).reduce(((e,t)=>e||t),false)));return u};const Su=Object.freeze({__proto__:null,alternatingSum:wu,alternatingSumDifference:ku,kawasakiSolutions:Fu,kawasakiSolutionsRadians:Ou,kawasakiSolutionsVectors:ju});const Cu=({vertices_edges:e,edges_assignment:t})=>e.map((e=>e.map((e=>!xt[t[e]])).reduce(((e,t)=>e&&t),true))).map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined));const Vu=({edges_vertices:e,vertices_edges:t,edges_assignment:n})=>{if(!t){t=hs({edges_vertices:e})}const s=t.map((e=>e.map((e=>At[n[e]])).filter((e=>e!==0)).map(Math.sign).reduce(((e,t)=>e+t),0))).map((e=>e===2||e===-2));ho({edges_vertices:e,edges_assignment:n}).forEach((e=>{s[e]=true}));Cu({vertices_edges:t,edges_assignment:n}).forEach((e=>{s[e]=true}));return s.map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined))};const Pu=({vertices_coords:e,vertices_vertices:t,vertices_edges:n,edges_vertices:s,edges_assignment:r},c=a)=>{if(!t){t=Es({vertices_coords:e,vertices_edges:n,edges_vertices:s})}if(!n){n=hs({edges_vertices:s})}const o=js({vertices_coords:e,vertices_vertices:t,edges_vertices:s}).map(((e,t)=>e.filter(((e,s)=>xt[r[n[t][s]]])))).map((e=>e.length>1?Gn(e):[0,0])).map((e=>wu(e))).map((e=>Math.abs(e[0]-e[1])<c));ho({edges_vertices:s,edges_assignment:r}).forEach((e=>{o[e]=true}));Cu({vertices_edges:n,edges_assignment:r}).forEach((e=>{o[e]=true}));return o.map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined))};const Tu=Object.freeze({__proto__:null,validateKawasaki:Pu,validateMaekawa:Vu});const Nu={};Nu.prototype=Object.create(Jd);Nu.prototype.constructor=Nu;const zu=function(e){e.valley=t=>this.setValley(e,t);e.mountain=t=>this.setMountain(e,t);e.flat=()=>this.setFlat(e);e.unassigned=()=>this.setUnassigned(e);e.cut=()=>this.setCut(e);return e};Nu.prototype.line=function(...e){const t=Ie(...e);if(!t){return undefined}const n=ou(this,t);const s=n.flatMap((e=>bu(this,e[0],e[1])));return zu.call(this,s)};Nu.prototype.ray=function(...e){const t=Ie(...e);if(!t){return undefined}const n=au(this,t);const s=n.flatMap((e=>bu(this,e[0],e[1])));return zu.call(this,s)};Nu.prototype.segment=function(...e){const t=Re(...e);if(!t){return undefined}const n=iu(this,t);const s=n.flatMap((e=>bu(this,e[0],e[1])));return zu.call(this,s)};Nu.prototype.polygon=function(...e){const t=$e(...e);if(!t){return undefined}const n=t.map(((e,t,n)=>[e,n[(t+1)%n.length]]));const s=n.flatMap((e=>iu(this,e)));const r=s.flatMap((e=>bu(this,e[0],e[1])));return zu.call(this,r)};Nu.prototype.removeEdge=function(e){const t=this.edges_vertices[e];Au(this,e);t.map((e=>pc(this,e))).map(((e,n)=>e?t[n]:undefined)).filter((e=>e!==undefined)).sort(((e,t)=>t-e)).forEach((e=>xu(this,e)));return true};Nu.prototype.validate=function(e){const t=io(this,e);t.vertices.kawasaki=Pu(this,e);t.vertices.maekawa=Vu(this);if(this.edges_foldAngle){t.edges.not_flat=this.edges_foldAngle.map(((e,t)=>jt(e)?undefined:t)).filter((e=>e!==undefined))}if(t.summary==="valid"){if(t.vertices.kawasaki.length||t.vertices.maekawa.length){t.summary="invalid"}else if(t.edges.not_flat.length){t.summary="not flat"}}return t};Nu.prototype.defer=false;const Bu=Nu.prototype;const $u=(e,t)=>{const n=[];const s=e.map(((e,t)=>t));const r=s.filter((e=>t[e]));const c=s.filter((e=>!t[e]));c.sort(((t,n)=>e[t]-e[n])).forEach(((e,t)=>{n[e]=t}));r.sort(((t,n)=>e[n]-e[t])).forEach(((e,t)=>{n[e]=c.length+t}));return n};const Ru=(e,t,n,s=a)=>{const r=Ir(e,t);if(r.length===0){return undefined}if(r.length===1){return r[0]}return r[0]};const Lu=(e,t,n,s)=>{const r=j(n,t);const c=R(e,r);return s?c>0:c<0};const Iu=(e,t)=>!e.faces_vertices[t]?[0,0]:e.faces_vertices[t].map((t=>e.vertices_coords[t])).reduce(((e,t)=>[e[0]+t[0],e[1]+t[1]]),[0,0]).map((n=>n/e.faces_vertices[t].length));const Uu={F:true,f:true,U:true,u:true};const Qu={M:"V",m:"V",V:"M",v:"M"};const Du=e=>Qu[e]||e;const qu=(e,t)=>({center:e.faces_center[t],matrix:e.faces_matrix2[t],winding:e.faces_winding[t],crease:e.faces_crease[t],side:e.faces_side[t],layer:e.faces_layer[t]});const Wu=(e,{vector:t,origin:n},s="V",r=a)=>{const c=Du(s);xc(e);if(!e.faces_layer){e.faces_layer=Array(e.faces_vertices.length).fill(0)}e.faces_center=e.faces_vertices.map(((t,n)=>Iu(e,n)));if(!e.faces_matrix2){e.faces_matrix2=Co(e,Ru(e,n,t,r))}e.faces_winding=ad(e.faces_matrix2);e.faces_crease=e.faces_matrix2.map(fe).map((e=>oe(e,t,n)));e.faces_side=e.faces_vertices.map(((t,n)=>Lu(e.faces_crease[n].vector,e.faces_crease[n].origin,e.faces_center[n],e.faces_winding[n])));const o=jo(e,e.faces_matrix2);const i=uu({vertices_coords:o,edges_vertices:e.edges_vertices},{vector:t,origin:n},r).filter((t=>Uu[e.edges_assignment[t]]));i.map((t=>e.edges_faces[t].find((e=>e!=null)))).map((t=>e.faces_winding[t])).map((e=>e?s:c)).forEach(((t,n)=>{e.edges_assignment[i[n]]=t;e.edges_foldAngle[i[n]]=kt(t)}));const f=qu(e,0);const l=e.faces_vertices.map(((e,t)=>t)).reverse().map((t=>{const n=qu(e,t);const o=eo(e,t,n.crease,r);if(o===undefined){return undefined}e.edges_assignment[o.edges.new]=n.winding?s:c;e.edges_foldAngle[o.edges.new]=kt(e.edges_assignment[o.edges.new]);const a=o.faces.map[o.faces.remove];a.forEach((t=>{e.faces_center[t]=Iu(e,t);e.faces_side[t]=Lu(n.crease.vector,n.crease.origin,e.faces_center[t],n.winding);e.faces_layer[t]=n.layer}));return o})).filter((e=>e!==undefined));const d=cr(...l.map((e=>e.faces.map)));const u=cr(...l.map((e=>e.edges.map)).filter((e=>e!==undefined)));const m=l.map((e=>e.faces.remove)).reverse();e.faces_layer=$u(e.faces_layer,e.faces_side);const g=d&&d[0]&&d[0].length===2;const p=g?d[0].filter((t=>e.faces_side[t])).shift():0;let _=f.matrix;if(s!==c){_=!g&&!e.faces_side[0]?f.matrix:ae(f.matrix,ge(f.crease.vector,f.crease.origin))}e.faces_matrix2=Co(e,p).map((e=>ae(_,e)));delete e.faces_center;delete e.faces_winding;delete e.faces_crease;delete e.faces_side;return{faces:{map:d,remove:m},edges:{map:u}}};const Gu={};Gu.prototype=Object.create(Jd);Gu.prototype.constructor=Gu;Gu.prototype.flatFold=function(){Wu(this,Ie(arguments));return this};const Hu=Gu.prototype;const Ju=1.1;const Zu="Rabbit Ear";const Yu=(e,t)=>[[0,0],[e,0],[e,t],[0,t]];const Xu=e=>xc({vertices_coords:e,edges_vertices:e.map(((e,t,n)=>[t,(t+1)%n.length])),edges_assignment:Array(e.length).fill("B")});const Ku=(e=1)=>Xu(Yu(e,e));const em=(e=1,t=1)=>Xu(Yu(e,t));const tm=(e=3,t=1)=>Xu(qe(e,t));const nm=()=>xc({vertices_coords:[[0,0],[1,0],[1,Math.SQRT2-1],[1,1],[Math.SQRT2-1,1],[0,1]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,2],[0,4],[0,3]],edges_assignment:Array.from("BBBBBBVVF")});const sm=()=>xc({vertices_coords:[[0,0],[Math.SQRT1_2,0],[1,0],[1,1-Math.SQRT1_2],[1,1],[1-Math.SQRT1_2,1],[0,1],[0,Math.SQRT1_2],[.5,.5],[Math.SQRT1_2,1-Math.SQRT1_2],[1-Math.SQRT1_2,Math.SQRT1_2]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[9,0],[9,2],[9,4],[10,0],[10,6],[10,4],[9,1],[10,7],[9,3],[10,5],[8,0],[8,9],[8,4],[8,10]],edges_assignment:Array.from("BBBBBBBBVVVVVVMMFFFFFF")});const rm=()=>xc({vertices_coords:[[0,0],[.5,0],[1,0],[1,.5],[1,1],[.5,1],[0,1],[0,.5],[.5,.5],[.5,(Math.SQRT2-1)/2],[(3-Math.SQRT2)/2,.5],[.5,(3-Math.SQRT2)/2],[(Math.SQRT2-1)/2,.5],[Math.SQRT1_2/2,Math.SQRT1_2/2],[1-Math.SQRT1_2/2,1-Math.SQRT1_2/2]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[0,9],[9,2],[2,10],[10,4],[4,11],[11,6],[6,12],[12,0],[1,9],[9,8],[3,10],[10,8],[5,11],[11,8],[7,12],[12,8],[2,8],[6,8],[0,13],[13,8],[13,9],[13,12],[4,14],[14,8],[14,10],[14,11]],edges_assignment:Array.from("BBBBBBBBVVVVVVVVMVMVMVMVMMFFFFFFFF")});const cm=()=>xc({vertices_coords:[[0,1],[0,Math.SQRT1_2],[0,.5],[0,1-Math.SQRT1_2],[0,0],[.5,.5],[1,1],[(1-Math.SQRT1_2)/2,Math.SQRT1_2/2],[Math.SQRT1_2/2,(1-Math.SQRT1_2)/2],[1-Math.SQRT1_2,0],[.5,0],[Math.SQRT1_2,0],[1,0],[.5,(1-Math.SQRT1_2)/2],[1-Math.SQRT1_2/2,(1-Math.SQRT1_2)/2],[(1-Math.SQRT1_2)/2,1-Math.SQRT1_2/2],[(1-Math.SQRT1_2)/2,.5],[(1+Math.SQRT1_2)/2,1-Math.SQRT1_2/2],[1,Math.SQRT1_2],[Math.SQRT1_2,1],[1-Math.SQRT1_2/2,(1+Math.SQRT1_2)/2],[Math.SQRT1_2/2,(1+Math.SQRT1_2)/2],[.5,1],[1,.5],[(1+Math.SQRT1_2)/2,Math.SQRT1_2/2],[.5,(1+Math.SQRT1_2)/2],[(1+Math.SQRT1_2)/2,.5],[1-Math.SQRT1_2,1],[1,1-Math.SQRT1_2]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[4,7],[4,8],[4,9],[9,10],[10,11],[11,12],[8,13],[13,14],[15,16],[16,7],[3,7],[7,5],[5,17],[17,18],[19,20],[20,5],[5,8],[8,9],[2,15],[14,10],[21,22],[23,24],[10,8],[7,2],[12,14],[0,15],[22,25],[25,5],[5,13],[13,10],[2,16],[16,5],[5,26],[26,23],[6,17],[6,20],[11,14],[14,5],[5,21],[21,27],[28,24],[24,5],[5,15],[15,1],[12,5],[5,0],[20,25],[25,21],[24,26],[26,17],[12,24],[0,21],[12,28],[28,23],[23,18],[18,6],[6,19],[19,22],[22,27],[27,0],[22,20],[17,23]],edges_assignment:Array.from("BBBBFFVVBBBBMMMMFVVFFVVFVVVVVVVVVMMVVMMVVVFVVFFVVFMMMMMMVVBBBBBBBBVV")});const om=()=>xc({vertices_coords:[[0,0],[.25,0],[.5,0],[.75,0],[1,0],[0,1],[0,.75],[0,.5],[0,.25],[.25,.25],[.5,.5],[.75,.75],[1,1],[.25,1],[.25,.75],[.25,.5],[1,.25],[.75,.25],[.5,.25],[.5,1],[1,.5],[.5,.75],[.75,.5],[.75,1],[1,.75]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[5,6],[6,7],[7,8],[8,0],[0,9],[9,10],[10,11],[11,12],[13,14],[14,15],[15,9],[9,1],[16,17],[17,18],[18,9],[9,8],[7,14],[14,19],[20,17],[17,2],[2,9],[9,7],[19,21],[21,10],[10,18],[18,2],[20,22],[22,10],[10,15],[15,7],[4,17],[17,10],[10,14],[14,5],[23,11],[11,22],[22,17],[17,3],[6,14],[14,21],[21,11],[11,24],[12,23],[23,19],[19,13],[13,5],[4,16],[16,20],[20,24],[24,12],[19,11],[11,20]],edges_assignment:Array.from("BBBBBBBBVFFVFVVFFVVFMFMFMFFFFFFFFFVFFVFVVFFVVFBBBBBBBBMF")});const am=()=>xc({vertices_coords:[[0,0],[2-Math.SQRT2,0],[1,0],[0,1],[0,2-Math.SQRT2],[.5,.5],[Math.SQRT1_2,Math.SQRT1_2],[1,1],[Math.SQRT1_2,1-Math.SQRT1_2],[1,Math.SQRT2-1],[1-Math.SQRT1_2,Math.SQRT1_2],[Math.SQRT2-1,1],[Math.SQRT1_2,1],[1,Math.SQRT1_2]],edges_vertices:[[0,1],[1,2],[3,4],[4,0],[0,5],[5,6],[6,7],[0,8],[8,9],[0,10],[10,11],[8,1],[10,4],[8,6],[6,12],[3,10],[10,5],[5,8],[8,2],[10,6],[6,13],[7,12],[12,11],[11,3],[11,6],[6,9],[2,9],[9,13],[13,7]],edges_assignment:Array.from("BBBBFFFVFVFMMVVVFFVVVBBBMMBBB")});const im=Object.freeze({__proto__:null,base1:am,bird:rm,fish:sm,frog:cm,kite:nm,polygon:tm,rectangle:em,square:Ku,windmill:om});const fm=(...e)=>xc(Object.assign(Object.create(Jd),{...e.reduce(((e,t)=>({...e,...t})),{}),file_spec:Ju,file_creator:Zu}));const lm=(...e)=>xc(Object.assign(Object.create(Bu),{...e.length?e.reduce(((e,t)=>({...e,...t})),{}):Ku(),file_spec:Ju,file_creator:Zu,frame_classes:["creasePattern"]}));const dm=(...e)=>xc(Object.assign(Object.create(Hu),{...e.length?e.reduce(((e,t)=>({...e,...t})),{}):Ku(),file_spec:Ju,file_creator:Zu,frame_classes:["foldedForm"]}));fm.prototype=Jd;fm.prototype.constructor=fm;lm.prototype=Bu;lm.prototype.constructor=lm;dm.prototype=Hu;dm.prototype.constructor=dm;Object.keys(im).forEach((e=>{fm[e]=(...t)=>fm(im[e](...t));lm[e]=(...t)=>lm(im[e](...t));dm[e]=(...t)=>dm(im[e](...t))}));const um=(e,t)=>{const n=R(e.normal,t.normal);if(Math.abs(n)<a){return undefined}const s=e.distance*t.normal[1]-t.distance*e.normal[1];const r=t.distance*e.normal[0]-e.distance*t.normal[0];return[s/n,r/n]};const mm=(e,t)=>{const n=b(q(j(t,e)));return[{normal:n,distance:C(w(e,t),n)/2}]};const gm=(e,t)=>{const n=b(j(t,e));return[{normal:n,distance:C(w(e,t),n)/2}]};const pm=(e,t)=>{const n=um(e,t);return n===undefined?[{normal:e.normal,distance:(e.distance+t.distance*C(e.normal,t.normal))/2}]:[w,j].map((n=>b(n(e.normal,t.normal)))).map((e=>({normal:e,distance:C(n,e)})))};const _m=(e,t)=>{const n=q(e.normal);const s=C(t,n);return[{normal:n,distance:s}]};const hm=(e,t,n)=>{const s=C(t,e.normal);const r=e.distance-s;const c=U(t,n);if(r>c){return[]}const o=Math.sqrt(c*c-r*r);const i=M(e.normal,r);const f=w(t,i);const l=M(q(e.normal),o);const d=o<a?[f]:[w(f,l),j(f,l)];return d.map((e=>b(j(n,e)))).map((e=>({normal:e,distance:C(t,e)})))};const vm=e=>e<0?-((-e)**(1/3)):e**(1/3);const bm=(e,t,n,s,r)=>{switch(e){case 1:return[-r/s];case 2:{const e=s**2-4*n*r;if(e<-a){return[]}const t=-s/(2*n);if(e<a){return[t]}const c=Math.sqrt(e)/(2*n);return[t+c,t-c]}case 3:{const e=n/t;const c=s/t;const o=r/t;const i=(3*c-e**2)/9;const f=(9*e*c-27*o-2*e**3)/54;const l=i**3+f**2;const d=-e/3;if(l>0){const e=Math.sqrt(l);const t=vm(f+e);const n=vm(f-e);return[d+t+n]}if(Math.abs(l)<a){const e=f**(1/3);if(f<0){return[]}return[d+2*e,d-e]}const u=Math.sqrt(-l);const m=Math.atan2(u,f)/3;const g=(f**2-l)**(1/6);const p=g*Math.cos(m);const _=g*Math.sin(m);return[d+2*p,d-p-Math.sqrt(3)*_,d-p+Math.sqrt(3)*_]}default:return[]}};const ym=(e,t,n,s)=>{if(Math.abs(1-C(e.normal,n)/e.distance)<.02){return[]}const r=q(e.normal);const c=j(w(n,M(e.normal,e.distance)),M(s,2));const o=j(M(e.normal,e.distance),n);const i=C(s,t.normal)-t.distance;const f=2*C(o,r);const l=C(o,o);const d=C(w(c,o),r);const u=C(c,o);const m=C(r,t.normal);const g=C(o,t.normal);const p=m;const _=i+d*m+g;const h=i*f+u*m+d*g;const v=i*l+u*g;let y=0;if(Math.abs(h)>a){y=1}if(Math.abs(_)>a){y=2}if(Math.abs(p)>a){y=3}return bm(y,p,_,h,v).map((t=>w(M(e.normal,e.distance),M(r,t)))).map((e=>({p:e,normal:b(j(e,n))}))).map((e=>({normal:e.normal,distance:C(e.normal,T(e.p,n))})))};const Em=(e,t,n)=>{const s=q(e.normal);const r=C(s,t.normal);if(Math.abs(r)<a){return undefined}const c=C(n,s);const o=C(n,t.normal);const i=(t.distance+2*c*r-o)/(2*r);return[{normal:s,distance:i}]};const Mm=(e,...t)=>[null,mm,gm,pm,_m,hm,ym,Em][e](...t);const Am=Object.freeze({__proto__:null,normalAxiom:Mm,normalAxiom1:mm,normalAxiom2:gm,normalAxiom3:pm,normalAxiom4:_m,normalAxiom5:hm,normalAxiom6:ym,normalAxiom7:Em});const xm=(e,t)=>[{vector:b(j(...X(t,e))),origin:e}];const wm=(e,t)=>[{vector:b(q(j(...X(t,e)))),origin:T(e,t)}];const km=(e,t)=>Ar(e,t);const Om=(e,t)=>[{vector:q(b(e.vector)),origin:t}];const jm=(e,t,n)=>(Gr({radius:U(t,n),origin:t},e)||[]).map((e=>({vector:b(q(j(...X(e,n)))),origin:T(n,e)})));const Fm=(e,t,n,s)=>ym(Sn(e),Sn(t),n,s).map(Cn);const Sm=(e,t,n)=>{const s=Wr(e,{vector:t.vector,origin:n},at,at).point;return s===undefined?[]:[{vector:b(q(j(...X(s,n)))),origin:T(n,s)}]};const Cm=(e,...t)=>[null,xm,wm,km,Om,jm,Fm,Sm][e](...t);const Vm=Object.freeze({__proto__:null,axiom:Cm,axiom1:xm,axiom2:wm,axiom3:km,axiom4:Om,axiom5:jm,axiom6:Fm,axiom7:Sm});const Pm=(e,t)=>{const n=ge(e.vector,e.origin);return ce(n,t)};const Tm=(e,t,n,s)=>[[n,s].map((t=>Tr(e,t,ct))).reduce(((e,t)=>e&&t),true)];const Nm=Tm;const zm=(e,t,n,s)=>{const r=[n,s].map((t=>tu(e,t,ct,at)));if(r[0]===undefined||r[1]===undefined){return[false,false]}const c=t.map((t=>t===undefined?undefined:tu(e,t,ct,at)));const o=[0,1].map((e=>c[e]!==undefined));const a=t.map((e=>e===undefined?undefined:[Pm(e,r[0][0]),Pm(e,r[0][1])]));const i=a.map((e=>e===undefined?false:Cr({vector:O(r[1][1],r[1][0]),origin:r[1][0]},e[0],dt)||Cr({vector:O(r[1][1],r[1][0]),origin:r[1][0]},e[1],dt)||Cr({vector:O(e[1],e[0]),origin:e[0]},r[1][0],dt)||Cr({vector:O(e[1],e[0]),origin:e[0]},r[1][1],dt)));return[0,1].map((e=>i[e]===true&&o[e]===true))};const Bm=(e,t,n,s)=>{const r=Wr(n,{vector:q(n.vector),origin:s},at,at).point;return[[s,r].filter((e=>e!==undefined)).map((t=>Tr(e,t,ct))).reduce(((e,t)=>e&&t),true)]};const $m=(e,t,n,s,r)=>{if(t.length===0){return[]}const c=[s,r].map((t=>Tr(e,t,ct))).reduce(((e,t)=>e&&t),true);const o=t.map((e=>Pm(e,r))).map((t=>Tr(e,t,ct)));return o.map((e=>e&&c))};const Rm=function(e,t,n,s,r,c){if(t.length===0){return[]}const o=[r,c].map((t=>Tr(e,t,ct))).reduce(((e,t)=>e&&t),true);if(!o){return t.map((()=>false))}const a=t.map((e=>Pm(e,r))).map((t=>Tr(e,t,ct)));const i=t.map((e=>Pm(e,c))).map((t=>Tr(e,t,ct)));return t.map(((e,t)=>a[t]&&i[t]))};const Lm=(e,t,n,s,r)=>{const c=Tr(e,r,ct);if(!t.length){return[false]}const o=Pm(t[0],r);const a=Tr(e,o,ct);const i=Kr(e,s,dt,at)!==undefined;const f=Wr(s,t[0],at,at).point;const l=f?Tr(e,f,ct):false;return[c&&a&&i&&l]};const Im=(e,t,n,...s)=>[null,Tm,Nm,zm,Bm,$m,Rm,Lm][e](t,n,...s);const Um=Object.freeze({__proto__:null,validateAxiom:Im,validateAxiom1:Tm,validateAxiom2:Nm,validateAxiom3:zm,validateAxiom4:Bm,validateAxiom5:$m,validateAxiom6:Rm,validateAxiom7:Lm});const Qm=e=>e.map((e=>typeof e==="object"&&e.vector?Cn(e):e));const Dm=(e,t,...n)=>{const s=Cm(e,...n);Im(e,t,s,...n).map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined)).forEach((e=>delete s[e]));return s};const qm=(e,t,...n)=>{const s=Mm(e,...n).map(Cn);Im(e,t,s,...Qm(n)).map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined)).forEach((e=>delete s[e]));return s};const Wm=Object.freeze({__proto__:null,axiomWithBoundary:Dm,normalAxiomWithBoundary:qm});const Gm={...Vm,...Am,...Wm,...Um};const Hm=()=>{const e={};e.file_spec=Ju;e.file_creator=Zu;e.file_classes=["singleModel"];e.frame_classes=[];e.frame_attributes=[];e.vertices_coords=[];e.faces_vertices=[];return e};const Jm=e=>{if(!e.edges_foldAngle||!e.edges_foldAngle.length){return}let t=true;for(let n=0;n<e.edges_foldAngle.length;n+=1){if(e.edges_foldAngle[n]!==0&&e.edges_foldAngle[n]!==-180&&e.edges_foldAngle[n]!==180){t=false;break}}e.frame_classes.push(t?"creasePattern":"foldedForm");e.frame_attributes.push(t?"2D":"3D")};const Zm=e=>e.map(((e,t,n)=>[e,n[(t+1)%n.length]]));const Ym=({faces_vertices:e})=>{const t={};const n=[];e.flatMap(Zm).forEach((e=>{const s=[e.join(" "),`${e[1]} ${e[0]}`];if(s[0]in t||s[1]in t){return}n.push(e);t[s[0]]=true}));return n};const Xm=e=>e.slice(1).map((e=>parseInt(e,10)-1));const Km=e=>e.slice(1).map((e=>parseFloat(e)));const eg=e=>{const t=e.split("\n").map((e=>e.trim().split(/\s+/)));const n=Hm();for(let e=0;e<t.length;e+=1){switch(t[e][0].toLowerCase()){case"f":n.faces_vertices.push(Xm(t[e]));break;case"v":n.vertices_coords.push(Km(t[e]));break}}n.faces_normal=gs(n);n.faces_center=Js(n);n.edges_vertices=Ym(n);n.faces_edges=Ds(n);n.edges_faces=Cs(n);n.edges_foldAngle=Bs(n);n.edges_assignment=Ns(n);n.vertices_vertices=ys(n);delete n.faces_normal;delete n.faces_center;delete n.edges_faces;Jm(n);return n};const tg=(e,t)=>{const n=Ec(e,t);n.vertices_vertices=Es(n);const s=Us(n);n.faces_vertices=s.faces_vertices;n.faces_edges=s.faces_edges;delete n.vertices_edges;return n};const ng=({vertices_coords:e,edges_vertices:t})=>{const n=t.map((t=>t.map((t=>e[t])))).map((e=>I(...e))).filter((e=>e>1e-4));const s=n.reduce(((e,t)=>Math.min(e,t)),Infinity);return s===Infinity?undefined:s};const sg=({vertices_coords:e,edges_vertices:t})=>{const n=ng({vertices_coords:e,edges_vertices:t});const s=_o({vertices_coords:e});const r=s&&s.span?Math.max(...s.span):1;const c=r*.01;const o=n/20;return n===undefined?c:Math.min(c,o)};const rg=function(e){const t=`${e}`.match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);return Math.max(0,(t[1]?t[1].length:0)-(t[2]?+t[2]:0))};const cg=function(e,t=15){const n=typeof e==="number"?e:parseFloat(e);if(Number.isNaN(n)){return e}const s=parseFloat(n.toFixed(t));if(rg(s)===Math.min(t,rg(n))){return n}return s};const og=Object.freeze({__proto__:null,cleanNumber:cg});const ag=(e,t,n="epsilon")=>{if(typeof t==="object"&&typeof t[n]==="number"){return t[n]}return typeof t==="number"?t:sg(e)};const ig=e=>{const t=_o({vertices_coords:e});const n=t.min[1]+t.span[1]/2;const s=Math.min(-t.min[1],-t.max[1]);const r=Math.max(-t.min[1],-t.max[1]);const c=r-s;const o=s+c/2;const a=n-o;const i=cg(a,8);for(let t=0;t<e.length;t+=1){e[t][1]=-e[t][1]+i}};const fg=(e,t)=>e==null?null:Array.from(e.childNodes).filter((e=>e.attributes&&e.attributes.length)).filter((e=>Array.from(e.attributes).filter((e=>e.nodeValue===t)).shift()!==undefined)).shift();const lg=(e,t)=>{const n=fg(e,t);const s=n?Array.from(n.childNodes).shift():null;return s?s.textContent:undefined};const dg=e=>{const t=fg(e,"lines");const n=t?Array.from(t.childNodes).filter((e=>e.getAttribute)).filter((e=>e.getAttribute("class").split(" ").includes("oripa.OriLineProxy"))).shift():undefined;return n?Array.from(n.childNodes):[]};const ug=e=>e.filter((e=>e.nodeName==="void")).filter((e=>e.childNodes)).map((e=>fg(e,"oripa.OriLineProxy"))).filter((e=>e)).map((e=>["type","x0","x1","y0","y1"].map((t=>fg(e,t))).map((e=>e?Array.from(e.childNodes):[])).map((e=>e.filter((e=>e.nodeName==="double"||e.nodeName==="int")).shift())).map((e=>e&&e.childNodes[0]?e.childNodes[0].data:"0")).map(parseFloat)));const mg=["F","B","M","V","U"];const gg=e=>{const t={};t.vertices_coords=e.flatMap((e=>[[e[1],e[3]],[e[2],e[4]]]));t.edges_vertices=e.map(((e,t)=>[t*2,t*2+1]));t.edges_assignment=e.map((e=>mg[e[0]]));t.edges_foldAngle=zs(t);return t};const pg=e=>{const t=Za(e,"text/xml");const n=Array.from(t.childNodes).filter((e=>e.getAttribute)).filter((e=>e.getAttribute("class").split(" ").includes("oripa.DataSet"))).shift();return gg(ug(dg(n)))};const _g=(e,t)=>{const n={file_description:"memo",file_author:"originalAuthorName",file_title:"title"};Object.keys(n).forEach((t=>{n[t]=lg(e,n[t])}));Object.keys(n).filter((e=>n[e])).forEach((e=>{t[e]=n[e]}));t.file_classes=["singleModel"];t.frame_classes=["creasePattern"]};const hg=(e,t)=>{const n=Za(e,"text/xml");const s=n&&n.childNodes?Array.from(n.childNodes):[];const r=s.filter((e=>e.getAttribute)).filter((e=>e.getAttribute("class").split(" ").includes("oripa.DataSet"))).shift();const c=gg(ug(dg(r)));if(t&&t.invertVertical&&c.vertices_coords){ig(c.vertices_coords)}const o=ag(c,t);const a=tg(c,o);_g(r,a);return a};Object.assign(hg,{opxEdgeGraph:pg});const vg=(e,t)=>{const n=ja(e).toUpperCase();return t&&t[n]?t[n]:Ul(...Oa(e))};const bg=(e,t)=>{switch(t){case"M":case"m":return-180*e;case"V":case"v":return 180*e;default:return 0}};const yg=(e,t)=>{const n=o().getComputedStyle!=null?o().getComputedStyle(e).stroke:"";if(n!==""&&n!=="none"){return n}if(t.stroke!==undefined){return t.stroke}return undefined};const Eg=(e,t)=>{const n=o().getComputedStyle!=null?o().getComputedStyle(e).opacity:"";if(n!==""){const e=parseFloat(n);if(!Number.isNaN(e)){return e}}if(t.opacity!==undefined){const e=parseFloat(t.opacity);if(!Number.isNaN(e)){return e}}return undefined};const Mg=Object.freeze({__proto__:null,colorToAssignment:vg,getEdgeOpacity:Eg,getEdgeStroke:yg,opacityToFoldAngle:bg});const Ag=(e,t)=>t.map((t=>e.getAttribute(t))).map((e=>e==null?0:e)).map(parseFloat);const xg=e=>[Ag(e,["x1","y1","x2","y2"])];const wg=function(e){const[t,n,s,r]=Ag(e,["x","y","width","height"]);return[[t,n,t+s,n],[t+s,n,t+s,n+r],[t+s,n+r,t,n+r],[t,n+r,t,n]]};const kg=e=>{const t=e.split(/[\s,]+/).map(parseFloat);return Array.from(Array(Math.floor(t.length/2))).map(((e,n)=>[t[n*2+0],t[n*2+1]]))};const Og=e=>kg(e.getAttribute("points")||"").map(((e,t,n)=>[n[t][0],n[t][1],n[(t+1)%n.length][0],n[(t+1)%n.length][1]]));const jg=function(e){const t=Og(e);t.pop();return t};const Fg={L:true,V:true,H:true,Z:true};const Sg=e=>pi(e.getAttribute("d")||"").filter((e=>Fg[e.command.toUpperCase()])).map((e=>[e.start,e.end])).filter((e=>!rt(...e))).map((e=>e.flat()));const Cg={line:xg,rect:wg,polygon:Og,polyline:jg,path:Sg};const Vg=(e,t)=>{const n=[[e[0],e[1]],[e[2],e[3]]];if(!t){return n}const s=Ha(t);return s?n.map((e=>ce(s,e))):n};const Pg=e=>oi(e).filter((e=>Cg[e.element.nodeName])).flatMap((e=>Cg[e.element.nodeName](e.element).map((t=>Vg(t,e.attributes.transform))).map((t=>({...e,segment:t})))));const Tg=e=>{if(!o().document.body){return undefined}const t=o().document.createElement("div");t.setAttribute("display","none");o().document.body.appendChild(t);t.appendChild(e);return t};const Ng=e=>ti(e).map((e=>e.nodeName==="style")).reduce(((e,t)=>e||t),false);const zg=e=>{const s=typeof e==="string"?Za(e,"image/svg+xml"):e;if(Ng(s)&&t){console.warn(n.backendStylesheet)}const r=Ya(s)===o().document?undefined:Tg(s);const c=Pg(s);c.map((e=>({data:{assignment:e.attributes["data-assignment"],foldAngle:e.attributes["data-foldAngle"]},stroke:yg(e.element,e.attributes),opacity:Eg(e.element,e.attributes)}))).forEach(((e,t)=>{c[t]={...c[t],...e}}));if(r&&r.parentNode){r.parentNode.removeChild(r)}return c};const Bg=e=>{if(!e||!e.assignments){return undefined}const t={};Object.keys(e.assignments).forEach((n=>{const s=ja(n).toUpperCase();t[s]=e.assignments[n]}));return t};const $g=(e,t="#f0f",n=undefined)=>{if(e){return e}return vg(t,n)};const Rg=(e,t=1,n=undefined)=>{if(e){return parseFloat(e)}return bg(t,n)};const Lg=(e,t)=>{const n=Bg(t);if(n){e.forEach((e=>{delete e.data.assignment;delete e.data.foldAngle}))}const s=e.map((e=>$g(e.data.assignment,e.stroke,n)));const r=e.map(((e,t)=>Rg(e.data.foldAngle,e.opacity,s[t])));return{edges_assignment:s,edges_foldAngle:r}};const Ig=(e,t)=>{const n=zg(e);const{edges_assignment:s,edges_foldAngle:r}=Lg(n,t);const c=t&&t.fast?e=>e:cg;const o=n.flatMap((e=>e.segment)).map((e=>e.map((e=>c(e,12)))));const a=n.map(((e,t)=>[t*2,t*2+1]));return{vertices_coords:o,edges_vertices:a,edges_assignment:s,edges_foldAngle:r}};const Ug=(e,t)=>{const n=Ig(e,t);const s=ag(n,t);if(t&&t.invertVertical&&n.vertices_coords){ig(n.vertices_coords)}const r=tg(n,s);const c=t&&t.fast?e=>e:cg;r.vertices_coords=r.vertices_coords.map((e=>e.map((e=>c(e,12)))));if(typeof t!=="object"||t.boundary!==false){r.edges_assignment.map(((e,t)=>t)).filter((e=>r.edges_assignment[e]==="B"||r.edges_assignment[e]==="b")).forEach((e=>{r.edges_assignment[e]="F"}));const{edges:e}=yo(r);e.forEach((e=>{r.edges_assignment[e]="B"}))}return{file_spec:1.1,file_creator:"Rabbit Ear",frame_classes:["creasePattern"],...r}};Object.assign(Ug,{...Mg,svgSegments:zg,svgEdgeGraph:Ig,planarizeGraph:tg,makeEpsilon:sg});const Qg={objToFold:eg,opxToFold:hg,svgToFold:Ug,foldToSvg:Dd,foldToObj:Wd};const Dg=e=>e.replace(/([-_][a-z])/gi,(e=>e.toUpperCase().replace("-","").replace("_","")));const qg=e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z])([A-Z])(?=[a-z])/g,"$1-$2").toLowerCase();const Wg=e=>e.charAt(0).toUpperCase()+e.slice(1);const Gg=Object.freeze({__proto__:null,capitalized:Wg,toCamel:Dg,toKebab:qg});const Hg={..._n,...cc,...Ue,...og,...ls,...Gg};const Jg=e=>!e.file_frames?1:e.file_frames.length+1;const Zg=(e,t=1)=>{if(!e.file_frames||e.file_frames.length<t){return e}const s=["frame_parent","frame_inherit"];const r={visited_frames:[]};const c={};Ct(e,"file").filter((e=>e!=="file_frames")).forEach((t=>{c[t]=e[t]}));const o=(e,t,s)=>{if(r.visited_frames.indexOf(t)!==-1){throw new Error(n.graphCycle)}r.visited_frames.push(t);s=[t].concat(s);if(t===0){return s}if(e.file_frames[t-1].frame_inherit&&e.file_frames[t-1].frame_parent!=null){return o(e,e.file_frames[t-1].frame_parent,s)}return s};return o(e,t,[]).map((t=>{if(t===0){const t=e.file_frames;e.file_frames=null;const n=Bo(e);e.file_frames=t;delete n.file_frames;s.forEach((e=>delete n[e]));return n}const n=Bo(e.file_frames[t-1]);s.forEach((e=>delete n[e]));return n})).reduce(((e,t)=>Object.assign(e,t)),c)};const Yg=e=>{const t={...e};delete t.file_frames;return t};const Xg=e=>{if(!e){return[]}if(!e.file_frames||!e.file_frames.length){return[e]}return[Yg(e),...e.file_frames]};const Kg=(e,t)=>Array.from(Array(Jg(e))).map(((t,n)=>Zg(e,n))).filter((e=>e.frame_classes&&e.frame_classes.includes(t)));const ep=Object.freeze({__proto__:null,countFrames:Jg,flattenFrame:Zg,getFramesAsFlatArray:Xg,getFramesByClassName:Kg});const tp=({vertices_coords:e,edges_vertices:t},n,s=a)=>{const r=t=>t.map((t=>e[t])).map((e=>j(e,n.origin))).map((e=>R(n.vector,e))).sort(((e,t)=>Math.abs(t)-Math.abs(e))).map(Math.sign).shift();const c=pu({vertices_coords:e,edges_vertices:t},n,s,ut);const o={};uu({vertices_coords:e,edges_vertices:t},n,s).forEach((e=>{o[e]=true}));return t.map(((e,t)=>{if(o[t]===true){return 2}if(c[t]!==undefined){return 0}return r(e)}))};const np=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},r,c=a)=>{if(!s){s=Ds({edges_vertices:t,faces_vertices:n})}const o=tp({vertices_coords:e,edges_vertices:t},r,c);const i=s.map((e=>e.map((e=>o[e])).filter((e=>e!==2))));const f=i.map((e=>e.includes(0)));const l=i.map(((e,t)=>f[t]?false:e.reduce(((t,n)=>t&&n===e[0]),true)));return l.map(((e,t)=>e?i[t][0]:0))};const sp=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s,faceOrders:r},c,o=a)=>{if(!r){throw new Error("faceOrders required")}const i=np({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},c,o);const f=[-1,1].map((e=>i.map(((e,t)=>({s:e,f:t}))).filter((t=>t.s===e||t.s===0)).map((e=>e.f))));const l=f.map((e=>ud(r,e)));console.log("facesSide",i);console.log("sidesFaces",f);console.log("sidesFaceOrders",l);const d=gs({vertices_coords:e,faces_vertices:n});const u=l.map((e=>md({faceOrders:e,faces_normal:d})));console.log("sidesLayersFace",u)};const rp=Object.freeze({__proto__:null,getEdgesSide:tp,getFacesSide:np,getFlapsThroughLine:sp});const cp=({vertices_coords:e,edges_vertices:t,faces_vertices:n,faces_edges:s},r,c=[],o=at)=>{if(!e||!t||!n){return{vertices:[],edges:[]}}if(!s){s=Ds({edges_vertices:t,faces_vertices:n})}const a=t.map((t=>t.map((t=>e[t]))));a.forEach(((e,t)=>{if(e.includes(undefined)){delete a[t]}}));const i=a.map((e=>Fn(...e))).map((e=>Wr(e,r,dt,o)));const f={};const l={};i.forEach(((e,n)=>{if(e.a!==undefined){const s=nt(e.a,0);const r=nt(e.a,1);if(s){l[t[n][0]]=true}if(r){l[t[n][1]]=true}if(!s&&!r){f[n]=true}}}));const d=t.map((e=>!!(l[e[0]]&&l[e[1]])));const u=s.map((e=>e.filter((e=>d[e]))));const m=s.map((e=>e.filter((e=>f[e]))));const g=n.map((e=>e.filter((e=>l[e]))));const p=c.length?Gs({vertices_coords:e,faces_vertices:n}).map((e=>c.map((t=>({...Nr(e,t),point:t}))))).map((e=>e.filter((e=>e.overlap)))):undefined;const _=n.map(((e,t)=>{if(u[t].length){return undefined}const n=m[t];const s=g[t];const r=p?p[t]:[];return n.length+s.length+r.length===2?{edges:n,vertices:s,points:r}:undefined}));Object.keys(_).filter((e=>_[e]===undefined)).forEach((e=>delete _[e]));const h={};_.filter((e=>e.edges)).forEach((({edges:e})=>e.forEach((e=>{h[e]=true}))));Object.keys(i).filter((e=>!h[e])).forEach((e=>delete i[e]));const v=d.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined));return{faces:_,edges:i,edges_collinear:v}};const op=(e,t)=>cp(e,t,[],at);const ap=(e,t)=>cp(e,t,[t.origin],ft);const ip=(e,t)=>cp(e,Fn(...t),t,dt);const fp=Object.freeze({__proto__:null,intersectGraphLine:op,intersectGraphRay:ap,intersectGraphSegment:ip});const lp=Object.keys(bt);const dp=(e,t)=>{const n=Rt(t);const s=Rt(e);const r={};lp.forEach((e=>{const n=Ct(t,e).shift();r[e]=n!==undefined?t[n]:[]}));const c={};lp.forEach((t=>{c[t]=nn(e,t)}));const o={vertices:[],edges:[],faces:[]};lp.forEach((e=>r[e].forEach(((t,n)=>{o[e][n]=c[e]++}))));const a=Bo(t);lp.forEach((e=>dr(a,e,o[e])));Object.keys(a).filter((e=>a[e].constructor===Array)).filter((t=>!(t in e))).forEach((t=>{e[t]=[]}));Object.keys(a).filter((e=>a[e].constructor===Array)).forEach((t=>a[t].forEach(((n,s)=>{e[t][s]=n}))));const i={};const f={};lp.forEach((t=>{const n=Ct(e,t).shift();f[t]=n!==undefined?e[n]:[]}));lp.forEach((e=>{const t=f[e].map((()=>0));o[e].forEach((e=>{t[e]=1}));i[e]=fr(t)}));const l=n!==s?(e.vertices_coords||[]).map(((e,t)=>e.length===2?t:undefined)).filter((e=>e!==undefined)):[];l.forEach((t=>{e.vertices_coords[t][2]=0}));return i};const up=Object.freeze({__proto__:null,join:dp});const mp=Object.freeze({__proto__:null});const gp=(e,t=a)=>Is(e,t).map((t=>e.vertices_coords.map((e=>e[0]>t.min[0]&&e[1]>t.min[1]&&e[0]<t.max[0]&&e[1]<t.max[1]))));const pp=({vertices_coords:e,edges_vertices:t,edges_coords:n},s=a)=>{const r=Is({vertices_coords:e,edges_vertices:t,edges_coords:n},s);const c=t.map((()=>[]));for(let e=0;e<t.length-1;e+=1){for(let n=e+1;n<t.length;n+=1){const t=(r[e].max[0]<r[n].min[0]||r[n].max[0]<r[e].min[0])&&(r[e].max[1]<r[n].min[1]||r[n].max[1]<r[e].min[1]);c[e][n]=!t;c[n][e]=!t}}for(let e=0;e<t.length;e+=1){c[e][e]=true}return c};const _p=Object.freeze({__proto__:null,getEdgesEdgesOverlapingSpans:pp,getEdgesVerticesOverlappingSpan:gp});const hp=({normal:e,distance:t})=>t<0?{normal:D(e),distance:-t}:{normal:e,distance:t};const vp=(e,t=a)=>{const{lines:n}=hc(e,t);const s=n.map(Sn).map(hp);const r=n.map((({vector:e,origin:t})=>ge(e,t)));const c=r.map((e=>n.map((({vector:t,origin:n})=>oe(e,t,n)))));const o=c.map((e=>e.map((e=>e.vector[0]<0?{vector:D(e.vector),origin:e.origin}:e)))).map((e=>e.map(Sn).map(hp))).map((e=>e.concat(s)));const i=o.map((e=>sc(e.map((e=>e.distance)))));const f=i.map(((e,n)=>e.map((e=>e.map((e=>o[n][e].normal)))).map((e=>rc(e,t)))));const l=f.map(((e,t)=>e.flatMap(((e,n)=>e.map((e=>e.map((e=>i[t][n][e]))))))));const d=l.map((e=>(e.length-n.length)/n.length));return d.map(((e,t)=>({error:e,i:t}))).map((e=>({line:n[e.i],error:e.error}))).sort(((e,t)=>e.error-t.error))};const bp=(e,t=a)=>vp(e,t)[0];const yp=Object.freeze({__proto__:null,findSymmetryLine:bp,findSymmetryLines:vp});const Ep=e=>Array.from(Array(e.length-2)).map(((t,n)=>[e[0],e[n+1],e[n+2]]));const Mp=({faces_vertices:e})=>e.flatMap((e=>e.length<4?[e]:Ep(e)));const Ap=e=>e.length===3?[e]:Array.from(Array(Math.floor(e.length/3))).map(((t,n)=>[n*3+0,n*3+1,n*3+2].map((t=>e[t]))));const xp=({vertices_coords:e,faces_vertices:t},s)=>{if(!e||!e.length){throw new Error(n.nonConvexTriangulation)}const r=e.filter((()=>true)).shift().length;return t.map((t=>t.flatMap((t=>e[t])))).map((e=>s(e,null,r))).map(((e,n)=>e.map((e=>t[n][e])))).flatMap((e=>Ap(e)))};const wp=e=>{if(!e.edges_vertices){e.edges_vertices=[]}const t=ws(e);let n=e.edges_vertices.length;const s=[];e.faces_edges=e.faces_vertices.map((e=>e.map(((e,r,c)=>{const o=[e,c[(r+1)%c.length]];const a=o.join(" ");if(a in t){return t[a]}s.push(o);t[a]=n;t[o.reverse().join(" ")]=n;return n++}))));const r=s.length;e.edges_vertices.push(...s);if(e.edges_assignment){e.edges_assignment.push(...Array(r).fill("J"))}if(e.edges_foldAngle){e.edges_foldAngle.push(...Array(r).fill(0))}if(e.vertices_vertices){delete e.vertices_vertices}if(e.vertices_edges){delete e.vertices_edges}if(e.vertices_faces){delete e.vertices_faces}if(e.edges_faces){delete e.edges_faces}if(e.faces_faces){delete e.faces_faces}if(e.faceOrders){delete e.faceOrders}return e};const kp=({faces_vertices:e})=>{let t=0;return e.map((e=>Math.max(3,e.length))).map((e=>Array.from(Array(e-2)).map((()=>t++))))};const Op=(e,t)=>{if(!e.faces_vertices){return{}}const n=e.edges_vertices?e.edges_vertices.length:0;const s=kp(e);e.faces_vertices=t?xp(e,t):Mp(e);wp(e);const r=Array.from(Array(e.edges_vertices.length-n)).map(((e,t)=>n+t));return{faces:{map:s},edges:{new:r}}};const jp=Object.freeze({__proto__:null,triangulate:Op,triangulateConvexFacesVertices:Mp,triangulateNonConvexFacesVertices:xp});const Fp=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);const Sp=e=>Fp.map(((t,n)=>Math.abs(t-e[n])<a)).reduce(((e,t)=>e&&t),true);const Cp=(e,t)=>[e[0]*t[0]+e[4]*t[1]+e[8]*t[2]+e[12],e[1]*t[0]+e[5]*t[1]+e[9]*t[2]+e[13],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]+e[14]];const Vp=(e,t,n)=>({vector:[e[0]*t[0]+e[4]*t[1]+e[8]*t[2],e[1]*t[0]+e[5]*t[1]+e[9]*t[2],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]],origin:[e[0]*n[0]+e[4]*n[1]+e[8]*n[2]+e[12],e[1]*n[0]+e[5]*n[1]+e[9]*n[2]+e[13],e[2]*n[0]+e[6]*n[1]+e[10]*n[2]+e[14]]});const Pp=(e,t)=>[e[0]*t[0]+e[4]*t[1]+e[8]*t[2]+e[12]*t[3],e[1]*t[0]+e[5]*t[1]+e[9]*t[2]+e[13]*t[3],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]+e[14]*t[3],e[3]*t[0]+e[7]*t[1]+e[11]*t[2]+e[15]*t[3],e[0]*t[4]+e[4]*t[5]+e[8]*t[6]+e[12]*t[7],e[1]*t[4]+e[5]*t[5]+e[9]*t[6]+e[13]*t[7],e[2]*t[4]+e[6]*t[5]+e[10]*t[6]+e[14]*t[7],e[3]*t[4]+e[7]*t[5]+e[11]*t[6]+e[15]*t[7],e[0]*t[8]+e[4]*t[9]+e[8]*t[10]+e[12]*t[11],e[1]*t[8]+e[5]*t[9]+e[9]*t[10]+e[13]*t[11],e[2]*t[8]+e[6]*t[9]+e[10]*t[10]+e[14]*t[11],e[3]*t[8]+e[7]*t[9]+e[11]*t[10]+e[15]*t[11],e[0]*t[12]+e[4]*t[13]+e[8]*t[14]+e[12]*t[15],e[1]*t[12]+e[5]*t[13]+e[9]*t[14]+e[13]*t[15],e[2]*t[12]+e[6]*t[13]+e[10]*t[14]+e[14]*t[15],e[3]*t[12]+e[7]*t[13]+e[11]*t[14]+e[15]*t[15]];const Tp=e=>{const t=e[10]*e[15]-e[11]*e[14];const n=e[9]*e[15]-e[11]*e[13];const s=e[9]*e[14]-e[10]*e[13];const r=e[8]*e[15]-e[11]*e[12];const c=e[8]*e[14]-e[10]*e[12];const o=e[8]*e[13]-e[9]*e[12];return e[0]*(e[5]*t-e[6]*n+e[7]*s)-e[1]*(e[4]*t-e[6]*r+e[7]*c)+e[2]*(e[4]*n-e[5]*r+e[7]*o)-e[3]*(e[4]*s-e[5]*c+e[6]*o)};const Np=e=>{const t=Tp(e);if(Math.abs(t)<1e-12||Number.isNaN(t)||!Number.isFinite(e[12])||!Number.isFinite(e[13])||!Number.isFinite(e[14])){return undefined}const n=e[10]*e[15]-e[11]*e[14];const s=e[9]*e[15]-e[11]*e[13];const r=e[9]*e[14]-e[10]*e[13];const c=e[8]*e[15]-e[11]*e[12];const o=e[8]*e[14]-e[10]*e[12];const a=e[8]*e[13]-e[9]*e[12];const i=e[6]*e[15]-e[7]*e[14];const f=e[5]*e[15]-e[7]*e[13];const l=e[5]*e[14]-e[6]*e[13];const d=e[6]*e[11]-e[7]*e[10];const u=e[5]*e[11]-e[7]*e[9];const m=e[5]*e[10]-e[6]*e[9];const g=e[4]*e[15]-e[7]*e[12];const p=e[4]*e[14]-e[6]*e[12];const _=e[4]*e[11]-e[7]*e[8];const h=e[4]*e[10]-e[6]*e[8];const v=e[4]*e[13]-e[5]*e[12];const b=e[4]*e[9]-e[5]*e[8];const y=[+(e[5]*n-e[6]*s+e[7]*r),-(e[1]*n-e[2]*s+e[3]*r),+(e[1]*i-e[2]*f+e[3]*l),-(e[1]*d-e[2]*u+e[3]*m),-(e[4]*n-e[6]*c+e[7]*o),+(e[0]*n-e[2]*c+e[3]*o),-(e[0]*i-e[2]*g+e[3]*p),+(e[0]*d-e[2]*_+e[3]*h),+(e[4]*s-e[5]*c+e[7]*a),-(e[0]*s-e[1]*c+e[3]*a),+(e[0]*f-e[1]*g+e[3]*v),-(e[0]*u-e[1]*_+e[3]*b),-(e[4]*r-e[5]*o+e[6]*a),+(e[0]*r-e[1]*o+e[2]*a),-(e[0]*l-e[1]*p+e[2]*v),+(e[0]*m-e[1]*h+e[2]*b)];const E=1/t;return y.map((e=>e*E))};const zp=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0]);const Bp=(e=0,t=0,n=0)=>[...zp,e,t,n,1];const $p=(e,t,n,s,r)=>{const c=Math.cos(e);const o=Math.sin(e);const a=[...Fp];a[n*4+n]=c;a[n*4+s]=(r?+1:-1)*o;a[s*4+n]=(r?-1:+1)*o;a[s*4+s]=c;const i=[0,1,2].map((e=>t[e]||0));const f=[...Fp];const l=[...Fp];[12,13,14].forEach(((e,t)=>{f[e]=-i[t];l[e]=i[t]}));return Pp(l,Pp(a,f))};const Rp=(e,t=[0,0,0])=>$p(e,t,1,2,true);const Lp=(e,t=[0,0,0])=>$p(e,t,0,2,false);const Ip=(e,t=[0,0,0])=>$p(e,t,0,1,true);const Up=(e,t=[0,0,1],n=[0,0,0])=>{const s=[0,1,2].map((e=>n[e]||0));const[r,c,o]=Y(3,v(t));const a=Math.cos(e);const i=Math.sin(e);const f=1-a;const l=Bp(-s[0],-s[1],-s[2]);const d=Bp(s[0],s[1],s[2]);return Pp(d,Pp([f*r*r+a,f*c*r+o*i,f*o*r-c*i,0,f*r*c-o*i,f*c*c+a,f*o*c+r*i,0,f*r*o+c*i,f*c*o-r*i,f*o*o+a,0,0,0,0,1],l))};const Qp=(e=[1,1,1],t=[0,0,0])=>[e[0],0,0,0,0,e[1],0,0,0,0,e[2],0,e[0]*-t[0]+t[0],e[1]*-t[1]+t[1],e[2]*-t[2]+t[2],1];const Dp=(e=1,t=[0,0,0])=>Qp([e,e,e],t);const qp=(e,t=[0,0])=>{const n=ge(e,t);return[n[0],n[1],0,0,n[2],n[3],0,0,0,0,1,0,n[4],n[5],0,1]};const Wp=(e,t,n,s)=>{const r=Math.tan(Math.PI*.5-.5*e);const c=1/(n-s);const o=t<1?r:r/t;const a=t<1?r*t:r;return[o,0,0,0,0,a,0,0,0,0,(n+s)*c,-1,0,0,n*s*c*2,0]};const Gp=(e,t,n,s,r,c)=>[2/(t-s),0,0,0,0,2/(e-n),0,0,0,0,2/(r-c),0,(s+t)/(s-t),(n+e)/(n-e),(r+c)/(r-c),1];const Hp=(e,t,n)=>{const s=y(F(e,t));const r=y(L(n,s));const c=y(L(s,r));return[r[0],r[1],r[2],0,c[0],c[1],c[2],0,s[0],s[1],s[2],0,e[0],e[1],e[2],1]};const Jp=Object.freeze({__proto__:null,determinant4:Tp,identity4x4:Fp,invertMatrix4:Np,isIdentity4x4:Sp,makeLookAtMatrix4:Hp,makeMatrix4ReflectZ:qp,makeMatrix4Rotate:Up,makeMatrix4RotateX:Rp,makeMatrix4RotateY:Lp,makeMatrix4RotateZ:Ip,makeMatrix4Scale:Qp,makeMatrix4Translate:Bp,makeMatrix4UniformScale:Dp,makeOrthographicMatrix4:Gp,makePerspectiveMatrix4:Wp,multiplyMatrices4:Pp,multiplyMatrix4Line3:Vp,multiplyMatrix4Vector3:Cp});const Zp=(e,t)=>{const n=L(e,t);const s=[n[0],n[1],n[2],S(e,t)];s[3]+=m(s);return v(s)};const Yp=e=>Pp([e[3],e[2],-e[1],e[0],-e[2],e[3],e[0],e[1],e[1],-e[0],e[3],e[2],-e[0],-e[1],-e[2],e[3]],[e[3],e[2],-e[1],-e[0],-e[2],e[3],e[0],-e[1],e[1],-e[0],e[3],-e[2],e[0],e[1],e[2],e[3]]);const Xp=Object.freeze({__proto__:null,matrix4FromQuaternion:Yp,quaternionFromTwoVectors:Zp});const Kp=({vertices_coords:e,faces_vertices:t},n=a)=>{const s=gs({vertices_coords:e,faces_vertices:t});const r=t.map((()=>[]));for(let e=0;e<t.length-1;e+=1){for(let c=e+1;c<t.length;c+=1){if(e===c){continue}if(H(s[e],s[c],n)){r[e].push(c);r[c].push(e)}}}const c=fo(r);const o=lr(c).map((e=>typeof e==="number"?[e]:e));const i=o.map((e=>s[e[0]]));const f=[];o.forEach(((e,t)=>e.forEach((e=>{f[e]=V(s[e],i[t])>0}))));const l=t.map((t=>e[t[0]])).map((e=>Y(3,e)));const d=o.map(((e,t)=>e.map((e=>V(i[t],l[e])))));const u=d.map(((e,t)=>sc(e).map((e=>e.map((e=>o[t][e]))))));const m=u.flatMap(((e,t)=>e.map((()=>[...i[t]]))));const g=u.flat();const p=g.map((e=>e[0])).map((e=>l[e])).map(((e,t)=>V(m[t],e))).map(((e,t)=>A(m[t],e)));const _=g.map(((e,t)=>({normal:m[t],origin:p[t]})));return g.map(((e,t)=>({faces:e,facesAligned:e.map((e=>f[e])),plane:_[t]})))};const e_=(e,t,n,s)=>{const r=e.vertices_coords.map((e=>Y(3,e)));const c=t.map((t=>t.faces.map(((n,s)=>t.facesAligned[s]?e.faces_vertices[n]:e.faces_vertices[n].slice().reverse())).map((e=>e.map((e=>r[e])))).map((e=>Ye(e,s)))));const o=[];const a=c.map(((e,t)=>e.map((e=>e.map((e=>Cp(n[t],e))).map((e=>[e[0],e[1]]))))));t.map((e=>e.faces)).forEach(((e,t)=>e.forEach(((e,n)=>{o[e]=a[t][n]}))));return o};const t_=({vertices_coords:e,faces_vertices:t,faces_faces:n},s=a)=>{if(!n){n=qs({faces_vertices:t})}const r=Kp({vertices_coords:e,faces_vertices:t},s);const c=[];r.forEach((e=>e.facesAligned.forEach(((t,n)=>{c[e.faces[n]]=t}))));const o=[0,0,1];const i=r.map((e=>e.plane.normal)).map((e=>{const t=S(e,o);return Math.abs(t+1)<.01?Up(Math.PI,[1,0,0]):Yp(Zp(e,o))}));const f=e_({vertices_coords:e,faces_vertices:t},r,i,s);const l=r.map((e=>e.faces)).map((e=>to(n,e)));const d=l.map((e=>fo(e)));const u=d.map((e=>lr(e).map((e=>e.constructor===Array?e:[e]))));const m=d.map((e=>{const t=e.map(((e,t)=>t));return e.map((n=>t.filter((t=>e[t]!==n))))}));const g=t.map((()=>[]));m.forEach((e=>e.forEach(((e,t)=>{for(let n=0;n<e.length;n+=1){const r=e[n];const c=[t,r].map((e=>f[e]));const o=zr(...c,s);if(o){g[t][r]=true;g[r][t]=true}}}))));const p=m.map((e=>e.map(((e,t)=>e.filter((e=>g[t][e]))))));const _=[];p.forEach(((e,t)=>{_[t]=[];e.forEach(((e,n)=>{const s=d[t][n];const r=e.map((e=>d[t][e]));if(!_[t][s]){_[t][s]=new Set}r.forEach((e=>{if(!_[t][e]){_[t][e]=new Set}}));r.forEach((e=>{_[t][s].add(e);_[t][e].add(s)}))}))}));_.forEach(((e,t)=>e.forEach(((e,n)=>{_[t][n]=[...e]}))));const h=_.map((e=>lr(fo(e)).map((e=>e.constructor===Array?e:[e]))));const v=h.flatMap(((e,t)=>e.map((()=>t))));const b=r.map(((e,t)=>h[t].map((e=>e.flatMap((e=>u[t][e]))))));const y=b.flatMap(((e,t)=>e.map((e=>({faces:e,facesAligned:e.map((e=>c[e])),plane:r[t].plane})))));const E=v.map((e=>r[e].plane));const M=v.map((e=>i[e]));const A=y.map((e=>e.faces));const x=lr(A);return{sets_faces:A,sets_plane:E,sets_transformXY:M,faces_set:x,faces_winding:c}};const n_=Object.freeze({__proto__:null,coplanarFacesGroups:Kp,coplanarOverlappingFacesGroups:t_});const s_=({vertices_coords:e,edges_vertices:t,edges_vector:n},s=a)=>{if(!n){n=Rs({vertices_coords:e,edges_vertices:t})}const r=n.map((e=>v(e)));const c=t.map((()=>[]));r.forEach(((e,t)=>{r.forEach(((e,n)=>{if(n>=t){return}if(1-Math.abs(S(r[t],r[n]))<s){c[t].push(n);c[n].push(t)}}))}));return c};const r_=({vertices_coords:e,edges_vertices:t,edges_vector:n},s)=>{if(!n){n=Rs({vertices_coords:e,edges_vertices:t})}const r=t.map((t=>e[t[0]]));const c=n.map(((e,t)=>({vector:e,origin:r[t]})));return s_({vertices_coords:e,edges_vertices:t,edges_vector:n},.001).map(((e,t)=>e.filter((e=>Vr(c[t],c[e],ut,ut,s)))))};const c_=Object.freeze({__proto__:null,makeEdgesEdgesParallelOverlap:r_});const o_=e=>e.map((e=>e.map(((e,t)=>e===true?t:undefined)).filter((e=>e!==undefined))));const a_=({vertices_coords:e,edges_vertices:t,edges_coords:n,edges_boundingBox:s},r=a)=>{if(!n){n=$s({vertices_coords:e,edges_vertices:t})}if(!s){s=Is({vertices_coords:e,edges_vertices:t,edges_coords:n})}const c=t.map(((e,t)=>t)).shift();const o=Array.from(Array(n.length)).map((()=>[]));if(c===undefined){return o_(o)}const i=s[c].min.length;for(let e=0;e<n.length-1;e+=1){if(!s[e]){continue}for(let t=e+1;t<n.length;t+=1){if(!s[t]){continue}let n=true;for(let c=0;c<i;c+=1){if(!nt(s[e].min[c],s[t].min[c],r)||!nt(s[e].max[c],s[t].max[c],r)){n=false}}o[e][t]=n;o[t][e]=n}}for(let e=0;e<n.length-1;e+=1){for(let t=e+1;t<n.length;t+=1){if(!o[e][t]){continue}const s=rt(n[e][0],n[t][0],r)&&rt(n[e][1],n[t][1],r);const c=rt(n[e][0],n[t][1],r)&&rt(n[e][1],n[t][0],r);const a=s||c;o[e][t]=a;o[t][e]=a}}return o_(o)};const i_=({vertices_coords:e,edges_vertices:t,edges_vector:n,edges_faces:s,faces_vertices:r},c=a)=>{if(!n){n=Rs({vertices_coords:e,edges_vertices:t})}const o=t.map((t=>e[t[0]]));const i=t.map((()=>Array.from(Array(r.length))));s.forEach(((e,t)=>e.forEach((e=>{i[t][e]=false}))));const f=t.map((t=>t.map((t=>e[t]))));const l=r.map((t=>t.map((t=>e[t]))));id({vertices_coords:e,faces_vertices:r}).map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined)).forEach((e=>l[e].reverse()));const d=Is({edges_coords:f});const u=l.map((e=>et(e)));for(let e=0;e<i.length;e+=1){if(!d[e]){continue}for(let t=0;t<i[e].length;t+=1){if(i[e][t]===false){continue}if(!u[t]){continue}if(!Br(u[t],d[e],c)){i[e][t]=false;continue}}}const m=a_({vertices_coords:e,edges_vertices:t,edges_coords:f,edges_boundingBox:d});const g={};for(let e=0;e<i.length;e+=1){if(g[e]){continue}if(!f[e]){continue}for(let t=0;t<i[e].length;t+=1){if(i[e][t]!==undefined){continue}if(!l[t]){continue}const s=f[e].map((e=>Tr(l[t],e,ot,.001))).reduce(((e,t)=>e||t),false);if(s){i[e][t]=true;continue}const r=Kr(l[t],{vector:n[e],origin:o[e]},ut,ut,c);if(r){i[e][t]=true;continue}i[e][t]=false}m[e].forEach((t=>{i[t]=i[e].slice();g[t]=true}))}return i.map((e=>e.map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined))))};const f_=Object.freeze({__proto__:null,getEdgesFacesOverlap:i_});const l_=({vertices_coords:e,faces_vertices:t},n=a)=>{const s=Ws({vertices_coords:e,faces_vertices:t});const r=s.map((e=>et(e)));const c=[];const o=[];lc({vertices_coords:e,faces_vertices:t},0,n).forEach((e=>{e.start.forEach((e=>{o[e]=true}));o.forEach(((t,o)=>e.start.forEach((e=>{if(o===e){return}if(!Br(r[o],r[e],n)||!zr(s[o],s[e],n)){return}if(!c[o]){c[o]=[]}if(!c[e]){c[e]=[]}c[o][e]=true;c[e][o]=true}))));e.end.forEach((e=>delete o[e]))}));return c.map((e=>Object.keys(e).map((e=>parseInt(e,10)))))};const d_=Object.freeze({__proto__:null,getFacesFacesOverlap:l_});const u_=(e,t)=>{if(!e.vertices_coords){e.vertices_coords=[]}const n=e.vertices_coords.length;Ct(e,"vertices").forEach((t=>{e[t][n]=[]}));e.vertices_coords[n]=t;return n};const m_=(e,t)=>{if(t.length!==2){return undefined}if(!e.edges_vertices){e.edges_vertices=[]}const n=e.edges_vertices.length;Ct(e,"edges").forEach((t=>{e[t][n]=[]}));e.edges_vertices[n]=t;if(e.edges_assignment){e.edges_assignment[n]="U"}if(e.edges_foldAngle){e.edges_foldAngle[n]=0}if(e.vertices_edges){t.forEach((t=>{e.vertices_edges[t]=e.vertices_edges[t].filter((e=>e!==n));e.vertices_edges[t].push(n)}))}if(e.vertices_vertices){const n=[t[1],t[0]];t.forEach(((t,s)=>{e.vertices_vertices[t]=e.vertices_vertices[t].filter((e=>e!==n[s]));e.vertices_vertices[t].push(n[s])}))}return n};const g_=(e,{vector:t,origin:n},s=a)=>{const r=pu(e,{vector:t,origin:n},s).filter(Boolean);const c=r.map((e=>O(e,n))).map((e=>S(e,t)));const o=ln(c);const i=o.map((e=>x(E(t,e),n)));const f=Array.from(Array(i.length-1)).map(((e,t)=>[i[t],i[t+1]])).map((t=>bu(e,t[0],t[1],s)));return f};const p_=(e,t,n,s=a)=>{e.faces_vertices[t].map((t=>e.vertices_coords[t])).map((e=>n.map((t=>rt(e,t,s)))));e.faces_vertices[t].map((t=>e.vertices_coords[t])).map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>Fn(...e))).map((e=>n.map((t=>Cr(e,t,ut,s)))))};const __=(e,t,n=a)=>{const s=j(t[1],t[0]);const r=t[0];const c=Yc(e,t,n);const o=c.map((t=>e.faces_vertices[t].map((t=>e.vertices_coords[t])))).map((e=>tu(e,{vector:s,origin:r},ct,dt,n)));const i=[];c.forEach(((e,t)=>{if(o[t]){i[e]=o[t]}}));return i};const h_=(e,t,n=a)=>{const s=__(e,t,n);console.log("facesSegment",s);const r=s.map(((t,s)=>p_(e,s,t,n)));return r};const v_=(e,t,n)=>{const s=lr(n);Vt(e,t).forEach((t=>e[t].forEach(((s,r)=>e[t][r].forEach(((s,c)=>{e[t][r][c]=n[s]}))))));Vt(e,t).forEach((t=>e[t].forEach(((n,s)=>{e[t][s]=e[t][s].filter((e=>e!==undefined))}))));Ct(e,t).forEach((t=>{e[t]=s.map((n=>e[t][n]))}))};const b_=e=>{const t={vertices:[],edges:[],faces:[]};let n=0;let s=0;let r=0;e.vertices_coords.forEach(((e,s)=>{t.vertices[s]=n++}));e.edges_vertices.forEach(((e,n)=>{t.edges[n]=s++}));e.faces_vertices.forEach(((e,n)=>{t.faces[n]=r++}));v_(e,"vertices",t.vertices);v_(e,"edges",t.edges);v_(e,"faces",t.faces);return e};const y_=(e,t,n=at,s=at,r=a)=>{const c=R(b(e.vector),b(t.vector));if(Math.abs(c)<r){return undefined}const o=R(e.vector,t.vector);const i=-o;const f=[t.origin[0]-e.origin[0],t.origin[1]-e.origin[1]];const l=[-f[0],-f[1]];const d=R(f,t.vector)/o;const u=R(l,e.vector)/i;if(n(d,r/g(e.vector))&&s(u,r/g(t.vector))){return{point:w(e.origin,M(e.vector,d)),a:d,b:u}}return undefined};const E_=({vertices_coords:e,faces_vertices:t},n,s)=>{const r=Ir({vertices_coords:e,faces_vertices:t},n,ct);switch(r.length){case 0:return undefined;case 1:return r[0]}const c=w(n,M(s,.01));const o=r.map((n=>t[n].map((t=>e[t]))));const a=r.filter(((e,t)=>Tr(o[t],c,ot)));switch(a.length){case 0:return r.filter(((e,t)=>Tr(o[t],c,ct))).shift();case 1:return a[0];default:return a[0]}};const M_=({vertices_coords:e,edges_vertices:t},{vector:n,origin:s},r=a,c=dt)=>t.map((t=>{const o=t.map((t=>e[t]));const a=j(o[1],o[0]);const i={vector:a,origin:o[0]};return y_(i,{vector:n,origin:s},c,at,r)}));const A_=({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_edges:c,faces_faces:o},{vector:i,origin:f},l="V",d=a)=>{if(!c){c=Ds({edges_vertices:t,faces_vertices:r})}const u=E_({vertices_coords:e,faces_vertices:r},f,i);const m=Ut(l);const g=To({vertices_coords:e,edges_vertices:t,edges_foldAngle:n,edges_assignment:s,faces_vertices:r,faces_faces:o},u);const p=id({vertices_coords:g,faces_vertices:r});if(!p[u]){p.forEach(((e,t)=>{p[t]=!e}))}const _=M_({vertices_coords:g,edges_vertices:t},{vector:i,origin:f},d).map(((e,t)=>e===undefined?undefined:{...e,edge:t}));const h=t.map((t=>e[t[0]]));const v=Rs({vertices_coords:e,edges_vertices:t});const b=[];c.map((e=>e.map((e=>_[e])).filter((e=>e!==undefined)))).forEach(((e,t)=>{switch(e.length){case 0:case 1:break;default:b[t]=e;break}}));const y=(e,t)=>Math.abs(e.b-t.b)<d*2;const E=[];b.map((e=>e.sort(((e,t)=>e.b-t.b)))).map((e=>nc(e,y).map((t=>t.map((t=>e[t])))))).forEach(((e,t)=>{if(e.length===2){E[t]=[e[0][0],e[e.length-1][0]]}if(e.length>2){console.log("repeatFoldLine, non-convex polygons.")}}));return E.map(((e,t)=>({edges:e.map((e=>e.edge)),assignment:p[t]?l:m,points:e.map((e=>w(M(v[e.edge],e.a),h[e.edge])))})))};const x_={count:nn,countImplied:Kn,validate:io,clean:mr,populate:xc,remove:En,replace:hn,removePlanarVertex:xu,removePlanarEdge:Au,splitEdge:Tc,splitFace:eo,flatFold:Wu,normalize:b_,repeatFold:A_,addVertex:u_,addNonPlanarEdge:m_,addPlanarLine:g_,addPlanarSegment:bu,addPlanarSegmentNew:h_,planarize:Ec,...uo,...Ql,...ep,...vt,...qt,...Mo,...fu,..._r,...rp,...fp,...up,...Zs,...ur,...qr,..._s,...bd,...mp,..._p,...oo,...uc,...yp,...dd,...po,...Xt,...Oo,...jp,...ss,...en,..._c,...yn,...No,...kn,...ms,...sr,...Ks,...gc,...vc,...n_,...xo,...Vo,...fd,...du,..._u,...c_,...f_,...Kc,...d_};const w_=(e,t=a)=>{if(!e||!e.length){return undefined}const n=(e,n)=>st(e[0],n[0],t);const s=tc(e,n);let r=0;for(let t=1;t<s.length;t+=1){if(e[s[t]][1]<e[s[r]][1]){r=t}}return s[r]};const k_=(e,t=a)=>{const n=w_(e,t);if(n===undefined){return[]}const s=e.map((t=>j(t,e[n]))).map((e=>b(e))).map((e=>C([0,1],e)));const r=s.map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).map((e=>e.i)).filter((e=>e!==n));return[[n]].concat(sc(r.map((e=>s[e])),t).map((e=>e.map((e=>r[e])))).map((t=>t.length===1?t:t.map((t=>({i:t,len:U(e[t],e[n])}))).sort(((e,t)=>e.len-t.len)).map((e=>e.i)))))};const O_=(e=[],t=false,n=a)=>{if(e.length<2){return[]}const s=k_(e,n).map((e=>e.length===1?e:sn(e))).flat();s.push(s[0]);const r=[s[0]];let c=1;const o={"-1":()=>r.pop(),1:e=>{r.push(e);c+=1},undefined:()=>{c+=1}};o[0]=t?o["1"]:o["-1"];while(c<s.length){if(r.length<2){r.push(s[c]);c+=1;continue}const t=r[r.length-2];const a=r[r.length-1];const i=s[c];const f=Hn(...[t,a,i].map((t=>e[t])),n);o[f](i)}r.pop();return r};const j_=Object.freeze({__proto__:null,convexHull:O_,convexHullRadialSortPoints:k_,smallestVector2:w_});const F_=(e,t,n)=>{const s=e.map(((e,t)=>({vector:n[t],origin:e}))).map(((e,t,n)=>Wr(e,n[(t+1)%n.length],lt,lt).point));const r=t.map(((e,t)=>Or(e,s[t],(e=>e))));if(e.length===3){return e.map((e=>({type:"skeleton",points:[e,s[0]]}))).concat([{type:"perpendicular",points:[r[0],s[0]]}])}const c=s.map(((e,t)=>I(e,r[t])));let o=0;c.forEach(((e,t)=>{if(e<c[o]){o=t}}));const a=[{type:"skeleton",points:[e[o],s[o]]},{type:"skeleton",points:[e[(o+1)%e.length],s[o]]},{type:"perpendicular",points:[r[o],s[o]]}];const i=$n(D(t[(o+t.length-1)%t.length].vector),t[(o+1)%t.length].vector);const f=o===e.length-1;e.splice(o,2,s[o]);t.splice(o,1);n.splice(o,2,i);if(f){e.splice(0,1);n.splice(0,1);t.push(t.shift())}return a.concat(F_(e,t,n))};const S_=e=>{const t=e.map(((e,t,n)=>[e,n[(t+1)%n.length]])).map((e=>({vector:O(e[1],e[0]),origin:e[0]})));const n=e.map(((e,t,n)=>[(t-1+n.length)%n.length,t,(t+1)%n.length].map((e=>n[e])))).map((e=>[O(e[0],e[1]),O(e[2],e[1])])).map((e=>$n(...e)));return F_([...e],t,n)};const C_=(e,t)=>{if(e[0]===undefined||e[1]===undefined||e[2]===undefined){return undefined}const n=M(j(e[1],e[0]),1/U(e[1],e[0]));const s=C(n,j(e[2],e[0]));const r=M(n,s);const c=j(j(e[2],e[0]),r);const o=M(c,1/g(c));const a=U(e[1],e[0]);const i=C(o,j(e[2],e[0]));const f=(t[0]**2-t[1]**2+a**2)/(2*a);const l=(t[0]**2-t[2]**2+s**2+i**2)/(2*i)-s*f/i;return w(w(e[0],M(n,f)),M(o,l))};const V_=(e,t,n)=>{const s=t[0]-e[0];const r=t[1]-e[1];const c=n[0]-e[0];const o=n[1]-e[1];const i=s*(e[0]+t[0])+r*(e[1]+t[1]);const f=c*(e[0]+n[0])+o*(e[1]+n[1]);const l=2*(s*(n[1]-t[1])-r*(n[0]-t[0]));if(Math.abs(l)<a){const s=Math.min(e[0],t[0],n[0]);const r=Math.min(e[1],t[1],n[1]);const c=(Math.max(e[0],t[0],n[0])-s)*.5;const o=(Math.max(e[1],t[1],n[1])-r)*.5;return{origin:[s+c,r+o],radius:Math.sqrt(c*c+o*o)}}const d=[(o*i-r*f)/l,(s*f-c*i)/l];const u=d[0]-e[0];const m=d[1]-e[1];return{origin:d,radius:Math.sqrt(u*u+m*m)}};const P_=Object.freeze({__proto__:null,circumcircle:V_,trilateration:C_});const T_=(e,t,n=a)=>{for(let s=0;s<e.length;s+=1){if(e[s]<t.min[s]-n||e[s]>t.max[s]+n){return false}}return true};const N_=(e,t,n=a)=>{const s=Math.min(e.min.length,t.min.length);for(let r=0;r<s;r+=1){if(t.min[r]<e.min[r]-n||t.max[r]>e.max[r]+n){return false}}return true};const z_=Object.freeze({__proto__:null,enclosingBoundingBoxes:N_,pointInBoundingBox:T_});const B_=(e,t)=>{const n=e.map(((e,n)=>{const s=Cr(t,e,at);return{point:s?e:null,at_index:n}})).filter((e=>e.point!=null));const s=e.map(((e,t,n)=>({vector:O(e,n[(t+1)%n.length]),origin:n[(t+1)%n.length]}))).map(((e,n)=>({point:Wr(t,e,it,ut).point,at_index:n}))).filter((e=>e.point!=null));if(s.length===2){const t=s.slice().sort(((e,t)=>e.at_index-t.at_index));const n=e.slice(t[1].at_index+1).concat(e.slice(0,t[0].at_index+1));n.push(t[0].point);n.push(t[1].point);const r=e.slice(t[0].at_index+1,t[1].at_index+1);r.push(t[1].point);r.push(t[0].point);return[n,r]}if(s.length===1&&n.length===1){n[0].type="v";s[0].type="e";const t=n.concat(s).sort(((e,t)=>e.at_index-t.at_index));const r=e.slice(t[1].at_index+1).concat(e.slice(0,t[0].at_index+1));if(t[0].type==="e"){r.push(t[0].point)}r.push(t[1].point);const c=e.slice(t[0].at_index+1,t[1].at_index+1);if(t[1].type==="e"){c.push(t[1].point)}c.push(t[0].point);return[r,c]}if(n.length===2){const t=n.slice().sort(((e,t)=>e.at_index-t.at_index));const s=e.slice(t[1].at_index).concat(e.slice(0,t[0].at_index+1));const r=e.slice(t[0].at_index,t[1].at_index+1);return[s,r]}return[e.slice()]};const $_=Object.freeze({__proto__:null,splitConvexPolygon:B_});const R_=e=>{if(typeof e!=="object"){return typeof e}if(e.radius!==undefined){return"circle"}if(e.min&&e.max&&e.span){return"box"}if(typeof e[0]==="number"){return"vector"}if(e.vector!==undefined&&e.origin!==undefined){return"line"}if(e[0]!==undefined&&e[0].length&&typeof e[0][0]==="number"){return e.length===2?"segment":"polygon"}return"object"};const L_=e=>e.charAt(0).toUpperCase()+e.slice(1);const I_={polygon:dt,circle:ct,line:at,ray:ft,segment:dt};const U_=(e,t,n=a)=>{const s=e=>e==="polygon"?"ConvexPolygon":L_(e);const r=[e,t].map(R_);const c=[r,r.slice().reverse()].map((e=>e.map(s).join(""))).map((e=>ec[`intersect${e}`]));const o=[e.domain,t.domain].map(((e,t)=>e||I_[r[t]]));const i=[[e,t,...o],[t,e,...o.slice().reverse()]];const f=c.map(((e,t)=>({fn:e,params:i[t]}))).filter((e=>e.fn)).shift();return f?f.fn(...f.params,n):undefined};const Q_={...d,...Vn,...mt,...ne,...pe,...Pe,...Jp,...Xp,...j_,...xr,...Sr,...cs,...tt,...Jn,straightSkeleton:S_,...P_,...z_,...$r,...ec,...su,...$_,intersect:U_};const D_=e=>{const t=e.map((e=>e.toUpperCase()));const n=t.filter((e=>e==="M")).length;const s=t.filter((e=>e==="V")).length;return n>s?t.indexOf("V"):t.indexOf("M")};const q_=(e,t,n=0)=>{const s=D_(t);if(s===-1){return undefined}const r=e[(s+1)%e.length];const c=e[(s+2)%e.length];const o=Math.max(-Math.PI,Math.min(Math.PI,n));const a=-Math.cos(r)*Math.cos(c)+Math.sin(r)*Math.sin(c)*Math.cos(Math.PI-o);const i=Math.cos(Math.PI-o)-Math.sin(Math.PI-o)**2*Math.sin(r)*Math.sin(c)/(1-a);const f=-Math.acos(i)+Math.PI;return s%2===0?[f,o,f,o].map(((e,t)=>s===t?-e:e)):[o,f,o,f].map(((e,t)=>s===t?-e:e))};const W_=Object.freeze({__proto__:null,foldDegree4:q_});const G_=({vertices_coords:e,vertices_vertices:t,vertices_edges:n,vertices_faces:s,edges_vertices:r,edges_foldAngle:c,edges_vector:o,faces_vertices:i},l=a)=>{if(!t){t=Es({vertices_coords:e,vertices_edges:n,vertices_faces:s,edges_vertices:r,faces_vertices:i})}if(!n){n=vs({edges_vertices:r,vertices_vertices:t})}if(!s){s=xs({vertices_coords:e,vertices_vertices:t,faces_vertices:i})}const d=js({vertices_coords:e,vertices_vertices:t,vertices_edges:n,vertices_faces:s,edges_vertices:r,edges_vector:o,faces_vertices:i});return e.map(((e,t)=>{if(s[t].includes(undefined)||s[t].includes(null)){return true}const r=d[t].map((e=>Math.atan2(e[1],e[0])));const o=n[t].map((e=>c[e])).map((e=>e*f));const a=r.map((e=>je(e)));const i=a.map((e=>Ae(e)));const u=o.map((e=>ke(e)));const m=d[t].map(((e,t)=>Ee(a[t],Ee(u[t],i[t]))));let g=he;m.forEach((e=>{g=Ee(g,e)}));return Array.from(Array(9)).map(((e,t)=>Math.abs(g[t]-he[t])<l)).reduce(((e,t)=>e&&t),true)}))};const H_=Object.freeze({__proto__:null,verticesFoldable:G_});const J_={U:true,u:true};const Z_=e=>e.map(((e,t)=>t)).filter((t=>J_[e[t]]));const Y_=e=>{const t=Z_(e);const n=Array.from(Array(2**t.length)).map(((e,t)=>t.toString(2))).map((e=>Array(t.length-e.length+1).join("0")+e)).map((e=>Array.from(e).map((e=>e==="0"?"V":"M"))));const s=n.map((n=>{const s=e.slice();t.forEach(((e,t)=>{s[e]=n[t]}));return s}));const r=e.filter((e=>wt[e])).length;if(r>0){return s}const c=s.map((e=>e.filter((e=>e==="M"||e==="m")).length));const o=s.map((e=>e.filter((e=>e==="V"||e==="v")).length));return s.filter(((e,t)=>Math.abs(c[t]-o[t])===2))};const X_=Object.freeze({__proto__:null,maekawaSolver:Y_});const K_={...W_,...H_,...Su,...X_,...Tu};const eh=(e,t,n)=>{const s=e.createShader(n);e.shaderSource(s,t);e.compileShader(s);if(!e.getShaderParameter(s,e.COMPILE_STATUS)){throw new Error(e.getShaderInfoLog(s))}return s};const th=(e,t,n)=>{const s=e.createProgram();e.attachShader(s,t);e.attachShader(s,n);e.linkProgram(s);if(!e.getProgramParameter(s,e.LINK_STATUS)){throw new Error(e.getProgramInfoLog(s))}e.deleteShader(t);e.deleteShader(n);return s};const nh=(e,t,n)=>{const s=eh(e,t,e.VERTEX_SHADER);const r=eh(e,n,e.FRAGMENT_SHADER);return th(e,s,r)};const sh=(e,t)=>{const s=[null,"webgl","webgl2"];const r=window.devicePixelRatio||1;e.width=e.clientWidth*r;e.height=e.clientHeight*r;if(t){return{gl:e.getContext(s[t]),version:t}}const c=e.getContext(s[2]);if(c){return{gl:c,version:2}}const o=e.getContext(s[1]);if(o){return{gl:o,version:1}}throw new Error(n.noWebGL)};const rh=(e,t)=>{if(!e){return}const n=window.devicePixelRatio||1;const s=[t.clientWidth,t.clientHeight].map((e=>e*n));if(t.width!==s[0]||t.height!==s[1]){t.width=s[0];t.height=s[1]}e.viewport(0,0,e.canvas.width,e.canvas.height)};const ch=(e,t="perspective",n=45)=>{if(!e){return Fp}const s=.1;const r=20;const c=-100;const o=100;const a=[e.clientWidth,e.clientHeight];const i=Math.min(...a);const f=[0,1].map((e=>(a[e]-i)/i/2));const l=f.map((e=>e+.5));return t==="orthographic"?Gp(l[1],l[0],-l[1],-l[0],c,o):Wp(n*(Math.PI/180),a[0]/a[1],s,r)};const oh=e=>{if(!e){return Fp}const t=_o(e);if(!t){return Fp}const n=Math.max(...t.span);if(n===0){return Fp}const s=Y(3,P(t.min,t.max));const r=[n,0,0,0,0,n,0,0,0,0,n,0,...s,1];return Np(r)||Fp};const ah=Object.freeze({__proto__:null,makeModelMatrix:oh,makeProjectionMatrix:ch,rebuildViewport:rh});const ih=(e,t,n,s)=>{switch(n){case"uniformMatrix4fv":e[n](t,false,s);break;default:e[n](t,s);break}};const fh=(e,t,n,s={})=>{e.useProgram(n.program);n.flags.forEach((t=>e.enable(t)));const r=e.getProgramParameter(n.program,e.ACTIVE_UNIFORMS);for(let t=0;t<r;t+=1){const r=e.getActiveUniform(n.program,t).name;const c=s[r];if(c){const t=e.getUniformLocation(n.program,r);ih(e,t,c.func,c.value)}}n.vertexArrays.forEach((t=>{e.bindBuffer(e.ARRAY_BUFFER,t.buffer);e.bufferData(e.ARRAY_BUFFER,t.data,e.STATIC_DRAW);e.vertexAttribPointer(t.location,t.length,t.type,false,0,0);e.enableVertexAttribArray(t.location)}));n.elementArrays.forEach((n=>{e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n.buffer);e.bufferData(e.ELEMENT_ARRAY_BUFFER,n.data,e.STATIC_DRAW);e.drawElements(n.mode,n.data.length,t===2?e.UNSIGNED_INT:e.UNSIGNED_SHORT,n.buffer)}));n.flags.forEach((t=>e.disable(t)))};const lh=(e,t)=>{t.vertexArrays.forEach((t=>e.disableVertexAttribArray(t.location)));t.vertexArrays.forEach((t=>e.deleteBuffer(t.buffer)));t.elementArrays.forEach((t=>e.deleteBuffer(t.buffer)));e.deleteProgram(t.program)};const dh=Object.freeze({__proto__:null,deallocProgram:lh,drawProgram:fh});const uh={B:[.5,.5,.5],b:[.5,.5,.5],V:[.2,.4,.6],v:[.2,.4,.6],M:[.75,.25,.15],m:[.75,.25,.15],F:[.3,.3,.3],f:[.3,.3,.3],J:[.3,.2,0],j:[.3,.2,0],C:[.5,.8,.1],c:[.5,.8,.1],U:[.6,.25,.9],u:[.6,.25,.9]};const mh={B:[0,0,0],b:[0,0,0],V:[.2,.5,.8],v:[.2,.5,.8],M:[.75,.25,.15],m:[.75,.25,.15],F:[.75,.75,.75],f:[.75,.75,.75],J:[1,.75,.25],j:[1,.75,.25],C:[.5,.8,.1],c:[.5,.8,.1],U:[.6,.25,.9],u:[.6,.25,.9]};const gh=e=>e!==undefined&&e.constructor===Array?e.slice(0,3):Oa(e).slice(0,3).map((e=>e/255));const ph=({vertices_coords:e,edges_assignment:t,faces_vertices:n,faces_edges:s,faces_normal:r},c={})=>{const o=e.map((e=>[...e].concat(Array(3-e.length).fill(0))));const a=ps({vertices_coords:o,faces_vertices:n,faces_normal:r});const i=o.map(((e,t)=>t%3)).map((e=>[e===0?1:0,e===1?1:0,e===2?1:0]));const f=s.map((e=>e.map((e=>t[e])).map((e=>e==="J"||e==="j"))));if(!c.showTrianglulation){for(let e=0;e<f.length;e+=1){if(f[e][0]){i[e*3+0][2]=i[e*3+1][2]=100}if(f[e][1]){i[e*3+1][0]=i[e*3+2][0]=100}if(f[e][2]){i[e*3+0][1]=i[e*3+2][1]=100}}}return{vertices_coords:o,vertices_normal:a,vertices_barycentric:i}};const _h=(e,t)=>{if(!e||!e.vertices_coords||!e.edges_vertices){return[]}const n=t&&t.dark?uh:mh;const s={...n,...t};const r=e.vertices_coords.map((e=>[...e].concat(Array(3-e.length).fill(0))));const c=e.edges_vertices.flatMap((e=>e.map((e=>r[e])))).flatMap((e=>[e,e,e,e]));const o=Rs(e);const a=e.edges_assignment?e.edges_assignment.flatMap((e=>Array(8).fill(s[e]))):e.edges_vertices.flatMap((()=>Array(8).fill(s.U)));const i=o.flatMap((e=>[e,e,e,e,e,e,e,e]));const f=e.edges_vertices.flatMap((()=>[[1,0],[0,1],[-1,0],[0,-1],[1,0],[0,1],[-1,0],[0,-1]]));return{vertices_coords:c,vertices_color:a,verticesEdgesVector:i,vertices_vector:f}};const hh=Object.freeze({__proto__:null,makeFacesVertexData:ph,makeThickEdgesVertexData:_h});const vh=(e,t,{vertices_coords:n,edges_vertices:s,edges_assignment:r,faces_vertices:c,faces_edges:o,faces_normal:a}={},i={})=>{if(!n||!c){return[]}if(!o){o=Ds({edges_vertices:s,faces_vertices:c})}const{vertices_coords:f,vertices_normal:l,vertices_barycentric:d}=ph({vertices_coords:n,edges_assignment:r,faces_vertices:c,faces_edges:o,faces_normal:a},i);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:f.length?f[0].length:3,data:new Float32Array(f.flat())},{location:e.getAttribLocation(t,"v_normal"),buffer:e.createBuffer(),type:e.FLOAT,length:l.length?l[0].length:3,data:new Float32Array(l.flat())},{location:e.getAttribLocation(t,"v_barycentric"),buffer:e.createBuffer(),type:e.FLOAT,length:3,data:new Float32Array(d.flat())}].filter((e=>e.location!==-1))};const bh=(e,t=1,n={})=>{if(!n||!n.vertices_coords||!n.faces_vertices){return[]}return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:t===2?new Uint32Array(n.faces_vertices.flat()):new Uint16Array(n.faces_vertices.flat())}]};const yh=(e,t,n,s={})=>{if(!n||!n.vertices_coords||!n.edges_vertices){return[]}const{vertices_coords:r,vertices_color:c,verticesEdgesVector:o,vertices_vector:a}=_h(n,s.assignment_color);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:r.length?r[0].length:3,data:new Float32Array(r.flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:c.length?c[0].length:3,data:new Float32Array(c.flat())},{location:e.getAttribLocation(t,"edge_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:o.length?o[0].length:3,data:new Float32Array(o.flat())},{location:e.getAttribLocation(t,"vertex_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:a.length?a[0].length:3,data:new Float32Array(a.flat())}].filter((e=>e.location!==-1))};const Eh=(e,t=1,n={})=>{if(!n||!n.edges_vertices){return[]}const s=n.edges_vertices.map(((e,t)=>t*8)).flatMap((e=>[e+0,e+1,e+4,e+4,e+1,e+5,e+1,e+2,e+5,e+5,e+2,e+6,e+2,e+3,e+6,e+6,e+3,e+7,e+3,e+0,e+7,e+7,e+0,e+4]));return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:t===2?new Uint32Array(s):new Uint16Array(s)}]};const Mh=Object.freeze({__proto__:null,makeFoldedElementArrays:bh,makeFoldedVertexArrays:vh,makeThickEdgesElementArrays:Eh,makeThickEdgesVertexArrays:yh});const Ah=5e-6;const xh=(e,t=Ah)=>{const n=Bo(e);if(!n.edges_assignment){const e=nn.edges(n)||Kn.edges(n);n.edges_assignment=Array(e).fill("U")}let s=[];if(n.faceOrders){s=_d(n)}else if(n.faces_layer){s=hd(n)}const r=Op(n);const c=gr(n);if(r.faces){const e=lr(r.faces.map);e.forEach(((e,n)=>{const r=s[e];if(!r){return}c.faces_vertices[n].forEach((e=>{const n=E(r.vector,r.layer*t);c.vertices_coords[e]=x(Y(3,c.vertices_coords[e]),n)}))}))}return c};const wh=(e,{projectionMatrix:t,modelViewMatrix:n,frontColor:s,backColor:r,strokeWidth:c,opacity:o})=>({u_matrix:{func:"uniformMatrix4fv",value:Pp(t,n)},u_projection:{func:"uniformMatrix4fv",value:t},u_modelView:{func:"uniformMatrix4fv",value:n},u_frontColor:{func:"uniform3fv",value:gh(s)},u_backColor:{func:"uniform3fv",value:gh(r)},u_strokeWidth:{func:"uniform1f",value:c},u_opacity:{func:"uniform1f",value:o}});const kh=`#version 300 es\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nin vec3 v_position;\nin vec3 v_normal;\nout vec3 front_color;\nout vec3 back_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tvec3 light = abs(normalize((vec4(v_normal, 1) * u_modelView).xyz));\n\tfloat brightness = 0.5 + light.x * 0.15 + light.z * 0.35;\n\tfront_color = u_frontColor * brightness;\n\tback_color = u_backColor * brightness;\n}\n`;const Oh=`#version 300 es\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\nin vec3 v_position;\nin vec3 v_color;\nin vec3 edge_vector;\nin vec2 vertex_vector;\nout vec3 blend_color;\nvoid main () {\n\tvec3 edge_norm = normalize(edge_vector);\n\t// axis most dissimilar to edge_vector\n\tvec3 absNorm = abs(edge_norm);\n\tvec3 xory = absNorm.x < absNorm.y ? vec3(1,0,0) : vec3(0,1,0);\n\tvec3 axis = absNorm.x > absNorm.z && absNorm.y > absNorm.z ? vec3(0,0,1) : xory;\n\t// two perpendiculars. with edge_vector these make basis vectors\n\tvec3 one = cross(axis, edge_norm);\n\tvec3 two = cross(one, edge_norm);\n\tvec3 displaceNormal = normalize(\n\t\tone * vertex_vector.x + two * vertex_vector.y\n\t);\n\tvec3 displace = displaceNormal * (u_strokeWidth * 0.5);\n\tgl_Position = u_matrix * vec4(v_position + displace, 1);\n\tblend_color = v_color;\n}\n`;const jh=`#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nuniform float u_opacity;\nin vec3 front_color;\nin vec3 back_color;\nin vec3 barycentric;\nout vec4 outColor;\nfloat edgeFactor(vec3 barycenter) {\n\tvec3 d = fwidth(barycenter);\n\tvec3 a3 = smoothstep(vec3(0.0), d*3.5, barycenter);\n\treturn min(min(a3.x, a3.y), a3.z);\n}\nvoid main () {\n\tgl_FragDepth = gl_FragCoord.z;\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\toutColor = vec4(mix(vec3(0.0), color, edgeFactor(barycentric)), u_opacity);\n}\n`;const Fh=`#version 100\nprecision mediump float;\nuniform float u_opacity;\nvarying vec3 barycentric;\nvarying vec3 front_color;\nvarying vec3 back_color;\nvoid main () {\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\tvec3 boundary = vec3(0.0, 0.0, 0.0)\n\t// gl_FragDepth = 0.5;\n\tgl_FragColor = any(lessThan(barycentric, vec3(0.02)))\n\t\t? vec4(boundary, u_opacity)\n\t\t: vec4(color, u_opacity);\n}\n`;const Sh=`#version 100\nattribute vec3 v_position;\nattribute vec3 v_normal;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nvarying vec3 normal_color;\nvarying vec3 front_color;\nvarying vec3 back_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tvec3 light = abs(normalize((vec4(v_normal, 1) * u_modelView).xyz));\n\tfloat brightness = 0.5 + light.x * 0.15 + light.z * 0.35;\n\tfront_color = u_frontColor * brightness;\n\tback_color = u_backColor * brightness;\n}\n`;const Ch=`#version 100\nattribute vec3 v_position;\nattribute vec3 v_color;\nattribute vec3 edge_vector;\nattribute vec2 vertex_vector;\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\nvarying vec3 blend_color;\nvoid main () {\n\tvec3 edge_norm = normalize(edge_vector);\n\t// axis most dissimilar to edge_vector\n\tvec3 absNorm = abs(edge_norm);\n\tvec3 xory = absNorm.x < absNorm.y ? vec3(1,0,0) : vec3(0,1,0);\n\tvec3 axis = absNorm.x > absNorm.z && absNorm.y > absNorm.z ? vec3(0,0,1) : xory;\n\t// two perpendiculars. with edge_vector these make basis vectors\n\tvec3 one = cross(axis, edge_norm);\n\tvec3 two = cross(one, edge_norm);\n\tvec3 displaceNormal = normalize(\n\t\tone * vertex_vector.x + two * vertex_vector.y\n\t);\n\tvec3 displace = displaceNormal * (u_strokeWidth * 0.5);\n\tgl_Position = u_matrix * vec4(v_position + displace, 1);\n\tblend_color = v_color;\n}\n`;const Vh=`#version 100\nprecision mediump float;\nuniform float u_opacity;\nvarying vec3 front_color;\nvarying vec3 back_color;\nvoid main () {\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\tgl_FragColor = vec4(color, u_opacity);\n}\n`;const Ph=`#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nin vec3 blend_color;\nout vec4 outColor;\n \nvoid main() {\n\toutColor = vec4(blend_color.rgb, 1);\n}\n`;const Th=`#version 100\nattribute vec3 v_position;\nattribute vec3 v_normal;\nattribute vec3 v_barycentric;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nvarying vec3 normal_color;\nvarying vec3 barycentric;\nvarying vec3 front_color;\nvarying vec3 back_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tbarycentric = v_barycentric;\n\tvec3 light = abs(normalize((vec4(v_normal, 1) * u_modelView).xyz));\n\tfloat brightness = 0.5 + light.x * 0.15 + light.z * 0.35;\n\tfront_color = u_frontColor * brightness;\n\tback_color = u_backColor * brightness;\n}\n`;const Nh=`#version 300 es\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nin vec3 v_position;\nin vec3 v_normal;\nin vec3 v_barycentric;\nin float v_rawEdge;\nout vec3 front_color;\nout vec3 back_color;\nout vec3 barycentric;\n// flat out int rawEdge;\nflat out int provokedVertex;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tprovokedVertex = gl_VertexID;\n\tbarycentric = v_barycentric;\n\t// rawEdge = int(v_rawEdge);\n\tvec3 light = abs(normalize((vec4(v_normal, 1) * u_modelView).xyz));\n\tfloat brightness = 0.5 + light.x * 0.15 + light.z * 0.35;\n\tfront_color = u_frontColor * brightness;\n\tback_color = u_backColor * brightness;\n}\n`;const zh=`#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nuniform float u_opacity;\nin vec3 front_color;\nin vec3 back_color;\nout vec4 outColor;\nvoid main () {\n\tgl_FragDepth = gl_FragCoord.z;\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\toutColor = vec4(color, u_opacity);\n}\n`;const Bh=`#version 100\nprecision mediump float;\nvarying vec3 blend_color;\nvoid main () {\n\tgl_FragColor = vec4(blend_color.rgb, 1);\n}\n`;const $h=(e,t=1,n={},s={})=>{const r=xh(n,s.layerNudge);const c=t===1?nh(e,Sh,Vh):nh(e,kh,zh);return{program:c,vertexArrays:vh(e,c,r,s),elementArrays:bh(e,t,r),flags:[e.DEPTH_TEST],makeUniforms:wh}};const Rh=(e,t=1,n={},s={})=>{const r=t===1?nh(e,Ch,Bh):nh(e,Oh,Ph);return{program:r,vertexArrays:yh(e,r,n,s),elementArrays:Eh(e,t,n),flags:[e.DEPTH_TEST],makeUniforms:wh}};const Lh=(e,t=1,n={},s={})=>{const r=xh(n,s.layerNudge);const c=t===1?nh(e,Th,Fh):nh(e,Nh,jh);return{program:c,vertexArrays:vh(e,c,r,s),elementArrays:bh(e,t,r),flags:[e.DEPTH_TEST],makeUniforms:wh}};const Ih=Object.freeze({__proto__:null,foldedFormEdges:Rh,foldedFormFaces:$h,foldedFormFacesOutlined:Lh});const Uh=(e,t=1,n={},s={})=>{const r=[];if(s.faces!==false){if(s.outlines===false){r.push($h(e,t,n,s))}else{r.push(Lh(e,t,n,s))}}if(s.edges===true){r.push(Rh(e,t,n,s))}return r};const Qh=e=>e.map((e=>[0,1].map((t=>e[t]||0))));const Dh=(e,t)=>{if(!e||!e.vertices_coords||!e.edges_vertices){return[]}const n=t&&t.dark?uh:mh;const s={...n,...t};const r=Qh(e.edges_vertices.flatMap((t=>t.map((t=>e.vertices_coords[t])))).flatMap((e=>[e,e])));const c=Qh(Rs(e));const o=e.edges_assignment?e.edges_assignment.flatMap((e=>[s[e],s[e],s[e],s[e]])):e.edges_vertices.flatMap((()=>[s.U,s.U,s.U,s.U]));const a=c.flatMap((e=>[e,e,e,e]));const i=e.edges_vertices.flatMap((()=>[[1,0],[-1,0],[-1,0],[1,0]]));return{vertices_coords:r,vertices_color:o,verticesEdgesVector:a,vertices_vector:i}};const qh=Object.freeze({__proto__:null,makeCPEdgesVertexData:Dh});const Wh=(e,t,n,s)=>{if(!n||!n.vertices_coords||!n.edges_vertices){return[]}const{vertices_coords:r,vertices_color:c,verticesEdgesVector:o,vertices_vector:a}=Dh(n,s);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:2,data:new Float32Array(r.flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:c.length?c[0].length:2,data:new Float32Array(c.flat())},{location:e.getAttribLocation(t,"edge_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:o.length?o[0].length:2,data:new Float32Array(o.flat())},{location:e.getAttribLocation(t,"vertex_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:a.length?a[0].length:2,data:new Float32Array(a.flat())}].filter((e=>e.location!==-1))};const Gh=(e,t=1,n={})=>{if(!n||!n.edges_vertices){return[]}const s=n.edges_vertices.map(((e,t)=>t*4)).flatMap((e=>[e+0,e+1,e+2,e+2,e+3,e+0]));return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:t===2?new Uint32Array(s):new Uint16Array(s)}]};const Hh=e=>e.map((e=>[0,1].map((t=>e[t]||0))));const Jh=(e,t,n)=>{if(!n||!n.vertices_coords){return[]}return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:2,data:new Float32Array(Hh(n.vertices_coords).flat())}].filter((e=>e.location!==-1))};const Zh=(e,t=1,n={})=>{if(!n||!n.vertices_coords||!n.faces_vertices){return[]}return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:t===2?new Uint32Array(Mp(n).flat()):new Uint16Array(Mp(n).flat())}]};const Yh=Object.freeze({__proto__:null,makeCPEdgesElementArrays:Gh,makeCPEdgesVertexArrays:Wh,makeCPFacesElementArrays:Zh,makeCPFacesVertexArrays:Jh});const Xh=(e,{projectionMatrix:t,modelViewMatrix:n,cpColor:s,strokeWidth:r})=>({u_matrix:{func:"uniformMatrix4fv",value:Pp(t,n)},u_projection:{func:"uniformMatrix4fv",value:t},u_modelView:{func:"uniformMatrix4fv",value:n},u_cpColor:{func:"uniform3fv",value:gh(s)},u_strokeWidth:{func:"uniform1f",value:r}});const Kh=`#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nin vec3 blend_color;\nout vec4 outColor;\nvoid main() {\n\toutColor = vec4(blend_color.rgb, 1);\n}\n`;const ev=`#version 100\nprecision mediump float;\nvarying vec3 blend_color;\nvoid main () {\n\tgl_FragColor = vec4(blend_color.rgb, 1);\n}\n`;const tv=`#version 300 es\nuniform mat4 u_matrix;\nuniform float u_strokeWidth;\nin vec2 v_position;\nin vec3 v_color;\nin vec2 edge_vector;\nin vec2 vertex_vector;\nout vec3 blend_color;\nvoid main () {\n\tfloat sign = vertex_vector[0];\n\tfloat halfWidth = u_strokeWidth * 0.5;\n\tvec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * halfWidth;\n\tgl_Position = u_matrix * vec4(side + v_position, 0, 1);\n\tblend_color = v_color;\n}\n`;const nv=`#version 100\nuniform mat4 u_matrix;\nuniform float u_strokeWidth;\nattribute vec2 v_position;\nattribute vec3 v_color;\nattribute vec2 edge_vector;\nattribute vec2 vertex_vector;\nvarying vec3 blend_color;\nvoid main () {\n\tfloat sign = vertex_vector[0];\n\tfloat halfWidth = u_strokeWidth * 0.5;\n\tvec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * halfWidth;\n\tgl_Position = u_matrix * vec4(side + v_position, 0, 1);\n\tblend_color = v_color;\n}\n`;const sv=`#version 100\nuniform mat4 u_matrix;\nuniform vec3 u_cpColor;\nattribute vec2 v_position;\nvarying vec3 blend_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 0, 1);\n\tblend_color = u_cpColor;\n}\n`;const rv=`#version 300 es\nuniform mat4 u_matrix;\nuniform vec3 u_cpColor;\nin vec2 v_position;\nout vec3 blend_color;\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 0, 1);\n\tblend_color = u_cpColor;\n}\n`;const cv=(e,t={},n=undefined)=>{const s=nh(e,sv,ev);return{program:s,vertexArrays:Jh(e,s,t),elementArrays:Zh(e,1,t),flags:[],makeUniforms:Xh}};const ov=(e,t={},n=undefined)=>{const s=nh(e,nv,ev);return{program:s,vertexArrays:Wh(e,s,t,n),elementArrays:Gh(e,1,t),flags:[],makeUniforms:Xh}};const av=(e,t={},n=undefined)=>{const s=nh(e,rv,Kh);return{program:s,vertexArrays:Jh(e,s,t),elementArrays:Zh(e,2,t),flags:[],makeUniforms:Xh}};const iv=(e,t={},n=undefined)=>{const s=nh(e,tv,Kh);return{program:s,vertexArrays:Wh(e,s,t,n),elementArrays:Gh(e,2,t),flags:[],makeUniforms:Xh}};const fv=Object.freeze({__proto__:null,cpEdgesV1:ov,cpEdgesV2:iv,cpFacesV1:cv,cpFacesV2:av});const lv=(e,t=1,n={},s=undefined)=>{switch(t){case 1:return[cv(e,n,s),ov(e,n,s)];case 2:default:return[av(e,n,s),iv(e,n,s)]}};const dv=Object.assign(Object.create(null),{createProgram:nh,initialize:sh,foldedForm:Uh,creasePattern:lv},ah,dh,Mh,hh,Ih,Yh,qh,fv);const uv=({vertices_coords:e,edges_vertices:t})=>{const n=t.map((t=>t.map((t=>e[t])))).map((e=>I(...e)));const s=n.reduce(((e,t)=>Math.min(e,t)),Infinity);return s===Infinity?undefined:s};const mv=({vertices_coords:e,edges_vertices:t})=>{const n=uv({vertices_coords:e,edges_vertices:t});if(n){return Math.max(n*1e-4,1e-10)}const s=_o({vertices_coords:e});return s&&s.span?Math.max(1e-6*Math.max(...s.span),1e-10):1e-6};const gv=e=>lr(lr(e).reverse());const pv=(e,t)=>{const n=[];const s=id(e);const r=e.edges_faces?e.edges_faces:Vs(e);r.forEach(((e,r)=>{if(e.length===1){n[r]="B"}if(e.length===2){const c=e.map((e=>s[e]));if(c[0]===c[1]){n[r]="F";return}const o=e.map((e=>t[e]));const a=o[0]<o[1];const i=c[0]?a:!a;n[r]=i?"V":"M"}}));return n};const _v=e=>{const t=[];e.forEach((e=>{t[e[0]]=undefined;t[e[1]]=undefined}));const n=t.map((()=>[]));e.forEach((([e,t,s])=>{n[e][t]=s;n[t][e]=-s}));return n};const hv=Object.freeze({__proto__:null,faceOrdersToMatrix:_v,facesLayerToEdgesAssignments:pv,flipFacesLayer:gv,makeEpsilon:mv});const vv={taco_taco:e=>[[e[0],e[2]],[e[1],e[3]],[e[1],e[2]],[e[0],e[3]],[e[0],e[1]],[e[2],e[3]]],taco_tortilla:e=>[[e[0],e[2]],[e[0],e[1]],[e[1],e[2]]],tortilla_tortilla:e=>[[e[0],e[2]],[e[1],e[3]]],transitivity:e=>[[e[0],e[1]],[e[1],e[2]],[e[2],e[0]]]};const bv=e=>e[0]<e[1]?`${e[0]} ${e[1]}`:`${e[1]} ${e[0]}`;const yv={taco_taco:e=>[bv([e[0],e[2]]),bv([e[1],e[3]]),bv([e[1],e[2]]),bv([e[0],e[3]]),bv([e[0],e[1]]),bv([e[2],e[3]])],taco_tortilla:e=>[bv([e[0],e[2]]),bv([e[0],e[1]]),bv([e[1],e[2]])],tortilla_tortilla:e=>[bv([e[0],e[2]]),bv([e[1],e[3]])],transitivity:e=>[bv([e[0],e[1]]),bv([e[1],e[2]]),bv([e[2],e[0]])]};const Ev={0:0,1:1,2:-1};const Mv=(e,t)=>{const n=Object.keys(e);const s=n.map((e=>e.split(" ").map((e=>parseInt(e,10)))));s.forEach(((s,r)=>{const c=Ev[e[n[r]]];const o=!t[s[1]]?-c:c;s.push(o)}));return s};const Av=Object.freeze({__proto__:null,constraintToFacePairs:vv,constraintToFacePairsStrings:yv,solverSolutionToFaceOrders:Mv});const xv=({taco_taco:e,taco_tortilla:t,tortilla_tortilla:n,transitivity:s})=>{const r={};r.taco_taco=e.map((e=>[e[0][0],e[1][0],e[0][1],e[1][1]]));r.taco_tortilla=t.map((e=>[e.taco[0],e.tortilla,e.taco[1]]));r.tortilla_tortilla=n.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]]));r.transitivity=s.map((e=>[e[0],e[1],e[2]]));return r};const wv=e=>{const t={};Object.keys(e).forEach((e=>{t[e]={}}));Object.keys(e).forEach((n=>{e[n].forEach(((e,s)=>yv[n](e).forEach((e=>{if(t[n][e]===undefined){t[n][e]=[]}t[n][e].push(s)}))))}));return t};const kv=({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_center:s})=>{const r=t.map((t=>e[t[0]]));const c=t.map((t=>j(e[t[1]],e[t[0]])));return n.map(((e,t)=>e.map((e=>R(j(s[e],r[t]),c[t]))).map((e=>Math.sign(e)))))};const Ov=({vertices_coords:e,edges_vertices:t,faces_center:n},s,r)=>{const c=s.map((n=>t[n[0]].map((t=>e[t]))));const o=c.map((e=>e[0]));const a=c.map((e=>j(e[1],e[0])));const i=r.map((e=>e.map((e=>e.map((e=>n[e]))))));return i.map(((e,t)=>e.map((e=>e.map((e=>R(j(e,o[t]),a[t]))).map((e=>Math.sign(e)))))))};const jv=e=>{if(e[0]===1&&e[1]===-1||e[0]===-1&&e[1]===1){return"both"}if(e[0]===1&&e[1]===1){return"right"}if(e[0]===-1&&e[1]===-1){return"left"}return undefined};const Fv=e=>e[0]===e[1]&&e[0]!=="both";const Sv=e=>e[0]===e[1]&&e[0]==="both";const Cv=e=>e[0]!==e[1]&&(e[0]==="both"||e[1]==="both");const Vv=(e,t,n)=>{const s=t[0]==="left"||t[1]==="left"?-1:1;const r=t[0]==="both"?[...e[1]]:[...e[0]];const c=t[0]==="both"?0:1;const o=n[c][0]===s?e[c][0]:e[c][1];return{taco:r,tortilla:o}};const Pv=(e,t)=>{if(e===undefined){return undefined}return t[0][0]===t[1][0]?e:[e[0],[e[1][1],e[1][0]]]};const Tv=(e,t,n)=>{const s=t.map((e=>e.length===2&&e[0]!==e[1])).map(((e,t)=>e?t:undefined)).filter((e=>e!==undefined));const r=[];s.forEach((e=>{r[e]=n[e]}));const c=r.map(((t,n)=>t.map((t=>[e[n],[t,t]])))).reduce(((e,t)=>e.concat(t)),[]);return c};const Nv=({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:s,faces_center:r,edges_vector:c},o=a)=>{if(!r){r=Js({vertices_coords:e,faces_vertices:s})}const i=kv({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_center:r});const f=r_({vertices_coords:e,edges_vertices:t,edges_vector:c},o);const l=i_({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:s},o);const d=lo(f).filter((e=>e.map((e=>n[e].length>1)).reduce(((e,t)=>e&&t),true)));const u=d.map((e=>e.map((e=>n[e]))));const m=Ov({vertices_coords:e,edges_vertices:t,faces_center:r},d,u);const g=m.map((e=>e.map(jv)));const p=g.map(((e,t)=>Fv(e)?u[t]:undefined)).filter((e=>e!==undefined));const _=g.map(((e,t)=>Sv(e)?u[t]:undefined)).map(((e,t)=>Pv(e,m[t]))).filter((e=>e!==undefined));const h=Tv(n,i,l);const v=_.concat(h);const b=g.map(((e,t)=>Cv(e)?Vv(u[t],g[t],m[t]):undefined)).filter((e=>e!==undefined));const y=l.map(((e,t)=>i[t].length>1&&i[t][0]===i[t][1]?e:[]));const E=y.map(((e,t)=>({taco:n[t],tortillas:e}))).filter((e=>e.tortillas.length));const M=E.flatMap((e=>e.tortillas.map((t=>({taco:[...e.taco],tortilla:t})))));const A=b.concat(M);return{taco_taco:p,tortilla_tortilla:v,taco_tortilla:A}};const zv=({faces_polygon:e},t,n=a)=>{const s=t.map((()=>[]));t.forEach(((e,t)=>e.forEach((e=>{s[t][e]=true;s[e][t]=true}))));const r=[];t.forEach(((t,s)=>t.forEach((t=>{const c=nu(e[s],e[t],n);if(c){if(!r[s]){r[s]=[]}if(!r[t]){r[t]=[]}r[s][t]=c;r[t][s]=c}}))));const c=[];for(let t=0;t<r.length-1;t+=1){if(!r[t]){continue}for(let o=t+1;o<r.length;o+=1){if(!r[t][o]){continue}for(let a=o+1;a<r.length;a+=1){if(t===a||o===a){continue}if(!s[t][a]||!s[o][a]){continue}const i=nu(r[t][o],e[a],n);if(i){c.push([t,o,a].sort(((e,t)=>e-t)))}}}}return c};const Bv=(e,{taco_taco:t,taco_tortilla:n})=>{const s={};t.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]].sort(((e,t)=>e-t)))).forEach((e=>[`${e[0]} ${e[1]} ${e[2]}`,`${e[0]} ${e[1]} ${e[3]}`,`${e[0]} ${e[2]} ${e[3]}`,`${e[1]} ${e[2]} ${e[3]}`].forEach((e=>{s[e]=true}))));n.map((e=>[e.taco[0],e.taco[1],e.tortilla].sort(((e,t)=>e-t)).join(" "))).forEach((e=>{s[e]=true}));return e.filter((e=>s[e.join(" ")]===undefined))};const $v=Object.freeze({__proto__:null,filterTransitivity:Bv,makeTransitivity:zv});const Rv=({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:s,faces_edges:r,edges_vector:c},o=a)=>{const i=id({vertices_coords:e,faces_vertices:s});const f=Ws({vertices_coords:e,faces_vertices:s},o);i.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined)).forEach((e=>f[e].reverse()));const l=l_({vertices_coords:e,faces_vertices:s},o);const{taco_taco:d,taco_tortilla:u,tortilla_tortilla:m}=Nv({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:s,faces_edges:r,edges_vector:c},o);const g=zv({faces_polygon:f},l,o);const p=Bv(g,{taco_taco:d,taco_tortilla:u});const _=lo(l).map((e=>e.join(" ")));const h=xv({taco_taco:d,taco_tortilla:u,tortilla_tortilla:m,transitivity:p});const v=wv(h);return{constraints:h,lookup:v,facePairs:_,faces_winding:i}};const Lv=Object.freeze({__proto__:null,setup:Rv});const Iv=({edges_faces:e,edges_assignment:t},n,s)=>{const r={0:0,1:2,2:1};const c={M:1,m:1,V:2,v:2};const o={};n.forEach((e=>{o[e]=true}));const a={};e.forEach(((e,n)=>{const i=t[n];const f=c[i];if(e.length<2||f===undefined){return}const l=s[e[0]];const d=l?f:r[f];const u=`${e[0]} ${e[1]}`;const m=`${e[1]} ${e[0]}`;if(u in o){a[u]=d}if(m in o){a[m]=r[d]}}));return a};const Uv=["111112","111121","111222","112111","121112","121222","122111","122212","211121","211222","212111","212221","221222","222111","222212","222221"];const Qv=["112","121","212","221"];const Dv=["11","22"];const qv=["112","121","122","211","212","221"];const Wv=(e,t,n)=>{const s=Array.from(n).map((e=>parseInt(e,10)));if(s.filter((e=>e===0)).length!==t){return}e[t][n]=false;let r=false;for(let n=0;n<s.length;n+=1){const c=[];if(s[n]!==0){continue}for(let r=1;r<=2;r+=1){s[n]=r;if(e[t-1][s.join("")]!==false){c.push([n,r])}}s[n]=0;if(c.length>0&&r===false){r=[]}if(c.length===1){r.push(c[0])}}if(r!==false&&r.length===0){r=true}e[t][n]=r};const Gv=e=>{const t=e[0].length;const n=Array.from(Array(t+1)).map((()=>({})));Array.from(Array(2**t)).map(((e,t)=>t.toString(2))).map((e=>Array.from(e).map((e=>parseInt(e,10)+1)).join(""))).map((e=>`11111${e}`.slice(-t))).forEach((e=>{n[0][e]=false}));e.forEach((e=>{n[0][e]=true}));Array.from(Array(t)).map(((e,t)=>t+1)).map((e=>Array.from(Array(3**t)).map(((e,t)=>t.toString(3))).map((e=>`000000${e}`.slice(-t))).forEach((t=>Wv(n,e,t)))));let s=[];Array.from(Array(t+1)).map(((e,n)=>t-n)).forEach((e=>{const t=[];Object.keys(n[e]).forEach((s=>{let r=n[e][s];if(r.constructor===Array){r=r[0]}t.push([s,r])}));s=s.concat(t)}));s.sort(((e,t)=>parseInt(e[0],10)-parseInt(t[0],10)));const r={};s.forEach((e=>{r[e[0]]=Object.freeze(e[1])}));return Object.freeze(r)};const Hv={taco_taco:Gv(Uv),taco_tortilla:Gv(Qv),tortilla_tortilla:Gv(Dv),transitivity:Gv(qv)};const Jv=Object.freeze(Object.keys(Hv));const Zv=(e,t,...n)=>{const s={0:0,1:2,2:1};const r=vv[e](t);const c=r.map((e=>e[1]<e[0]));const o=r.map(((e,t)=>c[t]?`${e[1]} ${e[0]}`:`${e[0]} ${e[1]}`));const a=o.map(((e,t)=>{for(let r=0;r<n.length;r+=1){if(n[r][e]){return c[t]?s[n[r][e]]:n[r][e]}}return 0})).join("");if(Hv[e][a]===true||Hv[e][a]===false){return Hv[e][a]}const i=Hv[e][a];const f=o[i[0]];const l=c[i[0]]?s[i[1]]:i[1];return[f,l]};const Yv=(e,t,n)=>{const s={};Jv.forEach((r=>{const c=n.flatMap((e=>t[r][e]));s[r]=on(c).filter((t=>e[r][t]))}));return s};const Xv=(e,t,n,...s)=>{let r=n;const c={};do{const n=Yv(e,t,r);const o={};for(let t=0;t<Jv.length;t+=1){const r=Jv[t];const a=n[r];for(let t=0;t<a.length;t+=1){const n=Zv(r,e[r][a[t]],...s,c);if(n===true){continue}if(n===false){throw new Error(`invalid ${r} ${a[t]}:${e[r][a[t]]}`)}if(c[n[0]]){if(c[n[0]]!==n[1]){throw new Error(`conflict ${r} ${a[t]}:${e[r][a[t]]}`)}}else{const[e,t]=n;o[e]=true;c[n[0]]=t}}}r=Object.keys(o)}while(r.length);return c};const Kv=(e,t,n)=>{const s=Object.keys(t);const r={};e.forEach((e=>{r[e]=true}));let c=0;const o=[];while(c<e.length){if(!r[e[c]]){c+=1;continue}const a=[];const i=[e[c]];const f={[e[c]]:true};do{const e=i.pop();delete r[e];a.push(e);const c={};s.forEach((s=>{const r=n[s][e];if(!r){return}r.map((e=>t[s][e])).map((e=>yv[s](e).forEach((e=>{c[e]=true}))))}));const o=Object.keys(c).filter((e=>r[e])).filter((e=>!f[e]));i.push(...o);o.forEach((e=>{f[e]=true}))}while(i.length);c+=1;o.push(a)}return o};const eb=(e,t,n,...s)=>{if(!n.length){return[]}const r=n[0];const c=[];const o=[];[1,2].forEach((a=>{let i;try{i=Xv(e,t,[r],...s,{[r]:a})}catch(e){return}i[r]=a;if(Object.keys(i).length===n.length){c.push(i)}else{o.push(i)}}));const a=o.map((r=>eb(e,t,n.filter((e=>!(e in r))),...s,r)));return c.map((e=>[...s,e])).concat(...a)};const tb=({constraints:e,lookup:t,facePairs:s,orders:r})=>{let c;try{c=Xv(e,t,Object.keys(r),r)}catch(e){throw new Error(n.noLayerSolution,{cause:e})}const o=s.filter((e=>!(e in r))).filter((e=>!(e in c)));let a;try{a=Kv(o,e,t).map((n=>eb(e,t,n,r,c)))}catch(e){throw new Error(n.noLayerSolution,{cause:e})}const i={...r,...c};const f=a.map((e=>e.map((e=>Object.assign({},...e)))));return{root:i,branches:f}};const nb=e=>{const t=e.reduce(((e,t)=>e*t),1);const n=e.slice();for(let e=n.length-2;e>=0;e-=1){n[e]*=n[e+1]}n.push(1);n.shift();return Array.from(Array(t)).map(((t,s)=>e.map(((e,t)=>Math.floor(s/n[t])%e))))};const sb={count:function(){return this.branches.map((e=>e.length))},faceOrders:function(...e){return Mv(this.compile(...e),this.faces_winding)},facesLayer:function(...e){return lr(this.linearize(...e).reverse())},compile:function(...e){const t=Array(this.branches.length).fill(0).map(((t,n)=>e[n]!=null?e[n]:t));const n=this.branches?this.branches.map(((e,n)=>e[t[n]])):[];return Object.assign({},this.root,...n)},directedPairs:function(...e){const t=this.compile(...e);return Object.keys(t).map((e=>t[e]===1?e.split(" "):e.split(" ").reverse())).map((e=>e.map((e=>parseInt(e,10)))))},linearize:function(...e){return ld(this.directedPairs(...e))},allSolutions:function(){return nb(this.count()).map((e=>this.compile(...e)))},allFacesLayers:function(){return nb(this.count()).map((e=>this.facesLayer(...e)))}};const rb=()=>({root:{},branches:[],faces_winding:[]});const cb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,faces_vertices:r,faces_edges:c,edges_vector:o},a)=>{if(!e||!t||!r){return Object.assign(Object.create(sb),rb())}if(!c){c=Ds({edges_vertices:t,faces_vertices:r})}if(!n){n=Cs({edges_vertices:t,faces_edges:c})}if(a===undefined){a=mv({vertices_coords:e,edges_vertices:t})}const{constraints:i,lookup:f,facePairs:l,faces_winding:d}=Rv({vertices_coords:e,edges_vertices:t,edges_faces:n,faces_vertices:r,faces_edges:c,edges_vector:o},a);const u=Iv({edges_faces:n,edges_assignment:s},l,d);const{root:m,branches:g}=tb({constraints:i,lookup:f,facePairs:l,orders:u});return Object.assign(Object.create(sb),{root:m,branches:g,faces_winding:d})};const ob=(e,t,n=a)=>{const s=e[0]<e[1]?e:[e[1],e[0]];const r=t[0]<t[1]?t:[t[1],t[0]];const c=Math.min(s[1],r[1])-Math.max(s[0],r[0]);return c>n};const ab=({vertices_coords:e,edges_vertices:t},n,s,r=a)=>{const c=n.map((n=>t[n].map((t=>e[t]))));const o=c.map((e=>e.map((e=>S(e,s)))));const i=ob(...o,r);return i};const ib=(e,t)=>{if(e.orders){e.orders=e.orders.flatMap((e=>Mv(e,t)))}if(e.leaves){e.leaves=e.leaves.map((e=>Mv(e,t)))}if(e.partitions){e.partitions.forEach((e=>ib(e,t)))}if(e.node){e.node.forEach((e=>ib(e,t)))}return e};const fb=Object.freeze({__proto__:null,doEdgesOverlap:ab,doRangesOverlap:ob,reformatSolution:ib});const lb=({vertices_coords:e,edges_vertices:t},n=a)=>{const{lines:s,edges_line:r}=hc({vertices_coords:e,edges_vertices:t},n);const c=r.map((e=>s[e].vector));const o=$s({vertices_coords:e,edges_vertices:t}).map(((e,t)=>e.map((e=>S(c[t],e)))));return lr(r).map((e=>e.constructor===Array?e:[e])).flatMap((e=>un(e).filter((e=>ob(...e.map((e=>o[e])))))))};const db=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s,faces_center:r},c,o,i,f=a)=>{const l=s.map(jt);const d=lb({vertices_coords:e,edges_vertices:t},f).map((e=>e[0]<e[1]?e:e.slice().reverse())).filter((e=>!(l[e[0]]&&l[e[1]]))).filter((e=>e.map((e=>n[e].length===2)).reduce(((e,t)=>e&&t),true))).filter((e=>e.map((e=>c[e]!==undefined)).reduce(((e,t)=>e&&t),true))).filter((e=>Array.from(new Set(e.flatMap((e=>c[e])))).length!==4));const u=d.map((e=>e.map((e=>c[e]))));const m=u.map((e=>Array.from(new Set(e.flat()))));const g=u.map(((e,t)=>{const n={};e.flat().forEach((e=>{n[e]=[]}));e.forEach(((e,s)=>e.forEach((e=>n[e].push(d[t][s])))));return n}));const p=d.map((e=>e.map((e=>n[e]))));const _=p.map(((e,t)=>{const n={};m[t].forEach((e=>{n[e]=[]}));e.flat().forEach((e=>n[o[e]].push(e)));return n}));const h=$s({vertices_coords:e,edges_vertices:t});const v=m.map(((e,t)=>{const n=h[d[t][0]];const s={};e.forEach((e=>{s[e]=n.map((t=>Cp(i[e],t))).map((e=>[e[0],e[1]]))}));return s}));const b=_.map(((e,t)=>{const n={};m[t].forEach((s=>{const c=v[t][s][0];n[s]=e[s].map((e=>R(j(r[e],c),j(v[t][s][1],c)))).map((e=>Math.sign(e)))}));return n}));const y=b.map(((e,t)=>{const n={};m[t].forEach((t=>{n[t]=e[t].reduce(((n,s)=>n&&s===e[t][0]),true)}));return n}));const E=d.map(((e,t)=>{const n={};Object.keys(g[t]).forEach((e=>{n[e]={edges:g[t][e],faces:_[t][e],facesSides:b[t][e],facesSameSide:y[t][e]}}));return{edges:e,sets:n}}));const M=E.filter((e=>{const t=Object.values(e.sets).map((e=>e.faces.length===2)).reduce(((e,t)=>e&&t),true);const n=Object.values(e.sets).map((e=>e.facesSameSide)).reduce(((e,t)=>e&&t),true);return t&&n}));const A=E.filter((e=>{const t=Object.values(e.sets).length===3;const n=Object.values(e.sets).map((e=>e.facesSameSide)).reduce(((e,t)=>e&&t),true);return t&&n}));const x=E.filter((e=>{const t=Object.values(e.sets).map((e=>e.faces.length===2)).reduce(((e,t)=>e&&t),true);const n=Object.values(e.sets).map((e=>e.facesSameSide));const s=n[0]!==n[1];return t&&s}));const w=E.filter((e=>{const t=Object.values(e.sets).filter((e=>e.faces.length===3)).shift();const s=t!==undefined;if(!s){return false}const r=t.facesSides.reduce(((e,t)=>e+t),0);const c=Math.abs(r)===1;if(!c){return false}const o=t.faces.filter(((e,n)=>t.facesSides[n]===r));const a=t.edges.map((e=>n[e].map((e=>o.includes(e))).reduce(((e,t)=>e&&t),true))).reduce(((e,t)=>e||t),false);const i=!a;return s&&c&&i}));if(w.length){console.log("This model contains the third case",w)}return{tortillaTortillaEdges:M,solvable1:A,solvable2:x,solvable3:[]}};const ub=({edges_faces:e},t,n,s)=>{const r=t.map((e=>e.edges)).map((t=>t.map((t=>e[t].slice()))));r.forEach(((e,t)=>{if(n[e[0][0]]!==n[e[1][0]]){r[t][1].reverse()}}));r.map((e=>[e[0][0],e[0][1]])).map((e=>e.map((e=>s[e])))).map(((e,t)=>e[0]!==e[1]?t:undefined)).filter((e=>e!==undefined)).forEach((e=>{const t=r[e][0][1];r[e][0][1]=r[e][1][1];r[e][1][1]=t}));return r};const mb=(e,t,n=a)=>{const s=t.map((t=>Tr(e,t,ot,n))).reduce(((e,t)=>e||t),false);if(s){return true}const r=tu(e,{vector:j(t[1],t[0]),origin:t[0]},ot,ut,n);return r!==undefined};const gb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s},r,c,o,i,f,l,d,u=a)=>{const m=o.slice();m.forEach(((e,t)=>{if(e.length<2){delete m[t]}}));const g=n.map((e=>{const t={};e.forEach((e=>{t[e]=true}));return t}));const p=d.map((e=>e.filter((e=>m[e]!==undefined)).map((e=>m[e]))));d.map(((e,t)=>t)).filter((e=>p[e].length<2)).forEach((e=>delete p[e]));const _=p.map(((e,t)=>e.map((e=>e.filter((e=>g[t][e]))))));const h=p.map(((e,t)=>e.map((e=>e.filter((e=>!g[t][e]))))));const v=p.map(((n,s)=>t[s].map((t=>e[t]))));const b=h.map(((e,t)=>e.map((e=>e.map((e=>{const n=v[t].map((t=>Cp(c[i[e]],t)));const s=n.map((e=>[e[0],e[1]]));return mb(f[e],s,u)?e:undefined})).filter((e=>e!==undefined))))));const y=p.flatMap(((e,t)=>b[t].flatMap(((e,n)=>{const s=1-n;const r=_[t];return e.map((e=>({edge:t,faces:[r[n][0],r[s][0]],overlap:e,set:i[e]})))}))));const E=y.map((e=>[e.faces[0],e.overlap]));const M=E.map((e=>e[0]<e[1]));M.forEach(((e,t)=>{if(!e){E[t].reverse()}}));const A=y.map((e=>l[e.faces[0]]));const x=y.map((e=>s[e.edge])).map(Math.sign).map((e=>e===1));const w=y.map(((e,t)=>A[t]^x[t]));const k=w.map(((e,t)=>M[t]?e:1-e)).map((e=>e+1));const O={};E.forEach(((e,t)=>{O[e.join(" ")]=k[t]}));return O};const pb=({edges_foldAngle:e,faces_winding:t},n,s)=>{const r=n.map((t=>t.map((t=>e[t]))));const c=s.map((e=>e.map((e=>t[e]))));const o=r.map(((e,t)=>e.map(((e,n)=>c[t][n]?e:-e))));const a=o.map((e=>e[0]>e[1]));const i=s.map((e=>e[0]<e[1]));const f=s.map(((e,t)=>a[t]^i[t]));const l={};const d=s.map(((e,t)=>i[t]?e:e.slice().reverse())).map((e=>e.join(" ")));f.map((e=>e+1)).forEach(((e,t)=>{l[d[t]]=e}));return l};const _b=({edges_foldAngle:e,faces_winding:t},n)=>{const s=n.map((e=>Object.values(e.sets).sort(((e,t)=>t.faces.length-e.faces.length)).shift()));const r=s.map((e=>e.edges));const c=s.map((e=>e.faces));return pb({edges_foldAngle:e,faces_winding:t},r,c)};const hb=({edges_foldAngle:e,faces_winding:t},n)=>{const s=n.map((e=>Object.values(e.sets).filter((e=>e.facesSameSide)).shift()));const r=s.map((e=>e.edges));const c=s.map((e=>e.faces));return pb({edges_foldAngle:e,faces_winding:t},r,c)};const vb=({edges_foldAngle:e,faces_winding:t},n)=>({});const bb=({edges_foldAngle:e,faces_winding:t},n,s,r)=>{const c=_b({edges_foldAngle:e,faces_winding:t},n);const o=hb({edges_foldAngle:e,faces_winding:t},s);const a=vb({edges_foldAngle:e,faces_winding:t});return{...c,...o,...a}};const yb=(e,t,n)=>{const s=(e,t)=>{const n=Cp(e,t);return[n[0],n[1]]};const r=e.vertices_coords.map((e=>Y(3,e)));const c=t.map((t=>ro(e,t)));n.forEach(((e,t)=>{c[t].vertices_coords=c[t].vertices_coords.map(((t,n)=>s(e,r[n])))}));const o=e.edges_foldAngle.map(jt).map(((e,t)=>!e?t:undefined)).filter((e=>e!==undefined));const a=Ct(e,"edges");c.forEach((e=>o.forEach((t=>a.forEach((n=>{delete e[n][t]}))))));return c};const Eb=Object.freeze({__proto__:null,graphGroupCopies:yb});const Mb=({edges_vertices:e,faces_edges:t},n)=>{const s=e.map((()=>({})));n.forEach(((e,n)=>t[n].forEach((t=>{s[t][e]=true}))));const r=s.map((e=>Object.keys(e).map((e=>parseInt(e,10))).sort(((e,t)=>e-t))));return r};const Ab=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s,faces_edges:r,faces_winding:c,faces_center:o},a,i,f,l,d,u,m)=>{const g=u.map((e=>f[e[0]]));const p=lr(g).map((e=>e.constructor===Array?e:[e]));const _=p.map((e=>e.map((e=>d[e]))));const h=Mb({edges_vertices:t,faces_edges:r},f);h.map(((e,t)=>e.length!==2?t:undefined)).filter((e=>e!==undefined)).forEach((e=>delete h[e]));const{tortillaTortillaEdges:v,solvable1:b,solvable2:y,solvable3:E}=db({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s,faces_center:o},h,f,i,m);const M=ub({edges_faces:n},v,f,c);const A=gb({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:s},_,i,a,f,l,c,h,m);const x=bb({edges_foldAngle:s,faces_winding:c},b,y);const w={...A,...x};return{tortillas3D:M,orders:w}};const xb=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,edges_foldAngle:r,faces_vertices:c,faces_edges:o,faces_faces:i},f=a)=>{if(!o){o=Ds({edges_vertices:t,faces_vertices:c})}if(!n){n=Cs({edges_vertices:t,faces_edges:o})}if(!i){i=qs({faces_vertices:c})}if(!r&&s){r=zs({edges_assignment:s})}if(!s){s=Ts({edges_foldAngle:r})}const{sets_faces:l,sets_transformXY:d,faces_set:u,faces_winding:m}=t_({vertices_coords:e,faces_vertices:c,faces_faces:i},f);const g=yb({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,edges_foldAngle:r,faces_vertices:c,faces_edges:o,faces_faces:i},l,d);const p=rn(...g.map((e=>Ws(e,f))));m.map(((e,t)=>e?undefined:t)).filter((e=>e!==undefined)).forEach((e=>p[e].reverse()));const _=rn(...g.map((e=>l_(e,f))));const h=p.map((e=>B(...e)));g.forEach((e=>{e.faces_center=e.faces_vertices.map(((e,t)=>h[t]))}));const v=g.map((e=>Nv(e,f)));const b=v.flatMap((e=>e.taco_taco));const y=v.flatMap((e=>e.taco_tortilla));const E=v.flatMap((e=>e.tortilla_tortilla));const M=zv({faces_polygon:p},_,f);const A=Bv(M,{taco_taco:b,taco_tortilla:y});const x=lo(_);const w=x.map((e=>e.join(" ")));const{tortillas3D:k,orders:O}=Ab({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_foldAngle:r,faces_edges:o,faces_winding:m,faces_center:h},l,d,u,p,w,x,f);E.push(...k);const j=xv({taco_taco:b,taco_tortilla:y,tortilla_tortilla:E,transitivity:A});const F=wv(j);g.map((e=>Iv(e,w,m))).forEach((e=>Object.assign(O,e)));return{constraints:j,lookup:F,facePairs:w,faces_winding:m,orders:O}};const wb=Object.freeze({__proto__:null,setup:xb});const kb=()=>({root:{},branches:[],faces_winding:[]});const Ob=({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,edges_foldAngle:r,faces_vertices:c,faces_edges:o,faces_faces:a},i)=>{if(!e||!t||!c){return Object.assign(Object.create(sb),kb())}if(i===undefined){i=mv({vertices_coords:e,edges_vertices:t})}const{constraints:f,lookup:l,facePairs:d,faces_winding:u,orders:m}=xb({vertices_coords:e,edges_vertices:t,edges_faces:n,edges_assignment:s,edges_foldAngle:r,faces_vertices:c,faces_edges:o,faces_faces:a},i);const{root:g,branches:p}=tb({constraints:f,lookup:l,facePairs:d,orders:m});return Object.assign(Object.create(sb),{root:g,branches:p,faces_winding:u})};const jb=(e,t,n)=>{const s=e.map((e=>e?(e[0]+e[1])/2:undefined));const r=[];e.forEach(((c,o)=>{if(!c){return}if(!t&&o===e.length-1){return}const a=c[1];const i=a-n*2;const f=a+n*2;const l=[o,(o+1)%e.length];const d=l.map((e=>s[e])).map((e=>e>a));const u=(!d[0]&&!d[1])*1+(d[0]&&d[1])*2;const m=r.filter((e=>e.min<a&&e.max>a)).shift();const g={faces:l,taco_type:u};if(m){m.pairs.push(g)}else{r.push({min:i,max:f,pairs:[g]})}}));return r.map((e=>e.pairs)).filter((e=>e.length>1)).map((e=>({both:e.filter((e=>e.taco_type===0)).map((e=>e.faces)),left:e.filter((e=>e.taco_type===1)).map((e=>e.faces)),right:e.filter((e=>e.taco_type===2)).map((e=>e.faces))})))};const Fb=(e,t,n)=>t<n?e.slice(t+1,n):e.slice(n+1,t);const Sb=(e,t,n=true,s=a)=>{const r=lr(t);const c=e.map((e=>e?e[1]:undefined));const o=e.map((e=>e?Math.min(...e):undefined)).map((e=>e+s));const i=e.map((e=>e?Math.max(...e):undefined)).map((e=>e-s));const f=r.length+(n?0:-1);for(let e=0;e<f;e+=1){const n=(e+1)%r.length;if(r[e]===r[n]){continue}const s=Fb(t,r[e],r[n]).flat();const a=s.map((t=>c[e]<o[t])).reduce(((e,t)=>e&&t),true);const f=s.map((t=>c[e]>i[t])).reduce(((e,t)=>e&&t),true);if(!a&&!f){return false}}return true};const Cb=e=>{const t=an(e);const n={};let s=0;for(let e=0;e<t.length;e+=1){if(n[t[e]]===undefined){s+=1;n[t[e]]=s}else if(n[t[e]]!==undefined){if(n[t[e]]!==s){return false}s-=1;n[t[e]]=undefined}}return true};const Vb=(e,t)=>e.map((e=>t[e])).filter((e=>e!==undefined));const Pb=(e,t,n,s,r)=>{const c=t.flat();if(!Sb(e,t,s,r)){return false}for(let e=0;e<n.length;e+=1){const t=Vb(c,n[e]);if(!Cb(t)){return false}}return true};const Tb={V:true,v:true,M:true,m:true};const Nb=e=>{let t=0;const n=e.slice(1);return[false].concat(n.map((e=>Tb[e]?++t:t)).map((e=>e%2===1)))};const zb={V:1,v:1,M:-1,m:-1};const Bb=(e,t)=>t%2===0?zb[e]||0:-(zb[e]||0);const $b=e=>{let t=0;return e.slice(1).concat([e[0]]).map((e=>{const n=Bb(e,t);t+=zb[e]===undefined?0:1;return n}))};const Rb=(e,t)=>{const n=Nb(t).map(((t,n)=>e[n]*(t?-1:1)));const s=e.map((()=>undefined));s[0]=[0,n[0]];for(let r=1;r<e.length;r+=1){if(t[r]==="B"||t[r]==="b"){break}const c=(r-1+e.length)%e.length;const o=s[c][1];s[r]=[o,o+n[r]]}return s};const Lb={B:true,b:true};const Ib=(e,t,n=a)=>{const s=Rb(e,t);const r=$b(t);const c=t.map((e=>!Lb[e])).reduce(((e,t)=>e&&t),true);if(c){const e=s[0][0];const t=s[s.length-1][1];if(Math.abs(e-t)>n){return[]}}const o=jb(s,c,n).map((e=>[e.left,e.right].map(lr).filter((e=>e.length>1)))).reduce(((e,t)=>e.concat(t)),[]);const i=(t=[0],a=0,f=0)=>{const l=a+1;const d=r[a];const u=a>=e.length-1;const m=c&&u;if(!Pb(s,t,o,m,n)){return[]}if(m){const e=lr(t);const n=e[0];const s=e[a];if(d>0&&s>n){return[]}if(d<0&&s<n){return[]}}if(u){return[t]}if(d===0){t[f]=[l].concat(t[f]);return i(t,l,f)}const g=d===1?Array.from(Array(t.length-f)).map(((e,t)=>f+t+1)):Array.from(Array(f+1)).map(((e,t)=>t));const p=g.map((()=>Bo(t)));p.forEach(((e,t)=>e.splice(g[t],0,l)));return p.map(((e,t)=>i(e,l,g[t]))).reduce(((e,t)=>e.concat(t)),[])};return i().map(lr)};const Ub=(e,t,n)=>{if(t==null){t=e.map((()=>"U"))}const s=Y_(t);const r=s.map((t=>Ib(e,t,n)));return s.map(((e,t)=>t)).filter((e=>r[e].length>0)).map((e=>({assignment:s[e],layer:r[e]})))};Object.assign(cb,{table:Hv,makeTacosAndTortillas:Nv,...$v,...hv,...Av,...Lv,layer3d:Ob,...wb,...fb,...Eb,singleVertexSolver:Ib,singleVertexAssignmentSolver:Ub,foldStripWithAssignments:Rb});Object.assign(fm,x_);const Qb={graph:fm,cp:lm,origami:dm,axiom:Gm,convert:Qg,general:Hg,math:Q_,singleVertex:K_,svg:Cl,webgl:dv,layer:cb};xl.ear=Qb;Object.defineProperty(Qb,"window",{enumerable:false,set:e=>{Cl.window=c(e)}});export{Qb as default};