/* Rabbit Ear 0.9.32 alpha 2022-07-29 (c) Kraft, MIT License */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).ear=t()}(this,(function(){"use strict";const e="undefined",t="number",r="object",n="index",o="vertices",s="edges",c="faces",i="boundaries",a="vertices_coords",l="edges_vertices",d="faces_edges",u="edges_assignment",g="edges_foldAngle",p="boundary",h="front",m="back",v="foldedForm",_="black",y="white",b="none",E=typeof window!==e&&typeof window.document!==e;typeof process!==e&&null!=process.versions&&process.versions.node;const x=typeof self===r&&self.constructor&&"DedicatedWorkerGlobalScope"===self.constructor.name,O={window:void 0};E&&(O.window=window);var k=Object.create(null);const typeOf=function(e){switch(e.constructor.name){case"vector":case"matrix":case"segment":case"ray":case"line":case"circle":case"ellipse":case"rect":case"polygon":return e.constructor.name}if("object"==typeof e){if(null!=e.radius)return"circle";if(null!=e.width)return"rect";if(null!=e.x||"number"==typeof e[0])return"vector";if(null!=e[0]&&e[0].length&&("number"==typeof e[0].x||"number"==typeof e[0][0]))return"segment";if(null!=e.vector&&null!=e.origin)return"line"}},resize=(e,t)=>t.length===e?t:Array(e).fill(0).map(((e,r)=>t[r]?t[r]:e)),resizeUp=(e,t)=>{const r=e.length>t.length?e.length:t.length;return[e,t].map((e=>resize(r,e)))},countPlaces=function(e){const t=`${e}`.match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);return t?Math.max(0,(t[1]?t[1].length:0)-(t[2]?+t[2]:0)):0},cleanNumber=function(e,t=15){if("number"!=typeof e)return e;const r=parseFloat(e.toFixed(t));return countPlaces(r)===Math.min(t,countPlaces(e))?e:r},isIterable=e=>null!=e&&"function"==typeof e[Symbol.iterator],semiFlattenArrays=function(){switch(arguments.length){case void 0:case 0:return Array.from(arguments);case 1:return isIterable(arguments[0])&&"string"!=typeof arguments[0]?semiFlattenArrays(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>isIterable(e)?[...semiFlattenArrays(e)]:e))}},flattenArrays=function(){switch(arguments.length){case void 0:case 0:return Array.from(arguments);case 1:return isIterable(arguments[0])&&"string"!=typeof arguments[0]?flattenArrays(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>isIterable(e)?[...flattenArrays(e)]:e)).reduce(((e,t)=>e.concat(t)),[])}};var M=Object.freeze({__proto__:null,resize:resize,resizeUp:resizeUp,resizeDown:(e,t)=>{const r=e.length>t.length?t.length:e.length;return[e,t].map((e=>resize(r,e)))},cleanNumber:cleanNumber,semiFlattenArrays:semiFlattenArrays,flattenArrays:flattenArrays}),A=Object.create(null);const j=1e-6,P=180/Math.PI,w=Math.PI/180,S=2*Math.PI;var C=Object.freeze({__proto__:null,EPSILON:j,R2D:P,D2R:w,TWO_PI:S});const fnTrue=()=>!0,fnSquare=e=>e*e,fnAdd=(e,t)=>e+(t||0),fnNotUndefined=e=>void 0!==e,fnVec2Angle=e=>Math.atan2(e[1],e[0]),fnToVec2=e=>[Math.cos(e),Math.sin(e)],fnEpsilonEqual=(e,t,r=j)=>Math.abs(e-t)<r,fnEpsilonSort=(e,t,r=j)=>fnEpsilonEqual(e,t,r)?0:Math.sign(t-e),fnEpsilonEqualVectors=(e,t,r=j)=>{for(let n=0;n<Math.max(e.length,t.length);n+=1)if(!fnEpsilonEqual(e[n]||0,t[n]||0,r))return!1;return!0},include=(e,t=j)=>e>-t,exclude=(e,t=j)=>e>t,L=fnTrue,$=fnTrue,N=include,z=exclude,includeS=(e,t=j)=>e>-t&&e<1+t,excludeS=(e,t=j)=>e>t&&e<1-t,rayLimiter=e=>e<-j?0:e,segmentLimiter=e=>e<-j?0:e>1.000001?1:e;var F=Object.freeze({__proto__:null,fnTrue:fnTrue,fnSquare:fnSquare,fnAdd:fnAdd,fnNotUndefined:fnNotUndefined,fnAnd:(e,t)=>e&&t,fnCat:(e,t)=>e.concat(t),fnVec2Angle:fnVec2Angle,fnToVec2:fnToVec2,fnEqual:(e,t)=>e===t,fnEpsilonEqual:fnEpsilonEqual,fnEpsilonSort:fnEpsilonSort,fnEpsilonEqualVectors:fnEpsilonEqualVectors,include:include,exclude:exclude,includeL:L,excludeL:$,includeR:N,excludeR:z,includeS:includeS,excludeS:excludeS,lineLimiter:e=>e,rayLimiter:rayLimiter,segmentLimiter:segmentLimiter});const magnitude=e=>Math.sqrt(e.map(fnSquare).reduce(fnAdd,0)),magnitude2=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]),magnitude3=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]),magSquared=e=>e.map(fnSquare).reduce(fnAdd,0),normalize=e=>{const t=magnitude(e);return 0===t?e:e.map((e=>e/t))},normalize2=e=>{const t=magnitude2(e);return 0===t?e:[e[0]/t,e[1]/t]},normalize3=e=>{const t=magnitude3(e);return 0===t?e:[e[0]/t,e[1]/t,e[2]/t]},scale=(e,t)=>e.map((e=>e*t)),scale2=(e,t)=>[e[0]*t,e[1]*t],add=(e,t)=>e.map(((e,r)=>e+(t[r]||0))),add2=(e,t)=>[e[0]+t[0],e[1]+t[1]],subtract=(e,t)=>e.map(((e,r)=>e-(t[r]||0))),subtract2=(e,t)=>[e[0]-t[0],e[1]-t[1]],subtract3=(e,t)=>[e[0]-t[0],e[1]-t[1],e[2]-t[2]],dot=(e,t)=>e.map(((r,n)=>e[n]*t[n])).reduce(fnAdd,0),dot2=(e,t)=>e[0]*t[0]+e[1]*t[1],midpoint=(e,t)=>e.map(((e,r)=>(e+t[r])/2)),average=function(){if(0===arguments.length)return[];const e=arguments[0].length>0?arguments[0].length:0,t=Array(e).fill(0);return Array.from(arguments).forEach((e=>t.forEach(((r,n)=>{t[n]+=e[n]||0})))),t.map((e=>e/arguments.length))},lerp=(e,t,r)=>{const n=1-r;return e.map(((e,o)=>e*n+(t[o]||0)*r))},cross2=(e,t)=>e[0]*t[1]-e[1]*t[0],cross3=(e,t)=>[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]],distance=(e,t)=>Math.sqrt(e.map(((r,n)=>(e[n]-t[n])**2)).reduce(fnAdd,0)),distance2=(e,t)=>{const r=e[0]-t[0],n=e[1]-t[1];return Math.sqrt(r*r+n*n)},flip=e=>e.map((e=>-e)),rotate90=e=>[-e[1],e[0]],rotate270=e=>[e[1],-e[0]],degenerate=(e,t=j)=>e.map((e=>Math.abs(e))).reduce(fnAdd,0)<t,parallel=(e,t,r=j)=>1-Math.abs(dot(normalize(e),normalize(t)))<r;var V=Object.freeze({__proto__:null,magnitude:magnitude,magnitude2:magnitude2,magnitude3:magnitude3,magSquared:magSquared,normalize:normalize,normalize2:normalize2,normalize3:normalize3,scale:scale,scale2:scale2,add:add,add2:add2,add3:(e,t)=>[e[0]+t[0],e[1]+t[1],e[2]+t[2]],subtract:subtract,subtract2:subtract2,subtract3:subtract3,dot:dot,dot2:dot2,midpoint:midpoint,midpoint2:(e,t)=>scale2(add2(e,t),.5),average:average,lerp:lerp,cross2:cross2,cross3:cross3,distance:distance,distance2:distance2,distance3:(e,t)=>{const r=e[0]-t[0],n=e[1]-t[1],o=e[2]-t[2];return Math.sqrt(r*r+n*n+o*o)},flip:flip,rotate90:rotate90,rotate270:rotate270,degenerate:degenerate,parallel:parallel,parallel2:(e,t,r=j)=>Math.abs(cross2(e,t))<r});const I=Object.freeze([1,0,0,0,1,0,0,0,1]),B=Object.freeze(I.concat(0,0,0)),isIdentity3x4=e=>B.map(((t,r)=>Math.abs(t-e[r])<j)).reduce(((e,t)=>e&&t),!0),multiplyMatrix3Vector3=(e,t)=>[e[0]*t[0]+e[3]*t[1]+e[6]*t[2]+e[9],e[1]*t[0]+e[4]*t[1]+e[7]*t[2]+e[10],e[2]*t[0]+e[5]*t[1]+e[8]*t[2]+e[11]],multiplyMatrix3Line3=(e,t,r)=>({vector:[e[0]*t[0]+e[3]*t[1]+e[6]*t[2],e[1]*t[0]+e[4]*t[1]+e[7]*t[2],e[2]*t[0]+e[5]*t[1]+e[8]*t[2]],origin:[e[0]*r[0]+e[3]*r[1]+e[6]*r[2]+e[9],e[1]*r[0]+e[4]*r[1]+e[7]*r[2]+e[10],e[2]*r[0]+e[5]*r[1]+e[8]*r[2]+e[11]]}),multiplyMatrices3=(e,t)=>[e[0]*t[0]+e[3]*t[1]+e[6]*t[2],e[1]*t[0]+e[4]*t[1]+e[7]*t[2],e[2]*t[0]+e[5]*t[1]+e[8]*t[2],e[0]*t[3]+e[3]*t[4]+e[6]*t[5],e[1]*t[3]+e[4]*t[4]+e[7]*t[5],e[2]*t[3]+e[5]*t[4]+e[8]*t[5],e[0]*t[6]+e[3]*t[7]+e[6]*t[8],e[1]*t[6]+e[4]*t[7]+e[7]*t[8],e[2]*t[6]+e[5]*t[7]+e[8]*t[8],e[0]*t[9]+e[3]*t[10]+e[6]*t[11]+e[9],e[1]*t[9]+e[4]*t[10]+e[7]*t[11]+e[10],e[2]*t[9]+e[5]*t[10]+e[8]*t[11]+e[11]],determinant3=e=>e[0]*e[4]*e[8]-e[0]*e[7]*e[5]-e[3]*e[1]*e[8]+e[3]*e[7]*e[2]+e[6]*e[1]*e[5]-e[6]*e[4]*e[2],invertMatrix3=e=>{const t=determinant3(e);if(Math.abs(t)<1e-6||Number.isNaN(t)||!Number.isFinite(e[9])||!Number.isFinite(e[10])||!Number.isFinite(e[11]))return;const r=[e[4]*e[8]-e[7]*e[5],-e[1]*e[8]+e[7]*e[2],e[1]*e[5]-e[4]*e[2],-e[3]*e[8]+e[6]*e[5],e[0]*e[8]-e[6]*e[2],-e[0]*e[5]+e[3]*e[2],e[3]*e[7]-e[6]*e[4],-e[0]*e[7]+e[6]*e[1],e[0]*e[4]-e[3]*e[1],-e[3]*e[7]*e[11]+e[3]*e[8]*e[10]+e[6]*e[4]*e[11]-e[6]*e[5]*e[10]-e[9]*e[4]*e[8]+e[9]*e[5]*e[7],e[0]*e[7]*e[11]-e[0]*e[8]*e[10]-e[6]*e[1]*e[11]+e[6]*e[2]*e[10]+e[9]*e[1]*e[8]-e[9]*e[2]*e[7],-e[0]*e[4]*e[11]+e[0]*e[5]*e[10]+e[3]*e[1]*e[11]-e[3]*e[2]*e[10]-e[9]*e[1]*e[5]+e[9]*e[2]*e[4]],n=1/t;return r.map((e=>e*n))},makeMatrix3Translate=(e=0,t=0,r=0)=>I.concat(e,t,r),singleAxisRotate=(e,t,r,n,o)=>{const s=I.concat([0,1,2].map((e=>t[e]||0))),c=Math.cos(e),i=Math.sin(e);return s[3*r+r]=c,s[3*r+n]=(o?1:-1)*i,s[3*n+r]=(o?-1:1)*i,s[3*n+n]=c,s},makeMatrix3RotateX=(e,t=[0,0,0])=>singleAxisRotate(e,t,1,2,!0),makeMatrix3RotateY=(e,t=[0,0,0])=>singleAxisRotate(e,t,0,2,!1),makeMatrix3RotateZ=(e,t=[0,0,0])=>singleAxisRotate(e,t,0,1,!0),makeMatrix3Rotate=(e,t=[0,0,1],r=[0,0,0])=>{const n=[0,1,2].map((e=>r[e]||0)),[o,s,c]=resize(3,normalize(t)),i=Math.cos(e),a=Math.sin(e),l=1-i,d=I.concat(-n[0],-n[1],-n[2]),u=I.concat(n[0],n[1],n[2]);return multiplyMatrices3(u,multiplyMatrices3([l*o*o+i,l*s*o+c*a,l*c*o-s*a,l*o*s-c*a,l*s*s+i,l*c*s+o*a,l*o*c+s*a,l*s*c-o*a,l*c*c+i,0,0,0],d))},makeMatrix3Scale=(e=[1,1,1],t=[0,0,0])=>[e[0],0,0,0,e[1],0,0,0,e[2],e[0]*-t[0]+t[0],e[1]*-t[1]+t[1],e[2]*-t[2]+t[2]],makeMatrix3ReflectZ=(e,t=[0,0])=>{const r=Math.atan2(e[1],e[0]),n=Math.cos(r),o=Math.sin(r),s=Math.cos(-r),c=Math.sin(-r),i=n*s+o*c,a=n*-c+o*s,l=o*s+-n*c,d=o*-c+-n*s;return[i,a,0,l,d,0,0,0,1,t[0]+i*-t[0]+-t[1]*l,t[1]+a*-t[0]+-t[1]*d,0]};var T=Object.freeze({__proto__:null,identity3x3:I,identity3x4:B,isIdentity3x4:isIdentity3x4,multiplyMatrix3Vector3:multiplyMatrix3Vector3,multiplyMatrix3Line3:multiplyMatrix3Line3,multiplyMatrices3:multiplyMatrices3,determinant3:determinant3,invertMatrix3:invertMatrix3,makeMatrix3Translate:makeMatrix3Translate,makeMatrix3RotateX:makeMatrix3RotateX,makeMatrix3RotateY:makeMatrix3RotateY,makeMatrix3RotateZ:makeMatrix3RotateZ,makeMatrix3Rotate:makeMatrix3Rotate,makeMatrix3Scale:makeMatrix3Scale,makeMatrix3ReflectZ:makeMatrix3ReflectZ});const vectorOriginForm=(e,t)=>({vector:e||[],origin:t||[]}),getVector=function(){if(arguments[0]instanceof A.vector)return arguments[0];let e=flattenArrays(arguments);return e.length>0&&"object"==typeof e[0]&&null!==e[0]&&!Number.isNaN(e[0].x)&&(e=["x","y","z"].map((t=>e[0][t])).filter(fnNotUndefined)),e.filter((e=>"number"==typeof e))},getVectorOfVectors=function(){return semiFlattenArrays(arguments).map((e=>getVector(e)))},getSegment=function(){if(arguments[0]instanceof A.segment)return arguments[0];const e=semiFlattenArrays(arguments);return 4===e.length?[[e[0],e[1]],[e[2],e[3]]]:e.map((e=>getVector(e)))},getLine$1=function(){const e=semiFlattenArrays(arguments);return 0===e.length?vectorOriginForm([],[]):e[0]instanceof A.line||e[0]instanceof A.ray||e[0]instanceof A.segment?e[0]:e[0].constructor===Object&&void 0!==e[0].vector?vectorOriginForm(e[0].vector||[],e[0].origin||[]):"number"==typeof e[0]?vectorOriginForm(getVector(e)):vectorOriginForm(...e.map((e=>getVector(e))))},q=getLine$1,getRectParams=(e=0,t=0,r=0,n=0)=>({x:e,y:t,width:r,height:n}),getRect=function(){if(arguments[0]instanceof A.rect)return arguments[0];const e=flattenArrays(arguments);if(e.length>0&&"object"==typeof e[0]&&null!==e[0]&&!Number.isNaN(e[0].width))return getRectParams(...["x","y","width","height"].map((t=>e[0][t])).filter(fnNotUndefined));const t=e.filter((e=>"number"==typeof e)),r=t.length<4?[,,...t]:t;return getRectParams(...r)},getCircleParams=(e=1,...t)=>({radius:e,origin:[...t]}),getCircle=function(){if(arguments[0]instanceof A.circle)return arguments[0];const e=getVectorOfVectors(arguments),t=flattenArrays(arguments).filter((e=>"number"==typeof e));if(2===arguments.length){if(1===e[1].length)return getCircleParams(e[1][0],...e[0]);if(1===e[0].length)return getCircleParams(e[0][0],...e[1]);if(e[0].length>1&&e[1].length>1)return getCircleParams(distance2(...e),...e[0])}else switch(t.length){case 0:return getCircleParams(1,0,0,0);case 1:return getCircleParams(t[0],0,0,0);default:return getCircleParams(t.pop(),...t)}return getCircleParams(1,0,0,0)},R=[[0,1,3,4,9,10],[0,1,2,3,4,5,6,7,8,9,10,11],[0,1,2,void 0,3,4,5,void 0,6,7,8,void 0,9,10,11]];[11,7,3].forEach((e=>delete R[2][e]));const matrixMap3x4=e=>{let t;return t=e<8?0:e<13?1:2,R[t]},getMatrix3x4=function(){const e=flattenArrays(arguments),t=[...B];return matrixMap3x4(e.length).forEach(((r,n)=>{null!=e[n]&&(t[r]=e[n])})),t};var U=Object.freeze({__proto__:null,getVector:getVector,getVectorOfVectors:getVectorOfVectors,getSegment:getSegment,getLine:getLine$1,getRay:q,getRectParams:getRectParams,getRect:getRect,getCircle:getCircle,getMatrix3x4:getMatrix3x4});const rayLineToUniqueLine=({vector:e,origin:t})=>{const r=magnitude(e),n=rotate90(e),o=dot(t,n)/r;return{normal:scale(n,1/r),distance:o}},uniqueLineToRayLine=({normal:e,distance:t})=>({vector:rotate270(e),origin:scale(e,t)});var D=Object.freeze({__proto__:null,rayLineToUniqueLine:rayLineToUniqueLine,uniqueLineToRayLine:uniqueLineToRayLine});const smallestComparisonSearch=(e,t,r)=>{const n=t.map(((t,n)=>({o:t,i:n,d:r(e,t)})));let o,s=1/0;for(let e=0;e<n.length;e+=1)n[e].d<s&&(o=e,s=n[e].d);return o},minimum2DPointIndex=(e,t=j)=>{const r=((e,t=fnEpsilonSort,r=j)=>{let n=[0];for(let o=1;o<e.length;o+=1)switch(t(e[o][0],e[n[0]][0],r)){case 0:n.push(o);break;case 1:n=[o]}return n})(e,fnEpsilonSort,t);let n=0;for(let t=1;t<r.length;t+=1)e[r[t]][1]<e[r[n]][1]&&(n=t);return r[n]},nearestPointOnLine=(e,t,r,n,o=j)=>{t=resize(e.length,t),r=resize(e.length,r);const s=magSquared(e),c=subtract(r,t),i=n(dot(e,c)/s,o);return add(t,scale(e,i))},nearestPointOnPolygon=(e,t)=>{const r=e.map(((e,t,r)=>subtract(r[(t+1)%r.length],e)));return e.map(((e,n)=>nearestPointOnLine(r[n],e,t,segmentLimiter))).map(((e,r)=>({point:e,i:r,distance:distance(e,t)}))).sort(((e,t)=>e.distance-t.distance)).shift()},nearestPointOnCircle=(e,t,r)=>add(t,scale(normalize(subtract(r,t)),e));var G=Object.freeze({__proto__:null,smallestComparisonSearch:smallestComparisonSearch,minimum2DPointIndex:minimum2DPointIndex,nearestPoint2:(e,t)=>{const r=smallestComparisonSearch(e,t,distance2);return void 0===r?void 0:t[r]},nearestPoint:(e,t)=>{const r=smallestComparisonSearch(e,t,distance);return void 0===r?void 0:t[r]},nearestPointOnLine:nearestPointOnLine,nearestPointOnPolygon:nearestPointOnPolygon,nearestPointOnCircle:nearestPointOnCircle});const clusterIndicesOfSortedNumbers=(e,t=j)=>{const r=[[0]];let n=0;for(let o=1;o<e.length;o+=1)fnEpsilonEqual(e[o],e[o-1],t)?r[n].push(o):(n=r.length,r.push([o]));return r},radialSortPointIndices=(e=[],t=j)=>{const r=minimum2DPointIndex(e,t),n=e.map((t=>subtract2(t,e[r]))).map((e=>normalize2(e))).map((e=>dot2([0,1],e))),o=n.map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).map((e=>e.i)).filter((e=>e!==r));return[[r]].concat(clusterIndicesOfSortedNumbers(o.map((e=>n[e])),t).map((e=>e.map((e=>o[e])))).map((t=>1===t.length?t:t.map((t=>({i:t,len:distance2(e[t],e[r])}))).sort(((e,t)=>e.len-t.len)).map((e=>e.i)))))};var W=Object.freeze({__proto__:null,sortPointsAlongVector2:(e,t)=>e.map((e=>({point:e,d:e[0]*t[0]+e[1]*t[1]}))).sort(((e,t)=>e.d-t.d)).map((e=>e.point)),clusterIndicesOfSortedNumbers:clusterIndicesOfSortedNumbers,radialSortPointIndices:radialSortPointIndices});const Z=[1,0,0,1],H=Z.concat(0,0),determinant2=e=>e[0]*e[3]-e[1]*e[2],makeMatrix2Rotate=(e,t=[0,0])=>{const r=Math.cos(e),n=Math.sin(e);return[r,n,-n,r,t[0],t[1]]};var J=Object.freeze({__proto__:null,identity2x2:Z,identity2x3:H,multiplyMatrix2Vector2:(e,t)=>[e[0]*t[0]+e[2]*t[1]+e[4],e[1]*t[0]+e[3]*t[1]+e[5]],multiplyMatrix2Line2:(e,t,r)=>({vector:[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1]],origin:[e[0]*r[0]+e[2]*r[1]+e[4],e[1]*r[0]+e[3]*r[1]+e[5]]}),multiplyMatrices2:(e,t)=>[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1],e[0]*t[2]+e[2]*t[3],e[1]*t[2]+e[3]*t[3],e[0]*t[4]+e[2]*t[5]+e[4],e[1]*t[4]+e[3]*t[5]+e[5]],determinant2:determinant2,invertMatrix2:e=>{const t=determinant2(e);if(!(Math.abs(t)<1e-6||Number.isNaN(t))&&Number.isFinite(e[4])&&Number.isFinite(e[5]))return[e[3]/t,-e[1]/t,-e[2]/t,e[0]/t,(e[2]*e[5]-e[3]*e[4])/t,(e[1]*e[4]-e[0]*e[5])/t]},makeMatrix2Translate:(e=0,t=0)=>Z.concat(e,t),makeMatrix2Scale:(e=[1,1],t=[0,0])=>[e[0],0,0,e[1],e[0]*-t[0]+t[0],e[1]*-t[1]+t[1]],makeMatrix2Rotate:makeMatrix2Rotate,makeMatrix2Reflect:(e,t=[0,0])=>{const r=Math.atan2(e[1],e[0]),n=Math.cos(r),o=Math.sin(r),s=Math.cos(-r),c=Math.sin(-r),i=n*s+o*c,a=n*-c+o*s,l=o*s+-n*c,d=o*-c+-n*s;return[i,a,l,d,t[0]+i*-t[0]+-t[1]*l,t[1]+a*-t[0]+-t[1]*d]}});const X=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),multiplyMatrices4=(e,t)=>[e[0]*t[0]+e[4]*t[1]+e[8]*t[2]+e[12]*t[3],e[1]*t[0]+e[5]*t[1]+e[9]*t[2]+e[13]*t[3],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]+e[14]*t[3],e[3]*t[0]+e[7]*t[1]+e[11]*t[2]+e[15]*t[3],e[0]*t[4]+e[4]*t[5]+e[8]*t[6]+e[12]*t[7],e[1]*t[4]+e[5]*t[5]+e[9]*t[6]+e[13]*t[7],e[2]*t[4]+e[6]*t[5]+e[10]*t[6]+e[14]*t[7],e[3]*t[4]+e[7]*t[5]+e[11]*t[6]+e[15]*t[7],e[0]*t[8]+e[4]*t[9]+e[8]*t[10]+e[12]*t[11],e[1]*t[8]+e[5]*t[9]+e[9]*t[10]+e[13]*t[11],e[2]*t[8]+e[6]*t[9]+e[10]*t[10]+e[14]*t[11],e[3]*t[8]+e[7]*t[9]+e[11]*t[10]+e[15]*t[11],e[0]*t[12]+e[4]*t[13]+e[8]*t[14]+e[12]*t[15],e[1]*t[12]+e[5]*t[13]+e[9]*t[14]+e[13]*t[15],e[2]*t[12]+e[6]*t[13]+e[10]*t[14]+e[14]*t[15],e[3]*t[12]+e[7]*t[13]+e[11]*t[14]+e[15]*t[15]],determinant4=e=>{const t=e[10]*e[15]-e[11]*e[14],r=e[9]*e[15]-e[11]*e[13],n=e[9]*e[14]-e[10]*e[13],o=e[8]*e[15]-e[11]*e[12],s=e[8]*e[14]-e[10]*e[12],c=e[8]*e[13]-e[9]*e[12];return e[0]*(e[5]*t-e[6]*r+e[7]*n)-e[1]*(e[4]*t-e[6]*o+e[7]*s)+e[2]*(e[4]*r-e[5]*o+e[7]*c)-e[3]*(e[4]*n-e[5]*s+e[6]*c)},Y=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0]),makeMatrix4Translate=(e=0,t=0,r=0)=>[...Y,e,t,r,1],singleAxisRotate4=(e,t,r,n,o)=>{const s=makeMatrix4Translate(...t),c=Math.cos(e),i=Math.sin(e);return s[4*r+r]=c,s[4*r+n]=(o?1:-1)*i,s[4*n+r]=(o?-1:1)*i,s[4*n+n]=c,s};var K=Object.freeze({__proto__:null,identity4x4:X,isIdentity4x4:e=>X.map(((t,r)=>Math.abs(t-e[r])<j)).reduce(((e,t)=>e&&t),!0),multiplyMatrix4Vector3:(e,t)=>[e[0]*t[0]+e[4]*t[1]+e[8]*t[2]+e[12],e[1]*t[0]+e[5]*t[1]+e[9]*t[2]+e[13],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]+e[14]],multiplyMatrix4Line3:(e,t,r)=>({vector:[e[0]*t[0]+e[4]*t[1]+e[8]*t[2],e[1]*t[0]+e[5]*t[1]+e[9]*t[2],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]],origin:[e[0]*r[0]+e[4]*r[1]+e[8]*r[2]+e[12],e[1]*r[0]+e[5]*r[1]+e[9]*r[2]+e[13],e[2]*r[0]+e[6]*r[1]+e[10]*r[2]+e[14]]}),multiplyMatrices4:multiplyMatrices4,determinant4:determinant4,invertMatrix4:e=>{const t=determinant4(e);if(Math.abs(t)<1e-6||Number.isNaN(t)||!Number.isFinite(e[12])||!Number.isFinite(e[13])||!Number.isFinite(e[14]))return;const r=e[10]*e[15]-e[11]*e[14],n=e[9]*e[15]-e[11]*e[13],o=e[9]*e[14]-e[10]*e[13],s=e[8]*e[15]-e[11]*e[12],c=e[8]*e[14]-e[10]*e[12],i=e[8]*e[13]-e[9]*e[12],a=e[6]*e[15]-e[7]*e[14],l=e[5]*e[15]-e[7]*e[13],d=e[5]*e[14]-e[6]*e[13],u=e[6]*e[11]-e[7]*e[10],g=e[5]*e[11]-e[7]*e[9],p=e[5]*e[10]-e[6]*e[9],h=e[4]*e[15]-e[7]*e[12],m=e[4]*e[14]-e[6]*e[12],v=e[4]*e[11]-e[7]*e[8],_=e[4]*e[10]-e[6]*e[8],y=e[4]*e[13]-e[5]*e[12],b=e[4]*e[9]-e[5]*e[8],E=[+(e[5]*r-e[6]*n+e[7]*o),-(e[1]*r-e[2]*n+e[3]*o),+(e[1]*a-e[2]*l+e[3]*d),-(e[1]*u-e[2]*g+e[3]*p),-(e[4]*r-e[6]*s+e[7]*c),+(e[0]*r-e[2]*s+e[3]*c),-(e[0]*a-e[2]*h+e[3]*m),+(e[0]*u-e[2]*v+e[3]*_),+(e[4]*n-e[5]*s+e[7]*i),-(e[0]*n-e[1]*s+e[3]*i),+(e[0]*l-e[1]*h+e[3]*y),-(e[0]*g-e[1]*v+e[3]*b),-(e[4]*o-e[5]*c+e[6]*i),+(e[0]*o-e[1]*c+e[2]*i),-(e[0]*d-e[1]*m+e[2]*y),+(e[0]*p-e[1]*_+e[2]*b)],x=1/t;return E.map((e=>e*x))},makeMatrix4Translate:makeMatrix4Translate,makeMatrix4RotateX:(e,t=[0,0,0])=>singleAxisRotate4(e,t,1,2,!0),makeMatrix4RotateY:(e,t=[0,0,0])=>singleAxisRotate4(e,t,0,2,!1),makeMatrix4RotateZ:(e,t=[0,0,0])=>singleAxisRotate4(e,t,0,1,!0),makeMatrix4Rotate:(e,t=[0,0,1],r=[0,0,0])=>{const n=[0,1,2].map((e=>r[e]||0)),[o,s,c]=resize(3,normalize(t)),i=Math.cos(e),a=Math.sin(e),l=1-i,d=makeMatrix4Translate(-n[0],-n[1],-n[2]),u=makeMatrix4Translate(n[0],n[1],n[2]);return multiplyMatrices4(u,multiplyMatrices4([l*o*o+i,l*s*o+c*a,l*c*o-s*a,0,l*o*s-c*a,l*s*s+i,l*c*s+o*a,0,l*o*c+s*a,l*s*c-o*a,l*c*c+i,0,0,0,0,1],d))},makeMatrix4Scale:(e=[1,1,1],t=[0,0,0])=>[e[0],0,0,0,0,e[1],0,0,0,0,e[2],0,e[0]*-t[0]+t[0],e[1]*-t[1]+t[1],e[2]*-t[2]+t[2],1],makeMatrix4ReflectZ:(e,t=[0,0])=>{const r=Math.atan2(e[1],e[0]),n=Math.cos(r),o=Math.sin(r),s=Math.cos(-r),c=Math.sin(-r),i=n*s+o*c,a=n*-c+o*s,l=o*s+-n*c,d=o*-c+-n*s;return[i,a,0,0,l,d,0,0,0,0,1,0,t[0]+i*-t[0]+-t[1]*l,t[1]+a*-t[0]+-t[1]*d,0,1]},makePerspectiveMatrix4:(e,t,r,n)=>{const o=Math.tan(.5*Math.PI-.5*e),s=1/(r-n);return[o/t,0,0,0,0,o,0,0,0,0,(r+n)*s,-1,0,0,r*n*s*2,0]},makeOrthographicMatrix4:(e,t,r,n,o,s)=>[2/(t-n),0,0,0,0,2/(e-r),0,0,0,0,2/(o-s),0,(n+t)/(n-t),(r+e)/(r-e),(o+s)/(o-s),1],makeLookAtMatrix4:(e,t,r)=>{const n=normalize3(subtract3(e,t)),o=normalize3(cross3(r,n)),s=normalize3(cross3(n,o));return[o[0],o[1],o[2],0,s[0],s[1],s[2],0,n[0],n[1],n[2],0,e[0],e[1],e[2],1]}});var Q=Object.freeze({__proto__:null,quaternionFromTwoVectors:(e,t)=>{const r=cross3(e,t),n=[r[0],r[1],r[2],dot(e,t)];return n[3]+=magnitude(n),normalize(n)},matrix4FromQuaternion:e=>multiplyMatrices4([e[3],e[2],-e[1],e[0],-e[2],e[3],e[0],e[1],e[1],-e[0],e[3],e[2],-e[0],-e[1],-e[2],e[3]],[e[3],e[2],-e[1],-e[0],-e[2],e[3],e[0],-e[1],e[1],-e[0],e[3],-e[2],e[0],e[1],e[2],e[3]])});const overlapConvexPolygonPoint=(e,t,r=exclude,n=j)=>e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>cross2(normalize(subtract(e[1],e[0])),subtract(t,e[0])))).map((e=>r(e,n))).map(((e,t,r)=>e===r[0])).reduce(((e,t)=>e&&t),!0),linePointFromParameter=(e,t,r)=>add(t,scale(e,r)),getIntersectParameters=(e,t,r,n,o)=>e.map(((e,t,r)=>[subtract(r[(t+1)%r.length],e),e])).map((e=>((e,t,r,n,o=includeS,s=j)=>{const c=cross2(normalize(e),normalize(r));if(Math.abs(c)<s)return;const i=cross2(e,r),a=-i,l=subtract(n,t),d=flip(l),u=cross2(l,r)/i;return o(cross2(d,e)/a,s/magnitude(r))?u:void 0})(t,r,e[0],e[1],n,o))).filter(fnNotUndefined).sort(((e,t)=>e-t)),clipLineConvexPolygon=(e,t,r,n=include,o=L,s=j)=>{const c=getIntersectParameters(e,t,r,includeS,s);if(c.length<2)return;const i=((e,t,r)=>{let n=0,o=e.length-1;for(;n<o&&!t(e[n+1]-e[n],r);)n+=1;for(;o>n&&!t(e[o]-e[o-1],r);)o-=1;if(!(n>=o))return[e[n],e[o]]})(c,n,2*s/magnitude(t));if(void 0===i)return;const a=i.map((e=>o(e)?e:e<.5?0:1));if(Math.abs(a[0]-a[1])<2*s/magnitude(t))return;const l=linePointFromParameter(t,r,(a[0]+a[1])/2);return overlapConvexPolygonPoint(e,l,n,s)?a.map((e=>linePointFromParameter(t,r,e))):void 0},clockwiseAngleRadians=(e,t)=>{for(;e<0;)e+=S;for(;t<0;)t+=S;for(;e>S;)e-=S;for(;t>S;)t-=S;const r=e-t;return r>=0?r:S-(t-e)},counterClockwiseAngleRadians=(e,t)=>{for(;e<0;)e+=S;for(;t<0;)t+=S;for(;e>S;)e-=S;for(;t>S;)t-=S;const r=t-e;return r>=0?r:S-(e-t)},clockwiseAngle2=(e,t)=>{const r=t[0]*e[0]+t[1]*e[1],n=t[0]*e[1]-t[1]*e[0];let o=Math.atan2(n,r);return o<0&&(o+=S),o},counterClockwiseAngle2=(e,t)=>{const r=e[0]*t[0]+e[1]*t[1],n=e[0]*t[1]-e[1]*t[0];let o=Math.atan2(n,r);return o<0&&(o+=S),o},clockwiseBisect2=(e,t)=>fnToVec2(fnVec2Angle(e)-clockwiseAngle2(e,t)/2),counterClockwiseBisect2=(e,t)=>fnToVec2(fnVec2Angle(e)+counterClockwiseAngle2(e,t)/2),clockwiseSubsectRadians=(e,t,r)=>{const n=clockwiseAngleRadians(t,r)/e;return Array.from(Array(e-1)).map(((e,r)=>t+n*(r+1)))},counterClockwiseSubsectRadians=(e,t,r)=>{const n=counterClockwiseAngleRadians(t,r)/e;return Array.from(Array(e-1)).map(((e,r)=>t+n*(r+1)))},clockwiseSubsect2=(e,t,r)=>{const n=Math.atan2(t[1],t[0]),o=Math.atan2(r[1],r[0]);return clockwiseSubsectRadians(e,n,o).map(fnToVec2)},counterClockwiseSubsect2=(e,t,r)=>{const n=Math.atan2(t[1],t[0]),o=Math.atan2(r[1],r[0]);return counterClockwiseSubsectRadians(e,n,o).map(fnToVec2)},bisectLines2=(e,t,r,n,o=j)=>{const s=cross2(e,r),c=dot(e,r),i=s>-o?[counterClockwiseBisect2(e,r)]:[clockwiseBisect2(e,r)];i[1]=s>-o?rotate90(i[0]):rotate270(i[0]);const a=((n[0]-t[0])*r[1]-r[0]*(n[1]-t[1]))/s,l=[e,r].map((e=>normalize(e))),d=Math.abs(cross2(...l))<o,u=d?midpoint(t,n):[t[0]+e[0]*a,t[1]+e[1]*a],g=i.map((e=>({vector:e,origin:u})));return d&&delete g[c>-o?1:0],g},counterClockwiseOrderRadians=function(){const e=Array.from(arguments).flat(),t=e.map(((e,t)=>t)).sort(((t,r)=>e[t]-e[r]));return t.slice(t.indexOf(0),t.length).concat(t.slice(0,t.indexOf(0)))},counterClockwiseSectorsRadians=function(){const e=Array.from(arguments).flat(),t=counterClockwiseOrderRadians(e).map((t=>e[t]));return t.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>counterClockwiseAngleRadians(e[0],e[1])))},threePointTurnDirection=(e,t,r,n=j)=>{const o=normalize2(subtract2(t,e)),s=normalize2(subtract2(r,e)),c=cross2(o,s);return fnEpsilonEqual(c,0,n)?fnEpsilonEqual(distance2(e,t)+distance2(t,r),distance2(e,r))?0:void 0:Math.sign(c)};var ee=Object.freeze({__proto__:null,isCounterClockwiseBetween:(e,t,r)=>{for(;r<t;)r+=S;for(;e>t;)e-=S;for(;e<t;)e+=S;return e<r},clockwiseAngleRadians:clockwiseAngleRadians,counterClockwiseAngleRadians:counterClockwiseAngleRadians,clockwiseAngle2:clockwiseAngle2,counterClockwiseAngle2:counterClockwiseAngle2,clockwiseBisect2:clockwiseBisect2,counterClockwiseBisect2:counterClockwiseBisect2,clockwiseSubsectRadians:clockwiseSubsectRadians,counterClockwiseSubsectRadians:counterClockwiseSubsectRadians,clockwiseSubsect2:clockwiseSubsect2,counterClockwiseSubsect2:counterClockwiseSubsect2,bisectLines2:bisectLines2,counterClockwiseOrderRadians:counterClockwiseOrderRadians,counterClockwiseOrder2:function(){return counterClockwiseOrderRadians(semiFlattenArrays(arguments).map(fnVec2Angle))},counterClockwiseSectorsRadians:counterClockwiseSectorsRadians,counterClockwiseSectors2:function(){return counterClockwiseSectorsRadians(getVectorOfVectors(arguments).map(fnVec2Angle))},threePointTurnDirection:threePointTurnDirection});const convexHullIndices=(e=[],t=!1,r=j)=>{if(e.length<2)return[];const n=radialSortPointIndices(e,r).map((e=>1===e.length?e:(e=>e.concat(e.slice(0,-1).reverse()))(e))).flat();n.push(n[0]);const o=[n[0]];let s=1;const c={"-1":()=>o.pop(),1:e=>{o.push(e),s+=1},undefined:()=>{s+=1}};for(c[0]=t?c[1]:c[-1];s<n.length;){if(o.length<2){o.push(n[s]),s+=1;continue}const t=o[o.length-2],i=o[o.length-1],a=n[s];c[threePointTurnDirection(...[t,i,a].map((t=>e[t])),r)](a)}return o.pop(),o},convexHull=(e=[],t=!1,r=j)=>convexHullIndices(e,t,r).map((t=>e[t]));var te=Object.freeze({__proto__:null,convexHullIndices:convexHullIndices,convexHull:convexHull});const intersectLineLine=(e,t,r,n,o=L,s=L,c=j)=>{const i=cross2(normalize(e),normalize(r));if(Math.abs(i)<c)return;const a=cross2(e,r),l=-a,d=[n[0]-t[0],n[1]-t[1]],u=[-d[0],-d[1]],g=cross2(d,r)/a,p=cross2(u,e)/l;return o(g,c/magnitude(e))&&s(p,c/magnitude(r))?add(t,scale(e,g)):void 0};var re=Object.freeze({__proto__:null,pleat:(e,t,r)=>{const n=getLine$1(t),o=getLine$1(r);return parallel(n.vector,o.vector)?((e,t,r)=>{const n=Array.from(Array(e-1)).map(((t,r)=>(r+1)/e)).map((e=>lerp(t.origin,r.origin,e))),o=[...t.vector];return n.map((e=>({origin:e,vector:o})))})(e,n,o):((e,t,r)=>{const n=intersectLineLine(t.vector,t.origin,r.vector,r.origin);return(clockwiseAngle2(t.vector,r.vector)<counterClockwiseAngle2(t.vector,r.vector)?clockwiseSubsect2(e,t.vector,r.vector):counterClockwiseSubsect2(e,t.vector,r.vector)).map((e=>({origin:n,vector:e})))})(e,n,o)}});const angleArray=e=>Array.from(Array(Math.floor(e))).map(((t,r)=>S*(r/e))),anglesToVecs=(e,t)=>e.map((e=>[t*Math.cos(e),t*Math.sin(e)])).map((e=>e.map((e=>cleanNumber(e,14))))),makePolygonCircumradius=(e=3,t=1)=>anglesToVecs(angleArray(e),t),makePolygonCircumradiusSide=(e=3,t=1)=>{const r=Math.PI/e,n=angleArray(e).map((e=>e+r));return anglesToVecs(n,t)},circumcircle=function(e,t,r){const n=t[0]-e[0],o=t[1]-e[1],s=r[0]-e[0],c=r[1]-e[1],i=n*(e[0]+t[0])+o*(e[1]+t[1]),a=s*(e[0]+r[0])+c*(e[1]+r[1]),l=2*(n*(r[1]-t[1])-o*(r[0]-t[0]));if(Math.abs(l)<j){const n=Math.min(e[0],t[0],r[0]),o=Math.min(e[1],t[1],r[1]),s=.5*(Math.max(e[0],t[0],r[0])-n),c=.5*(Math.max(e[1],t[1],r[1])-o);return{origin:[n+s,o+c],radius:Math.sqrt(s*s+c*c)}}const d=[(c*i-o*a)/l,(n*a-s*i)/l],u=d[0]-e[0],g=d[1]-e[1];return{origin:d,radius:Math.sqrt(u*u+g*g)}},signedArea=e=>.5*e.map(((e,t,r)=>{const n=r[(t+1)%r.length];return e[0]*n[1]-n[0]*e[1]})).reduce(fnAdd,0),centroid=e=>{const t=1/(6*signedArea(e));return e.map(((e,t,r)=>{const n=r[(t+1)%r.length],o=e[0]*n[1]-n[0]*e[1];return[(e[0]+n[0])*o,(e[1]+n[1])*o]})).reduce(((e,t)=>[e[0]+t[0],e[1]+t[1]]),[0,0]).map((e=>e*t))},boundingBox=(e,t=0)=>{if(!e||!e.length)return;const r=Array(e[0].length).fill(1/0),n=Array(e[0].length).fill(-1/0);e.forEach((e=>e.forEach(((e,o)=>{e<r[o]&&(r[o]=e-t),e>n[o]&&(n[o]=e+t)}))));const o=n.map(((e,t)=>e-r[t]));return{min:r,max:n,span:o}};var ne=Object.freeze({__proto__:null,makePolygonCircumradius:makePolygonCircumradius,makePolygonCircumradiusSide:makePolygonCircumradiusSide,makePolygonInradius:(e=3,t=1)=>makePolygonCircumradius(e,t/Math.cos(Math.PI/e)),makePolygonInradiusSide:(e=3,t=1)=>makePolygonCircumradiusSide(e,t/Math.cos(Math.PI/e)),makePolygonSideLength:(e=3,t=1)=>makePolygonCircumradius(e,t/2/Math.sin(Math.PI/e)),makePolygonSideLengthSide:(e=3,t=1)=>makePolygonCircumradiusSide(e,t/2/Math.sin(Math.PI/e)),makePolygonNonCollinear:(e,t=j)=>{const r=e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>subtract(e[1],e[0]))).map(((e,t,r)=>[e,r[(t+r.length-1)%r.length]])).map((e=>!parallel(e[1],e[0],t)));return e.filter(((e,t)=>r[t]))},circumcircle:circumcircle,signedArea:signedArea,centroid:centroid,boundingBox:boundingBox});const overlapLinePoint=(e,t,r,n=$,o=j)=>{const s=subtract(r,t),c=magSquared(e),i=Math.sqrt(c);if(i<o)return!1;const a=cross2(s,e.map((e=>e/i))),l=dot(s,e)/c;return Math.abs(a)<o&&n(l,o/i)},splitConvexPolygon=(e,t,r)=>{const n=e.map(((e,n)=>({point:overlapLinePoint(t,r,e,L)?e:null,at_index:n}))).filter((e=>null!=e.point)),o=e.map(((e,n,o)=>({point:intersectLineLine(t,r,subtract(e,o[(n+1)%o.length]),o[(n+1)%o.length],$,excludeS),at_index:n}))).filter((e=>null!=e.point));if(2===o.length){const t=o.slice().sort(((e,t)=>e.at_index-t.at_index)),r=e.slice(t[1].at_index+1).concat(e.slice(0,t[0].at_index+1));r.push(t[0].point),r.push(t[1].point);const n=e.slice(t[0].at_index+1,t[1].at_index+1);return n.push(t[1].point),n.push(t[0].point),[r,n]}if(1===o.length&&1===n.length){n[0].type="v",o[0].type="e";const t=n.concat(o).sort(((e,t)=>e.at_index-t.at_index)),r=e.slice(t[1].at_index+1).concat(e.slice(0,t[0].at_index+1));"e"===t[0].type&&r.push(t[0].point),r.push(t[1].point);const s=e.slice(t[0].at_index+1,t[1].at_index+1);return"e"===t[1].type&&s.push(t[1].point),s.push(t[0].point),[r,s]}if(2===n.length){const t=n.slice().sort(((e,t)=>e.at_index-t.at_index));return[e.slice(t[1].at_index).concat(e.slice(0,t[0].at_index+1)),e.slice(t[0].at_index,t[1].at_index+1)]}return[e.slice()]},recurseSkeleton=(e,t,r)=>{const n=e.map(((e,t)=>({vector:r[t],origin:e}))).map(((e,t,r)=>intersectLineLine(e.vector,e.origin,r[(t+1)%r.length].vector,r[(t+1)%r.length].origin,z,z))),o=t.map(((e,t)=>nearestPointOnLine(e.vector,e.origin,n[t],(e=>e))));if(3===e.length)return e.map((e=>({type:"skeleton",points:[e,n[0]]}))).concat([{type:"perpendicular",points:[o[0],n[0]]}]);const s=n.map(((e,t)=>distance(e,o[t])));let c=0;s.forEach(((e,t)=>{e<s[c]&&(c=t)}));const i=[{type:"skeleton",points:[e[c],n[c]]},{type:"skeleton",points:[e[(c+1)%e.length],n[c]]},{type:"perpendicular",points:[o[c],n[c]]}],a=clockwiseBisect2(flip(t[(c+t.length-1)%t.length].vector),t[(c+1)%t.length].vector),l=c===e.length-1;return e.splice(c,2,n[c]),t.splice(c,1),r.splice(c,2,a),l&&(e.splice(0,1),r.splice(0,1),t.push(t.shift())),i.concat(recurseSkeleton(e,t,r))},straightSkeleton=e=>{const t=e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>({vector:subtract(e[1],e[0]),origin:e[0]}))),r=e.map(((e,t,r)=>[(t-1+r.length)%r.length,t,(t+1)%r.length].map((e=>r[e])))).map((e=>[subtract(e[0],e[1]),subtract(e[2],e[1])])).map((e=>clockwiseBisect2(...e)));return recurseSkeleton([...e],t,r)};var oe=Object.freeze({__proto__:null,collinearBetween:(e,t,r,n=!1,o=j)=>{if([e,r].map((e=>fnEpsilonEqualVectors(t,e))).reduce(((e,t)=>e||t),!1))return n;const s=[[e,t],[t,r]].map((e=>subtract(e[1],e[0]))).map((e=>normalize(e)));return fnEpsilonEqual(1,dot(...s),o)}});var se=Object.freeze({__proto__:null,enclosingBoundingBoxes:(e,t)=>{const r=Math.min(e.min.length,t.min.length);for(let n=0;n<r;n+=1)if(t.min[n]<e.min[n]||t.max[n]>e.max[n])return!1;return!0},enclosingPolygonPolygon:(e,t,r=include)=>{const n=e.map((e=>overlapConvexPolygonPoint(t,e,r))).reduce(((e,t)=>e||t),!1),o=t.map((e=>overlapConvexPolygonPoint(t,e,r))).reduce(((e,t)=>e&&t),!0);return!n&&o}});const rotateVector2=(e,t,r)=>{const n=t[0]-e[0],o=t[1]-e[1],s=n*Math.cos(r)+o*Math.sin(r),c=o*Math.cos(r)-n*Math.sin(r);return[e[0]+s,e[1]+c]},intersectCircleCircle=(e,t,r,n,o=j)=>{const s=e<r?e:r,c=e<r?r:e,i=e<r?t:n,a=e<r?n:t,l=[i[0]-a[0],i[1]-a[1]],d=Math.sqrt(l[0]**2+l[1]**2);if(d<o)return;const u=l.map(((e,t)=>e/d*c+a[t]));if(Math.abs(c+s-d)<o||Math.abs(c-(s+d))<o)return[u];if(d+s<c||c+s<d)return;const g=(p=(s*s-d*d-c*c)/(-2*d*c))>=1?0:p<=-1?Math.PI:Math.acos(p);var p;return[rotateVector2(a,u,+g),rotateVector2(a,u,-g)]},intersectCircleLine=(e,t,r,n,o=L,s=j)=>{const c=r[0]**2+r[1]**2,i=Math.sqrt(c),a=0===i?r:r.map((e=>e/i)),l=rotate90(a),d=subtract(n,t),u=cross2(d,a);if(Math.abs(u)>e+s)return;const g=Math.sqrt(e**2-u**2),f=(e,r)=>t[r]-l[r]*u+a[r]*e,p=Math.abs(e-Math.abs(u))<s?[g].map((e=>[e,e].map(f))):[-g,g].map((e=>[e,e].map(f))),h=p.map((e=>e.map(((e,t)=>e-n[t])))).map((e=>e[0]*r[0]+r[1]*e[1])).map((e=>e/c));return p.filter(((e,t)=>o(h[t],s)))},getUniquePair=e=>{for(let t=1;t<e.length;t+=1)if(!fnEpsilonEqualVectors(e[0],e[t]))return[e[0],e[t]]},intersectConvexPolygonLineInclusive=(e,t,r,n=includeS,o=L,s=j)=>{const c=e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>intersectLineLine(subtract(e[1],e[0]),e[0],t,r,n,o,s))).filter((e=>void 0!==e));switch(c.length){case 0:return;case 1:return[c];default:return getUniquePair(c)||[c[0]]}},intersectConvexPolygonLine=(e,t,r,n=includeS,o=$,s=j)=>{const c=intersectConvexPolygonLineInclusive(e,t,r,n,o,s);let i;switch(o){case z:i=N;break;case excludeS:i=includeS;break;default:return c}const a=intersectConvexPolygonLineInclusive(e,t,r,includeS,i,s);if(void 0===a)return;const l=getUniquePair(a);if(void 0===l)switch(o){case z:return overlapConvexPolygonPoint(e,r,exclude,s)?a:void 0;case excludeS:return overlapConvexPolygonPoint(e,add(r,t),exclude,s)||overlapConvexPolygonPoint(e,r,exclude,s)?a:void 0;case $:default:return}return overlapConvexPolygonPoint(e,midpoint(...l),exclude,s)?l:c},ce={polygon:e=>[e],rect:e=>[e],circle:e=>[e.radius,e.origin],line:e=>[e.vector,e.origin],ray:e=>[e.vector,e.origin],segment:e=>[e.vector,e.origin]},ie={polygon:{line:(e,t,r,n,o)=>intersectConvexPolygonLine(...e,...t,includeS,n,o),ray:(e,t,r,n,o)=>intersectConvexPolygonLine(...e,...t,includeS,n,o),segment:(e,t,r,n,o)=>intersectConvexPolygonLine(...e,...t,includeS,n,o)},circle:{circle:(e,t,r,n,o)=>intersectCircleCircle(...e,...t,o),line:(e,t,r,n,o)=>intersectCircleLine(...e,...t,n,o),ray:(e,t,r,n,o)=>intersectCircleLine(...e,...t,n,o),segment:(e,t,r,n,o)=>intersectCircleLine(...e,...t,n,o)},line:{polygon:(e,t,r,n,o)=>intersectConvexPolygonLine(...t,...e,includeS,r,o),circle:(e,t,r,n,o)=>intersectCircleLine(...t,...e,r,o),line:(e,t,r,n,o)=>intersectLineLine(...e,...t,r,n,o),ray:(e,t,r,n,o)=>intersectLineLine(...e,...t,r,n,o),segment:(e,t,r,n,o)=>intersectLineLine(...e,...t,r,n,o)},ray:{polygon:(e,t,r,n,o)=>intersectConvexPolygonLine(...t,...e,includeS,r,o),circle:(e,t,r,n,o)=>intersectCircleLine(...t,...e,r,o),line:(e,t,r,n,o)=>intersectLineLine(...t,...e,n,r,o),ray:(e,t,r,n,o)=>intersectLineLine(...e,...t,r,n,o),segment:(e,t,r,n,o)=>intersectLineLine(...e,...t,r,n,o)},segment:{polygon:(e,t,r,n,o)=>intersectConvexPolygonLine(...t,...e,includeS,r,o),circle:(e,t,r,n,o)=>intersectCircleLine(...t,...e,r,o),line:(e,t,r,n,o)=>intersectLineLine(...t,...e,n,r,o),ray:(e,t,r,n,o)=>intersectLineLine(...t,...e,n,r,o),segment:(e,t,r,n,o)=>intersectLineLine(...e,...t,r,n,o)}},ae={polygon:"polygon",rect:"polygon",circle:"circle",line:"line",ray:"ray",segment:"segment"},le={polygon:exclude,rect:exclude,circle:exclude,line:$,ray:z,segment:excludeS},intersect$1=function(e,t,r){const n=typeOf(e),o=typeOf(t),s=ae[n],c=ae[o],i=ce[n](e),a=ce[o](t),l=e.domain_function||le[n],d=t.domain_function||le[o];return ie[s][c](i,a,l,d,r)},overlapConvexPolygons=(e,t,r=j)=>{for(let n=0;n<2;n+=1){const o=0===n?e:t,s=0===n?t:e;for(let e=0;e<o.length;e+=1){const t=o[e],n=rotate90(subtract(o[(e+1)%o.length],o[e])),c=s.map((e=>subtract(e,t))).map((e=>dot(n,e))),i=o[(e+2)%o.length],a=dot(n,subtract(i,t))>0;if(c.map((e=>a?e<r:e>-r)).reduce(((e,t)=>e&&t),!0))return!1}}return!0},overlapCirclePoint=(e,t,r,n=exclude,o=j)=>n(e-distance2(t,r),o),overlapLineLine=(e,t,r,n,o=$,s=$,c=j)=>{const i=cross2(e,r),a=-i,l=[n[0]-t[0],n[1]-t[1]];if(Math.abs(i)<c){if(Math.abs(cross2(l,e))>c)return!1;const t=l,n=add(t,r),o=dot(e,e),s=dot(t,e)/o,i=dot(n,e)/o,a=(s<i?i:s)<c;return!((s<i?s:i)>1-c)&&!a}const d=[-l[0],-l[1]],u=cross2(l,r)/i,g=cross2(d,e)/a;return o(u,c/magnitude(e))&&s(g,c/magnitude(r))},de={polygon:e=>[e],rect:e=>[e],circle:e=>[e.radius,e.origin],line:e=>[e.vector,e.origin],ray:e=>[e.vector,e.origin],segment:e=>[e.vector,e.origin],vector:e=>[e]},fe={polygon:{polygon:(e,t,r,n,o)=>overlapConvexPolygons(...e,...t,o),vector:(e,t,r,n,o)=>overlapConvexPolygonPoint(...e,...t,r,o)},circle:{vector:(e,t,r,n,o)=>overlapCirclePoint(...e,...t,exclude,o)},line:{line:(e,t,r,n,o)=>overlapLineLine(...e,...t,r,n,o),ray:(e,t,r,n,o)=>overlapLineLine(...e,...t,r,n,o),segment:(e,t,r,n,o)=>overlapLineLine(...e,...t,r,n,o),vector:(e,t,r,n,o)=>overlapLinePoint(...e,...t,r,o)},ray:{line:(e,t,r,n,o)=>overlapLineLine(...t,...e,n,r,o),ray:(e,t,r,n,o)=>overlapLineLine(...e,...t,r,n,o),segment:(e,t,r,n,o)=>overlapLineLine(...e,...t,r,n,o),vector:(e,t,r,n,o)=>overlapLinePoint(...e,...t,r,o)},segment:{line:(e,t,r,n,o)=>overlapLineLine(...t,...e,n,r,o),ray:(e,t,r,n,o)=>overlapLineLine(...t,...e,n,r,o),segment:(e,t,r,n,o)=>overlapLineLine(...e,...t,r,n,o),vector:(e,t,r,n,o)=>overlapLinePoint(...e,...t,r,o)},vector:{polygon:(e,t,r,n,o)=>overlapConvexPolygonPoint(...t,...e,n,o),circle:(e,t,r,n,o)=>overlapCirclePoint(...t,...e,exclude,o),line:(e,t,r,n,o)=>overlapLinePoint(...t,...e,n,o),ray:(e,t,r,n,o)=>overlapLinePoint(...t,...e,n,o),segment:(e,t,r,n,o)=>overlapLinePoint(...t,...e,n,o),vector:(e,t,r,n,o)=>fnEpsilonEqualVectors(...e,...t,o)}},ue={polygon:"polygon",rect:"polygon",circle:"circle",line:"line",ray:"ray",segment:"segment",vector:"vector"},ge={polygon:exclude,rect:exclude,circle:exclude,line:$,ray:z,segment:excludeS,vector:$},overlap$1=function(e,t,r){const n=typeOf(e),o=typeOf(t),s=ue[n],c=ue[o],i=de[n](e),a=de[o](t),l=e.domain_function||ge[n],d=t.domain_function||ge[o];return fe[s][c](i,a,l,d,r)},pe={preserve:{magnitude:function(){return magnitude(this)},isEquivalent:function(){return fnEpsilonEqualVectors(this,getVector(arguments))},isParallel:function(){return parallel(...resizeUp(this,getVector(arguments)))},isCollinear:function(e){return overlap$1(this,e)},dot:function(){return dot(...resizeUp(this,getVector(arguments)))},distanceTo:function(){return distance(...resizeUp(this,getVector(arguments)))},overlap:function(e){return overlap$1(this,e)}},vector:{copy:function(){return[...this]},normalize:function(){return normalize(this)},scale:function(){return scale(this,arguments[0])},flip:function(){return flip(this)},rotate90:function(){return rotate90(this)},rotate270:function(){return rotate270(this)},cross:function(){return cross3(resize(3,this),resize(3,getVector(arguments)))},transform:function(){return multiplyMatrix3Vector3(getMatrix3x4(arguments),resize(3,this))},add:function(){return add(this,resize(this.length,getVector(arguments)))},subtract:function(){return subtract(this,resize(this.length,getVector(arguments)))},rotateZ:function(e,t){return multiplyMatrix3Vector3(getMatrix3x4(makeMatrix2Rotate(e,t)),resize(3,this))},lerp:function(e,t){return lerp(this,resize(this.length,getVector(e)),t)},midpoint:function(){return midpoint(...resizeUp(this,getVector(arguments)))},bisect:function(){return counterClockwiseBisect2(this,getVector(arguments))}}},he={};Object.keys(pe.preserve).forEach((e=>{he[e]=pe.preserve[e]})),Object.keys(pe.vector).forEach((e=>{he[e]=function(){return A.vector(...pe.vector[e].apply(this,arguments))}}));const me={fromAngle:function(e){return A.vector(Math.cos(e),Math.sin(e))},fromAngleDegrees:function(e){return A.vector.fromAngle(e*w)}};var ve={vector:{P:Array.prototype,A:function(){this.push(...getVector(arguments))},G:{x:function(){return this[0]},y:function(){return this[1]},z:function(){return this[2]}},M:he,S:me}},_e={fromPoints:function(){const e=getVectorOfVectors(arguments);return this.constructor({vector:subtract(e[1],e[0]),origin:e[0]})},fromAngle:function(){const e=arguments[0]||0;return this.constructor({vector:[Math.cos(e),Math.sin(e)],origin:[0,0]})},perpendicularBisector:function(){const e=getVectorOfVectors(arguments);return this.constructor({vector:rotate90(subtract(e[1],e[0])),origin:average(e[0],e[1])})}};const ye={isParallel:function(){const e=resizeUp(this.vector,getLine$1(arguments).vector);return parallel(...e)},isCollinear:function(){const e=getLine$1(arguments);return overlapLinePoint(this.vector,this.origin,e.origin)&&parallel(...resizeUp(this.vector,e.vector))},isDegenerate:function(e=j){return degenerate(this.vector,e)},reflectionMatrix:function(){return A.matrix(makeMatrix3ReflectZ(this.vector,this.origin))},nearestPoint:function(){const e=getVector(arguments);return A.vector(nearestPointOnLine(this.vector,this.origin,e,this.clip_function))},transform:function(){const e=this.dimension,t=multiplyMatrix3Line3(getMatrix3x4(arguments),resize(3,this.vector),resize(3,this.origin));return this.constructor(resize(e,t.vector),resize(e,t.origin))},translate:function(){const e=add(...resizeUp(this.origin,getVector(arguments)));return this.constructor(this.vector,e)},intersect:function(){return intersect$1(this,...arguments)},overlap:function(){return overlap$1(this,...arguments)},bisect:function(e,t){const r=getLine$1(e);return bisectLines2(this.vector,this.origin,r.vector,r.origin,t).map((e=>this.constructor(e)))}};var be={line:{P:Object.prototype,A:function(){const e=getLine$1(...arguments);this.vector=A.vector(e.vector),this.origin=A.vector(resize(this.vector.length,e.origin));const t=rayLineToUniqueLine({vector:this.vector,origin:this.origin});this.normal=t.normal,this.distance=t.distance,Object.defineProperty(this,"domain_function",{writable:!0,value:L})},G:{dimension:function(){return[this.vector,this.origin].map((e=>e.length)).reduce(((e,t)=>Math.max(e,t)),0)}},M:Object.assign({},ye,{inclusive:function(){return this.domain_function=L,this},exclusive:function(){return this.domain_function=$,this},clip_function:e=>e,svgPath:function(e=2e4){const t=add(this.origin,scale(this.vector,-e/2)),r=scale(this.vector,e);return`M${t[0]} ${t[1]}l${r[0]} ${r[1]}`}}),S:Object.assign({fromNormalDistance:function(){return this.constructor(uniqueLineToRayLine(arguments[0]))}},_e)}},Ee={ray:{P:Object.prototype,A:function(){const e=getLine$1(...arguments);this.vector=A.vector(e.vector),this.origin=A.vector(resize(this.vector.length,e.origin)),Object.defineProperty(this,"domain_function",{writable:!0,value:N})},G:{dimension:function(){return[this.vector,this.origin].map((e=>e.length)).reduce(((e,t)=>Math.max(e,t)),0)}},M:Object.assign({},ye,{inclusive:function(){return this.domain_function=N,this},exclusive:function(){return this.domain_function=z,this},flip:function(){return A.ray(flip(this.vector),this.origin)},scale:function(e){return A.ray(this.vector.scale(e),this.origin)},normalize:function(){return A.ray(this.vector.normalize(),this.origin)},clip_function:rayLimiter,svgPath:function(e=1e4){const t=this.vector.scale(e);return`M${this.origin[0]} ${this.origin[1]}l${t[0]} ${t[1]}`}}),S:_e}},xe={segment:{P:Array.prototype,A:function(){const e=getSegment(...arguments);this.push(...[e[0],e[1]].map((e=>A.vector(e)))),this.vector=A.vector(subtract(this[1],this[0])),this.origin=this[0],Object.defineProperty(this,"domain_function",{writable:!0,value:includeS})},G:{points:function(){return this},magnitude:function(){return magnitude(this.vector)},dimension:function(){return[this.vector,this.origin].map((e=>e.length)).reduce(((e,t)=>Math.max(e,t)),0)}},M:Object.assign({},ye,{inclusive:function(){return this.domain_function=includeS,this},exclusive:function(){return this.domain_function=excludeS,this},clip_function:segmentLimiter,transform:function(...e){const t=this.points[0].length,r=getMatrix3x4(e),n=this.points.map((e=>resize(3,e))).map((e=>multiplyMatrix3Vector3(r,e))).map((e=>resize(t,e)));return A.segment(n)},translate:function(){const e=getVector(arguments),t=this.points.map((t=>add(...resizeUp(t,e))));return A.segment(t)},midpoint:function(){return A.vector(average(this.points[0],this.points[1]))},svgPath:function(){const e=this.points.map((e=>`${e[0]} ${e[1]}`));return["M","L"].map(((t,r)=>`${t}${e[r]}`)).join("")}}),S:{fromPoints:function(){return this.constructor(...arguments)}}}};const pointOnEllipse=function(e,t,r,n,o,s){const c=Math.cos(o),i=Math.sin(o),a=Math.cos(s),l=Math.sin(s);return[e+c*r*a+-i*n*l,t+i*r*a+c*n*l]},pathInfo=function(e,t,r,n,o,s,c){let i=s;if(i<0&&!Number.isNaN(i))for(;i<0;)i+=2*Math.PI;const a=c>2*Math.PI?2*Math.PI:c,l=pointOnEllipse(e,t,r,n,o,i),d=pointOnEllipse(e,t,r,n,o,i+a/2),u=pointOnEllipse(e,t,r,n,o,i+a),g=a/2>Math.PI?1:0,p=a/2>0?1:0;return{x1:l[0],y1:l[1],x2:d[0],y2:d[1],x3:u[0],y3:u[1],fa:g,fs:p}},cln=e=>cleanNumber(e,4),ellipticalArcTo=(e,t,r,n,o,s,c)=>`A${cln(e)} ${cln(t)} ${cln(r)} ${cln(n)} ${cln(o)} ${cln(s)} ${cln(c)}`;var Oe={circle:{A:function(){const e=getCircle(...arguments);this.radius=e.radius,this.origin=A.vector(...e.origin)},G:{x:function(){return this.origin[0]},y:function(){return this.origin[1]},z:function(){return this.origin[2]}},M:{nearestPoint:function(){return A.vector(nearestPointOnCircle(this.radius,this.origin,getVector(arguments)))},intersect:function(e){return intersect$1(this,e)},overlap:function(e){return overlap$1(this,e)},svgPath:function(e=0,t=2*Math.PI){const r=pathInfo(this.origin[0],this.origin[1],this.radius,this.radius,0,e,t),n=ellipticalArcTo(this.radius,this.radius,0,r.fa,r.fs,r.x2,r.y2),o=ellipticalArcTo(this.radius,this.radius,0,r.fa,r.fs,r.x3,r.y3);return`M${r.x1} ${r.y1}${n}${o}`},points:function(e=128){return Array.from(Array(e)).map(((t,r)=>2*Math.PI/e*r)).map((e=>[this.origin[0]+this.radius*Math.cos(e),this.origin[1]+this.radius*Math.sin(e)]))},polygon:function(){return A.polygon(this.points(arguments[0]))},segments:function(){const e=this.points(arguments[0]);return e.map(((t,r)=>{const n=(r+1)%e.length;return[t,e[n]]}))}},S:{fromPoints:function(){if(3===arguments.length){const e=circumcircle(...arguments);return this.constructor(e.radius,e.origin)}return this.constructor(...arguments)},fromThreePoints:function(){const e=circumcircle(...arguments);return this.constructor(e.radius,e.origin)}}}};const getFoci=function(e,t,r,n){const o=t>r,s=o?t**2-r**2:r**2-t**2,c=Math.sqrt(s),i=o?Math.cos(n):Math.sin(n),a=o?Math.sin(n):Math.cos(n);return[A.vector(e[0]+c*i,e[1]+c*a),A.vector(e[0]-c*i,e[1]-c*a)]};var ke={ellipse:{A:function(){const e=flattenArrays(arguments).filter((e=>!Number.isNaN(e))),t=resize(5,e);this.rx=t[0],this.ry=t[1],this.origin=A.vector(t[2],t[3]),this.spin=t[4],this.foci=getFoci(this.origin,this.rx,this.ry,this.spin)},G:{x:function(){return this.origin[0]},y:function(){return this.origin[1]}},M:{svgPath:function(e=0,t=2*Math.PI){const r=pathInfo(this.origin[0],this.origin[1],this.rx,this.ry,this.spin,e,t),n=ellipticalArcTo(this.rx,this.ry,this.spin/Math.PI*180,r.fa,r.fs,r.x2,r.y2),o=ellipticalArcTo(this.rx,this.ry,this.spin/Math.PI*180,r.fa,r.fs,r.x3,r.y3);return`M${r.x1} ${r.y1}${n}${o}`},points:function(e=128){return Array.from(Array(e)).map(((t,r)=>2*Math.PI/e*r)).map((e=>pointOnEllipse(this.origin.x,this.origin.y,this.rx,this.ry,this.spin,e)))},polygon:function(){return A.polygon(this.points(arguments[0]))},segments:function(){const e=this.points(arguments[0]);return e.map(((t,r)=>{const n=(r+1)%e.length;return[t,e[n]]}))}},S:{}}};const Me={area:function(){return signedArea(this)},centroid:function(){return A.vector(centroid(this))},boundingBox:function(){return boundingBox(this)},straightSkeleton:function(){return straightSkeleton(this)},scale:function(e,t=centroid(this)){const r=this.map((e=>[0,1].map(((r,n)=>e[n]-t[n])))).map((r=>r.map(((n,o)=>t[o]+r[o]*e))));return this.constructor.fromPoints(r)},rotate:function(e,t=centroid(this)){const r=this.map((r=>{const n=[r[0]-t[0],r[1]-t[1]],o=Math.sqrt(n[0]**2+n[1]**2),s=Math.atan2(n[1],n[0]);return[t[0]+Math.cos(s+e)*o,t[1]+Math.sin(s+e)*o]}));return A.polygon(r)},translate:function(){const e=getVector(...arguments),t=this.map((t=>t.map(((t,r)=>t+e[r]))));return this.constructor.fromPoints(t)},transform:function(){const e=getMatrix3x4(...arguments),t=this.map((t=>multiplyMatrix3Vector3(e,resize(3,t))));return A.polygon(t)},nearest:function(){const e=getVector(...arguments),t=nearestPointOnPolygon(this,e);return void 0===t?void 0:Object.assign(t,{edge:this.sides[t.i]})},split:function(){const e=getLine$1(...arguments),t=splitConvexPolygon;return t(this,e.vector,e.origin).map((e=>A.polygon(e)))},overlap:function(){return overlap$1(this,...arguments)},intersect:function(){return intersect$1(this,...arguments)},clip:function(e,t){const r=e.domain_function?e.domain_function:L,n=clipLineConvexPolygon(this,e.vector,e.origin,this.domain_function,r,t);return n?A.segment(n):void 0},svgPath:function(){const e=Array(this.length).fill("L");return e[0]="M",`${this.map(((t,r)=>`${e[r]}${t[0]} ${t[1]}`)).join("")}z`}},rectToPoints=e=>[[e.x,e.y],[e.x+e.width,e.y],[e.x+e.width,e.y+e.height],[e.x,e.y+e.height]];var Ae={rect:{P:Array.prototype,A:function(){const e=getRect(...arguments);this.width=e.width,this.height=e.height,this.origin=A.vector(e.x,e.y),this.push(...rectToPoints(this)),Object.defineProperty(this,"domain_function",{writable:!0,value:include})},G:{x:function(){return this.origin[0]},y:function(){return this.origin[1]},center:function(){return A.vector(this.origin[0]+this.width/2,this.origin[1]+this.height/2)}},M:Object.assign({},Me,{inclusive:function(){return this.domain_function=include,this},exclusive:function(){return this.domain_function=exclude,this},area:function(){return this.width*this.height},segments:function(){return[[[(e=this).x,e.y],[e.x+e.width,e.y]],[[e.x+e.width,e.y],[e.x+e.width,e.y+e.height]],[[e.x+e.width,e.y+e.height],[e.x,e.y+e.height]],[[e.x,e.y+e.height],[e.x,e.y]]];var e},svgPath:function(){return`M${this.origin.join(" ")}h${this.width}v${this.height}h${-this.width}Z`}}),S:{fromPoints:function(){const e=boundingBox(getVectorOfVectors(arguments));return A.rect(e.min[0],e.min[1],e.span[0],e.span[1])}}}},je={polygon:{P:Array.prototype,A:function(){this.push(...semiFlattenArrays(arguments)),this.sides=this.map(((e,t,r)=>[e,r[(t+1)%r.length]])),this.vectors=this.sides.map((e=>subtract(e[1],e[0]))),Object.defineProperty(this,"domain_function",{writable:!0,value:include})},G:{isConvex:function(){},points:function(){return this}},M:Object.assign({},Me,{inclusive:function(){return this.domain_function=include,this},exclusive:function(){return this.domain_function=exclude,this},segments:function(){return this.sides}}),S:{fromPoints:function(){return this.constructor(...arguments)},regularPolygon:function(){return this.constructor(makePolygonCircumradius(...arguments))},convexHull:function(){return this.constructor(convexHull(...arguments))}}}},Pe={polyline:{P:Array.prototype,A:function(){this.push(...semiFlattenArrays(arguments))},G:{points:function(){return this}},M:{svgPath:function(){const e=Array(this.length).fill("L");return e[0]="M",`${this.map(((t,r)=>`${e[r]}${t[0]} ${t[1]}`)).join("")}`}},S:{fromPoints:function(){return this.constructor(...arguments)}}}};const array_assign=(e,t)=>{for(let r=0;r<12;r+=1)e[r]=t[r];return e};var we={matrix:{P:Array.prototype,A:function(){getMatrix3x4(arguments).forEach((e=>this.push(e)))},G:{},M:{copy:function(){return A.matrix(...Array.from(this))},set:function(){return array_assign(this,getMatrix3x4(arguments))},isIdentity:function(){return isIdentity3x4(this)},multiply:function(e){return array_assign(this,multiplyMatrices3(this,e))},determinant:function(){return determinant3(this)},inverse:function(){return array_assign(this,invertMatrix3(this))},translate:function(e,t,r){return array_assign(this,multiplyMatrices3(this,makeMatrix3Translate(e,t,r)))},rotateX:function(e){return array_assign(this,multiplyMatrices3(this,makeMatrix3RotateX(e)))},rotateY:function(e){return array_assign(this,multiplyMatrices3(this,makeMatrix3RotateY(e)))},rotateZ:function(e){return array_assign(this,multiplyMatrices3(this,makeMatrix3RotateZ(e)))},rotate:function(e,t,r){const n=makeMatrix3Rotate(e,t,r);return array_assign(this,multiplyMatrices3(this,n))},scale:function(...e){return array_assign(this,multiplyMatrices3(this,makeMatrix3Scale(...e)))},reflectZ:function(e,t){const r=makeMatrix3ReflectZ(e,t);return array_assign(this,multiplyMatrices3(this,r))},transform:function(...e){return A.vector(multiplyMatrix3Vector3(this,resize(3,getVector(e))))},transformVector:function(e){return A.vector(multiplyMatrix3Vector3(this,resize(3,getVector(e))))},transformLine:function(...e){const t=getLine$1(e);return A.line(multiplyMatrix3Line3(this,t.vector,t.origin))}},S:{}}};const Se=Object.assign({},ve,be,Ee,xe,Oe,ke,Ae,je,Pe,we),create=function(e,t){const r=Object.create(Se[e].proto);return Se[e].A.apply(r,t),r};Object.assign(A,{vector:function(){return create("vector",arguments)},line:function(){return create("line",arguments)},ray:function(){return create("ray",arguments)},segment:function(){return create("segment",arguments)},circle:function(){return create("circle",arguments)},ellipse:function(){return create("ellipse",arguments)},rect:function(){return create("rect",arguments)},polygon:function(){return create("polygon",arguments)},polyline:function(){return create("polyline",arguments)},matrix:function(){return create("matrix",arguments)}}),Object.keys(Se).forEach((e=>{const t={};t.prototype=null!=Se[e].P?Object.create(Se[e].P):Object.create(Object.prototype),t.prototype.constructor=t,A[e].prototype=t.prototype,A[e].prototype.constructor=A[e],Object.keys(Se[e].G).forEach((r=>Object.defineProperty(t.prototype,r,{get:Se[e].G[r]}))),Object.keys(Se[e].M).forEach((r=>Object.defineProperty(t.prototype,r,{value:Se[e].M[r]}))),Object.keys(Se[e].S).forEach((t=>Object.defineProperty(A[e],t,{value:Se[e].S[t].bind(A[e].prototype)}))),Se[e].proto=t.prototype}));const Ce=A;Ce.core=Object.assign(Object.create(null),C,M,U,F,V,W,ee,te,re,ne,ee,J,T,K,Q,G,D,oe,se,{intersectConvexPolygonLine:intersectConvexPolygonLine,intersectCircleCircle:intersectCircleCircle,intersectCircleLine:intersectCircleLine,intersectLineLine:intersectLineLine,overlapConvexPolygons:overlapConvexPolygons,overlapConvexPolygonPoint:overlapConvexPolygonPoint,overlapBoundingBoxes:(e,t)=>{const r=Math.min(e.min.length,t.min.length);for(let n=0;n<r;n+=1)if(e.min[n]>t.max[n]||e.max[n]<t.min[n])return!1;return!0},overlapLineLine:overlapLineLine,overlapLinePoint:overlapLinePoint,clipLineConvexPolygon:clipLineConvexPolygon,clipPolygonPolygon:(e,t,r=j)=>{let n,o,s,c;const inside=e=>(o[0]-n[0])*(e[1]-n[1])>(o[1]-n[1])*(e[0]-n[0])+r,intersection=()=>{const e=[n[0]-o[0],n[1]-o[1]],t=[s[0]-c[0],s[1]-c[1]],r=n[0]*o[1]-n[1]*o[0],i=s[0]*c[1]-s[1]*c[0],a=1/(e[0]*t[1]-e[1]*t[0]);return[(r*t[0]-i*e[0])*a,(r*t[1]-i*e[1])*a]};let i=e;n=t[t.length-1];for(let e in t){o=t[e];const r=i;i=[],s=r[r.length-1];for(let e in r)c=r[e],inside(c)?(inside(s)||i.push(intersection()),i.push(c)):inside(s)&&i.push(intersection()),s=c;n=o}return 0===i.length?void 0:i},splitConvexPolygon:splitConvexPolygon,straightSkeleton:straightSkeleton}),Ce.typeof=typeOf,Ce.intersect=intersect$1,Ce.overlap=overlap$1;const vertex_degree=function(e,t){const r=this;Object.defineProperty(e,"degree",{get:()=>r.vertices_vertices&&r.vertices_vertices[t]?r.vertices_vertices[t].length:null})},edge_coords=function(e,t){const r=this;Object.defineProperty(e,"coords",{get:()=>{if(r.edges_vertices&&r.edges_vertices[t]&&r.vertices_coords)return r.edges_vertices[t].map((e=>r.vertices_coords[e]))}})},face_simple=function(e,t){const r=this;Object.defineProperty(e,"simple",{get:()=>{if(!r.faces_vertices||!r.faces_vertices[t])return null;for(let n=0;n<e.length-1;n+=1)for(let o=n+1;o<e.length;o+=1)if(r.faces_vertices[t][n]===r.faces_vertices[t][o])return!1;return!0}})},face_coords=function(e,t){const r=this;Object.defineProperty(e,"coords",{get:()=>{if(r.faces_vertices&&r.faces_vertices[t]&&r.vertices_coords)return r.faces_vertices[t].map((e=>r.vertices_coords[e]))}})};var Le={vertices:function(e,t){return vertex_degree.call(this,e,t),e},edges:function(e,t){return edge_coords.call(this,e,t),e},faces:function(e,t){return face_simple.call(this,e,t),face_coords.call(this,e,t),e}};const $e="Rabbit Ear",Ne={file:["file_spec","file_creator","file_author","file_title","file_description","file_classes","file_frames"],frame:["frame_author","frame_title","frame_description","frame_attributes","frame_classes","frame_unit","frame_parent","frame_inherit"],graph:["vertices_coords","vertices_vertices","vertices_faces","edges_vertices","edges_faces","edges_assignment","edges_foldAngle","edges_length","faces_vertices","faces_edges","vertices_edges","edges_edges","faces_faces"],orders:["edgeOrders","faceOrders"]},ze=Object.freeze([].concat(Ne.file).concat(Ne.frame).concat(Ne.graph).concat(Ne.orders)),Fe=Object.freeze(["edges_vector","vertices_sectors","faces_sectors","faces_matrix"]),Ve=Array.from("MmVvBbFfUu"),Ie={vertices:"vertex",edges:"edge",faces:"face"},Be={b:"boundary",m:"mountain",v:"valley",f:"flat",u:"unassigned"};Ve.forEach((e=>{Be[e.toUpperCase()]=Be[e]}));const Te={M:-180,m:-180,V:180,v:180,B:0,b:0,F:0,f:0,U:0,u:0},edgeAssignmentToFoldAngle=e=>Te[e]||0,edgeFoldAngleToAssignment=e=>e>Ce.core.EPSILON?"V":e<-Ce.core.EPSILON?"M":"U",edgeFoldAngleIsFlat=e=>Ce.core.fnEpsilonEqual(0,e)||Ce.core.fnEpsilonEqual(-180,e)||Ce.core.fnEpsilonEqual(180,e),edgesFoldAngleAreAllFlat=({edges_foldAngle:e})=>{if(!e)return!0;for(let t=0;t<e.length;t+=1)if(!edgeFoldAngleIsFlat(e[t]))return!1;return!0},filterKeysWithSuffix=(e,t)=>Object.keys(e).map((e=>e.substring(e.length-t.length,e.length)===t?e:void 0)).filter((e=>void 0!==e)),filterKeysWithPrefix=(e,t)=>Object.keys(e).map((e=>e.substring(0,t.length)===t?e:void 0)).filter((e=>void 0!==e)),getGraphKeysWithPrefix=(e,t)=>filterKeysWithPrefix(e,`${t}_`),getGraphKeysWithSuffix=(e,t)=>filterKeysWithSuffix(e,`_${t}`),transposeGraphArrays=(e,t)=>{const r=getGraphKeysWithPrefix(e,t);if(0===r.length)return[];const n=Math.max(...r.map((t=>e[t].length))),o=Array.from(Array(n)).map((()=>({})));return r.forEach((t=>o.forEach(((r,n)=>{o[n][t]=e[t][n]})))),o},isFoldObject=(e={})=>0===Object.keys(e).length?0:[].concat(ze,Fe).filter((t=>e[t])).length/Object.keys(e).length;var qe=Object.freeze({__proto__:null,singularize:Ie,pluralize:{vertex:"vertices",edge:"edges",face:"faces"},edgesAssignmentNames:Be,edgesAssignmentDegrees:Te,edgeAssignmentToFoldAngle:edgeAssignmentToFoldAngle,edgeFoldAngleToAssignment:edgeFoldAngleToAssignment,edgeFoldAngleIsFlat:edgeFoldAngleIsFlat,edgesFoldAngleAreAllFlat:edgesFoldAngleAreAllFlat,filterKeysWithSuffix:filterKeysWithSuffix,filterKeysWithPrefix:filterKeysWithPrefix,getGraphKeysWithPrefix:getGraphKeysWithPrefix,getGraphKeysWithSuffix:getGraphKeysWithSuffix,transposeGraphArrays:transposeGraphArrays,transposeGraphArrayAtIndex:function(e,t,r){const n=getGraphKeysWithPrefix(e,t);if(0===n.length)return;const o={};return n.forEach((t=>{o[t]=e[t][r]})),o},isFoldObject:isFoldObject});const are_vertices_equivalent=(e,t,r=Ce.core.EPSILON)=>{const n=e.length;for(let o=0;o<n;o+=1)if(Math.abs(e[o]-t[o])>r)return!1;return!0},getVerticesClusters=({vertices_coords:e},t=Ce.core.EPSILON)=>{if(!e)return[];const r=e.map((()=>[]));for(let n=0;n<e.length-1;n+=1)for(let o=n+1;o<e.length;o+=1)r[n][o]=are_vertices_equivalent(e[n],e[o],t);const n=r.map((e=>e.map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)))),o=[],s=Array(e.length).fill(!1);let c=0;const recurse=(t,r)=>{if(!s[r]&&c!==e.length)for(s[r]=!0,c+=1,o[t]||(o[t]=[]),o[t].push(r);n[r].length>0;)recurse(t,n[r][0]),n[r].splice(0,1)};for(let t=0;t<e.length&&(recurse(t,t),c!==e.length);t+=1);return o.filter((e=>e.length))},max_arrays_length=(...e)=>Math.max(0,...e.filter((e=>void 0!==e)).map((e=>e.length))),count=(e,t)=>max_arrays_length(...getGraphKeysWithPrefix(e,t).map((t=>e[t])));count.vertices=({vertices_coords:e,vertices_faces:t,vertices_vertices:r})=>max_arrays_length(e,t,r),count.edges=({edges_vertices:e,edges_edges:t,edges_faces:r})=>max_arrays_length(e,t,r),count.faces=({faces_vertices:e,faces_edges:t,faces_faces:r})=>max_arrays_length(e,t,r);const uniqueIntegers=e=>{const t={};return e.forEach((e=>{t[e]=!0})),Object.keys(t).map((e=>parseInt(e,10)))},uniqueSortedIntegers=e=>uniqueIntegers(e).sort(((e,t)=>e-t)),splitCircularArray=(e,t)=>(t.sort(((e,t)=>e-t)),[e.slice(t[1]).concat(e.slice(0,t[0]+1)),e.slice(t[0],t[1]+1)]),removeSingleInstances=e=>{const t={};return e.forEach((e=>{void 0===t[e]&&(t[e]=0),t[e]+=1})),e.filter((e=>t[e]>1))},booleanMatrixToIndexedArray=e=>e.map((e=>e.map(((e,t)=>!0===e?t:void 0)).filter((e=>void 0!==e)))),booleanMatrixToUniqueIndexPairs=e=>{const t=[];for(let r=0;r<e.length-1;r+=1)for(let n=r+1;n<e.length;n+=1)e[r][n]&&t.push([r,n]);return t};var Re=Object.freeze({__proto__:null,uniqueIntegers:uniqueIntegers,uniqueSortedIntegers:uniqueSortedIntegers,splitCircularArray:splitCircularArray,getLongestArray:e=>{if(1===e.length)return e[0];const t=e.map((e=>e.length));let r=0;for(let n=0;n<e.length;n+=1)t[n]>t[r]&&(r=n);return e[r]},removeSingleInstances:removeSingleInstances,booleanMatrixToIndexedArray:booleanMatrixToIndexedArray,booleanMatrixToUniqueIndexPairs:booleanMatrixToUniqueIndexPairs,makeSelfRelationalArrayClusters:e=>{const t=[],recurse=(r,n)=>void 0!==t[r]?0:(t[r]=n,e[r].forEach((e=>recurse(e,n))),1);for(let t=0,r=0;t<e.length;t+=1)t in e&&(r+=recurse(t,r));return t},circularArrayValidRanges:e=>{const t=e.map((e=>void 0!==e));if(t.reduce(((e,t)=>e&&t),!0))return[[0,e.length-1]];const r=t.map(((e,t,r)=>e&&!r[(t-1+r.length)%r.length])),n=r.reduce(((e,t)=>e+(t?1:0)),0),o=Array(n),s=Array(n).fill(0);let c=t[0]&&t[e.length-1]?0:n-1;return t.forEach(((e,n)=>{c=(c+(r[n]?1:0))%s.length,s[c]+=t[n]?1:0,r[n]&&(o[c]=n)})),o.map(((t,r)=>[t,(t+s[r]-1)%e.length]))}});const removeGeometryIndices=(e,t,r)=>{const n=count(e,t),o=uniqueSortedIntegers(r),s=[];let c,i,a;for(c=0,i=0,a=0;c<n;c+=1,i+=1){for(;c===o[a];)s[c]=void 0,c+=1,a+=1;c<n&&(s[c]=i)}return getGraphKeysWithSuffix(e,t).forEach((t=>e[t].forEach(((r,n)=>e[t][n].forEach(((r,o)=>{e[t][n][o]=s[r]})))))),o.reverse(),getGraphKeysWithPrefix(e,t).forEach((t=>o.forEach((r=>e[t].splice(r,1))))),s},replaceGeometryIndices=(e,t,r)=>{const n=count(e,t),o=Object.keys(r).map((e=>parseInt(e,10))),s=uniqueSortedIntegers(o),c=[];let i,a,l;for(i=0,a=0,l=0;i<n;i+=1,a+=1){for(;i===s[l];)c[i]=c[r[s[l]]],void 0===c[i]&&console.log("replace() found an undefined",c),i+=1,l+=1;i<n&&(c[i]=a)}return getGraphKeysWithSuffix(e,t).forEach((t=>e[t].forEach(((r,n)=>e[t][n].forEach(((r,o)=>{e[t][n][o]=c[r]})))))),s.reverse(),getGraphKeysWithPrefix(e,t).forEach((t=>s.forEach((r=>e[t].splice(r,1))))),c},getDuplicateVertices=(e,t)=>getVerticesClusters(e,t).filter((e=>e.length>1)),getIsolatedVertices=({vertices_coords:e,edges_vertices:t,faces_vertices:r})=>{if(!e)return[];let n=e.length;const o=Array(n).fill(!1);return t&&t.forEach((e=>{e.filter((e=>!o[e])).forEach((e=>{o[e]=!0,n-=1}))})),r&&r.forEach((e=>{e.filter((e=>!o[e])).forEach((e=>{o[e]=!0,n-=1}))})),o.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))},removeIsolatedVertices=(e,t)=>(t||(t=getIsolatedVertices(e)),{map:removeGeometryIndices(e,o,t),remove:t}),removeDuplicateVertices=(e,t=Ce.core.EPSILON)=>{const r=[],n=[],s=getVerticesClusters(e,t).filter((e=>e.length>1));return s.forEach((e=>{for(let t=1;t<e.length;t+=1)r[e[t]]=e[0],n.push(e[t])})),s.map((t=>t.map((t=>e.vertices_coords[t])))).map((e=>Ce.core.average(...e))).forEach(((t,r)=>{e.vertices_coords[s[r][0]]=t})),{map:replaceGeometryIndices(e,o,r),remove:n}};var Ue=Object.freeze({__proto__:null,getDuplicateVertices:getDuplicateVertices,getEdgeIsolatedVertices:({vertices_coords:e,edges_vertices:t})=>{if(!e||!t)return[];let r=e.length;const n=Array(r).fill(!1);return t.forEach((e=>{e.filter((e=>!n[e])).forEach((e=>{n[e]=!0,r-=1}))})),n.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))},getFaceIsolatedVertices:({vertices_coords:e,faces_vertices:t})=>{if(!e||!t)return[];let r=e.length;const n=Array(r).fill(!1);return t.forEach((e=>{e.filter((e=>!n[e])).forEach((e=>{n[e]=!0,r-=1}))})),n.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))},getIsolatedVertices:getIsolatedVertices,removeIsolatedVertices:removeIsolatedVertices,removeDuplicateVertices:removeDuplicateVertices});const De={edges:"edgeOrders",faces:"faceOrders"},countImplied=(e,t)=>Math.max((e=>{let t=-1;return e.filter((e=>void 0!==e)).forEach((e=>e.forEach((e=>e.forEach((e=>{e>t&&(t=e)})))))),t})(getGraphKeysWithSuffix(e,t).map((t=>e[t]))),e[De[t]]?(e=>{let t=-1;return e.forEach((e=>{e[0]>t&&(t=e[0]),e[1]>t&&(t=e[1])})),t})(e[De[t]]):-1)+1;countImplied.vertices=e=>countImplied(e,o),countImplied.edges=e=>countImplied(e,s),countImplied.faces=e=>countImplied(e,c);const counterClockwiseWalk=({vertices_vertices:e,vertices_sectors:t},r,n,o={})=>{const s={},c={vertices:[r],edges:[],angles:[]};let i=r,a=n;for(;;){const r=e[a],n=(r.indexOf(i)+r.length-1)%r.length,l=r[n],d=`${a} ${l}`;if(s[d])return Object.assign(o,s),c.vertices.pop(),c;if(s[d]=!0,o[d])return;c.vertices.push(a),c.edges.push(d),t&&c.angles.push(t[a][n]),i=a,a=l}},planarVertexWalk=({vertices_vertices:e,vertices_sectors:t})=>{const r={vertices_vertices:e,vertices_sectors:t},n={};return e.map(((e,t)=>e.map((e=>counterClockwiseWalk(r,t,e,n))).filter((e=>void 0!==e)))).flat()},filterWalkedBoundaryFace=e=>e.filter((e=>e.angles.map((e=>Math.PI-e)).reduce(((e,t)=>e+t),0)>0));var Ge=Object.freeze({__proto__:null,counterClockwiseWalk:counterClockwiseWalk,planarVertexWalk:planarVertexWalk,filterWalkedBoundaryFace:filterWalkedBoundaryFace});const sortVerticesCounterClockwise=({vertices_coords:e},t,r)=>t.map((t=>e[t])).map((t=>Ce.core.subtract(t,e[r]))).map((e=>Math.atan2(e[1],e[0]))).map((e=>e>-Ce.core.EPSILON?e:e+2*Math.PI)).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).map((e=>e.i)).map((e=>t[e])),sortVerticesAlongVector=({vertices_coords:e},t,r)=>t.map((t=>({i:t,d:Ce.core.dot(e[t],r)}))).sort(((e,t)=>e.d-t.d)).map((e=>e.i));var We=Object.freeze({__proto__:null,sortVerticesCounterClockwise:sortVerticesCounterClockwise,sortVerticesAlongVector:sortVerticesAlongVector});const makeVerticesEdgesUnsorted=({edges_vertices:e})=>{const t=[];return e.forEach(((e,r)=>e.forEach((e=>{void 0===t[e]&&(t[e]=[]),t[e].push(r)})))),t},makeVerticesEdges=({edges_vertices:e,vertices_vertices:t})=>{const r=makeVerticesToEdgeBidirectional({edges_vertices:e});return t.map(((e,t)=>e.map((e=>r[`${t} ${e}`]))))},makeVerticesVertices=({vertices_coords:e,vertices_edges:t,edges_vertices:r})=>{t||(t=makeVerticesEdgesUnsorted({edges_vertices:r}));const n=t.map(((e,t)=>e.map((e=>r[e].filter((e=>e!==t)))).reduce(((e,t)=>e.concat(t)),[])));return void 0===e?n:n.map(((t,r)=>sortVerticesCounterClockwise({vertices_coords:e},t,r)))},makeVerticesVerticesUnsorted=({vertices_edges:e,edges_vertices:t})=>(e||(e=makeVerticesEdgesUnsorted({edges_vertices:t})),e.map(((e,r)=>e.flatMap((e=>t[e].filter((e=>e!==r))))))),makeVerticesFacesUnsorted=({vertices_coords:e,faces_vertices:t})=>{if(!t)return e.map((()=>[]));const r=void 0!==e?e.map((()=>[])):Array.from(Array(countImplied.vertices({faces_vertices:t}))).map((()=>[]));return t.forEach(((e,t)=>{const n=[];e.forEach((e=>{n[e]=t})),n.forEach(((e,t)=>r[t].push(e)))})),r},makeVerticesFaces=({vertices_coords:e,vertices_vertices:t,faces_vertices:r})=>{if(!r)return e.map((()=>[]));if(!t)return makeVerticesFacesUnsorted({vertices_coords:e,faces_vertices:r});const n=makeVerticesToFace({faces_vertices:r});return t.map(((e,t)=>e.map(((e,r,n)=>[n[(r+1)%n.length],t,e].join(" "))))).map((e=>e.map((e=>n[e]))))},makeVerticesToEdgeBidirectional=({edges_vertices:e})=>{const t={};return e.map((e=>e.join(" "))).forEach(((e,r)=>{t[e]=r})),e.map((e=>`${e[1]} ${e[0]}`)).forEach(((e,r)=>{t[e]=r})),t},makeVerticesToEdge=({edges_vertices:e})=>{const t={};return e.map((e=>e.join(" "))).forEach(((e,r)=>{t[e]=r})),t},makeVerticesToFace=({faces_vertices:e})=>{const t={};return e.forEach(((e,r)=>e.map(((t,r)=>[0,1,2].map((t=>(r+t)%e.length)).map((t=>e[t])).join(" "))).forEach((e=>{t[e]=r})))),t},makeVerticesVerticesVector=({vertices_coords:e,vertices_vertices:t,edges_vertices:r,edges_vector:n})=>{n||(n=makeEdgesVector({vertices_coords:e,edges_vertices:r}));const o=makeVerticesToEdge({edges_vertices:r});return t.map(((e,r)=>t[r].map((e=>{const t=o[`${r} ${e}`],s=o[`${e} ${r}`];return void 0!==t?n[t]:void 0!==s?Ce.core.flip(n[s]):void 0}))))},makeVerticesSectors=({vertices_coords:e,vertices_vertices:t,edges_vertices:r,edges_vector:n})=>makeVerticesVerticesVector({vertices_coords:e,vertices_vertices:t,edges_vertices:r,edges_vector:n}).map((e=>1===e.length?[Ce.core.TWO_PI]:Ce.core.counterClockwiseSectors2(e))),makeEdgesFacesUnsorted=({edges_vertices:e,faces_edges:t})=>{const r=void 0!==e?e.map((()=>[])):Array.from(Array(countImplied.edges({faces_edges:t}))).map((()=>[]));return t.forEach(((e,t)=>{const n=[];e.forEach((e=>{n[e]=t})),n.forEach(((e,t)=>r[t].push(e)))})),r},makeEdgesFaces=({vertices_coords:e,edges_vertices:t,edges_vector:r,faces_vertices:n,faces_edges:o,faces_center:s})=>{if(!t)return makeEdgesFacesUnsorted({faces_edges:o});r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const c=t.map((t=>e[t[0]]));s||(s=makeFacesCenter({vertices_coords:e,faces_vertices:n}));const i=t.map((()=>[]));return o.forEach(((e,t)=>{const r=[];e.forEach((e=>{r[e]=t})),r.forEach(((e,t)=>i[t].push(e)))})),i.forEach(((e,t)=>{const n=e.map((e=>s[e])).map((e=>Ce.core.subtract2(e,c[t]))).map((e=>Ce.core.cross2(e,r[t])));e.sort(((e,t)=>n[e]-n[t]))})),i},Ze={M:-180,m:-180,V:180,v:180},makeEdgesAssignment=({edges_foldAngle:e})=>e.map((e=>0===e?"F":e<0?"M":"V")),makeEdgesFoldAngle=({edges_assignment:e})=>e.map((e=>Ze[e]||0)),makeEdgesCoords=({vertices_coords:e,edges_vertices:t})=>t.map((t=>t.map((t=>e[t])))),makeEdgesVector=({vertices_coords:e,edges_vertices:t})=>makeEdgesCoords({vertices_coords:e,edges_vertices:t}).map((e=>Ce.core.subtract(e[1],e[0]))),makeEdgesLength=({vertices_coords:e,edges_vertices:t})=>makeEdgesVector({vertices_coords:e,edges_vertices:t}).map((e=>Ce.core.magnitude(e))),makeEdgesBoundingBox=({vertices_coords:e,edges_vertices:t,edges_coords:r},n=0)=>(r||(r=makeEdgesCoords({vertices_coords:e,edges_vertices:t})),r.map((e=>Ce.core.boundingBox(e,n)))),makePlanarFaces=({vertices_coords:e,vertices_vertices:t,vertices_edges:r,vertices_sectors:n,edges_vertices:o,edges_vector:s})=>{t||(t=makeVerticesVertices({vertices_coords:e,edges_vertices:o,vertices_edges:r})),n||(n=makeVerticesSectors({vertices_coords:e,vertices_vertices:t,edges_vertices:o,edges_vector:s}));const c=makeVerticesToEdgeBidirectional({edges_vertices:o});return filterWalkedBoundaryFace(planarVertexWalk({vertices_vertices:t,vertices_sectors:n})).map((e=>({...e,edges:e.edges.map((e=>c[e]))})))},makeFacesVerticesFromEdges=e=>e.faces_edges.map((t=>t.map((t=>e.edges_vertices[t])).map(((e,t,r)=>{const n=r[(t+1)%r.length];return e[0]===n[0]||e[0]===n[1]?e[1]:e[0]})))),makeFacesEdgesFromVertices=e=>{const t=makeVerticesToEdgeBidirectional(e);return e.faces_vertices.map((e=>e.map(((e,t,r)=>[e,r[(t+1)%r.length]].join(" "))))).map((e=>e.map((e=>t[e]))))},makeFacesFaces=({faces_vertices:e})=>{const t=e.map((()=>[])),r={};return e.map(((e,t)=>e.map(((n,o,s)=>{let c=s[(o+1)%e.length];c<n&&([n,c]=[c,n]);const i=`${n} ${c}`;void 0===r[i]&&(r[i]={}),r[i][t]=!0})))),Object.values(r).map((e=>Object.keys(e))).filter((e=>e.length>1)).forEach((e=>{t[e[0]].push(parseInt(e[1],10)),t[e[1]].push(parseInt(e[0],10))})),t},makeFacesPolygon=({vertices_coords:e,faces_vertices:t},r)=>t.map((t=>t.map((t=>e[t])))).map((e=>Ce.core.makePolygonNonCollinear(e,r))),makeFacesCenter=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))).map((e=>Ce.core.centroid(e))),makeFacesCenterQuick=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])).reduce(((e,t)=>[e[0]+t[0],e[1]+t[1]]),[0,0]).map((e=>e/t.length)))),makeFacesNormal=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))).map((e=>{const t=Ce.core.resize(3,Ce.core.subtract(e[1],e[0])),r=Ce.core.resize(3,Ce.core.subtract(e[2],e[0]));return Ce.core.normalize3(Ce.core.cross3(t,r))}));var He=Object.freeze({__proto__:null,makeVerticesEdgesUnsorted:makeVerticesEdgesUnsorted,makeVerticesEdges:makeVerticesEdges,makeVerticesVertices:makeVerticesVertices,makeVerticesVerticesUnsorted:makeVerticesVerticesUnsorted,makeVerticesFacesUnsorted:makeVerticesFacesUnsorted,makeVerticesFaces:makeVerticesFaces,makeVerticesToEdgeBidirectional:makeVerticesToEdgeBidirectional,makeVerticesToEdge:makeVerticesToEdge,makeVerticesToFace:makeVerticesToFace,makeVerticesVerticesVector:makeVerticesVerticesVector,makeVerticesSectors:makeVerticesSectors,makeEdgesEdges:({edges_vertices:e,vertices_edges:t})=>e.map(((e,r)=>{const n=t[e[0]].filter((e=>e!==r)),o=t[e[1]].filter((e=>e!==r));return n.concat(o)})),makeEdgesFacesUnsorted:makeEdgesFacesUnsorted,makeEdgesFaces:makeEdgesFaces,makeEdgesAssignment:makeEdgesAssignment,makeEdgesFoldAngle:makeEdgesFoldAngle,makeEdgesFoldAngleFromFaces:({vertices_coords:e,edges_faces:t,faces_vertices:r})=>{const n=makeFacesNormal({vertices_coords:e,faces_vertices:r}),o=makeFacesCenter({vertices_coords:e,faces_vertices:r});return t.map((e=>{if(e.Length<2)return 0;const t=n[e[0]],r=n[e[1]],s=Ce.core.normalize(Ce.core.subtract(o[e[1]],o[e[0]])),c=Math.sign(Ce.core.dot(t,s));return Vector3d.VectorAngle(t,r)*(180/Math.PI)*c}))},makeEdgesCoords:makeEdgesCoords,makeEdgesVector:makeEdgesVector,makeEdgesLength:makeEdgesLength,makeEdgesBoundingBox:makeEdgesBoundingBox,makePlanarFaces:makePlanarFaces,makeFacesVerticesFromEdges:makeFacesVerticesFromEdges,makeFacesEdgesFromVertices:makeFacesEdgesFromVertices,makeFacesFaces:makeFacesFaces,makeFacesPolygon:makeFacesPolygon,makeFacesPolygonQuick:({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))),makeFacesCenter:makeFacesCenter,makeFacesCenterQuick:makeFacesCenterQuick,makeFacesNormal:makeFacesNormal});const getCircularEdges=({edges_vertices:e})=>{if(!e)return[];const t=[];for(let r=0;r<e.length;r+=1)e[r][0]===e[r][1]&&t.push(r);return t},getDuplicateEdges=({edges_vertices:e})=>{if(!e)return[];const t=[],r={};for(let n=0;n<e.length;n+=1){const o=`${e[n][0]} ${e[n][1]}`,s=`${e[n][1]} ${e[n][0]}`;void 0!==r[o]?t[n]=r[o]:(r[o]=n,r[s]=n)}return t},removeCircularEdges=(e,t)=>(t||(t=getCircularEdges(e)),t.length&&((e,t,r)=>{const n={};r.forEach((e=>{n[e]=!0})),getGraphKeysWithSuffix(e,t).forEach((t=>e[t].forEach(((r,o)=>{for(let s=r.length-1;s>=0;s-=1)!0===n[r[s]]&&e[t][o].splice(s,1)}))))})(e,s,t),{map:removeGeometryIndices(e,s,t),remove:t}),removeDuplicateEdges=(e,t)=>{t||(t=getDuplicateEdges(e));const r=Object.keys(t).map((e=>parseInt(e,10))),n=replaceGeometryIndices(e,s,t);return r.length&&(e.vertices_edges||e.vertices_vertices||e.vertices_faces)&&(e.vertices_edges=makeVerticesEdgesUnsorted(e),e.vertices_vertices=makeVerticesVertices(e),e.vertices_edges=makeVerticesEdges(e),e.vertices_faces=makeVerticesFaces(e)),{map:n,remove:r}};var Je=Object.freeze({__proto__:null,getCircularEdges:getCircularEdges,getDuplicateEdges:getDuplicateEdges,removeCircularEdges:removeCircularEdges,removeDuplicateEdges:removeDuplicateEdges});const mergeSimpleNextmaps=(...e)=>{if(0===e.length)return[];const t=e[0].map(((e,t)=>t));return e.forEach((e=>t.forEach(((r,n)=>{t[n]=e[r]})))),t},mergeNextmaps=(...e)=>{if(0===e.length)return[];const t=e[0].map(((e,t)=>[t]));return e.forEach((e=>{t.forEach(((r,n)=>r.forEach(((r,o)=>{t[n][o]=e[r]})))),t.forEach(((e,r)=>{t[r]=e.reduce(((e,t)=>e.concat(t)),[]).filter((e=>void 0!==e))}))})),t},mergeBackmaps=(...e)=>{if(0===e.length)return[];let r=e[0].reduce(((e,t)=>e.concat(t)),[]).map(((e,t)=>[t]));return e.forEach((e=>{const n=[];e.forEach(((e,o)=>{n[o]=typeof e===t?r[e]:e.map((e=>r[e])).reduce(((e,t)=>e.concat(t)),[])})),r=n})),r},invertMap=e=>{const r=[];return e.forEach(((e,n)=>{null!=e&&(typeof e===t&&(void 0!==r[e]?typeof r[e]===t?r[e]=[r[e],n]:r[e].push(n):r[e]=n),e.constructor===Array&&e.forEach((e=>{r[e]=n})))})),r},invertSimpleMap=e=>{const t=[];return e.forEach(((e,r)=>{t[e]=r})),t};var Xe=Object.freeze({__proto__:null,mergeSimpleNextmaps:mergeSimpleNextmaps,mergeNextmaps:mergeNextmaps,mergeSimpleBackmaps:(...e)=>{if(0===e.length)return[];let t=e[0].map(((e,t)=>t));return e.forEach((e=>{const r=e.map((e=>t[e]));t=r})),t},mergeBackmaps:mergeBackmaps,invertMap:invertMap,invertSimpleMap:invertSimpleMap});const clean=(e,t)=>{const r=removeDuplicateVertices(e,t),n=removeCircularEdges(e),o=removeDuplicateEdges(e),s=removeIsolatedVertices(e),c=invertSimpleMap(r.map),i=s.remove.map((e=>c[e])),a=invertSimpleMap(n.map),l=o.remove.map((e=>a[e]));return{vertices:{map:mergeSimpleNextmaps(r.map,s.map),remove:r.remove.concat(i)},edges:{map:mergeSimpleNextmaps(n.map,o.map),remove:n.remove.concat(l)}}},validate$1=(e,t)=>{const r=getDuplicateEdges(e),n=getCircularEdges(e),o=getIsolatedVertices(e),s=getDuplicateVertices(e,t),c=(e=>{const t=count.vertices(e),r=count.edges(e),n=count.faces(e);return{vertices:t>=countImplied.vertices(e),edges:r>=countImplied.edges(e),faces:n>=countImplied.faces(e)}})(e);return{summary:0===r.length&&0===n.length&&0===o.length&&c.vertices&&c.edges&&c.faces?"valid":"problematic",vertices:{isolated:o,duplicate:s,references:c.vertices},edges:{circular:n,duplicate:r,references:c.edges},faces:{references:c.faces}}},populate=(e,t)=>"object"!=typeof e?e:e.edges_vertices?(e.vertices_edges=makeVerticesEdgesUnsorted(e),e.vertices_vertices=makeVerticesVertices(e),e.vertices_edges=makeVerticesEdges(e),(e=>{const t=e.edges_vertices.length;if(e.edges_assignment||(e.edges_assignment=[]),e.edges_foldAngle||(e.edges_foldAngle=[]),e.edges_assignment.length>e.edges_foldAngle.length)for(let t=e.edges_foldAngle.length;t<e.edges_assignment.length;t+=1)e.edges_foldAngle[t]=edgeAssignmentToFoldAngle(e.edges_assignment[t]);if(e.edges_foldAngle.length>e.edges_assignment.length)for(let t=e.edges_assignment.length;t<e.edges_foldAngle.length;t+=1)e.edges_assignment[t]=edgeFoldAngleToAssignment(e.edges_foldAngle[t]);for(let r=e.edges_assignment.length;r<t;r+=1)e.edges_assignment[r]="U",e.edges_foldAngle[r]=0})(e),((e,t)=>{if(void 0!==t||e.faces_vertices||e.faces_edges||(t=!0),t&&e.vertices_coords){const t=makePlanarFaces(e);return e.faces_vertices=t.map((e=>e.vertices)),void(e.faces_edges=t.map((e=>e.edges)))}e.faces_vertices&&e.faces_edges||(e.faces_vertices&&!e.faces_edges?e.faces_edges=makeFacesEdgesFromVertices(e):e.faces_edges&&!e.faces_vertices?e.faces_vertices=makeFacesVerticesFromEdges(e):(e.faces_vertices=[],e.faces_edges=[]))})(e,t),e.vertices_faces=makeVerticesFaces(e),e.edges_faces=makeEdgesFacesUnsorted(e),e.faces_faces=makeFacesFaces(e),e):e,getEdgesVerticesOverlappingSpan=(e,t=Ce.core.EPSILON)=>makeEdgesBoundingBox(e,t).map((t=>e.vertices_coords.map((e=>e[0]>t.min[0]&&e[1]>t.min[1]&&e[0]<t.max[0]&&e[1]<t.max[1])))),getEdgesEdgesOverlapingSpans=({vertices_coords:e,edges_vertices:t,edges_coords:r},n=Ce.core.EPSILON)=>{const o=makeEdgesBoundingBox({vertices_coords:e,edges_vertices:t,edges_coords:r},n),s=t.map((()=>[]));for(let e=0;e<t.length-1;e+=1)for(let r=e+1;r<t.length;r+=1){const t=(o[e].max[0]<o[r].min[0]||o[r].max[0]<o[e].min[0])&&(o[e].max[1]<o[r].min[1]||o[r].max[1]<o[e].min[1]);s[e][r]=!t,s[r][e]=!t}for(let e=0;e<t.length;e+=1)s[e][e]=!0;return s};var Ye=Object.freeze({__proto__:null,getEdgesVerticesOverlappingSpan:getEdgesVerticesOverlappingSpan,getEdgesEdgesOverlapingSpans:getEdgesEdgesOverlapingSpans});const isVertexCollinear=({vertices_coords:e,vertices_edges:t,edges_vertices:r},n,o=Ce.core.EPSILON)=>{if(!e||!r)return!1;t||(t=makeVerticesEdgesUnsorted({edges_vertices:r}));const s=t[n];if(void 0===s||2!==s.length)return!1;const c=(({edges_vertices:e},t,r)=>(r.forEach((r=>{e[r][0]===t&&e[r][1]===t&&console.warn("removePlanarVertex circular edge")})),r.map((r=>e[r][0]===t?e[r][1]:e[r][0]))))({edges_vertices:r},n,s),i=[c[0],n,c[1]].map((t=>e[t]));return Ce.core.collinearBetween(...i,!1,o)},getVerticesEdgesOverlap=({vertices_coords:e,edges_vertices:t,edges_coords:r},n=Ce.core.EPSILON)=>{r||(r=t.map((t=>t.map((t=>e[t])))));const o=getEdgesVerticesOverlappingSpan({vertices_coords:e,edges_vertices:t,edges_coords:r},n);for(let t=0;t<r.length;t+=1)for(let s=0;s<e.length;s+=1)o[t][s]&&(o[t][s]=Ce.core.overlapLinePoint(Ce.core.subtract(r[t][1],r[t][0]),r[t][0],e[s],Ce.core.excludeS,n));return o.map((e=>e.map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e))))};var Ke=Object.freeze({__proto__:null,isVertexCollinear:isVertexCollinear,getVerticesEdgesOverlap:getVerticesEdgesOverlap});const makeEdgesLineParallelOverlap=({vertices_coords:e,edges_vertices:t},r,n,o=Ce.core.EPSILON)=>{const s=Ce.core.normalize2(r),c=t.map((t=>e[t[0]])),i=t.map((t=>t.map((t=>e[t])))).map((e=>Ce.core.subtract2(e[1],e[0]))).map((e=>Ce.core.parallel2(e,r,o)));for(let e=0;e<t.length;e+=1){if(!i[e])continue;if(Ce.core.fnEpsilonEqualVectors(c[e],n)){i[e]=!0;continue}const t=Ce.core.normalize2(Ce.core.subtract2(c[e],n)),r=Math.abs(Ce.core.dot2(t,s));i[e]=Math.abs(1-r)<o}return i},makeEdgesSegmentIntersection=({vertices_coords:e,edges_vertices:t,edges_coords:r},n,o,s=Ce.core.EPSILON)=>{r||(r=makeEdgesCoords({vertices_coords:e,edges_vertices:t}));const c=Ce.core.boundingBox([n,o],s),i=Ce.core.subtract2(o,n);return makeEdgesBoundingBox({vertices_coords:e,edges_vertices:t,edges_coords:r},s).map((e=>Ce.core.overlapBoundingBoxes(c,e))).map(((e,t)=>e?Ce.core.intersectLineLine(i,n,Ce.core.subtract2(r[t][1],r[t][0]),r[t][0],Ce.core.includeS,Ce.core.includeS,s):void 0))},makeEdgesEdgesIntersection=function({vertices_coords:e,edges_vertices:t,edges_vector:r,edges_origin:n},o=Ce.core.EPSILON){r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t})),n||(n=t.map((t=>e[t[0]])));const s=r.map((()=>[])),c=getEdgesEdgesOverlapingSpans({vertices_coords:e,edges_vertices:t},o);for(let e=0;e<r.length-1;e+=1)for(let t=e+1;t<r.length;t+=1)!0===c[e][t]?(s[e][t]=Ce.core.intersectLineLine(r[e],n[e],r[t],n[t],Ce.core.excludeS,Ce.core.excludeS,o),s[t][e]=s[e][t]):s[e][t]=void 0;return s},intersectConvexFaceLine=({vertices_coords:e,edges_vertices:t,faces_vertices:r,faces_edges:n},o,s,c,i=Ce.core.EPSILON)=>{const a=r[o].map((t=>e[t])).map((e=>Ce.core.overlapLinePoint(s,c,e,(()=>!0),i))).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)),l=a.map((e=>r[o][e]));if(a.concat(a.map((e=>e+r[o].length))).map(((e,t,r)=>r[t+1]-e==1)).reduce(((e,t)=>e||t),!1))return;if(l.length>1)return{vertices:l,edges:[]};const d=n[o].map((r=>t[r].map((t=>e[t])))).map((e=>Ce.core.intersectLineLine(s,c,Ce.core.subtract(e[1],e[0]),e[0],Ce.core.includeL,Ce.core.excludeS,i))).map(((e,t)=>({coords:e,edge:n[o][t]}))).filter((e=>void 0!==e.coords)).filter((e=>!l.map((r=>t[e.edge].includes(r))).reduce(((e,t)=>e||t),!1)));return d.length+l.length===2?{vertices:l,edges:d}:void 0};var Qe=Object.freeze({__proto__:null,makeEdgesLineParallelOverlap:makeEdgesLineParallelOverlap,makeEdgesSegmentIntersection:makeEdgesSegmentIntersection,makeEdgesEdgesIntersection:makeEdgesEdgesIntersection,intersectConvexFaceLine:intersectConvexFaceLine});const fragment_graph=(e,t=Ce.core.EPSILON)=>{const r=e.edges_vertices.map((t=>t.map((t=>e.vertices_coords[t])))),n=r.map((e=>Ce.core.subtract(e[1],e[0]))),o=r.map((e=>e[0])),s=makeEdgesEdgesIntersection({vertices_coords:e.vertices_coords,edges_vertices:e.edges_vertices,edges_vector:n,edges_origin:o},1e-6),c=getVerticesEdgesOverlap({vertices_coords:e.vertices_coords,edges_vertices:e.edges_vertices,edges_coords:r},t);if(0===s.flat().filter((e=>void 0!==e)).length&&0===c.flat().filter((e=>void 0!==e)).length)return;const i=e.vertices_coords.length;s.forEach((t=>t.filter((e=>void 0!==e)).filter((e=>2===e.length)).forEach((t=>{const r=e.vertices_coords.length;e.vertices_coords.push([...t]),t.splice(0,2),t.push(r)})))),s.forEach(((e,t)=>{e.forEach(((e,r)=>{e&&(s[t][r]=e[0])}))}));const a=s.map((e=>e.filter((e=>void 0!==e))));e.edges_vertices.forEach(((e,t)=>e.push(...a[t],...c[t]))),e.edges_vertices.forEach(((t,r)=>{e.edges_vertices[r]=sortVerticesAlongVector({vertices_coords:e.vertices_coords},t,n[r])}));const l=e.edges_vertices.map(((e,t)=>Array(e.length-1).fill(t))).flat();if(e.edges_vertices=e.edges_vertices.map((e=>Array.from(Array(e.length-1)).map(((t,r,n)=>[e[r],e[r+1]])))).flat(),e.edges_assignment&&e.edges_foldAngle&&e.edges_foldAngle.length>e.edges_assignment.length)for(let t=e.edges_assignment.length;t<e.edges_foldAngle.length;t+=1)e.edges_assignment[t]=edgeFoldAngleToAssignment(e.edges_foldAngle[t]);return e.edges_assignment&&(e.edges_assignment=l.map((t=>e.edges_assignment[t]||"U"))),e.edges_foldAngle&&(e.edges_foldAngle=l.map((t=>e.edges_foldAngle[t])).map(((t,r)=>void 0===t?edgeAssignmentToFoldAngle(e.edges_assignment[r]):t))),{vertices:{new:Array.from(Array(e.vertices_coords.length-i)).map(((e,t)=>i+t))},edges:{backmap:l}}},et=[a,l,u,g],fragment=(e,t=Ce.core.EPSILON)=>{e.vertices_coords=e.vertices_coords.map((e=>e.slice(0,2))),[o,s,c].map((t=>getGraphKeysWithPrefix(e,t))).flat().filter((e=>!et.includes(e))).forEach((t=>delete e[t]));const r={vertices:{},edges:{}};let n;for(n=0;n<20;n+=1){const n=removeDuplicateVertices(e,t/2),o=removeDuplicateEdges(e),s=removeCircularEdges(e),c=fragment_graph(e,t);if(void 0===c){r.vertices.map=void 0===r.vertices.map?n.map:mergeNextmaps(r.vertices.map,n.map),r.edges.map=void 0===r.edges.map?mergeNextmaps(o.map,s.map):mergeNextmaps(r.edges.map,o.map,s.map);break}const i=invertMap(c.edges.backmap),a=mergeNextmaps(o.map,s.map,i);r.vertices.map=void 0===r.vertices.map?n.map:mergeNextmaps(r.vertices.map,n.map),r.edges.map=void 0===r.edges.map?a:mergeNextmaps(r.edges.map,a)}return 20===n&&console.warn("fragment reached max iterations"),r},getBoundaryVertices=({edges_vertices:e,edges_assignment:t})=>uniqueIntegers(e.filter(((e,r)=>"B"===t[r]||"b"===t[r])).flat()),getBoundary=({vertices_edges:e,edges_vertices:t,edges_assignment:r})=>{if(void 0===r)return{vertices:[],edges:[]};e||(e=makeVerticesEdgesUnsorted({edges_vertices:t}));const n=r.map((e=>"B"===e||"b"===e)),o=[],s=[];let c=-1;for(let e=0;e<n.length;e+=1)if(n[e]){c=e;break}if(-1===c)return{vertices:[],edges:[]};n[c]=!1,o.push(c),s.push(t[c][0]);let i=t[c][1];for(;s[0]!==i;){if(s.push(i),c=e[i].filter((e=>n[e])).shift(),void 0===c)return{vertices:[],edges:[]};t[c][0]===i?[,i]=t[c]:[i]=t[c],n[c]=!1,o.push(c)}return{vertices:s,edges:o}};var tt=Object.freeze({__proto__:null,getBoundingBox:({vertices_coords:e},t)=>Ce.core.boundingBox(e,t),getBoundaryVertices:getBoundaryVertices,getBoundary:getBoundary,getPlanarBoundary:({vertices_coords:e,vertices_edges:t,vertices_vertices:r,edges_vertices:n})=>{r||(r=makeVerticesVertices({vertices_coords:e,vertices_edges:t,edges_vertices:n}));const o=makeVerticesToEdgeBidirectional({edges_vertices:n}),s=[],c=[],i={vertices:c,edges:s};let a=-1/0,l=-1;if(e.forEach(((e,t)=>{e[0]>a&&(a=e[0],l=t)})),-1===l)return i;c.push(l);const d=e[l],u=r[l],g=u.map((t=>e[t])).map((e=>[e[0]-d[0],e[1]-d[1]])).map((e=>Math.atan2(e[1],e[0]))).map((e=>e<0?e+2*Math.PI:e)).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).shift().i,p=u[g],h=o[l<p?`${l} ${p}`:`${p} ${l}`];s.push(h);let m=l,v=p,_=0;for(;_<1e4;){const e=r[v],t=e.indexOf(m),n=e[(t+1)%e.length],a=o[v<n?`${v} ${n}`:`${n} ${v}`];if(a===s[0])return i;c.push(v),s.push(a),m=v,v=n,_+=1}return console.warn("calculate boundary potentially entered infinite loop"),i}});const apply_matrix_to_graph=function(e,t){return filterKeysWithSuffix(e,"coords").forEach((r=>{e[r]=e[r].map((e=>Ce.core.resize(3,e))).map((e=>Ce.core.multiplyMatrix3Vector3(t,e)))})),filterKeysWithSuffix(e,"matrix").forEach((r=>{e[r]=e[r].map((e=>Ce.core.multiplyMatrices3(e,t)))})),e};var rt={scale:(e,t,...r)=>{const n=Ce.core.getVector(...r),o=Ce.core.resize(3,n),s=Ce.core.makeMatrix3Scale(t,o);return apply_matrix_to_graph(e,s)},translate:(e,...t)=>{const r=Ce.core.getVector(...t),n=Ce.core.resize(3,r),o=Ce.core.makeMatrix3Translate(...n);return apply_matrix_to_graph(e,o)},rotateZ:(e,t,...r)=>{const n=Ce.core.getVector(...r),o=Ce.core.resize(3,n),s=Ce.core.makeMatrix3RotateZ(t,...o);return apply_matrix_to_graph(e,s)},transform:apply_matrix_to_graph};const getFaceFaceSharedVertices=(e,t)=>{const r={};t.forEach((e=>{r[e]=!0}));const n=e.map((e=>!!r[e])),o=[],s=n.indexOf(!1),c={};for(let t=s+1;t<n.length;t+=1)n[t]&&!c[e[t]]&&(o.push(e[t]),c[e[t]]=!0);for(let t=0;t<s;t+=1)n[t]&&!c[e[t]]&&(o.push(e[t]),c[e[t]]=!0);return o},makeFaceSpanningTree=({faces_vertices:e,faces_faces:t},r=0)=>{if(t||(t=makeFacesFaces({faces_vertices:e})),0===t.length)return[];const n=[[{face:r}]],o={};o[r]=!0;do{const r=n[n.length-1].map((e=>t[e.face].map((t=>({face:t,parent:e.face}))))).reduce(((e,t)=>e.concat(t)),[]),s={};r.forEach(((e,t)=>{o[e.face]&&(s[t]=!0),o[e.face]=!0}));const c=r.filter(((e,t)=>!s[t]));c.map((t=>getFaceFaceSharedVertices(e[t.face],e[t.parent]))).forEach(((e,t)=>{const r=e.slice(0,2);c[t].edge_vertices=r})),n[n.length]=c}while(n[n.length-1].length>0);return n.length>0&&0===n[n.length-1].length&&n.pop(),n};var nt=Object.freeze({__proto__:null,getFaceFaceSharedVertices:getFaceFaceSharedVertices,makeFaceSpanningTree:makeFaceSpanningTree});const multiplyVerticesFacesMatrix2=({vertices_coords:e,vertices_faces:t,faces_vertices:r},n)=>{t||(t=makeVerticesFaces({faces_vertices:r}));const o=t.map((e=>e.filter((e=>null!=e)).shift())).map((e=>void 0===e?Ce.core.identity2x3:n[e]));return e.map(((e,t)=>Ce.core.multiplyMatrix2Vector2(o[t],e)))},ot={U:!0,u:!0},makeFacesMatrix=({vertices_coords:e,edges_vertices:t,edges_foldAngle:r,edges_assignment:n,faces_vertices:o,faces_faces:s},c=0)=>{!n&&r&&(n=makeEdgesAssignment({edges_foldAngle:r})),r||(r=n?makeEdgesFoldAngle({edges_assignment:n}):Array(t.length).fill(0));const i=makeVerticesToEdgeBidirectional({edges_vertices:t}),a=o.map((()=>Ce.core.identity3x4));return makeFaceSpanningTree({faces_vertices:o,faces_faces:s},c).slice(1).forEach((t=>t.forEach((t=>{const o=t.edge_vertices.map((t=>e[t])),s=t.edge_vertices.join(" "),c=i[s],l=ot[n[c]]?Math.PI:r[c]*Math.PI/180,d=Ce.core.makeMatrix3Rotate(l,Ce.core.subtract(...Ce.core.resizeUp(o[1],o[0])),o[0]);a[t.face]=Ce.core.multiplyMatrices3(a[t.parent],d)})))),a},st={M:!0,m:!0,V:!0,v:!0,U:!0,u:!0,F:!1,f:!1,B:!1,b:!1},makeEdgesIsFolded=({edges_vertices:e,edges_foldAngle:t,edges_assignment:r})=>void 0===r?void 0===t?e.map((()=>!0)):t.map((e=>e<-Ce.core.EPSILON||e>Ce.core.EPSILON)):r.map((e=>st[e])),makeFacesMatrix2=({vertices_coords:e,edges_vertices:t,edges_foldAngle:r,edges_assignment:n,faces_vertices:o,faces_faces:s},c=0)=>{r||(r=n?makeEdgesFoldAngle({edges_assignment:n}):Array(t.length).fill(0));const i=makeEdgesIsFolded({edges_vertices:t,edges_foldAngle:r,edges_assignment:n}),a=makeVerticesToEdgeBidirectional({edges_vertices:t}),l=o.map((()=>Ce.core.identity2x3));return makeFaceSpanningTree({faces_vertices:o,faces_faces:s},c).slice(1).forEach((t=>t.forEach((t=>{const r=t.edge_vertices.map((t=>e[t])),n=t.edge_vertices.join(" "),o=a[n],s=Ce.core.subtract2(r[1],r[0]),c=r[0],d=i[o]?Ce.core.makeMatrix2Reflect(s,c):Ce.core.identity2x3;l[t.face]=Ce.core.multiplyMatrices2(l[t.parent],d)})))),l};var ct=Object.freeze({__proto__:null,multiplyVerticesFacesMatrix2:multiplyVerticesFacesMatrix2,makeFacesMatrix:makeFacesMatrix,makeEdgesIsFolded:makeEdgesIsFolded,makeFacesMatrix2:makeFacesMatrix2});const makeVerticesCoordsFolded=({vertices_coords:e,vertices_faces:t,edges_vertices:r,edges_foldAngle:n,edges_assignment:o,faces_vertices:s,faces_faces:c,faces_matrix:i},a)=>{i=makeFacesMatrix({vertices_coords:e,edges_vertices:r,edges_foldAngle:n,edges_assignment:o,faces_vertices:s,faces_faces:c},a),t||(t=makeVerticesFaces({faces_vertices:s}));const l=t.map((e=>e.filter((e=>null!=e)).shift())).map((e=>void 0===e?Ce.core.identity3x4:i[e]));return e.map((e=>Ce.core.resize(3,e))).map(((e,t)=>Ce.core.multiplyMatrix3Vector3(l[t],e)))},makeVerticesCoordsFlatFolded=({vertices_coords:e,edges_vertices:t,edges_foldAngle:r,edges_assignment:n,faces_vertices:o,faces_faces:s},c=0)=>{const i=makeEdgesIsFolded({edges_vertices:t,edges_foldAngle:r,edges_assignment:n}),a=[];o[c].forEach((t=>{a[t]=[...e[t]]}));const l=[];l[c]=!1;const d=makeVerticesToEdgeBidirectional({edges_vertices:t});return makeFaceSpanningTree({faces_vertices:o,faces_faces:s},c).slice(1).forEach((r=>r.forEach((r=>{const n=r.edge_vertices.join(" "),s=d[n],c=t[s].map((e=>a[e]));if(void 0===c[0]||void 0===c[1])return;const u=t[s].map((t=>e[t])),g=u[0],p=Ce.core.normalize2(Ce.core.subtract2(u[1],u[0])),h=Ce.core.rotate90(p);l[r.face]=i[s]?!l[r.parent]:l[r.parent];const m=Ce.core.normalize2(Ce.core.subtract2(c[1],c[0])),v=c[0],_=l[r.face]?Ce.core.rotate270(m):Ce.core.rotate90(m);o[r.face].filter((e=>void 0===a[e])).forEach((t=>{const r=Ce.core.subtract2(e[t],g),n=Ce.core.dot(r,h),o=Ce.core.dot(r,p),s=Ce.core.scale2(m,o),c=Ce.core.scale2(_,n),i=Ce.core.add2(Ce.core.add2(v,s),c);a[t]=i}))})))),a};var it=Object.freeze({__proto__:null,makeVerticesCoordsFolded:makeVerticesCoordsFolded,makeVerticesCoordsFlatFolded:makeVerticesCoordsFlatFolded});const clone=function(e){let t,n;if(typeof e!==r)return e;if(!e)return e;if("[object Array]"===Object.prototype.toString.apply(e)){for(t=[],n=0;n<e.length;n+=1)t[n]=clone(e[n]);return t}for(n in t={},e)e.hasOwnProperty(n)&&(t[n]=clone(e[n]));return t},makeFacesWindingFromMatrix2=e=>e.map((e=>e[0]*e[3]-e[1]*e[2])).map((e=>e>=0)),makeFacesWinding=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])).map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>(e[1][0]-e[0][0])*(e[1][1]+e[0][1]))).reduce(((e,t)=>e+t),0))).map((e=>e<0));var at=Object.freeze({__proto__:null,makeFacesWindingFromMatrix:e=>e.map((e=>e[0]*e[4]-e[1]*e[3])).map((e=>e>=0)),makeFacesWindingFromMatrix2:makeFacesWindingFromMatrix2,makeFacesWinding:makeFacesWinding});const explodeFaces=e=>{const t=e.faces_vertices.flatMap((t=>t.map((t=>e.vertices_coords[t]))));let r=0;const n=e.faces_vertices.map((e=>e.map((()=>r++))));return{vertices_coords:JSON.parse(JSON.stringify(t)),faces_vertices:n}},explodeShrinkFaces=({vertices_coords:e,faces_vertices:t},r=.333)=>{const n=explodeFaces({vertices_coords:e,faces_vertices:t}),o=makeFacesWinding(n),s=n.faces_vertices.map((e=>e.map((e=>n.vertices_coords[e])))).map((e=>e.map(((e,t,r)=>Ce.core.subtract2(e,r[(t+1)%r.length]))))),c=makeFacesCenterQuick({vertices_coords:e,faces_vertices:t}),i=t.map((t=>t.map((t=>e[t])))).map(((e,t)=>e.map((e=>Ce.core.distance2(e,c[t]))))),a=s.map(((e,t)=>e.map(((e,t,r)=>[e,Ce.core.flip(r[(t-1+r.length)%r.length])])).map((e=>o[t]?Ce.core.counterClockwiseBisect2(...e):Ce.core.clockwiseBisect2(...e))))).map(((e,t)=>e.map(((e,r)=>Ce.core.scale(e,i[t][r])))));return n.faces_vertices.forEach(((e,t)=>e.forEach(((e,o)=>{n.vertices_coords[e]=Ce.core.add2(n.vertices_coords[e],Ce.core.scale2(a[t][o],-r))})))),n};var lt=Object.freeze({__proto__:null,explode:e=>{if(!e.faces_vertices)return{};const t=e.faces_edges?e.faces_edges:makeFacesEdgesFromVertices(e),r=e.faces_vertices.flatMap((e=>e)),n=t.flatMap((e=>e));let o=0,s=0,c=0;return e.faces_vertices=e.faces_vertices.map((e=>e.map((()=>o++)))),e.faces_edges=e.faces_edges.map((e=>e.map((()=>s++)))),e.edges_vertices=e.faces_edges.flatMap((e=>e.map(((e,t,r)=>{const n=t===r.length-1?[c,c+1-r.length]:[c,c+1];return c+=1,n})))),e.vertices_coords&&(e.vertices_coords=clone(r.map((t=>e.vertices_coords[t])))),e.edges_assignment&&(e.edges_assignment=clone(n.map((t=>e.edges_assignment[t])))),e.edges_foldAngle&&(e.edges_foldAngle=clone(n.map((t=>e.edges_foldAngle[t])))),e.vertices_vertices&&delete e.vertices_vertices,e.vertices_edges&&delete e.vertices_edges,e.vertices_faces&&delete e.vertices_faces,e.edges_edges&&delete e.edges_edges,e.edges_faces&&delete e.edges_faces,e.faces_faces&&delete e.faces_faces,{vertices:{map:r},edges:{map:n}}},explodeFaces:explodeFaces,explodeShrinkFaces:explodeShrinkFaces});const nearestVertex=({vertices_coords:e},t)=>{if(!e)return;const r=Ce.core.resize(e[0].length,t),n=e.map(((e,t)=>({d:Ce.core.distance(r,e),i:t}))).sort(((e,t)=>e.d-t.d)).shift();return n?n.i:void 0},nearestEdge=({vertices_coords:e,edges_vertices:t},r)=>{if(!e||!t)return;const n=t.map((t=>t.map((t=>e[t])))).map((e=>Ce.core.nearestPointOnLine(Ce.core.subtract(e[1],e[0]),e[0],r,Ce.core.segmentLimiter)));return Ce.core.smallestComparisonSearch(r,n,Ce.core.distance)},faceContainingPoint=({vertices_coords:e,faces_vertices:t},r)=>{if(!e||!t)return;const n=t.map(((t,r)=>({face:t.map((t=>e[t])),i:r}))).filter((e=>Ce.core.overlapConvexPolygonPoint(e.face,r))).shift();return void 0===n?void 0:n.i},nearestFace=(e,t)=>{const r=faceContainingPoint(e,t);if(void 0!==r)return r;if(e.edges_faces){const r=nearestEdge(e,t),n=e.edges_faces[r];if(1===n.length)return n[0];if(n.length>1){const r=makeFacesCenterQuick({vertices_coords:e.vertices_coords,faces_vertices:n.map((t=>e.faces_vertices[t]))}).map((e=>Ce.core.distance(e,t)));let o=0;for(let e=0;e<r.length;e+=1)r[e]<r[o]&&(o=e);return n[o]}}};var dt=Object.freeze({__proto__:null,nearestVertex:nearestVertex,nearestEdge:nearestEdge,faceContainingPoint:faceContainingPoint,nearestFace:nearestFace,nearest:(e,...t)=>{const r={vertices:nearestVertex,edges:nearestEdge,faces:nearestFace},n=Ce.core.getVector(...t),o=Object.create(null);return["vertices","edges","faces"].forEach((t=>{Object.defineProperty(o,Ie[t],{enumerable:!0,get:()=>r[t](e,n)}),filterKeysWithPrefix(e,t).forEach((r=>Object.defineProperty(o,r,{enumerable:!0,get:()=>e[r][o[Ie[t]]]})))})),o}});const addVertices=(e,t,r=Ce.core.EPSILON)=>{e.vertices_coords||(e.vertices_coords=[]),"number"==typeof t[0]&&(t=[t]);const n=t.map((t=>e.vertices_coords.map((e=>Ce.core.distance(e,t)<r)).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).shift()));let o=e.vertices_coords.length;const s=t.filter(((e,t)=>void 0===n[t]));return e.vertices_coords.push(...s),n.map((e=>void 0===e?o++:e))},splitEdge=(e,t,r,n=Ce.core.EPSILON)=>{if(e.edges_vertices.length<t)return{};const o=e.edges_vertices[t];r||(r=Ce.core.midpoint(...o));const c=o.map((t=>e.vertices_coords[t])).map((e=>Ce.core.distance(e,r)<n));if(c[0])return{vertex:o[0],edges:{}};if(c[1])return{vertex:o[1],edges:{}};const i=e.vertices_coords.length;e.vertices_coords[i]=r;const a=[0,1].map((t=>t+e.edges_vertices.length));((e,t,r)=>{const n=e.edges_vertices[t],o=[{edges_vertices:[n[0],r]},{edges_vertices:[r,n[1]]}];if(o.forEach((r=>[u,g].filter((r=>e[r]&&void 0!==e[r][t])).forEach((n=>{r[n]=e[n][t]})))),e.vertices_coords&&(e.edges_length||e.edges_vector)){const t=o.map((t=>t.edges_vertices.map((t=>e.vertices_coords[t]))));e.edges_vector&&o.forEach(((e,r)=>{e.edges_vector=Ce.core.subtract(t[r][1],t[r][0])})),e.edges_length&&o.forEach(((e,r)=>{e.edges_length=Ce.core.distance2(...t[r])}))}return o})(e,t,i).forEach(((t,r)=>Object.keys(t).forEach((n=>{e[n][a[r]]=t[n]})))),(({vertices_vertices:e},t,r)=>{e&&(e[t]=[...r],r.forEach(((r,n,o)=>{const s=o[(n+1)%o.length],c=e[r].indexOf(s);e[r][c]=t})))})(e,i,o),(({vertices_coords:e,vertices_vertices:t,vertices_sectors:r},n)=>{r&&(r[n]=1===t[n].length?[Ce.core.TWO_PI]:Ce.core.counterClockwiseSectors2(t[n].map((t=>Ce.core.subtract2(e[t],e[n])))))})(e,i),(({vertices_edges:e},t,r,n,o)=>{e&&(e[r]=[...o],n.map((r=>e[r].indexOf(t))).forEach(((t,r)=>{e[n[r]][t]=o[r]})))})(e,t,i,o,a);const l=(({vertices_faces:e,edges_vertices:t,edges_faces:r,faces_edges:n,faces_vertices:o},s)=>{if(r&&r[s])return r[s];const c=t[s];if(void 0!==e){const t=[];for(let r=0;r<e[c[0]].length;r+=1)for(let n=0;n<e[c[1]].length;n+=1)if(e[c[0]][r]===e[c[1]][n]){if(void 0===e[c[0]][r])continue;t.push(e[c[0]][r])}return t}if(n){const e=[];for(let t=0;t<n.length;t+=1)for(let r=0;r<n[t].length;r+=1)n[t][r]===s&&e.push(t);return e}o&&console.warn("todo: findAdjacentFacesToEdge")})(e,t);l&&((({vertices_faces:e},t,r)=>{e&&(e[t]=[...r])})(e,i,l),(({edges_faces:e},t,r)=>{e&&t.forEach((t=>{e[t]=[...r]}))})(e,a,l),(({faces_vertices:e},t,r,n)=>{e&&n.map((t=>e[t])).forEach((e=>e.map(((e,t,n)=>{const o=(t+1)%n.length;return e===r[0]&&n[o]===r[1]||e===r[1]&&n[o]===r[0]?o:void 0})).filter((e=>void 0!==e)).sort(((e,t)=>t-e)).forEach((r=>e.splice(r,0,t)))))})(e,i,o,l),(({edges_vertices:e,faces_vertices:t,faces_edges:r},n)=>{const o=makeVerticesToEdgeBidirectional({edges_vertices:e});n.map((e=>t[e].map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>o[e.join(" ")])))).forEach(((e,t)=>{r[n[t]]=e}))})(e,l));const d=removeGeometryIndices(e,s,[t]);return a.forEach(((e,t)=>{a[t]=d[a[t]]})),d.splice(-2),d[t]=a,{vertex:i,edges:{map:d,new:a,remove:t}}},rebuild_edge=(e,t,r)=>{const n=e.edges_vertices.length,o=(({vertices_coords:e},t,r)=>{const n=t.map((t=>e[t])).reverse();return{edges_vertices:[...t],edges_foldAngle:0,edges_assignment:"U",edges_length:Ce.core.distance2(...n),edges_vector:Ce.core.subtract(...n),edges_faces:[r,r]}})(e,r,t);return Object.keys(o).filter((t=>void 0!==e[t])).forEach((t=>{e[t][n]=o[t]})),n},build_faces=(e,t,r)=>{const n=[0,1].map((t=>e.faces_vertices.length+t));return(({edges_vertices:e,faces_vertices:t,faces_edges:r},n,o)=>{const s=o.map((e=>t[n].indexOf(e))),c=splitCircularArray(t[n],s).map((e=>({faces_vertices:e})));if(r){const t=makeVerticesToEdgeBidirectional({edges_vertices:e});c.map((e=>e.faces_vertices.map(((e,t,r)=>`${e} ${r[(t+1)%r.length]}`)).map((e=>t[e])))).forEach(((e,t)=>{c[t].faces_edges=e}))}return c})(e,t,r).forEach(((t,r)=>Object.keys(t).forEach((o=>{e[o][n[r]]=t[o]})))),n},ft="splitFace potentially given a non-convex face",splitFace=(e,t,r,n,o)=>{const s=intersectConvexFaceLine(e,t,r,n,o);if(void 0===s)return;const i=((e,{vertices:t,edges:r})=>{let n;const o=r.map((t=>{const r=splitEdge(e,n?n[t.edge]:t.edge,t.coords);return n=n?mergeNextmaps(n,r.edges.map):r.edges.map,r}));let s;return t.push(...o.map((e=>e.vertex))),o.forEach((e=>{e.edges.remove=s?s[e.edges.remove]:e.edges.remove;const t=invertSimpleMap(e.edges.map);s=s?mergeBackmaps(s,t):t})),{vertices:t,edges:{map:n,remove:o.map((e=>e.edges.remove))}}})(e,s);i.edges.new=rebuild_edge(e,t,i.vertices),(({vertices_coords:e,vertices_vertices:t,edges_vertices:r},n)=>{const o=r[n][0],s=r[n][1];t[o]=sortVerticesCounterClockwise({vertices_coords:e},t[o].concat(s),o),t[s]=sortVerticesCounterClockwise({vertices_coords:e},t[s].concat(o),s)})(e,i.edges.new),(({edges_vertices:e,vertices_edges:t,vertices_vertices:r},n)=>{if(!t||!r)return;const o=e[n];o.map((e=>r[e])).map(((e,t)=>e.indexOf(o[(t+1)%o.length]))).forEach(((e,r)=>t[o[r]].splice(e,0,n)))})(e,i.edges.new);const a=build_faces(e,t,i.vertices);((e,t,r)=>{const n={};r.forEach((t=>e.faces_vertices[t].forEach((e=>{n[e]||(n[e]=[]),n[e].push(t)})))),e.faces_vertices[t].forEach((r=>{const o=e.vertices_faces[r].indexOf(t),s=n[r];-1!==o&&s?e.vertices_faces[r].splice(o,1,...s):console.warn(ft)}))})(e,t,a),((e,t,r,n)=>{const o={};n.forEach((t=>e.faces_edges[t].forEach((e=>{o[e]||(o[e]=[]),o[e].push(t)})))),[...e.faces_edges[t],r].forEach((r=>{const n=o[r],s=[];for(let n=0;n<e.edges_faces[r].length;n+=1)e.edges_faces[r][n]===t&&s.push(n);if(0===s.length||!n)return void console.warn(ft);s.reverse().forEach((t=>e.edges_faces[r].splice(t,1)));const c=s[s.length-1];e.edges_faces[r].splice(c,0,...n)}))})(e,t,i.edges.new,a),(({faces_vertices:e,faces_faces:t},r,n)=>{const o=t[r],s=n.map((t=>e[t])),c=o.map((t=>{const r=e[t],o=[0,0];for(let e=0;e<s.length;e+=1){let t=0;for(let n=0;n<r.length;n+=1)-1!==s[e].indexOf(r[n])&&(t+=1);o[e]=t}return o[0]>=2?n[0]:o[1]>=2?n[1]:void 0}));n.forEach(((e,r,o)=>{t[e]=[o[(r+1)%n.length]]})),o.forEach(((e,n)=>{for(let o=0;o<t[e].length;o+=1)t[e][o]===r&&(t[e][o]=c[n],t[c[n]].push(e))}))})(e,t,a);const l=removeGeometryIndices(e,c,[t]);return a.forEach(((e,t)=>{a[t]=l[a[t]]})),l.splice(-2),l[t]=a,i.faces={map:l,new:a,remove:t},i},ut={};ut.prototype=Object.create(Object.prototype),ut.prototype.constructor=ut;const gt=Object.assign({clean:clean,validate:validate$1,populate:populate,fragment:fragment,addVertices:addVertices,splitEdge:splitEdge,faceSpanningTree:makeFaceSpanningTree,explodeFaces:explodeFaces,explodeShrinkFaces:explodeShrinkFaces},rt);Object.keys(gt).forEach((e=>{ut.prototype[e]=function(){return gt[e](this,...arguments)}})),ut.prototype.splitFace=function(e,...t){const r=Ce.core.getLine(...t);return splitFace(this,e,r.vector,r.origin)},ut.prototype.copy=function(){return Object.assign(Object.create(Object.getPrototypeOf(this)),clone(this))},ut.prototype.clear=function(){return Ne.graph.forEach((e=>delete this[e])),Ne.orders.forEach((e=>delete this[e])),delete this.file_frames,this},ut.prototype.boundingBox=function(){return Ce.rect.fromPoints(this.vertices_coords)},ut.prototype.unitize=function(){if(!this.vertices_coords)return this;const e=Ce.core.bounding_box(this.vertices_coords),t=Math.max(...e.span),r=0===t?1:1/t,n=e.min;return this.vertices_coords=this.vertices_coords.map((e=>Ce.core.subtract(e,n))).map((e=>e.map((e=>e*r)))),this},ut.prototype.folded=function(){const e=this.faces_matrix2?multiplyVerticesFacesMatrix2(this,this.faces_matrix2):makeVerticesCoordsFolded(this,...arguments);return Object.assign(Object.create(Object.getPrototypeOf(this)),Object.assign(clone(this),{vertices_coords:e,frame_classes:[v]}))},ut.prototype.flatFolded=function(){const e=this.faces_matrix2?multiplyVerticesFacesMatrix2(this,this.faces_matrix2):makeVerticesCoordsFlatFolded(this,...arguments);return Object.assign(Object.create(Object.getPrototypeOf(this)),Object.assign(clone(this),{vertices_coords:e,frame_classes:[v]}))};const shortenKeys=function(e){const t=Object.create(null);return Object.keys(e).forEach((r=>{t[r.substring(this.length+1)]=e[r]})),t},getComponent=function(e){return transposeGraphArrays(this,e).map(shortenKeys.bind(e)).map(Le[e].bind(this))};[o,s,c].forEach((e=>Object.defineProperty(ut.prototype,e,{enumerable:!0,get:function(){return getComponent.call(this,e)}}))),Object.defineProperty(ut.prototype,p,{enumerable:!0,get:function(){const e=getBoundary(this),t=e.vertices.map((e=>this.vertices_coords[e]));return Object.keys(e).forEach((r=>{t[r]=e[r]})),Object.assign(t,e)}});const pt={vertices:nearestVertex,edges:nearestEdge,faces:nearestFace};ut.prototype.nearest=function(){const e=Ce.core.getVector(arguments),t=Object.create(null),r={};return[o,s,c].forEach((n=>{Object.defineProperty(t,Ie[n],{enumerable:!0,get:()=>(void 0!==r[n]||(r[n]=pt[n](this,e)),r[n])}),filterKeysWithPrefix(this,n).forEach((e=>Object.defineProperty(t,e,{enumerable:!0,get:()=>this[e][t[Ie[n]]]})))})),t};var ht=ut.prototype;const clip=function(e,t){const r=getBoundary(e).vertices.map((t=>e.vertices_coords[t])),n=t.vector?t.vector:Ce.core.subtract2(t[1],t[0]),o=t.origin?t.origin:t[0],s=t.domain_function?t.domain_function:Ce.core.includeL;return Ce.core.clipLineConvexPolygon(r,n,o,Ce.core.include,s)},addEdges=(e,t)=>{e.edges_vertices||(e.edges_vertices=[]),"number"==typeof t[0]&&(t=[t]);const r=t.map(((t,r)=>e.edges_vertices.length+r));e.edges_vertices.push(...t);const n=removeDuplicateEdges(e).map;return r.map((e=>n[e]))},addPlanarSegment=(e,t,r,n=Ce.core.EPSILON)=>{e.vertices_sectors||(e.vertices_sectors=makeVerticesSectors(e));const o=[t,r].map((e=>[e[0],e[1]])),s=Ce.core.subtract2(o[1],o[0]),c=makeEdgesSegmentIntersection(e,o[0],o[1],n),i=c.map(((e,t)=>void 0===e?void 0:t)).filter((e=>void 0!==e)).sort(((e,t)=>e-t)),a={};i.forEach((t=>e.edges_faces[t].forEach((e=>{a[e]=!0}))));const l=Object.keys(a).map((e=>parseInt(e,10))).sort(((e,t)=>e-t)),d=i.reverse().map((t=>splitEdge(e,t,c[t],n))).map((e=>e.vertex)),u=addVertices(e,o,n),g={};d.forEach((e=>{g[e]=!0})),u.forEach((e=>{g[e]=!0}));const p=Object.keys(g).map((e=>parseInt(e,10))),h=sortVerticesAlongVector(e,p,s),m=makeVerticesToEdgeBidirectional(e),v=((e,t,r)=>{const n=Array.from(Array(t.length-1)).map(((e,r)=>[t[r],t[r+1]])),o=n.map((e=>e.join(" "))).map((e=>void 0===r[e])),s=n.filter(((e,t)=>o[t])),c=Array.from(Array(s.length)).map(((t,r)=>e.edges_vertices.length+r));c.forEach(((t,r)=>{e.edges_vertices[t]=s[r]})),e.edges_assignment&&c.forEach((t=>{e.edges_assignment[t]="U"})),e.edges_foldAngle&&c.forEach((t=>{e.edges_foldAngle[t]=0}));for(let r=0;r<t.length;r+=1){const n=t[r],s=[o[r-1]?t[r-1]:void 0,o[r]?t[r+1]:void 0].filter((e=>void 0!==e)),c=(e.vertices_vertices[n]?e.vertices_vertices[n]:[]).concat(s);e.vertices_vertices[n]=sortVerticesCounterClockwise(e,c,t[r])}const i=makeVerticesToEdgeBidirectional(e);for(let r=0;r<t.length;r+=1){const n=t[r];e.vertices_edges[n]=e.vertices_vertices[n].map((e=>i[`${n} ${e}`]))}return t.map((t=>1===e.vertices_vertices[t].length?[Ce.core.TWO_PI]:Ce.core.counterClockwiseSectors2(e.vertices_vertices[t].map((r=>Ce.core.subtract2(e.vertices_coords[r],e.vertices_coords[t])))))).forEach(((r,n)=>{e.vertices_sectors[t[n]]=r})),c})(e,h,m);v.forEach((t=>{const r=e.edges_vertices[t];m[`${r[0]} ${r[1]}`]=t,m[`${r[1]} ${r[0]}`]=t}));const _=h.map((t=>e.vertices_vertices[t].map((e=>[[e,t],[t,e]])))).reduce(((e,t)=>e.concat(t)),[]).reduce(((e,t)=>e.concat(t)),[]),y={},b=_.map((t=>counterClockwiseWalk(e,t[0],t[1],y))).filter((e=>void 0!==e)),E=filterWalkedBoundaryFace(b);removeGeometryIndices(e,"faces",l);const x=E.map(((t,r)=>e.faces_vertices.length+r));return e.faces_vertices&&x.forEach(((t,r)=>{e.faces_vertices[t]=E[r].vertices})),e.faces_edges&&x.forEach(((t,r)=>{e.faces_edges[t]=E[r].edges.map((e=>m[e]))})),e.faces_angles&&x.forEach(((t,r)=>{e.faces_angles[t]=E[r].faces_angles})),e.vertices_faces&&(e.vertices_faces=makeVerticesFaces(e)),e.edges_faces&&(e.edges_faces=makeEdgesFacesUnsorted(e)),e.faces_faces&&(e.faces_faces=makeFacesFaces(e)),e.vertices_coords.length===e.vertices_vertices.length&&e.vertices_coords.length===e.vertices_edges.length&&e.vertices_coords.length===e.vertices_faces.length||console.warn("vertices mismatch",JSON.parse(JSON.stringify(e))),e.edges_vertices.length===e.edges_faces.length&&e.edges_vertices.length===e.edges_assignment.length||console.warn("edges mismatch",JSON.parse(JSON.stringify(e))),e.faces_vertices.length===e.faces_edges.length&&e.faces_vertices.length===e.faces_faces.length||console.warn("faces mismatch",JSON.parse(JSON.stringify(e))),v},removePlanarEdge=(e,t)=>{const r=[...e.edges_vertices[t]].sort(((e,t)=>t-e)),n=[...e.edges_faces[t]];(({vertices_vertices:e},t)=>{const r=[t[1],t[0]];t.map(((t,n)=>e[t].indexOf(r[n]))).forEach(((r,n)=>e[t[n]].splice(r,1)))})(e,r),(({vertices_edges:e},t,r)=>{r.map(((r,n)=>e[r].indexOf(t))).forEach(((t,n)=>e[r[n]].splice(t,1)))})(e,t,r);const o=r.map((t=>0===e.vertices_vertices[t].length)),s=r.filter(((e,t)=>o[t]));if(2===n.length&&n[0]!==n[1]){const o=e.faces_vertices.length,s=((e,t,r,n)=>{const o=t.map((t=>e.faces_edges[t].indexOf(r))),s=[];t.forEach(((t,r)=>e.faces_vertices[t].forEach(((e,t,o)=>{const c=o[(t+1)%o.length];(e===n[0]&&c===n[1]||e===n[1]&&c===n[0])&&(s[r]=t)})))),void 0!==s[0]&&void 0!==s[1]||console.warn("removePlanarEdge error joining faces");const c=t.map((t=>e.faces_edges[t].length)),i=t.map((t=>e.faces_vertices[t].length)),a=c.map((e=>e-1)),l=i.map((e=>e-1)),d=o.map(((e,t)=>(e+1)%c[t])),u=s.map(((e,t)=>(e+1)%i[t])),g=t.map(((t,r)=>Array.from(Array(a[r])).map(((e,t)=>(d[r]+t)%c[r])).map((r=>e.faces_edges[t][r])))),p=t.map(((t,r)=>Array.from(Array(l[r])).map(((e,t)=>(u[r]+t)%i[r])).map((r=>e.faces_vertices[t][r])))),h=t.map((t=>e.faces_faces[t])).reduce(((e,t)=>e.concat(t)),[]).filter((e=>e!==t[0]&&e!==t[1]));return{vertices:p[0].concat(p[1]),edges:g[0].concat(g[1]),faces:h}})(e,n,t,r);e.faces_vertices.push(s.vertices),e.faces_edges.push(s.edges),e.faces_faces.push(s.faces),e.vertices_faces.forEach(((t,r)=>{let s=!1;t.forEach(((c,i)=>{if(c===n[0]||c===n[1]){e.vertices_faces[r][i]=o;const n=s?[r,1]:[r,1,o];t.splice(...n),s=!0}}))})),e.edges_faces.forEach(((t,r)=>t.forEach(((t,s)=>{t!==n[0]&&t!==n[1]||(e.edges_faces[r][s]=o)})))),e.faces_faces.forEach(((t,r)=>t.forEach(((t,s)=>{t!==n[0]&&t!==n[1]||(e.faces_faces[r][s]=o)})))),e.faces_vertices.forEach((t=>t.forEach((t=>{void 0===t&&console.log("FOUND ONE before remove",e.faces_vertices)})))),removeGeometryIndices(e,"faces",n)}if(2===n.length&&n[0]===n[1]&&s.length){const r=n[0];e.faces_vertices[r]=e.faces_vertices[r].filter((e=>!s.includes(e))).filter(((e,t,r)=>e!==r[(t+1)%r.length])),e.faces_edges[r]=e.faces_edges[r].filter((e=>e!==t))}removeGeometryIndices(e,"edges",[t]),removeGeometryIndices(e,"vertices",s)},removePlanarVertex=(e,t)=>{const r=e.vertices_edges[t],n=uniqueSortedIntegers(e.vertices_faces[t].filter((e=>null!=e)));if(2!==r.length||n.length>2)return void console.warn("cannot remove non 2-degree vertex yet (e,f)",r,n);const o=((e,t,r)=>(r.forEach((r=>{e.edges_vertices[r][0]===t&&e.edges_vertices[r][1]===t&&console.warn("removePlanarVertex circular edge")})),r.map((r=>e.edges_vertices[r][0]===t?e.edges_vertices[r][1]:e.edges_vertices[r][0]))))(e,t,r),s=o.slice().reverse();r.sort(((e,t)=>e-t)),o.forEach((t=>{const n=e.vertices_edges[t].indexOf(r[1]);-1!==n&&(e.vertices_edges[t][n]=r[0])})),o.forEach(((r,n)=>{const o=e.vertices_vertices[r].indexOf(t);-1!==o?e.vertices_vertices[r][o]=s[n]:console.warn("removePlanarVertex unknown vertex issue")})),e.edges_vertices[r[0]]=[...o],n.forEach((r=>{const n=e.faces_vertices[r].indexOf(t);-1!==n?e.faces_vertices[r].splice(n,1):console.warn("removePlanarVertex unknown face_vertex issue")})),n.forEach((t=>{const n=e.faces_edges[t].indexOf(r[1]);-1!==n?e.faces_edges[t].splice(n,1):console.warn("removePlanarVertex unknown face_edge issue")})),removeGeometryIndices(e,"vertices",[t]),removeGeometryIndices(e,"edges",[r[1]])},alternatingSum=e=>[0,1].map((t=>e.filter(((e,r)=>r%2===t)).reduce(((e,t)=>e+t),0))),kawasakiSolutionsRadians=e=>e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>Ce.core.counterClockwiseAngleRadians(...e))).map(((e,t,r)=>r.slice(t+1,r.length).concat(r.slice(0,t)))).map((e=>alternatingSum(e).map((e=>Math.PI-e)))).map(((t,r)=>e[r]+t[0])).map(((t,r)=>Ce.core.isCounterClockwiseBetween(t,e[r],e[(r+1)%e.length])?t:void 0)),kawasakiSolutionsVectors=e=>{const t=e.map((e=>Math.atan2(e[1],e[0])));return kawasakiSolutionsRadians(t).map((e=>void 0===e?void 0:[Math.cos(e),Math.sin(e)]))};var mt=Object.freeze({__proto__:null,alternatingSum:alternatingSum,alternatingSumDifference:e=>{const t=e.reduce(((e,t)=>e+t),0)/2;return alternatingSum(e).map((e=>e-t))},kawasakiSolutionsRadians:kawasakiSolutionsRadians,kawasakiSolutionsVectors:kawasakiSolutionsVectors});const vt={B:!0,b:!0,F:!0,f:!0,U:!0,u:!0},vertices_flat=({vertices_edges:e,edges_assignment:t})=>e.map((e=>e.map((e=>vt[t[e]])).reduce(((e,t)=>e&&t),!0))).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)),_t={M:!0,m:!0,V:!0,v:!0},yt={M:-1,m:-1,V:1,v:1},validateMaekawa=({edges_vertices:e,vertices_edges:t,edges_assignment:r})=>{t||(t=makeVerticesEdgesUnsorted({edges_vertices:e}));const n=t.map((e=>e.map((e=>yt[r[e]])).filter((e=>void 0!==e)).reduce(((e,t)=>e+t),0))).map((e=>2===e||-2===e));return getBoundaryVertices({edges_vertices:e,edges_assignment:r}).forEach((e=>{n[e]=!0})),vertices_flat({vertices_edges:t,edges_assignment:r}).forEach((e=>{n[e]=!0})),n.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))},validateKawasaki=({vertices_coords:e,vertices_vertices:t,vertices_edges:r,edges_vertices:n,edges_assignment:o,edges_vector:s},c=Ce.core.EPSILON)=>{t||(t=makeVerticesVertices({vertices_coords:e,vertices_edges:r,edges_vertices:n}));const i=makeVerticesVerticesVector({vertices_coords:e,vertices_vertices:t,edges_vertices:n,edges_vector:s}).map(((e,t)=>e.filter(((e,n)=>_t[o[r[t][n]]])))).map((e=>e.length>1?Ce.core.counterClockwiseSectors2(e):[0,0])).map((e=>alternatingSum(e))).map((e=>Math.abs(e[0]-e[1])<c));return getBoundaryVertices({edges_vertices:n,edges_assignment:o}).forEach((e=>{i[e]=!0})),vertices_flat({vertices_edges:r,edges_assignment:o}).forEach((e=>{i[e]=!0})),i.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))};var bt=Object.freeze({__proto__:null,validateMaekawa:validateMaekawa,validateKawasaki:validateKawasaki});const Et={};Et.prototype=Object.create(ht),Et.prototype.constructor=Et;const make_edges_array=function(e){return e.mountain=(t=-180)=>(e.forEach((e=>{this.edges_assignment[e]="M",this.edges_foldAngle[e]=t})),e),e.valley=(t=180)=>(e.forEach((e=>{this.edges_assignment[e]="V",this.edges_foldAngle[e]=t})),e),e.flat=()=>(e.forEach((e=>{this.edges_assignment[e]="F",this.edges_foldAngle[e]=0})),e),e};["line","ray","segment"].forEach((e=>{Et.prototype[e]=function(){const t=Ce[e](...arguments);if(!t)return;const r=clip(this,t);if(!r)return;const n=addPlanarSegment(this,r[0],r[1]);return make_edges_array.call(this,n)}})),["circle","ellipse","rect","polygon"].forEach((e=>{Et.prototype[e]=function(){const t=Ce[e](...arguments);if(!t)return;const r=t.segments(96).map((e=>Ce.segment(e))).map((e=>clip(this,e))).filter((e=>void 0!==e));if(!r)return;const n=[],o=[];r.forEach((e=>{const t=addVertices(this,e);n.push(...t),o.push(...addEdges(this,t))}));const{map:s}=fragment(this).edges;return populate(this),make_edges_array.call(this,o.map((e=>s[e])).reduce(((e,t)=>e.concat(t)),[]))}})),Et.prototype.removeEdge=function(e){const t=this.edges_vertices[e];return removePlanarEdge(this,e),t.map((e=>isVertexCollinear(this,e))).map(((e,r)=>e?t[r]:void 0)).filter((e=>void 0!==e)).sort(((e,t)=>t-e)).forEach((e=>removePlanarVertex(this,e))),!0},Et.prototype.validate=function(e){const t=validate$1(this,e);return t.vertices.kawasaki=validateKawasaki(this,e),t.vertices.maekawa=validateMaekawa(this),this.edges_foldAngle&&(t.edges.not_flat=this.edges_foldAngle.map(((e,t)=>edgeFoldAngleIsFlat(e)?void 0:t)).filter((e=>void 0!==e))),"valid"===t.summary&&(t.vertices.kawasaki.length||t.vertices.maekawa.length?t.summary="invalid":t.edges.not_flat.length&&(t.summary="not flat")),t};var xt=Et.prototype;const make_face_side=(e,t,r,n)=>{const o=Ce.core.subtract2(r,t),s=Ce.core.cross2(e,o);return n?s>0:s<0},make_face_center=(e,t)=>e.faces_vertices[t]?e.faces_vertices[t].map((t=>e.vertices_coords[t])).reduce(((e,t)=>[e[0]+t[0],e[1]+t[1]]),[0,0]).map((r=>r/e.faces_vertices[t].length)):[0,0],Ot={F:!0,f:!0,U:!0,u:!0},kt={M:"V",m:"V",V:"M",v:"M"},face_snapshot=(e,t)=>({center:e.faces_center[t],matrix:e.faces_matrix2[t],winding:e.faces_winding[t],crease:e.faces_crease[t],side:e.faces_side[t],layer:e.faces_layer[t]}),flatFold=(e,t,r,n="V",o=Ce.core.EPSILON)=>{const s=kt[c=n]||c;var c;populate(e),e.faces_layer||(e.faces_layer=Array(e.faces_vertices.length).fill(0)),e.faces_center=e.faces_vertices.map(((t,r)=>make_face_center(e,r))),e.faces_matrix2||(e.faces_matrix2=makeFacesMatrix2(e,0)),e.faces_winding=makeFacesWindingFromMatrix2(e.faces_matrix2),e.faces_crease=e.faces_matrix2.map(Ce.core.invertMatrix2).map((e=>Ce.core.multiplyMatrix2Line2(e,t,r))),e.faces_side=e.faces_vertices.map(((t,r)=>make_face_side(e.faces_crease[r].vector,e.faces_crease[r].origin,e.faces_center[r],e.faces_winding[r])));const i=multiplyVerticesFacesMatrix2(e,e.faces_matrix2),a=makeEdgesLineParallelOverlap({vertices_coords:i,edges_vertices:e.edges_vertices},t,r,o).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).filter((t=>Ot[e.edges_assignment[t]]));a.map((t=>e.edges_faces[t].find((e=>null!=e)))).map((t=>e.faces_winding[t])).map((e=>e?n:s)).forEach(((t,r)=>{e.edges_assignment[a[r]]=t,e.edges_foldAngle[a[r]]=edgeAssignmentToFoldAngle(t)}));const l=face_snapshot(e,0),d=e.faces_vertices.map(((e,t)=>t)).reverse().map((t=>{const r=face_snapshot(e,t),c=splitFace(e,t,r.crease.vector,r.crease.origin,o);if(void 0===c)return;e.edges_assignment[c.edges.new]=r.winding?n:s,e.edges_foldAngle[c.edges.new]=edgeAssignmentToFoldAngle(e.edges_assignment[c.edges.new]);return c.faces.map[c.faces.remove].forEach((t=>{e.faces_center[t]=make_face_center(e,t),e.faces_side[t]=make_face_side(r.crease.vector,r.crease.origin,e.faces_center[t],r.winding),e.faces_layer[t]=r.layer})),c})).filter((e=>void 0!==e)),u=mergeNextmaps(...d.map((e=>e.faces.map))),g=mergeNextmaps(...d.map((e=>e.edges.map)).filter((e=>void 0!==e))),p=d.map((e=>e.faces.remove)).reverse();e.faces_layer=((e,t)=>{const r=[],n=e.map(((e,t)=>t)),o=n.filter((e=>t[e])),s=n.filter((e=>!t[e]));return s.sort(((t,r)=>e[t]-e[r])).forEach(((e,t)=>{r[e]=t})),o.sort(((t,r)=>e[r]-e[t])).forEach(((e,t)=>{r[e]=s.length+t})),r})(e.faces_layer,e.faces_side);const h=u&&u[0]&&2===u[0].length,m=h?u[0].filter((t=>e.faces_side[t])).shift():0;let v=l.matrix;return n!==s&&(v=h||e.faces_side[0]?Ce.core.multiplyMatrices2(l.matrix,Ce.core.makeMatrix2Reflect(l.crease.vector,l.crease.origin)):l.matrix),e.faces_matrix2=makeFacesMatrix2(e,m).map((e=>Ce.core.multiplyMatrices2(v,e))),delete e.faces_center,delete e.faces_winding,delete e.faces_crease,delete e.faces_side,{faces:{map:u,remove:p},edges:{map:g}}},Mt={};Mt.prototype=Object.create(ht),Mt.prototype.constructor=Mt,Mt.prototype.flatFold=function(){const e=Ce.core.getLine(arguments);return flatFold(this,e.vector,e.origin),this};var At=Mt.prototype;const isFoldedForm=e=>e.frame_classes&&e.frame_classes.includes("foldedForm")||e.file_classes&&e.file_classes.includes("foldedForm");var jt=Object.freeze({__proto__:null,isFoldedForm:isFoldedForm});var Pt=Object.freeze({__proto__:null,getDisjointedVertices:({edges_vertices:e,vertices_edges:t,vertices_vertices:r})=>{t||(t=makeVerticesEdgesUnsorted({edges_vertices:e})),r||(r=makeVerticesVerticesUnsorted({vertices_edges:t,edges_vertices:e}));const n={};e.forEach((e=>{n[e[0]]=!0,n[e[1]]=!0}));const o=Object.keys(n).map((e=>parseInt(e,10)));let s=0;const c=[];for(;s<o.length;){if(!n[o[s]]){s+=1;continue}const e=[],t=[o[s]],i={[o[s]]:!0};do{const o=t.shift();delete n[o],e.push(o);const s=r[o]?r[o].filter((e=>n[e]&&!i[e])):[];t.push(...s),s.forEach((e=>{i[e]=!0}))}while(t.length);s+=1,c.push(e)}return c}});const makeEdgesEdgesSimilar=({vertices_coords:e,edges_vertices:t,edges_coords:r},n=Ce.core.EPSILON)=>{r||(r=makeEdgesCoords({vertices_coords:e,edges_vertices:t}));const o=makeEdgesBoundingBox({vertices_coords:e,edges_vertices:t,edges_coords:r}),s=Array.from(Array(r.length)).map((()=>[])),c=o.length?o[0].min.length:0;for(let e=0;e<r.length-1;e+=1)for(let t=e+1;t<r.length;t+=1){let r=!0;for(let s=0;s<c;s+=1)Ce.core.fnEpsilonEqual(o[e].min[s],o[t].min[s],n)&&Ce.core.fnEpsilonEqual(o[e].max[s],o[t].max[s],n)||(r=!1);s[e][t]=r,s[t][e]=r}for(let e=0;e<r.length-1;e+=1)for(let t=e+1;t<r.length;t+=1){if(!s[e][t])continue;const o=Ce.core.fnEpsilonEqualVectors(r[e][0],r[t][0],n)&&Ce.core.fnEpsilonEqualVectors(r[e][1],r[t][1],n),c=Ce.core.fnEpsilonEqualVectors(r[e][0],r[t][1],n)&&Ce.core.fnEpsilonEqualVectors(r[e][1],r[t][0],n),i=o||c;s[e][t]=i,s[t][e]=i}return booleanMatrixToIndexedArray(s)},makeEdgesEdgesParallel=({vertices_coords:e,edges_vertices:t,edges_vector:r},n)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const o=r.length,s=r.map((e=>Ce.core.normalize(e))),c=Array.from(Array(o)).map((()=>Array.from(Array(o))));for(let e=0;e<o-1;e+=1)for(let t=e+1;t<o;t+=1){const r=1-Math.abs(Ce.core.dot(s[e],s[t]))<n;c[e][t]=r,c[t][e]=r}return c},overwriteEdgesOverlaps=(e,t,r,n,o)=>{for(let s=0;s<e.length-1;s+=1)for(let c=s+1;c<e.length;c+=1)e[s][c]&&(e[s][c]=Ce.core.overlapLineLine(t[s],r[s],t[c],r[c],n,n,o),e[c][s]=e[s][c])},makeEdgesEdgesParallelOverlap=({vertices_coords:e,edges_vertices:t,edges_vector:r},n)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const o=t.map((t=>e[t[0]])),s=makeEdgesEdgesParallel({vertices_coords:e,edges_vertices:t,edges_vector:r},n);return overwriteEdgesOverlaps(s,r,o,Ce.core.excludeS,n),s};var wt=Object.freeze({__proto__:null,makeEdgesEdgesSimilar:makeEdgesEdgesSimilar,makeEdgesEdgesParallel:makeEdgesEdgesParallel,makeEdgesEdgesCrossing:({vertices_coords:e,edges_vertices:t,edges_vector:r},n)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const o=t.map((t=>e[t[0]])),s=makeEdgesEdgesParallel({vertices_coords:e,edges_vertices:t,edges_vector:r},n).map((e=>e.map((e=>!e))));for(let e=0;e<s.length;e+=1)s[e][e]=void 0;return overwriteEdgesOverlaps(s,r,o,Ce.core.excludeS,n),s},makeEdgesEdgesParallelOverlap:makeEdgesEdgesParallelOverlap});const makeEdgesFacesOverlap=({vertices_coords:e,edges_vertices:t,edges_vector:r,edges_faces:n,faces_vertices:o},s)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const c=makeFacesWinding({vertices_coords:e,faces_vertices:o}),i=t.map((t=>e[t[0]])),a=t.map((()=>Array.from(Array(o.length))));n.forEach(((e,t)=>e.forEach((e=>{a[t][e]=!1}))));const l=makeEdgesEdgesSimilar({vertices_coords:e,edges_vertices:t}),d=t.map((t=>t.map((t=>e[t])))),u=o.map((t=>t.map((t=>e[t]))));for(let e=0;e<c.length;e+=1)c[e]||u[e].reverse();const g=makeEdgesBoundingBox({edges_coords:d}),p=u.map((e=>Ce.core.boundingBox(e)));for(let e=0;e<a.length;e+=1)for(let t=0;t<a[e].length;t+=1)!1!==a[e][t]&&(Ce.core.overlapBoundingBoxes(p[t],g[e])||(a[e][t]=!1));const h={};for(let e=0;e<a.length;e+=1)if(!h[e]){for(let t=0;t<a[e].length;t+=1){if(void 0!==a[e][t])continue;if(d[e].map((e=>Ce.core.overlapConvexPolygonPoint(u[t],e,Ce.core.exclude,s))).reduce(((e,t)=>e||t),!1)){a[e][t]=!0;continue}Ce.core.intersectConvexPolygonLine(u[t],r[e],i[e],Ce.core.excludeS,Ce.core.excludeS,s)?a[e][t]=!0:a[e][t]=!1}l[e].forEach((t=>{a[t]=a[e].slice(),h[t]=!0}))}return a},makeFacesFacesOverlap=({vertices_coords:e,faces_vertices:t},r=Ce.core.EPSILON)=>{const n=Array.from(Array(t.length)).map((()=>Array.from(Array(t.length)))),o=t.map((t=>t.map((t=>e[t])))),s=o.map((e=>Ce.core.boundingBox(e)));for(let e=0;e<s.length-1;e+=1)for(let t=e+1;t<s.length;t+=1)Ce.core.overlapBoundingBoxes(s[e],s[t])||(n[e][t]=!1,n[t][e]=!1);const c=o.map((e=>Ce.core.makePolygonNonCollinear(e,r)));for(let e=0;e<t.length-1;e+=1)for(let o=e+1;o<t.length;o+=1){if(!1===n[e][o])continue;const t=Ce.core.overlapConvexPolygons(c[e],c[o],r);n[e][o]=t,n[o][e]=t}return n};var St=Object.freeze({__proto__:null,makeEdgesFacesOverlap:makeEdgesFacesOverlap,makeFacesFacesOverlap:makeFacesFacesOverlap});const triangulateConvexFacesVertices=({faces_vertices:e})=>e.flatMap((e=>{return e.length<4?[e]:(t=e,Array.from(Array(t.length-2)).map(((e,r)=>[t[0],t[r+1],t[r+2]])));var t}));var Ct=Object.freeze({__proto__:null,triangulateConvexFacesVertices:triangulateConvexFacesVertices,triangulate:(e,t)=>{const r=makeVerticesToEdgeBidirectional(e),n=(({faces_vertices:e})=>{let t=0;return e.flatMap((e=>{if(e.length<4)return[t++];const r=Array.from(Array(e.length-2)).map((()=>t));return t+=1,r}))})(e);e.faces_vertices=triangulateConvexFacesVertices(e);let o=e.edges_vertices.length;const s=[];e.faces_edges=e.faces_vertices.map((e=>e.map(((e,t,n)=>{const c=[e,n[(t+1)%n.length]],i=c.join(" ");return i in r?r[i]:(s.push(c),o++)}))));const c=s.length;return e.edges_vertices.push(...s),e.edges_assignment&&e.edges_assignment.push(...Array(c).fill("J")),e.edges_foldAngle&&e.edges_foldAngle.push(...Array(c).fill(0)),e.vertices_vertices&&delete e.vertices_vertices,e.vertices_edges&&delete e.vertices_edges,e.vertices_faces&&delete e.vertices_faces,e.edges_faces&&delete e.edges_faces,e.faces_faces&&delete e.faces_faces,e.faceOrders&&console.log("triangulate() method on graph with faceOrders, do not use faceOrders"),{faces:{map:n}}}});var Lt=Object.assign(Object.create(null),{count:count,countImplied:countImplied,validate:validate$1,clean:clean,populate:populate,remove:removeGeometryIndices,replace:replaceGeometryIndices,removePlanarVertex:removePlanarVertex,removePlanarEdge:removePlanarEdge,addVertices:addVertices,addEdges:addEdges,splitEdge:splitEdge,splitFace:splitFace,flatFold:flatFold,addPlanarSegment:addPlanarSegment,subgraph:(e,t)=>{const r={},n={};[c,s,o].forEach((o=>{r[o]=Array.from(Array(count[o](e))).map(((e,t)=>t)),n[o]=uniqueSortedIntegers(t[o]||[]).reverse()})),Object.keys(n).forEach((e=>n[e].forEach((t=>r[e].splice(t,1)))));const i=JSON.parse(JSON.stringify(e));return Object.keys(r).forEach((e=>removeGeometryIndices(i,e,r[e]))),i},clip:clip,fragment:fragment,getVerticesClusters:getVerticesClusters,clone:clone,flattenFrame:(e,t=1)=>{if(!e.file_frames||e.file_frames.length<t)return e;const r=["frame_parent","frame_inherit"],n={visited_frames:[]},recurse=(e,t,r)=>{if(-1!==n.visited_frames.indexOf(t))throw new Error("flatten cycle detected");return n.visited_frames.push(t),r=[t].concat(r),0===t?r:e.file_frames[t-1].frame_inherit&&null!=e.file_frames[t-1].frame_parent?recurse(e,e.file_frames[t-1].frame_parent,r):r};return recurse(e,t,[]).map((t=>{if(0===t){const t=e.file_frames;e.file_frames=null;const n=clone(e);return e.file_frames=t,delete n.file_frames,r.forEach((e=>delete n[e])),n}const n=clone(e.file_frames[t-1]);return r.forEach((e=>delete n[e])),n})).reduce(((e,t)=>Object.assign(e,t)),{})},foldKeys:ze,foldFileClasses:["singleModel","multiModel","animation","diagrams"],foldFrameClasses:["creasePattern","foldedForm","graph","linkage"],foldFrameAttributes:["2D","3D","abstract","manifold","nonManifold","orientable","nonOrientable","selfTouching","nonSelfTouching","selfIntersecting","nonSelfIntersecting"]},He,tt,Ge,dt,qe,We,Ye,Xe,jt,Pt,Qe,St,Ct,rt,Ue,Je,Ke,wt,it,nt,ct,at,lt,Re);const $t={},make_rect_vertices_coords=(e,t)=>[[0,0],[e,0],[e,t],[0,t]],make_closed_polygon=e=>populate({vertices_coords:e,edges_vertices:e.map(((e,t,r)=>[t,(t+1)%r.length])),edges_assignment:Array(e.length).fill("B")});$t.square=(e=1)=>make_closed_polygon(make_rect_vertices_coords(e,e)),$t.rectangle=(e=1,t=1)=>make_closed_polygon(make_rect_vertices_coords(e,t)),$t.polygon=(e=3,t=1)=>make_closed_polygon(Ce.core.makePolygonCircumradius(e,t)),$t.kite=()=>populate({vertices_coords:[[0,0],[1,0],[1,Math.sqrt(2)-1],[1,1],[Math.sqrt(2)-1,1],[0,1]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,2],[0,4],[0,3]],edges_assignment:Array.from("BBBBBBVVF")});const Nt=Object.create(null),zt={graph:ht,cp:xt,origami:At},Ft={graph:()=>{},cp:$t.square,origami:$t.square},Vt={graph:()=>({file_spec:1.1,file_creator:$e}),cp:()=>({file_spec:1.1,file_creator:$e,frame_classes:["creasePattern"]}),origami:()=>({file_spec:1.1,file_creator:$e,frame_classes:["foldedForm"]})};Object.keys(zt).forEach((e=>{Nt[e]=function(){const t=Array.from(arguments).filter((e=>isFoldObject(e))).map((e=>JSON.parse(JSON.stringify(e))));return populate(Object.assign(Object.create(zt[e]),t.length?{}:Ft[e](),...t,Vt[e]()))},Nt[e].prototype=zt[e],Nt[e].prototype.constructor=Nt[e],Object.keys($t).forEach((t=>{Nt[e][t]=function(){return Nt[e]($t[t](...arguments))}}))})),Object.assign(Nt.graph,Lt);const cubrt=e=>e<0?-Math.pow(-e,1/3):Math.pow(e,1/3),normalAxiom6=(e,t,r,n)=>{if(Math.abs(1-Ce.core.dot2(e.normal,r)/e.distance)<.02)return[];const o=Ce.core.rotate90(e.normal),s=Ce.core.subtract2(Ce.core.add2(r,Ce.core.scale2(e.normal,e.distance)),Ce.core.scale2(n,2)),c=Ce.core.subtract2(Ce.core.scale2(e.normal,e.distance),r),i=Ce.core.dot2(n,t.normal)-t.distance,a=2*Ce.core.dot2(c,o),l=Ce.core.dot2(c,c),d=Ce.core.dot2(Ce.core.add2(s,c),o),u=Ce.core.dot2(s,c),g=Ce.core.dot2(o,t.normal),p=Ce.core.dot2(c,t.normal),h=g,m=i+d*g+p,v=i*a+u*g+d*p,_=i*l+u*p;let y=0;return Math.abs(v)>Ce.core.EPSILON&&(y=1),Math.abs(m)>Ce.core.EPSILON&&(y=2),Math.abs(h)>Ce.core.EPSILON&&(y=3),((e,t,r,n,o)=>{switch(e){case 1:return[-o/n];case 2:{const e=Math.pow(n,2)-4*r*o;if(e<-Ce.core.EPSILON)return[];const t=-n/(2*r);if(e<Ce.core.EPSILON)return[t];const s=Math.sqrt(e)/(2*r);return[t+s,t-s]}case 3:{const e=r/t,s=n/t,c=o/t,i=(3*s-Math.pow(e,2))/9,a=(9*e*s-27*c-2*Math.pow(e,3))/54,l=Math.pow(i,3)+Math.pow(a,2),d=-e/3;if(l>0){const e=Math.sqrt(l);return[d+cubrt(a+e)+cubrt(a-e)]}if(Math.abs(l)<Ce.core.EPSILON){const e=Math.pow(a,1/3);return a<0?[]:[d+2*e,d-e]}const u=Math.sqrt(-l),g=Math.atan2(u,a)/3,p=Math.pow(Math.pow(a,2)-l,1/6),h=p*Math.cos(g),m=p*Math.sin(g);return[d+2*h,d-h-Math.sqrt(3)*m,d-h+Math.sqrt(3)*m]}default:return[]}})(y,h,m,v,_).map((t=>Ce.core.add2(Ce.core.scale2(e.normal,e.distance),Ce.core.scale2(o,t)))).map((e=>({p:e,normal:Ce.core.normalize2(Ce.core.subtract2(e,r))}))).map((e=>({normal:e.normal,distance:Ce.core.dot2(e.normal,Ce.core.midpoint2(e.p,r))})))};var It=Object.freeze({__proto__:null,normalAxiom1:(e,t)=>{const r=Ce.core.normalize2(Ce.core.rotate90(Ce.core.subtract2(t,e)));return{normal:r,distance:Ce.core.dot2(Ce.core.add2(e,t),r)/2}},normalAxiom2:(e,t)=>{const r=Ce.core.normalize2(Ce.core.subtract2(t,e));return{normal:r,distance:Ce.core.dot2(Ce.core.add2(e,t),r)/2}},normalAxiom3:(e,t)=>{const r=((e,t)=>{const r=Ce.core.cross2(e.normal,t.normal);if(Math.abs(r)<Ce.core.EPSILON)return;return[(e.distance*t.normal[1]-t.distance*e.normal[1])/r,(t.distance*e.normal[0]-e.distance*t.normal[0])/r]})(e,t);return void 0===r?[{normal:e.normal,distance:(e.distance+t.distance*Ce.core.dot2(e.normal,t.normal))/2}]:[Ce.core.add2,Ce.core.subtract2].map((r=>Ce.core.normalize2(r(e.normal,t.normal)))).map((e=>({normal:e,distance:Ce.core.dot2(r,e)})))},normalAxiom4:(e,t)=>{const r=Ce.core.rotate90(e.normal);return{normal:r,distance:Ce.core.dot2(t,r)}},normalAxiom5:(e,t,r)=>{const n=Ce.core.dot2(t,e.normal),o=e.distance-n,s=Ce.core.distance2(t,r);if(o>s)return[];const c=Math.sqrt(s*s-o*o),i=Ce.core.scale2(e.normal,o),a=Ce.core.add2(t,i),l=Ce.core.scale2(Ce.core.rotate90(e.normal),c);return(c<Ce.core.EPSILON?[a]:[Ce.core.add2(a,l),Ce.core.subtract2(a,l)]).map((e=>Ce.core.normalize2(Ce.core.subtract2(r,e)))).map((e=>({normal:e,distance:Ce.core.dot2(t,e)})))},normalAxiom6:normalAxiom6,normalAxiom7:(e,t,r)=>{const n=Ce.core.rotate90(e.normal),o=Ce.core.dot2(n,t.normal);if(Math.abs(o)<Ce.core.EPSILON)return;const s=Ce.core.dot2(r,n),c=Ce.core.dot2(r,t.normal);return{normal:n,distance:(t.distance+2*s*o-c)/(2*o)}}});var Bt=Object.freeze({__proto__:null,axiom1:(e,t)=>({vector:Ce.core.normalize2(Ce.core.subtract2(...Ce.core.resizeUp(t,e))),origin:e}),axiom2:(e,t)=>({vector:Ce.core.normalize2(Ce.core.rotate90(Ce.core.subtract2(...Ce.core.resizeUp(t,e)))),origin:Ce.core.midpoint2(e,t)}),axiom3:(e,t)=>Ce.core.bisectLines2(e.vector,e.origin,t.vector,t.origin),axiom4:(e,t)=>({vector:Ce.core.rotate90(Ce.core.normalize2(e.vector)),origin:t}),axiom5:(e,t,r)=>(Ce.core.intersectCircleLine(Ce.core.distance2(t,r),t,e.vector,e.origin,Ce.core.include_l)||[]).map((e=>({vector:Ce.core.normalize2(Ce.core.rotate90(Ce.core.subtract2(...Ce.core.resizeUp(e,r)))),origin:Ce.core.midpoint2(r,e)}))),axiom6:(e,t,r,n)=>normalAxiom6(Ce.core.rayLineToUniqueLine(e),Ce.core.rayLineToUniqueLine(t),r,n).map(Ce.core.uniqueLineToRayLine),axiom7:(e,t,r)=>{const n=Ce.core.intersectLineLine(e.vector,e.origin,t.vector,r,Ce.core.include_l,Ce.core.include_l);return void 0===n?void 0:{vector:Ce.core.normalize2(Ce.core.rotate90(Ce.core.subtract2(...Ce.core.resizeUp(n,r)))),origin:Ce.core.midpoint2(r,n)}}});const arrayify=(e,t)=>{switch(e){case 3:case"3":case 5:case"5":case 6:case"6":return t;case 7:case"7":return void 0===t?[]:[t];default:return[t]}},reflectPoint=(e,t)=>{const r=Ce.core.makeMatrix2Reflect(e.vector,e.origin);return Ce.core.multiplyMatrix2Vector2(r,t)},validateAxiom1=(e,t)=>e.points.map((e=>Ce.core.overlapConvexPolygonPoint(t,e,Ce.core.include))).reduce(((e,t)=>e&&t),!0),Tt=validateAxiom1,validateAxiom3=(e,t,r)=>{const n=e.lines.map((e=>Ce.core.clipLineConvexPolygon(t,e.vector,e.origin,Ce.core.include,Ce.core.includeL)));if(void 0===n[0]||void 0===n[1])return[!1,!1];const o=r.map((e=>void 0===e?void 0:Ce.core.clipLineConvexPolygon(t,e.vector,e.origin,Ce.core.include,Ce.core.includeL))),s=[0,1].map((e=>void 0!==o[e])),c=r.map((e=>void 0===e?void 0:[reflectPoint(e,n[0][0]),reflectPoint(e,n[0][1])])).map((e=>void 0!==e&&(Ce.core.overlapLinePoint(Ce.core.subtract(n[1][1],n[1][0]),n[1][0],e[0],Ce.core.includeS)||Ce.core.overlapLinePoint(Ce.core.subtract(n[1][1],n[1][0]),n[1][0],e[1],Ce.core.includeS)||Ce.core.overlapLinePoint(Ce.core.subtract(e[1],e[0]),e[0],n[1][0],Ce.core.includeS)||Ce.core.overlapLinePoint(Ce.core.subtract(e[1],e[0]),e[0],n[1][1],Ce.core.includeS))));return[0,1].map((e=>!0===c[e]&&!0===s[e]))},validateAxiom4=(e,t)=>{const r=Ce.core.intersectLineLine(e.lines[0].vector,e.lines[0].origin,Ce.core.rotate90(e.lines[0].vector),e.points[0],Ce.core.includeL,Ce.core.includeL);return[e.points[0],r].filter((e=>void 0!==e)).map((e=>Ce.core.overlapConvexPolygonPoint(t,e,Ce.core.include))).reduce(((e,t)=>e&&t),!0)},validateAxiom5=(e,t,r)=>{if(0===r.length)return[];const n=e.points.map((e=>Ce.core.overlapConvexPolygonPoint(t,e,Ce.core.include))).reduce(((e,t)=>e&&t),!0);return r.map((t=>reflectPoint(t,e.points[1]))).map((e=>Ce.core.overlapConvexPolygonPoint(t,e,Ce.core.include))).map((e=>e&&n))},validateAxiom6=function(e,t,r){if(0===r.length)return[];if(!e.points.map((e=>Ce.core.overlapConvexPolygonPoint(t,e,Ce.core.include))).reduce(((e,t)=>e&&t),!0))return r.map((()=>!1));const n=r.map((t=>reflectPoint(t,e.points[0]))).map((e=>Ce.core.overlapConvexPolygonPoint(t,e,Ce.core.include))),o=r.map((t=>reflectPoint(t,e.points[1]))).map((e=>Ce.core.overlapConvexPolygonPoint(t,e,Ce.core.include)));return r.map(((e,t)=>n[t]&&o[t]))},validateAxiom7=(e,t,r)=>{const n=Ce.core.overlapConvexPolygonPoint(t,e.points[0],Ce.core.include);if(void 0===r)return[!1];const o=reflectPoint(r,e.points[0]),s=Ce.core.overlapConvexPolygonPoint(t,o,Ce.core.include),c=void 0!==Ce.core.intersectConvexPolygonLine(t,e.lines[1].vector,e.lines[1].origin,Ce.core.includeS,Ce.core.includeL),i=Ce.core.intersectLineLine(e.lines[1].vector,e.lines[1].origin,r.vector,r.origin,Ce.core.includeL,Ce.core.includeL),a=!!i&&Ce.core.overlapConvexPolygonPoint(t,i,Ce.core.include);return n&&s&&c&&a};var qt=Object.freeze({__proto__:null,validateAxiom1:validateAxiom1,validateAxiom2:Tt,validateAxiom3:validateAxiom3,validateAxiom4:validateAxiom4,validateAxiom5:validateAxiom5,validateAxiom6:validateAxiom6,validateAxiom7:validateAxiom7,validate:(e,t,r,n)=>arrayify(e,[null,validateAxiom1,Tt,validateAxiom3,validateAxiom4,validateAxiom5,validateAxiom6,validateAxiom7][e](t,r,((e,t)=>{switch(e){case 3:case"3":case 5:case"5":case 6:case"6":return t;default:return t?t[0]:void 0}})(e,n)))});const spreadParams=e=>[...e.lines?e.lines:[],...e.points?e.points:[]],axiomInBoundary=(e,t={},r)=>{const n=arrayify(e,Bt[`axiom${e}`](...spreadParams(t))).map((e=>Ce.line(e)));return r&&arrayify(e,qt[`validateAxiom${e}`](t,r,n)).forEach(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).forEach((e=>delete n[e])),n};var Rt=Object.freeze({__proto__:null,axiomInBoundary:axiomInBoundary,normalAxiomInBoundary:(e,t={},r)=>{const n=arrayify(e,It[`normalAxiom${e}`](...spreadParams(t))).map((e=>Ce.line.fromNormalDistance(e)));return r&&arrayify(e,qt[`validateAxiom${e}`]((e=>({points:e.points,lines:e.lines.map(Ce.core.uniqueLineToRayLine)}))(t),r,n)).forEach(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).forEach((e=>delete n[e])),n}});const axiom=(e,t={},r)=>axiomInBoundary(e,t,r);Object.keys(Bt).forEach((e=>{axiom[e]=Bt[e]})),Object.keys(It).forEach((e=>{axiom[e]=It[e]})),Object.keys(Rt).forEach((e=>{axiom[e]=Rt[e]})),Object.keys(qt).forEach((e=>{axiom[e]=qt[e]}));const line_line_for_arrows=(e,t)=>Ce.core.intersectLineLine(e.vector,e.origin,t.vector,t.origin,Ce.core.includeL,Ce.core.includeL),diagram_reflect_point=(e,t)=>{const r=Ce.core.makeMatrix2Reflect(e.vector,e.origin);return Ce.core.multiplyMatrix2Vector2(r,t)},boundary_for_arrows$1=({vertices_coords:e})=>Ce.core.convexHull(e),widest_perp=(e,t,r)=>{const n=boundary_for_arrows$1(e);if(void 0===r){const e=Ce.core.clipLineConvexPolygon(n,t.vector,t.origin,Ce.core.exclude,Ce.core.includeL);r=Ce.core.midpoint(...e)}const o=Ce.core.rotate270(t.vector),s=Ce.core.clipLineConvexPolygon(n,o,r,Ce.core.exclude,Ce.core.includeL).map((e=>Ce.core.distance(r,e))).sort(((e,t)=>e-t)).shift(),c=Ce.core.scale(Ce.core.normalize(o),s);return Ce.segment(Ce.core.add(r,Ce.core.flip(c)),Ce.core.add(r,c))},between_2_segments=(e,t,r)=>{const n=t.map((e=>Ce.core.midpoint(e[0],e[1]))),o=Ce.line.fromPoints(...n),s=Ce.intersect(r,o),c=Ce.line(r.vector.rotate90(),s);return Ce.segment(e.lines.map((e=>Ce.intersect(e,c))))},Ut=[null,(e,t)=>axiom(1,e).map((e=>[widest_perp(t,e)])),e=>[[Ce.segment(e.points)]],(e,t)=>{const r=boundary_for_arrows$1(t),n=e.lines.map((e=>Ce.core.clipLineConvexPolygon(r,e.vector,e.origin,Ce.core.exclude,Ce.core.includeL))),o=n.map((e=>Ce.core.subtract(e[1],e[0]))),s=Ce.core.intersectLineLine(o[0],n[0][0],o[1],n[1][0],Ce.core.excludeS,Ce.core.excludeS);return s?axiom(3,e).map((t=>((e,t,r,n)=>{const o=e.lines.map((e=>e.vector)),s=o.map(Ce.core.flip),c=o.concat(s).map((e=>Ce.ray(e,t))),i=c.filter((e=>Ce.core.dot(e.vector,r.vector)>0&&Ce.core.cross2(e.vector,r.vector)>0)).shift(),a=c.filter((e=>Ce.core.dot(e.vector,r.vector)>0&&Ce.core.cross2(e.vector,r.vector)<0)).shift(),l=c.filter((e=>Ce.core.dot(e.vector,r.vector)<0&&Ce.core.cross2(e.vector,r.vector)>0)).shift(),d=c.filter((e=>Ce.core.dot(e.vector,r.vector)<0&&Ce.core.cross2(e.vector,r.vector)<0)).shift(),u=[i,a,l,d].map((e=>Ce.core.intersectConvexPolygonLine(n,e.vector,e.origin,Ce.core.excludeS,Ce.core.excludeR).shift().shift())),g=u.map((e=>Ce.core.distance(e,t))),p=g[0]<g[1]?u[0]:u[1],h=g[0]<g[1]?Ce.core.add(a.origin,a.vector.normalize().scale(g[0])):Ce.core.add(i.origin,i.vector.normalize().scale(g[1])),m=g[2]<g[3]?u[2]:u[3],v=g[2]<g[3]?Ce.core.add(d.origin,d.vector.normalize().scale(g[2])):Ce.core.add(l.origin,l.vector.normalize().scale(g[3]));return[Ce.segment(p,h),Ce.segment(m,v)]})(e,s,t,r))):[between_2_segments(e,n,axiom(3,e).filter((e=>void 0!==e)).shift())]},(e,t)=>axiom(4,e).map((r=>[widest_perp(t,r,line_line_for_arrows(r,e.lines[0]))])),e=>axiom(5,e).map((t=>[Ce.segment(e.points[1],diagram_reflect_point(t,e.points[1]))])),e=>axiom(6,e).map((t=>e.points.map((e=>Ce.segment(e,diagram_reflect_point(t,e)))))),(e,t)=>axiom(7,e).map((r=>[Ce.segment(e.points[0],diagram_reflect_point(r,e.points[0])),widest_perp(t,r,line_line_for_arrows(r,e.lines[1]))]))];delete Ut[0];const axiomArrows=(e,t={},...r)=>{const n=t.points?t.points.map((e=>Ce.core.getVector(e))):void 0,o=t.lines?t.lines.map((e=>Ce.core.getLine(e))):void 0;return Ut[e]({points:n,lines:o},...r)};Object.keys(Ut).forEach((e=>{axiomArrows[e]=(...t)=>axiomArrows(e,...t)}));var Dt=Object.assign(Object.create(null),{axiom_arrows:axiomArrows,simple_arrow:(e,t)=>{const r=(({vertices_coords:e})=>Ce.core.convexHull(e))(e),n=Ce.core.boundingBox(r),o=((e,t,r)=>{if(void 0===r){const n=Ce.core.clipLineConvexPolygon(e,t.vector,t.origin,Ce.core.exclude,Ce.core.includeL);if(void 0===n)return;r=Ce.core.midpoint(...n)}const n=Ce.core.rotate90(t.vector),o=Ce.core.clipLineConvexPolygon(e,n,r,Ce.core.exclude,Ce.core.includeL).map((e=>Ce.core.distance(r,e))).sort(((e,t)=>e-t)).shift(),s=Ce.core.scale(Ce.core.normalize(n),o);return Ce.segment(Ce.core.add(r,Ce.core.flip(s)),Ce.core.add(r,s))})(r,t);if(void 0===o)return;const s=Ce.core.subtract(o[1],o[0]),c=Ce.core.magnitude(s),i=Ce.core.dot(s,[1,0]),a=n.span[0]<n.span[1]?n.span[0]:n.span[1];return o.head={width:.1*a,height:.15*a},o.bend=i>0?.3:-.3,o.padding=.05*c,o}});var Gt=Object.freeze({__proto__:null,flipFacesLayer:e=>invertMap(invertMap(e).reverse()),facesLayerToEdgesAssignments:(e,t)=>{const r=[],n=makeFacesWinding(e);return(e.edges_faces?e.edges_faces:makeEdgesFaces(e)).forEach(((e,o)=>{if(1===e.length&&(r[o]="B"),2===e.length){const s=e.map((e=>n[e]));if(s[0]===s[1])return void(r[o]="F");const c=e.map((e=>t[e])),i=c[0]<c[1],a=s[0]?i:!i;r[o]=a?"V":"M"}})),r},ordersToMatrix:e=>{const t=Object.keys(e).map((e=>e.split(" ").map((e=>parseInt(e,10))))),r=[];t.reduce(((e,t)=>e.concat(t)),[]).forEach((e=>{r[e]=void 0}));const n=r.map((()=>[]));return t.forEach((([t,r])=>{n[t][r]=e[`${t} ${r}`],n[r][t]=-e[`${t} ${r}`]})),n}});const makeFoldedStripTacos=(e,t,r)=>{const n=e.map((e=>e?(e[0]+e[1])/2:void 0)),o=[];return e.forEach(((s,c)=>{if(!s)return;if(!t&&c===e.length-1)return;const i=s[1],a=i-2*r,l=i+2*r,d=[c,(c+1)%e.length],u=d.map((e=>n[e])).map((e=>e>i)),g=1*(!u[0]&&!u[1])+2*(u[0]&&u[1]),p=o.filter((e=>e.min<i&&e.max>i)).shift(),h={faces:d,taco_type:g};p?p.pairs.push(h):o.push({min:a,max:l,pairs:[h]})})),o.map((e=>e.pairs)).filter((e=>e.length>1)).map((e=>({both:e.filter((e=>0===e.taco_type)).map((e=>e.faces)),left:e.filter((e=>1===e.taco_type)).map((e=>e.faces)),right:e.filter((e=>2===e.taco_type)).map((e=>e.faces))})))},between=(e,t,r)=>t<r?e.slice(t+1,r):e.slice(r+1,t),validateTacoTortillaStrip=(e,t,r=!0,n=Ce.core.EPSILON)=>{const o=invertMap(t),s=e.map((e=>e?e[1]:void 0)),c=e.map((e=>e?Math.min(...e):void 0)).map((e=>e+n)),i=e.map((e=>e?Math.max(...e):void 0)).map((e=>e-n)),a=o.length+(r?0:-1);for(let e=0;e<a;e+=1){const r=(e+1)%o.length;if(o[e]===o[r])continue;const n=between(t,o[e],o[r]).flat(),a=n.map((t=>s[e]<c[t])).reduce(((e,t)=>e&&t),!0),l=n.map((t=>s[e]>i[t])).reduce(((e,t)=>e&&t),!0);if(!a&&!l)return!1}return!0},validateTacoTacoFacePairs=e=>{const t=removeSingleInstances(e),r={};let n=0;for(let e=0;e<t.length;e+=1)if(void 0===r[t[e]])n+=1,r[t[e]]=n;else if(void 0!==r[t[e]]){if(r[t[e]]!==n)return!1;n-=1,r[t[e]]=void 0}return!0},build_layers=(e,t)=>e.map((e=>t[e])).filter((e=>void 0!==e)),validateLayerSolver=(e,t,r,n,o)=>{const s=Ce.core.flattenArrays(t);if(!validateTacoTortillaStrip(e,t,n,o))return!1;for(let e=0;e<r.length;e+=1){const t=build_layers(s,r[e]);if(!validateTacoTacoFacePairs(t))return!1}return!0},Wt={V:!0,v:!0,M:!0,m:!0},Zt={V:1,v:1,M:-1,m:-1},assignmentsToFacesVertical=e=>{let t=0;return e.slice(1).concat([e[0]]).map((e=>{const r=(n=e,t%2==0?Zt[n]||0:-(Zt[n]||0));var n;return t+=void 0===Zt[e]?0:1,r}))},foldStripWithAssignments=(e,t)=>{const r=(e=>{let t=0;const r=e.slice(1);return[!1].concat(r.map((e=>Wt[e]?++t:t)).map((e=>e%2==1)))})(t).map(((t,r)=>e[r]*(t?-1:1))),n=e.map((()=>{}));n[0]=[0,r[0]];for(let o=1;o<e.length&&("B"!==t[o]&&"b"!==t[o]);o+=1){const t=n[(o-1+e.length)%e.length][1];n[o]=[t,t+r[o]]}return n},Ht={B:!0,b:!0},singleVertexSolver=(e,t,r=Ce.core.EPSILON)=>{const n=foldStripWithAssignments(e,t),o=assignmentsToFacesVertical(t),s=t.map((e=>!Ht[e])).reduce(((e,t)=>e&&t),!0);if(s){const e=n[0][0],t=n[n.length-1][1];if(Math.abs(e-t)>r)return[]}const c=makeFoldedStripTacos(n,s,r).map((e=>[e.left,e.right].map(invertMap).filter((e=>e.length>1)))).reduce(((e,t)=>e.concat(t)),[]),recurse=(t=[0],i=0,a=0)=>{const l=i+1,d=o[i],u=i>=e.length-1,g=s&&u;if(!validateLayerSolver(n,t,c,g,r))return[];if(g){const e=invertMap(t),r=e[0],n=e[i];if(d>0&&n>r)return[];if(d<0&&n<r)return[]}if(u)return[t];if(0===d)return t[a]=[l].concat(t[a]),recurse(t,l,a);const p=1===d?Array.from(Array(t.length-a)).map(((e,t)=>a+t+1)):Array.from(Array(a+1)).map(((e,t)=>t)),h=p.map((()=>clone(t)));return h.forEach(((e,t)=>e.splice(p[t],0,l))),h.map(((e,t)=>recurse(e,l,p[t]))).reduce(((e,t)=>e.concat(t)),[])};return recurse().map(invertMap)},maekawaAssignments=e=>{const t=(r=e).map(((e,t)=>t)).filter((e=>"U"===r[e]||"u"===r[e]));var r;const n=Array.from(Array(2**t.length)).map(((e,t)=>t.toString(2))).map((e=>Array(t.length-e.length+1).join("0")+e)).map((e=>Array.from(e).map((e=>"0"===e?"V":"M")))).map((r=>{const n=e.slice();return t.forEach(((e,t)=>{n[e]=r[t]})),n}));if(e.includes("B")||e.includes("b"))return n;const o=n.map((e=>e.filter((e=>"M"===e||"m"===e)).length)),s=n.map((e=>e.filter((e=>"V"===e||"v"===e)).length));return n.filter(((e,t)=>2===Math.abs(o[t]-s[t])))},make_lookup=e=>{const t=e[0].length,r=Array.from(Array(t+1)).map((()=>({})));Array.from(Array(Math.pow(2,t))).map(((e,t)=>t.toString(2))).map((e=>Array.from(e).map((e=>parseInt(e,10)+1)).join(""))).map((e=>`11111${e}`.slice(-t))).forEach((e=>{r[0][e]=!1})),e.forEach((e=>{r[0][e]=!0})),Array.from(Array(t)).map(((e,t)=>t+1)).map((e=>Array.from(Array(Math.pow(3,t))).map(((e,t)=>t.toString(3))).map((e=>`000000${e}`.slice(-t))).forEach((t=>((e,t,r)=>{const n=Array.from(r).map((e=>parseInt(e,10)));if(n.filter((e=>0===e)).length!==t)return;e[t][r]=!1;let o=!1;for(let r=0;r<n.length;r+=1){const s=[];if(0===n[r]){for(let o=1;o<=2;o+=1)n[r]=o,!1!==e[t-1][n.join("")]&&s.push([r,o]);n[r]=0,s.length>0&&!1===o&&(o=[]),1===s.length&&o.push(s[0])}}!1!==o&&0===o.length&&(o=!0),e[t][r]=o})(r,e,t)))));let n=[];Array.from(Array(t+1)).map(((e,r)=>t-r)).forEach((e=>{const t=[];Object.keys(r[e]).forEach((n=>{let o=r[e][n];o.constructor===Array&&(o=o[0]),t.push([n,o])})),n=n.concat(t)})),n.sort(((e,t)=>parseInt(e[0],10)-parseInt(t[0],10)));const o={};return n.forEach((e=>{o[e[0]]=Object.freeze(e[1])})),Object.freeze(o)},Jt={taco_taco:make_lookup(["111112","111121","111222","112111","121112","121222","122111","122212","211121","211222","212111","212221","221222","222111","222212","222221"]),taco_tortilla:make_lookup(["112","121","212","221"]),tortilla_tortilla:make_lookup(["11","22"]),transitivity:make_lookup(["112","121","122","211","212","221"])},Xt={taco_taco:e=>[[e[0],e[2]],[e[1],e[3]],[e[1],e[2]],[e[0],e[3]],[e[0],e[1]],[e[2],e[3]]],taco_tortilla:e=>[[e[0],e[2]],[e[0],e[1]],[e[1],e[2]]],tortilla_tortilla:e=>[[e[0],e[2]],[e[1],e[3]]],transitivity:e=>[[e[0],e[1]],[e[1],e[2]],[e[2],e[0]]]},pairArrayToSortedPairString=e=>e[0]<e[1]?`${e[0]} ${e[1]}`:`${e[1]} ${e[0]}`,Yt={taco_taco:e=>[pairArrayToSortedPairString([e[0],e[2]]),pairArrayToSortedPairString([e[1],e[3]]),pairArrayToSortedPairString([e[1],e[2]]),pairArrayToSortedPairString([e[0],e[3]]),pairArrayToSortedPairString([e[0],e[1]]),pairArrayToSortedPairString([e[2],e[3]])],taco_tortilla:e=>[pairArrayToSortedPairString([e[0],e[2]]),pairArrayToSortedPairString([e[0],e[1]]),pairArrayToSortedPairString([e[1],e[2]])],tortilla_tortilla:e=>[pairArrayToSortedPairString([e[0],e[2]]),pairArrayToSortedPairString([e[1],e[3]])],transitivity:e=>[pairArrayToSortedPairString([e[0],e[1]]),pairArrayToSortedPairString([e[1],e[2]]),pairArrayToSortedPairString([e[2],e[0]])]},Kt={0:0,1:1,2:-1},Qt=Object.freeze(Object.keys(Jt)),er={0:0,1:2,2:1},buildRuleAndLookup=(e,t,...r)=>{const n=Xt[e](t),o=n.map((e=>e[1]<e[0])),s=n.map(((e,t)=>o[t]?`${e[1]} ${e[0]}`:`${e[0]} ${e[1]}`)),c=s.map(((e,t)=>{for(let n=0;n<r.length;n+=1)if(r[n][e])return o[t]?er[r[n][e]]:r[n][e];return 0})).join("");if(!0===Jt[e][c])return!0;if(!1===Jt[e][c])return!1;const i=Jt[e][c];return[s[i[0]],o[i[0]]?er[i[1]]:i[1]]},getConstraintIndicesFromFacePairs=(e,t,r)=>{const n={};return Qt.forEach((o=>{const s=r.flatMap((e=>t[o][e]));n[o]=uniqueIntegers(s).filter((t=>e[o][t]))})),n},propagate=(e,t,r,...n)=>{let o=r;const s={};do{const r=getConstraintIndicesFromFacePairs(e,t,o),c={};for(let t=0;t<Qt.length;t+=1){const o=Qt[t],i=r[o];for(let t=0;t<i.length;t+=1){const r=buildRuleAndLookup(o,e[o][i[t]],...n,s);if(!0!==r){if(!1===r)return console.warn("invalid state found",o,e[o][i[t]]),!1;if(s[r[0]]){if(s[r[0]]!==r[1])return console.warn("order conflict",o,e[o][i[t]]),!1}else{const[e,t]=r;c[e]=!0,s[r[0]]=t}}}}o=Object.keys(c)}while(o.length);return s},getBranches=(e,t,r,n={})=>{const o=Object.keys(t),s={};e.forEach((e=>{s[e]=!0}));let c=0;const i=[];for(;c<e.length;){if(!s[e[c]]){c+=1;continue}const a=[],l=[e[c]],d={[e[c]]:!0};do{const e=l.shift();let c;if(delete s[e],a.push(e),n[e])c=n[e];else{const s={};o.forEach((n=>{const o=r[n][e];o&&o.map((e=>t[n][e])).map((e=>Yt[n](e).forEach((e=>{s[e]=!0}))))})),c=Object.keys(s),n[e]=c}const i=c.filter((e=>s[e])).filter((e=>!d[e]));l.push(...i),i.forEach((e=>{d[e]=!0}))}while(l.length);c+=1,i.push(a)}return i},makeTortillaTortillaFacesCrossing=(e,t,r)=>((e,t,r)=>{const n=makeFacesWinding(e),o=makeFacesPolygon(e,r);for(let e=0;e<o.length;e+=1)n[e]||o[e].reverse();const s=t.map((e=>2===e.length&&e[0]!==e[1])).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)),c=s.map((t=>e.edges_vertices[t])).map((t=>t.map((t=>e.vertices_coords[t])))),i=c.map((e=>Ce.core.subtract2(e[1],e[0]))),a=[];return s.forEach((e=>{a[e]=[]})),s.map(((e,t)=>o.map((e=>Ce.core.clipLineConvexPolygon(e,i[t],c[t][0],Ce.core.exclude,Ce.core.excludeS,r))).map((e=>void 0!==e)))).forEach(((e,t)=>e.forEach(((e,r)=>{e&&a[s[t]].push(r)})))),a})(e,t,r).map(((t,r)=>t.map((t=>[e.edges_faces[r],[t,t]])))).reduce(((e,t)=>e.concat(t)),[]),classify_faces_pair=e=>1===e[0]&&-1===e[1]||-1===e[0]&&1===e[1]?"both":1===e[0]&&1===e[1]?"right":-1===e[0]&&-1===e[1]?"left":void 0,makeTacosTortillas=(e,t=Ce.core.EPSILON)=>{const r=makeFacesCenter(e),n=((e,t)=>{const r=e.edges_vertices.map((t=>e.vertices_coords[t[0]])),n=e.edges_vertices.map((t=>Ce.core.subtract2(e.vertices_coords[t[1]],e.vertices_coords[t[0]])));return e.edges_faces.map(((e,o)=>e.map((e=>Ce.core.cross2(Ce.core.subtract2(t[e],r[o]),n[o]))).map((e=>Math.sign(e)))))})(e,r),o=makeEdgesEdgesParallelOverlap(e,t),s=booleanMatrixToUniqueIndexPairs(o).filter((t=>t.map((t=>e.edges_faces[t].length>1)).reduce(((e,t)=>e&&t),!0))),c=s.map((t=>t.map((t=>e.edges_faces[t])))),i=((e,t,r,n)=>{const o=r.map((t=>e.edges_vertices[t[0]].map((t=>e.vertices_coords[t])))),s=o.map((e=>e[0])),c=o.map((e=>Ce.core.subtract2(e[1],e[0])));return n.map((e=>e.map((e=>e.map((e=>t[e])))))).map(((e,t)=>e.map((e=>e.map((e=>Ce.core.cross2(Ce.core.subtract2(e,s[t]),c[t]))).map((e=>Math.sign(e)))))))})(e,r,s,c),a=i.map((e=>e.map(classify_faces_pair))),l=a.map(((e,t)=>{return(r=e)[0]===r[1]&&"both"!==r[0]?c[t]:void 0;var r})).filter((e=>void 0!==e)),d=a.map(((e,t)=>{return(r=e)[0]===r[1]&&"both"===r[0]?c[t]:void 0;var r})).map(((e,t)=>((e,t)=>{if(void 0!==e)return t[0][0]===t[1][0]?e:[e[0],[e[1][1],e[1][0]]]})(e,i[t]))).filter((e=>void 0!==e)),u=makeTortillaTortillaFacesCrossing(e,n,t),g=d.concat(u),p=a.map(((e,t)=>{return(r=e)[0]===r[1]||"both"!==r[0]&&"both"!==r[1]?void 0:((e,t,r)=>{const n="left"===t[0]||"left"===t[1]?-1:1,o="both"===t[0]?[...e[1]]:[...e[0]],s="both"===t[0]?0:1;return{taco:o,tortilla:r[s][0]===n?e[s][0]:e[s][1]}})(c[t],a[t],i[t]);var r})).filter((e=>void 0!==e)),h=makeEdgesFacesOverlap(e,t),m=booleanMatrixToIndexedArray(h).map(((e,t)=>n[t].length>1&&n[t][0]===n[t][1]?e:[])).map(((t,r)=>({taco:e.edges_faces[r],tortillas:t}))).filter((e=>e.tortillas.length)).flatMap((e=>e.tortillas.map((t=>({taco:[...e.taco],tortilla:t})))));return{taco_taco:l,tortilla_tortilla:g,taco_tortilla:p.concat(m)}},makeTransitivityTrios=(e,t,r,n=Ce.core.EPSILON)=>{t||(t=makeFacesFacesOverlap(e,n)),r||(r=makeFacesWinding(e));const o=e.faces_vertices.map((t=>t.map((t=>e.vertices_coords[t]))));o.forEach(((e,t)=>{r[t]||e.reverse()}));const s=e.faces_vertices.map((()=>[]));for(let e=0;e<s.length-1;e+=1)for(let r=e+1;r<s.length;r+=1){if(!t[e][r])continue;const c=Ce.core.clipPolygonPolygon(o[e],o[r],n);c&&(s[e][r]=c)}const c=[];for(let e=0;e<s.length-1;e+=1)for(let r=e+1;r<s.length;r+=1)if(s[e][r])for(let i=r+1;i<s.length;i+=1){if(e===i||r===i)continue;if(!t[e][i]||!t[r][i])continue;Ce.core.clipPolygonPolygon(s[e][r],o[i],n)&&c.push([e,r,i].sort(((e,t)=>e-t)))}return c},tr={0:0,1:2,2:1},rr={M:1,m:1,V:2,v:2},makeFacePairs=(e,t)=>(t||(t=makeFacesFacesOverlap(e)),booleanMatrixToUniqueIndexPairs(t).map((e=>e.join(" ")))),solveEdgeAdjacentFacePairs=(e,t,r)=>{r||(r=makeFacesWinding(e));const n={};t.forEach((e=>{n[e]=!0}));const o={};return e.edges_faces.forEach(((t,s)=>{const c=e.edges_assignment[s],i=rr[c];if(t.length<2||void 0===i)return;const a=r[t[0]]?i:tr[i],l=`${t[0]} ${t[1]}`,d=`${t[1]} ${t[0]}`;l in n&&(o[l]=a),d in n&&(o[d]=tr[a])})),o};var nr=Object.freeze({__proto__:null,makeFacePairs:makeFacePairs,solveEdgeAdjacentFacePairs:solveEdgeAdjacentFacePairs});const prepare=(e,t=1e-6)=>{const r=makeFacesFacesOverlap(e,t),n=makeFacesWinding(e),o=makeTacosTortillas(e,t),s=((e,t)=>{const r={};return t.taco_taco.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]].sort(((e,t)=>e-t)))).forEach((e=>[`${e[0]} ${e[1]} ${e[2]}`,`${e[0]} ${e[1]} ${e[3]}`,`${e[0]} ${e[2]} ${e[3]}`,`${e[1]} ${e[2]} ${e[3]}`].forEach((e=>{r[e]=!0})))),t.taco_tortilla.map((e=>[e.taco[0],e.taco[1],e.tortilla].sort(((e,t)=>e-t)).join(" "))).forEach((e=>{r[e]=!0})),e.filter((e=>void 0===r[e.join(" ")]))})(makeTransitivityTrios(e,r,n,t),o),c=((e,t)=>{const r={};return r.taco_taco=e.taco_taco.map((e=>[e[0][0],e[1][0],e[0][1],e[1][1]])),r.taco_tortilla=e.taco_tortilla.map((e=>[e.taco[0],e.tortilla,e.taco[1]])),r.tortilla_tortilla=e.tortilla_tortilla.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]])),r.transitivity=t.map((e=>[e[0],e[1],e[2]])),r})(o,s),i=(e=>{const t={};return Object.keys(e).forEach((e=>{t[e]={}})),Object.keys(e).forEach((r=>{e[r].forEach(((e,n)=>Yt[r](e).forEach((e=>{void 0===t[r][e]&&(t[r][e]=[]),t[r][e].push(n)}))))})),t})(c),a=makeFacePairs(e,r);return{constraints:c,constraintsLookup:i,facePairs:a,edgeAdjacentOrders:solveEdgeAdjacentFacePairs(e,a,n)}},topologicalOrder=(e,t)=>{if(!e)return[];const r=[];Object.keys(e).forEach((t=>{const n=t.split(" ").map((e=>parseInt(e,10)));-1===e[t]&&n.reverse(),void 0===r[n[0]]&&(r[n[0]]=[]),r[n[0]].push(n[1])})),t&&t.faces_vertices&&t.faces_vertices.forEach(((e,t)=>{void 0===r[t]&&(r[t]=[])}));const n=[],o=[];let s=0;for(let e=0;e<r.length;e+=1){if(o[e])continue;const t=[e];for(;t.length&&s<2*r.length;){const e=t[t.length-1];if(r[e]&&r[e].length){const n=r[e].pop();o[n]||t.push(n)}else n.push(e),o[e]=!0,t.pop(),s+=1}}return s>=2*r.length&&console.warn("fix protection in topological order"),n},makePermutations=e=>{const t=e.reduce(((e,t)=>e*t),1),r=e.slice();for(let e=r.length-2;e>=0;e-=1)r[e]*=r[e+1];return r.push(1),r.shift(),Array.from(Array(t)).map(((t,n)=>e.map(((e,t)=>Math.floor(n/r[t])%e))))},or={count:function(){return this.branches.map((e=>e.length))},solution:function(...e){const t=Array(this.branches.length).fill(0).map(((t,r)=>null!=e[r]?e[r]:t)),r=this.branches?this.branches.map(((e,r)=>e[t[r]])):[];return Object.assign({},this.root,...r)},allSolutions:function(){return makePermutations(this.count()).map((e=>this.solution(...e)))},facesLayer:function(...e){return invertMap(topologicalOrder(this.solution(...e)))},allFacesLayers:function(){return makePermutations(this.count()).map((e=>this.facesLayer(...e)))},faceOrders:function(...e){return(e=>{const t=Object.keys(e),r=t.map((e=>e.split(" ").map((e=>parseInt(e,10)))));return r.map(((r,n)=>r.push(e[t[n]]))),r})(this.solution(...e))},allFaceOrders:function(){return makePermutations(this.count()).map((e=>this.faceOrders(...e)))}},solveBranch=(e,t,r,n,...o)=>{if(!n.length)return[];const s=n[0],c=[],i=[];[1,2].forEach((r=>{const a=propagate(e,t,[s],...o,{[s]:r});!1!==a&&(a[s]=r,Object.keys(a).length===n.length?c.push(a):i.push(a))}));const a=i.map((s=>{const c=n.filter((e=>!(e in s)));return getBranches(c,e,t,r).map((n=>solveBranch(e,t,r,n,...o,s)))}));return c.map((e=>[...o,e])).concat(...a)};var sr=Object.assign(Object.create(null),{solver:(e,t=1e-6)=>{const r=new Date,{constraints:n,constraintsLookup:o,facePairs:s,edgeAdjacentOrders:c}=prepare(e,t),i=Date.now()-r,a=new Date,l=propagate(n,o,Object.keys(c),c);if(!l)return;const d=s.filter((e=>!(e in c))).filter((e=>!(e in l))),u={},g=getBranches(d,n,o,u).map((e=>solveBranch(n,o,u,e,c,l))),p={...c,...l};var h;h=p,Object.keys(h).forEach((e=>{h[e]=Kt[h[e]]}));const m=Date.now()-a;return console.log(`prep ${i}ms solver ${m}ms`),console.log("branches",g),Object.assign(Object.create(or),{root:p,branches:g})},table:Jt,topologicalOrder:topologicalOrder,makeTacosTortillas:makeTacosTortillas,makeFoldedStripTacos:makeFoldedStripTacos,makeTransitivityTrios:makeTransitivityTrios,singleVertexSolver:singleVertexSolver,singleVertexAssignmentSolver:(e,t,r)=>{null==t&&(t=e.map((()=>"U")));const n=maekawaAssignments(t),o=n.map((t=>singleVertexSolver(e,t,r)));return n.map(((e,t)=>t)).filter((e=>o[e].length>0)).map((e=>({assignment:n[e],layer:o[e]})))},validateLayerSolver:validateLayerSolver,validateTacoTacoFacePairs:validateTacoTacoFacePairs,validateTacoTortillaStrip:validateTacoTortillaStrip,foldStripWithAssignments:foldStripWithAssignments},Gt,nr);var cr=Object.freeze({__proto__:null,kawasakiSolutions:({vertices_coords:e,vertices_edges:t,edges_vertices:r,edges_vectors:n},o)=>{n||(n=makeEdgesVector({vertices_coords:e,edges_vertices:r})),t||(t=makeVerticesEdgesUnsorted({edges_vertices:r}));const s=t[o].map((e=>n[e])),c=Ce.core.counterClockwiseOrder2(s).map((e=>s[e]));return kawasakiSolutionsVectors(c)}}),ir=Object.assign(Object.create(null),{maekawaAssignments:maekawaAssignments,foldAngles4:(e,t,r=0)=>{const n=(e=>{let t=0,r=0;for(let n=0;n<e.length;n+=1)"M"!==e[n]&&"m"!==e[n]||(t+=1),"V"!==e[n]&&"v"!==e[n]||(r+=1);for(let n=0;n<e.length;n+=1){if(t>r&&("V"===e[n]||"v"===e[n]))return n;if(r>t&&("M"===e[n]||"m"===e[n]))return n}})(t);if(void 0===n)return;const o=e[(n+1)%e.length],s=e[(n+2)%e.length],c=Math.PI*r,i=-Math.cos(o)*Math.cos(s)+Math.sin(o)*Math.sin(s)*Math.cos(Math.PI-c),a=Math.cos(Math.PI-c)-Math.sin(Math.PI-c)**2*Math.sin(o)*Math.sin(s)/(1-i),l=-Math.acos(a)+Math.PI;return n%2==0?[l,c,l,c].map(((e,t)=>n===t?-e:e)):[c,l,c,l].map(((e,t)=>n===t?-e:e))}},mt,cr,bt),ar={axioms:{ar:[null,"اصنع خطاً يمر بنقطتين","اصنع خطاً عن طريق طي نقطة واحدة إلى أخرى","اصنع خطاً عن طريق طي خط واحد على آخر","اصنع خطاً يمر عبر نقطة واحدة ويجعل خطاً واحداً فوق نفسه","اصنع خطاً يمر بالنقطة الأولى ويجعل النقطة الثانية على الخط","اصنع خطاً يجلب النقطة الأولى إلى الخط الأول والنقطة الثانية إلى الخط الثاني","اصنع خطاً يجلب نقطة إلى خط ويجعل خط ثاني فوق نفسه"],de:[null,"Falte eine Linie durch zwei Punkte","Falte zwei Punkte aufeinander","Falte zwei Linien aufeinander","Falte eine Linie auf sich selbst, falte dabei durch einen Punkt","Falte einen Punkt auf eine Linie, falte dabei durch einen anderen Punkt","Falte einen Punkt auf eine Linie und einen weiteren Punkt auf eine weitere Linie","Falte einen Punkt auf eine Linie und eine weitere Linie in sich selbst zusammen"],en:[null,"fold a line through two points","fold two points together","fold two lines together","fold a line on top of itself, creasing through a point","fold a point to a line, creasing through another point","fold a point to a line and another point to another line","fold a point to a line and another line onto itself"],es:[null,"dobla una línea entre dos puntos","dobla dos puntos juntos","dobla y une dos líneas","dobla una línea sobre sí misma, doblándola hacia un punto","dobla un punto hasta una línea, doblándola a través de otro punto","dobla un punto hacia una línea y otro punto hacia otra línea","dobla un punto hacia una línea y otra línea sobre sí misma"],fr:[null,"créez un pli passant par deux points","pliez pour superposer deux points","pliez pour superposer deux lignes","rabattez une ligne sur elle-même à l'aide d'un pli qui passe par un point","rabattez un point sur une ligne à l'aide d'un pli qui passe par un autre point","rabattez un point sur une ligne et un autre point sur une autre ligne","rabattez un point sur une ligne et une autre ligne sur elle-même"],hi:[null,"एक क्रीज़ बनाएँ जो दो स्थानों से गुजरता है","एक स्थान को दूसरे स्थान पर मोड़कर एक क्रीज़ बनाएँ","एक रेखा पर दूसरी रेखा को मोड़कर क्रीज़ बनाएँ","एक क्रीज़ बनाएँ जो एक स्थान से गुजरता है और एक रेखा को स्वयं के ऊपर ले आता है","एक क्रीज़ बनाएँ जो पहले स्थान से गुजरता है और दूसरे स्थान को रेखा पर ले आता है","एक क्रीज़ बनाएँ जो पहले स्थान को पहली रेखा पर और दूसरे स्थान को दूसरी रेखा पर ले आता है","एक क्रीज़ बनाएँ जो एक स्थान को एक रेखा पर ले आता है और दूसरी रेखा को स्वयं के ऊपर ले आता है"],jp:[null,"2点に沿って折り目を付けます","2点を合わせて折ります","2つの線を合わせて折ります","点を通過させ、既にある線に沿って折ります","点を線沿いに合わせ別の点を通過させ折ります","線に向かって点を折り、同時にもう一方の線に向かってもう一方の点を折ります","線に向かって点を折り、同時に別の線をその上に折ります"],ko:[null,"두 점을 통과하는 선으로 접으세요","두 점을 함께 접으세요","두 선을 함께 접으세요","그 위에 선을 접으면서 점을 통과하게 접으세요","점을 선으로 접으면서, 다른 점을 지나게 접으세요","점을 선으로 접고 다른 점을 다른 선으로 접으세요","점을 선으로 접고 다른 선을 그 위에 접으세요"],ms:[null,"lipat garisan melalui dua titik","lipat dua titik bersama","lipat dua garisan bersama","lipat satu garisan di atasnya sendiri, melipat melalui satu titik","lipat satu titik ke garisan, melipat melalui titik lain","lipat satu titik ke garisan dan satu lagi titik ke garisan lain","lipat satu titik ke garisan dan satu lagi garisan di atasnya sendiri"],pt:[null,"dobre uma linha entre dois pontos","dobre os dois pontos para uni-los","dobre as duas linhas para uni-las","dobre uma linha sobre si mesma, criando uma dobra ao longo de um ponto","dobre um ponto até uma linha, criando uma dobra ao longo de outro ponto","dobre um ponto até uma linha e outro ponto até outra linha","dobre um ponto até uma linha e outra linha sobre si mesma"],ru:[null,"сложите линию через две точки","сложите две точки вместе","сложите две линии вместе","сверните линию сверху себя, сгибая через точку","сложите точку в линию, сгибая через другую точку","сложите точку в линию и другую точку в другую линию","сложите точку в линию и другую линию на себя"],tr:[null,"iki noktadan geçen bir çizgi boyunca katla","iki noktayı birbirine katla","iki çizgiyi birbirine katla","bir noktadan kıvırarak kendi üzerindeki bir çizgi boyunca katla","başka bir noktadan kıvırarak bir noktayı bir çizgiye katla","bir noktayı bir çizgiye ve başka bir noktayı başka bir çizgiye katla","bir noktayı bir çizgiye ve başka bir çizgiyi kendi üzerine katla"],vi:[null,"tạo một nếp gấp đi qua hai điểm","tạo nếp gấp bằng cách gấp một điểm này sang điểm khác","tạo nếp gấp bằng cách gấp một đường lên một đường khác","tạo một nếp gấp đi qua một điểm và đưa một đường lên trên chính nó","tạo một nếp gấp đi qua điểm đầu tiên và đưa điểm thứ hai lên đường thẳng","tạo một nếp gấp mang điểm đầu tiên đến đường đầu tiên và điểm thứ hai cho đường thứ hai","tạo một nếp gấp mang lại một điểm cho một đường và đưa một đường thứ hai lên trên chính nó"],zh:[null,"通過兩點折一條線","將兩點折疊起來","將兩條線折疊在一起","通過一個點折疊一條線在自身上面","將一個點，通過另一個點折疊成一條線，","將一個點折疊為一條線，再將另一個點折疊到另一條線","將一個點折疊成一條線，另一條線折疊到它自身上"]},instructions:{fold:{es:"doblez"},"valley fold":{es:"doblez de valle",zh:"谷摺"},"mountain fold":{es:"doblez de montaña",zh:"山摺"},"inside reverse fold":{zh:"內中割摺"},"outside reverse fold":{zh:"外中割摺"},sink:{},"open sink":{zh:"開放式沉壓摺"},"closed sink":{zh:"封閉式沉壓摺"},"rabbit ear":{zh:"兔耳摺"},"double rabbit ear":{zh:"雙兔耳摺"},"petal fold":{zh:"花瓣摺"},blintz:{zh:"坐墊基"},squash:{zh:"壓摺"},"flip over":{es:"dale la vuelta a tu papel"}}};const addClassToClassList=(e,...t)=>{if(!e)return;const r={},n=e.getAttribute("class"),o=n?n.split(" "):[];o.push(...t),o.forEach((e=>{r[e]=!0}));const s=Object.keys(r).join(" ");e.setAttribute("class",s)},lr={},dr={stroke:_},fr={},ur={M:{stroke:"red"},m:{stroke:"red"},V:{stroke:"blue"},v:{stroke:"blue"},F:{stroke:"lightgray"},f:{stroke:"lightgray"}},edgesPathData=e=>(({vertices_coords:e,edges_vertices:t})=>e&&t?t.map((t=>t.map((t=>e[t])))):[])(e).map((e=>{return`M${(t=e)[0][0]} ${t[0][1]}L${t[1][0]} ${t[1][1]}`;var t})).join(""),edgesPathDataAssign=({vertices_coords:e,edges_vertices:t,edges_assignment:r})=>{if(!e||!t)return{};if(!r)return{u:edgesPathData({vertices_coords:e,edges_vertices:t})};const n=(e=>{const t={u:[],f:[],v:[],m:[],b:[]},r=e[u].map((e=>e.toLowerCase()));return e.edges_vertices.map(((e,t)=>r[t]||"u")).forEach(((e,r)=>t[e].push(r))),t})({vertices_coords:e,edges_vertices:t,edges_assignment:r});return Object.keys(n).forEach((r=>{n[r]=edgesPathData({vertices_coords:e,edges_vertices:n[r].map((e=>t[e]))})})),Object.keys(n).forEach((e=>{""===n[e]&&delete n[e]})),n},applyEdgesStyle=(e,t={})=>Object.keys(t).forEach((r=>e.setAttributeNS(null,r,t[r]))),edgesPaths=(e,t={})=>{const r=k.svg.g();if(!e)return r;const n=isFoldedForm(e),o=(({vertices_coords:e,edges_vertices:t,edges_assignment:r})=>{const n=edgesPathDataAssign({vertices_coords:e,edges_vertices:t,edges_assignment:r});return Object.keys(n).forEach((e=>{const t=k.svg.path(n[e]);addClassToClassList(t,Be[e]),n[e]=t})),n})(e);return Object.keys(o).forEach((e=>{addClassToClassList(o[e],Be[e]),applyEdgesStyle(o[e],n?fr[e]:ur[e]),applyEdgesStyle(o[e],t[e]),applyEdgesStyle(o[e],t[Be[e]]),r.appendChild(o[e]),Object.defineProperty(r,Be[e],{get:()=>o[e]})})),applyEdgesStyle(r,n?lr:dr),applyEdgesStyle(r,t.stroke?{stroke:t.stroke}:{}),r},edgesLines=(e,t={})=>{const r=k.svg.g();if(!e)return r;const n=isFoldedForm(e),o=(e.edges_assignment?e.edges_assignment:makeEdgesAssignment(e)).map((e=>e.toLowerCase())),s={};["b","m","v","f","u"].forEach((e=>{const o=k.svg.g();r.appendChild(o),addClassToClassList(o,Be[e]),applyEdgesStyle(o,n?fr[e]:ur[e]),applyEdgesStyle(o,t[Be[e]]),Object.defineProperty(r,Be[e],{get:()=>o}),s[e]=o}));const c=e.edges_vertices.map((t=>t.map((t=>e.vertices_coords[t])))).map((e=>k.svg.line(e[0][0],e[0][1],e[1][0],e[1][1])));return e.edges_foldAngle&&c.forEach(((t,r)=>{const n=e.edges_foldAngle[r];var o;0!==n&&180!==n&&-180!==n&&t.setAttributeNS(null,"opacity",(o=n,Math.abs(o)/180))})),c.forEach(((e,t)=>s[o[t]].appendChild(e))),applyEdgesStyle(r,n?lr:dr),applyEdgesStyle(r,t.stroke?{stroke:t.stroke}:{}),r},gr={back:{fill:y},front:{fill:"#ddd"}},pr={back:{opacity:.1},front:{opacity:.1}},hr={},mr={stroke:_,"stroke-linejoin":"bevel"},vr={stroke:b,fill:_,"stroke-linejoin":"bevel"},_r={fill:b},applyFacesStyle=(e,t={})=>Object.keys(t).forEach((r=>e.setAttributeNS(null,r,t[r]))),finalize_faces=(e,t,r,n)=>{const o=isFoldedForm(e),s=null!=e.faces_layer,c=[[h],[m]],i=makeFacesWinding(e);i.map((e=>e?c[0]:c[1])).forEach(((e,r)=>{addClassToClassList(t[r],e),applyFacesStyle(t[r],o?s?gr[e]:pr[e]:hr[e]),applyFacesStyle(t[r],n[e])}));return(s?function(e,t){const r=t.faces_vertices.length||t.faces_edges.length;return Array.from(Array(r)).map(((e,t)=>t)).filter((t=>null==e[t])).concat(invertMap(e))}(e.faces_layer,e).map((e=>t[e])):t).forEach((e=>r.appendChild(e))),Object.defineProperty(r,h,{get:()=>t.filter(((e,t)=>i[t]))}),Object.defineProperty(r,m,{get:()=>t.filter(((e,t)=>!i[t]))}),applyFacesStyle(r,o?s?mr:vr:_r),r},yr={fill:b},br={stroke:_,fill:y},Er={vertices:(e,t={})=>{const r=k.svg.g();return e&&e.vertices_coords?(e.vertices_coords.map((e=>k.svg.circle(e[0],e[1],.01))).forEach((e=>r.appendChild(e))),r.setAttributeNS(null,"fill",b),Object.keys(t).forEach((e=>r.setAttributeNS(null,e,t[e]))),r):r},edges:(e,t)=>edgesFoldAngleAreAllFlat(e)?edgesPaths(e,t):edgesLines(e,t),faces:(e,t)=>e&&e.faces_vertices?((e,t={})=>{const r=k.svg.g();if(!e||!e.vertices_coords||!e.faces_vertices)return r;const o=e.faces_vertices.map((t=>t.map((t=>[0,1].map((r=>e.vertices_coords[t][r])))))).map((e=>k.svg.polygon(e)));return o.forEach(((e,t)=>e.setAttributeNS(null,n,t))),r.setAttributeNS(null,"fill",y),finalize_faces(e,o,r,t)})(e,t):e&&e.faces_edges?function(e,t={}){const r=k.svg.g();if(!e||d in e==0||l in e==0||a in e==0)return r;const o=e.faces_edges.map((t=>t.map((t=>e.edges_vertices[t])).map(((e,t,r)=>{const n=r[(t+1)%r.length];return e[1]===n[0]||e[1]===n[1]?e[0]:e[1]})).map((t=>[0,1].map((r=>e.vertices_coords[t][r])))))).map((e=>k.svg.polygon(e)));return o.forEach(((e,t)=>e.setAttributeNS(null,n,t))),r.setAttributeNS(null,"fill","white"),finalize_faces(e,o,r,t)}(e,t):k.svg.g(),boundaries:(e,t={})=>{const r=k.svg.g();if(!(e&&e.vertices_coords&&e.edges_vertices&&e.edges_assignment))return r;const n=getBoundary(e).vertices.map((t=>[0,1].map((r=>e.vertices_coords[t][r]))));if(0===n.length)return r;const o=k.svg.polygon(n);return addClassToClassList(o,p),r.appendChild(o),((e,t={})=>{Object.keys(t).forEach((r=>e.setAttributeNS(null,r,t[r])))})(r,isFoldedForm(e)?yr:br),Object.keys(t).forEach((e=>r.setAttributeNS(null,e,t[e]))),r}},drawGroup=(e,t,r)=>{const n=!1===r?k.svg.g():Er[e](t,r);return addClassToClassList(n,e),n},DrawGroups=(e,t={})=>[i,c,s,o].map((r=>drawGroup(r,e,t[r])));[i,c,s,o].forEach((e=>{DrawGroups[e]=function(t,r={}){return drawGroup(e,t,r[e])}}));const getBoundingRect=({vertices_coords:e})=>{if(null==e||0===e.length)return;const t=Array(2).fill(1/0),r=Array(2).fill(-1/0);e.forEach((e=>{e[0]<t[0]&&(t[0]=e[0]),e[0]>r[0]&&(r[0]=e[0]),e[1]<t[1]&&(t[1]=e[1]),e[1]>r[1]&&(r[1]=e[1])}));return Number.isNaN(t[0])||Number.isNaN(t[1])||Number.isNaN(r[0])||Number.isNaN(r[1])?void 0:[t[0],t[1],r[0]-t[0],r[1]-t[1]]},findSVGInParents=e=>"SVG"===(e.nodeName||"").toUpperCase()?e:e.parentNode?findSVGInParents(e.parentNode):void 0,applyTopLevelOptions=(e,t,r,n)=>{const o=t[3]&&t[3].childNodes.length;if(!(n.strokeWidth||n.viewBox||o))return;const s=getBoundingRect(r),c=s?Math.max(s[2],s[3]):1,i=findSVGInParents(e);if(i&&n.viewBox){const e=s?s.join(" "):"0 0 1 1";i.setAttributeNS(null,"viewBox",e)}if(i&&n.padding){const e=i.getAttribute("viewBox");if(null!=e){const t=n.padding*c,r=e.split(" ").map((e=>parseFloat(e))),o=[-t,-t,2*t,2*t].map(((e,t)=>r[t]+e)).join(" ");i.setAttributeNS(null,"viewBox",o)}}if(n.strokeWidth||n["stroke-width"]){const t=n.strokeWidth?n.strokeWidth:n["stroke-width"],o=(({vertices_coords:e,edges_vertices:t,edges_length:r})=>{if(!e||!t)return;r||(r=makeEdgesLength({vertices_coords:e,edges_vertices:t}));const n=r.slice().sort(((e,t)=>e-t));return n[Math.floor(.1*n.length)]})(r);let s;s=o?"number"==typeof t?10*o*t:10*o*.01:"number"==typeof t?c*t:.01*c,e.setAttributeNS(null,"stroke-width",s)}if(o){const e=n.vertices&&null!=n.vertices.radius?n.vertices.radius:n.radius,r="string"==typeof e?parseFloat(e):e,o="number"!=typeof r||Number.isNaN(r)?.02*c:c*r;((e,t)=>{for(let r=0;r<e.childNodes.length;r+=1)e.childNodes[r].setAttributeNS(null,"r",t)})(t[3],o)}},drawInto=(e,t,r={})=>{const n=DrawGroups(t,r);return n.filter((e=>e.childNodes.length>0)).forEach((t=>e.appendChild(t))),applyTopLevelOptions(e,n,t,r),((e,t)=>{const r=[t.file_classes||[],t.frame_classes||[]].flat();r.length&&addClassToClassList(e,...r)})(e,t),Object.keys(DrawGroups).map(((e,t)=>({key:e,i:t}))).filter((t=>null==e[t.key])).forEach((t=>Object.defineProperty(e,t.key,{get:()=>n[t.i]}))),e},FOLDtoSVG=(e,t)=>drawInto(k.svg(),e,t);Object.keys(DrawGroups).forEach((e=>{FOLDtoSVG[e]=DrawGroups[e]})),FOLDtoSVG.drawInto=drawInto,FOLDtoSVG.getViewBox=e=>{const t=getBoundingRect(e);return void 0===t?"":t.join(" ")},Object.defineProperty(FOLDtoSVG,"linker",{enumerable:!1,value:function(e){e.graph.svg=this;const t={svg:this};Object.keys(t).forEach((r=>{e.graph.prototype[r]=function(){return t[r](this,...arguments)}}))}.bind(FOLDtoSVG)});const xr={init:()=>{}};function SVG(){return xr.init(...arguments)}const Or="class",kr="function",Mr="undefined",Ar="number",jr="string",Pr="object",wr="svg",Sr="path",Cr="id",Lr="style",$r="viewBox",Nr="transform",zr="points",Fr="stroke",Vr="none",Ir="arrow",Br="head",Tr="tail",qr=typeof window!==Mr&&typeof window.document!==Mr,Rr=typeof process!==Mr&&null!=process.versions&&null!=process.versions.node,Ur=[];Ur[10]='"error 010: window" not set. if using node/deno, include package @xmldom/xmldom, set to the main export ( ear.window = xmldom; )';const Dr={window:void 0};qr&&(Dr.window=window);const SVGWindow=()=>{if(void 0===Dr.window)throw Ur[10];return Dr.window};var Gr="http://www.w3.org/2000/svg",Wr={s:["svg"],d:["defs"],h:["desc","filter","metadata","style","script","title","view"],c:["cdata"],g:["g"],v:["circle","ellipse","line","path","polygon","polyline","rect"],t:["text"],i:["marker","symbol","clipPath","mask"],p:["linearGradient","radialGradient","pattern"],cT:["textPath","tspan"],cG:["stop"],cF:["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]};const svg_add2=(e,t)=>[e[0]+t[0],e[1]+t[1]],svg_sub2=(e,t)=>[e[0]-t[0],e[1]-t[1]],svg_scale2=(e,t)=>[e[0]*t,e[1]*t],svg_magnitudeSq2=e=>e[0]**2+e[1]**2,svg_magnitude2=e=>Math.sqrt(svg_magnitudeSq2(e)),svg_distanceSq2=(e,t)=>svg_magnitudeSq2(svg_sub2(e,t)),svg_distance2=(e,t)=>Math.sqrt(svg_distanceSq2(e,t)),svg_polar_to_cart=(e,t)=>[Math.cos(e)*t,Math.sin(e)*t];var Zr=Object.freeze({__proto__:null,svg_add2:svg_add2,svg_sub2:svg_sub2,svg_scale2:svg_scale2,svg_magnitudeSq2:svg_magnitudeSq2,svg_magnitude2:svg_magnitude2,svg_distanceSq2:svg_distanceSq2,svg_distance2:svg_distance2,svg_polar_to_cart:svg_polar_to_cart});const arcPath=(e,t,r,n,o,s=!1)=>{if(null==o)return"";const c=svg_polar_to_cart(n,r),i=svg_polar_to_cart(o,r),a=[i[0]-c[0],i[1]-c[1]],l=c[0]*i[1]-c[1]*i[0],d=c[0]*i[0]+c[1]*i[1],u=Math.atan2(l,d)>0?0:1;let g=s?`M ${e},${t} l ${c[0]},${c[1]} `:`M ${e+c[0]},${t+c[1]} `;return g+=["a ",r,r,0,u,1,a[0],a[1]].join(" "),s&&(g+=" Z"),g},arcArguments=(e,t,r,n,o)=>[arcPath(e,t,r,n,o,!1)];var Hr={arc:{nodeName:Sr,attributes:["d"],args:arcArguments,methods:{setArc:(e,...t)=>e.setAttribute("d",arcArguments(...t))}}};const wedgeArguments=(e,t,r,n,o)=>[arcPath(e,t,r,n,o,!0)];var Jr={wedge:{nodeName:Sr,args:wedgeArguments,attributes:["d"],methods:{setArc:(e,...t)=>e.setAttribute("d",wedgeArguments(...t))}}};const parabolaArguments=(e=-1,t=0,r=2,n=1)=>Array.from(Array(129)).map(((e,t)=>(t-128)/128*2+1)).map((o=>[e+(o+1)*r*.5,t+o**2*n]));var Xr={parabola:{nodeName:"polyline",attributes:[zr],args:(e,t,r,n)=>[parabolaArguments(e,t,r,n).map((e=>`${e[0]},${e[1]}`)).join(" ")]}};const regularPolygonArguments=(e,t,r,n)=>{const o=[t,r];return Array.from(Array(e)).map(((t,r)=>2*Math.PI*(r/e))).map((e=>[Math.cos(e),Math.sin(e)])).map((e=>o.map(((t,r)=>t+n*e[r]))))};var Yr={regularPolygon:{nodeName:"polygon",attributes:[zr],args:(e,t=0,r=0,n=1)=>[regularPolygonArguments(e,t,r,n).map((e=>`${e[0]},${e[1]}`)).join(" ")]}};var Kr={roundRect:{nodeName:Sr,attributes:["d"],args:(e,t,r,n,o=0)=>{o>r/2&&(o=r/2),o>n/2&&(o=n/2);const s=r-2*o,c=n-2*o,i=`A${o} ${o} 0 0 1`;return[[`M${e+(r-s)/2},${t}`,`h${s}`,i,`${e+r},${t+(n-c)/2}`,`v${c}`,i,`${e+r-o},${t+n}`,"h"+-s,i,`${e},${t+n-o}`,"v"+-c,i,`${e+o},${t}`].join(" ")]}}},Qr={toCamel:e=>e.replace(/([-_][a-z])/gi,(e=>e.toUpperCase().replace("-","").replace("_",""))),toKebab:e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z])([A-Z])(?=[a-z])/g,"$1-$2").toLowerCase(),capitalized:e=>e.charAt(0).toUpperCase()+e.slice(1)};const svg_is_iterable=e=>null!=e&&typeof e[Symbol.iterator]===kr,svg_semi_flatten_arrays=function(){switch(arguments.length){case void 0:case 0:return Array.from(arguments);case 1:return svg_is_iterable(arguments[0])&&typeof arguments[0]!==jr?svg_semi_flatten_arrays(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>svg_is_iterable(e)?[...svg_semi_flatten_arrays(e)]:e))}};var coordinates=(...e)=>e.filter((e=>typeof e===Ar)).concat(e.filter((e=>typeof e===Pr&&null!==e)).map((e=>typeof e.x===Ar?[e.x,e.y]:typeof e[0]===Ar?[e[0],e[1]]:void 0)).filter((e=>void 0!==e)).reduce(((e,t)=>e.concat(t)),[]));const en=[Tr,Br],stringifyPoint=e=>e.join(","),pointsToPath=e=>"M"+e.map((e=>e.join(","))).join("L")+"Z",setArrowheadOptions=(e,t,r)=>{"boolean"==typeof t?e.options[r].visible=t:typeof t===Pr?(Object.assign(e.options[r],t),null==t.visible&&(e.options[r].visible=!0)):null==t&&(e.options[r].visible=!0)},setArrowStyle=(e,t={},r=Br)=>{const n=e.getElementsByClassName(`arrow-${r}`)[0];Object.keys(t).map((e=>({key:e,fn:n[Qr.toCamel(e)]}))).filter((e=>typeof e.fn===kr&&"class"!==e.key)).forEach((e=>e.fn(t[e.key]))),Object.keys(t).filter((e=>"class"===e)).forEach((e=>n.classList.add(t[e])))},redraw=e=>{const t=function(e){let t=[[0,1],[2,3]].map((t=>t.map((t=>e.points[t]||0)))),r=svg_sub2(t[1],t[0]),n=svg_add2(t[0],svg_scale2(r,.5));const o=svg_magnitude2(r),s=en.map((t=>e[t].visible?(1+e[t].padding)*e[t].height*2.5:0)).reduce(((e,t)=>e+t),0);if(o<s){const e=0===o?[s,0]:svg_scale2(r,s/o);t=[svg_sub2,svg_add2].map((t=>t(n,svg_scale2(e,.5)))),r=svg_sub2(t[1],t[0])}let c=[r[1],-r[0]],i=svg_add2(n,svg_scale2(c,e.bend));const a=t.map((e=>svg_sub2(i,e))),l=a.map((e=>svg_magnitude2(e))),d=a.map(((e,t)=>0===l[t]?e:svg_scale2(e,1/l[t]))),u=d.map((e=>svg_scale2(e,-1))),g=u.map((e=>[e[1],-e[0]])),p=en.map(((t,r)=>e[t].padding?e[t].padding:e.padding?e.padding:0)),h=en.map(((t,r)=>e[t].height*(e[t].visible?1:0))).map(((e,t)=>e+p[t])),m=t.map(((e,t)=>svg_add2(e,svg_scale2(d[t],h[t]))));r=svg_sub2(m[1],m[0]),c=[r[1],-r[0]],n=svg_add2(m[0],svg_scale2(r,.5)),i=svg_add2(n,svg_scale2(c,e.bend));const v=m.map(((t,r)=>svg_add2(t,svg_scale2(svg_sub2(i,t),e.pinch)))),_=en.map(((t,r)=>[svg_add2(m[r],svg_scale2(u[r],e[t].height)),svg_add2(m[r],svg_scale2(g[r],e[t].width/2)),svg_add2(m[r],svg_scale2(g[r],-e[t].width/2))]));return{line:`M${stringifyPoint(m[0])}C${stringifyPoint(v[0])},${stringifyPoint(v[1])},${stringifyPoint(m[1])}`,tail:pointsToPath(_[0]),head:pointsToPath(_[1])}}(e.options);return Object.keys(t).map((t=>({path:t,element:e.getElementsByClassName(`arrow-${t}`)[0]}))).filter((e=>e.element)).map((e=>(e.element.setAttribute("d",t[e.path]),e))).filter((t=>e.options[t.path])).forEach((t=>t.element.setAttribute("visibility",e.options[t.path].visible?"visible":"hidden"))),e},setPoints$3=(e,...t)=>(e.options.points=coordinates(...svg_semi_flatten_arrays(...t)).slice(0,4),redraw(e));var tn={setPoints:setPoints$3,points:setPoints$3,bend:(e,t)=>(e.options.bend=t,redraw(e)),pinch:(e,t)=>(e.options.pinch=t,redraw(e)),padding:(e,t)=>(e.options.padding=t,redraw(e)),head:(e,t)=>(setArrowheadOptions(e,t,Br),setArrowStyle(e,t,Br),redraw(e)),tail:(e,t)=>(setArrowheadOptions(e,t,Tr),setArrowStyle(e,t,Tr),redraw(e)),getLine:e=>e.getElementsByClassName("arrow-line")[0],getHead:e=>e.getElementsByClassName(`arrow-${Br}`)[0],getTail:e=>e.getElementsByClassName(`arrow-${Tr}`)[0]};const rn=Object.keys({head:{visible:!1,width:8,height:10,padding:0},tail:{visible:!1,width:8,height:10,padding:0},bend:0,padding:0,pinch:.618,points:[]});var nn={arrow:{nodeName:"g",attributes:[],args:()=>[],methods:tn,init:function(e,...t){e.classList.add(Ir);const r=["line",Tr,Br].map((t=>SVG.path().addClass(`arrow-${t}`).appendTo(e)));r[0].setAttribute(Lr,"fill:none;"),r[1].setAttribute(Fr,Vr),r[2].setAttribute(Fr,Vr),e.options={head:{visible:!1,width:8,height:10,padding:0},tail:{visible:!1,width:8,height:10,padding:0},bend:0,padding:0,pinch:.618,points:[]},tn.setPoints(e,...t);const n=((...e)=>{for(let t=0;t<e.length;t+=1){if(typeof e[t]!==Pr)continue;const r=Object.keys(e[t]);for(let n=0;n<r.length;n+=1)if(rn.includes(r[n]))return e[t]}})(...t);return n&&Object.keys(n).filter((e=>tn[e])).forEach((t=>tn[t](e,n[t]))),e}}};const svg_flatten_arrays=function(){return svg_semi_flatten_arrays(arguments).reduce(((e,t)=>e.concat(t)),[])},makeCurvePath=(e=[],t=0,r=.5)=>{const n=[e[0]||0,e[1]||0],o=[e[2]||0,e[3]||0],s=svg_sub2(o,n),c=svg_add2(n,svg_scale2(s,.5)),i=[s[1],-s[0]],a=svg_add2(c,svg_scale2(i,t)),l=svg_add2(n,svg_scale2(svg_sub2(a,n),r)),d=svg_add2(o,svg_scale2(svg_sub2(a,o),r));return`M${n[0]},${n[1]}C${l[0]},${l[1]} ${d[0]},${d[1]} ${o[0]},${o[1]}`},getNumbersFromPathCommand=e=>e.slice(1).split(/[, ]+/).map((e=>parseFloat(e))),getCurveEndpoints=e=>{const t=(e=>e.match(/[Mm][(0-9), .-]+/).map((e=>getNumbersFromPathCommand(e))))(e).shift(),r=(e=>e.match(/[Cc][(0-9), .-]+/).map((e=>getNumbersFromPathCommand(e))))(e).shift();return[...t?[t[t.length-2],t[t.length-1]]:[0,0],...r?[r[r.length-2],r[r.length-1]]:[0,0]]},setPoints$2=(e,...t)=>{const r=coordinates(...svg_flatten_arrays(...t)).slice(0,4);return e.setAttribute("d",makeCurvePath(r,e._bend,e._pinch)),e};var on={curve:{nodeName:Sr,attributes:["d"],args:(...e)=>[makeCurvePath(coordinates(...svg_flatten_arrays(...e)))],methods:{setPoints:setPoints$2,bend:(e,t)=>(e._bend=t,setPoints$2(e,...getCurveEndpoints(e.getAttribute("d")))),pinch:(e,t)=>(e._pinch=t,setPoints$2(e,...getCurveEndpoints(e.getAttribute("d"))))}}};const sn={};Object.assign(sn,Hr,Jr,Xr,Yr,Kr,nn,on);const cn=Object.keys(sn),an=[Wr.h,Wr.p,Wr.i],ln=[Wr.g,Wr.v,Wr.t,cn],dn={svg:[Wr.s,Wr.d].concat(an).concat(ln),g:ln,text:[Wr.cT],linearGradient:[Wr.cG],radialGradient:[Wr.cG],defs:an,filter:[Wr.cF],marker:ln,symbol:ln,clipPath:ln,mask:ln},fn=Object.create(null);Object.keys(dn).forEach((e=>{fn[e]=dn[e].reduce(((e,t)=>e.concat(t)),[])}));const viewBoxValue=function(e,t,r,n,o=0){const s=r/1-r;return[e-s-o,t-s-o,r+2*s+2*o,n+2*s+2*o].join(" ")};function viewBox$1(){const e=coordinates(...svg_flatten_arrays(arguments));return 2===e.length&&e.unshift(0,0),4===e.length?viewBoxValue(...e):void 0}const cdata=e=>(new(SVGWindow().DOMParser)).parseFromString("<root></root>","text/xml").createCDATASection(`${e}`),removeChildren=e=>{for(;e.lastChild;)e.removeChild(e.lastChild);return e},moveChildren=(e,t)=>{for(;t.childNodes.length>0;){const r=t.childNodes[0];t.removeChild(r),e.appendChild(r)}return e},assignSVG=(e,t)=>(Array.from(t.attributes).forEach((t=>e.setAttribute(t.name,t.value))),moveChildren(e,t));var un={removeChildren:removeChildren,appendTo:(e,t)=>(null!=t&&t.appendChild(e),e),setAttributes:(e,t)=>Object.keys(t).forEach((r=>e.setAttribute(Qr.toKebab(r),t[r])))};const filterWhitespaceNodes=e=>{if(null===e)return e;for(let t=e.childNodes.length-1;t>=0;t-=1){const r=e.childNodes[t];3===r.nodeType&&r.data.match(/^\s*$/)&&e.removeChild(r),1===r.nodeType&&filterWhitespaceNodes(r)}return e},parse=e=>(new(SVGWindow().DOMParser)).parseFromString(e,"text/xml"),checkParseError=e=>{const t=e.getElementsByTagName("parsererror");if(t.length>0)throw new Error(t[0]);return filterWhitespaceNodes(e.documentElement)},sync=function(e){if(typeof e===jr||e instanceof String)try{return checkParseError(parse(e))}catch(e){return e}if(null!=e.childNodes)return e},Load=e=>(e=>typeof e===jr&&/^[\w,\s-]+\.[A-Za-z]{3}$/.test(e)&&e.length<1e4)(e)&&qr&&typeof SVGWindow().fetch===kr?function(e){return new Promise(((t,r)=>{if(typeof e===jr||e instanceof String)fetch(e).then((e=>e.text())).then((e=>checkParseError(parse(e)))).then((e=>e.nodeName===wr?e:e.getElementsByTagName(wr)[0])).then((e=>null==e?r(new Error("valid XML found, but no SVG element")):t(e))).catch((e=>r(e)));else if(e instanceof SVGWindow().Document)return asyncDone(e)}))}(e):sync(e);const save=function(e,t){if((t=Object.assign({download:!1,output:jr,windowStyle:!1,filename:"image.svg"},t)).windowStyle){const t=SVGWindow().document.createElementNS(Gr,Lr);t.setAttribute("type","text/css"),t.innerHTML=function(){const e=[];if(SVGWindow().document.styleSheets)for(let t=0;t<SVGWindow().document.styleSheets.length;t+=1){const r=SVGWindow().document.styleSheets[t];try{const t="cssRules"in r?r.cssRules:r.rules;for(let r=0;r<t.length;r+=1){const n=t[r];"cssText"in n?e.push(n.cssText):e.push(`${n.selectorText} {\n${n.style.cssText}\n}\n`)}}catch(e){console.warn(e)}}return e.join("\n")}(),e.appendChild(t)}const r=function vkXML(e,t){const r=e.replace(/>\s{0,}</g,"><").replace(/</g,"~::~<").replace(/\s*xmlns\:/g,"~::~xmlns:").split("~::~"),n=r.length;let o=!1,s=0,c="";const i=null!=t&&"string"==typeof t?t:"\t",a=["\n"];for(let e=0;e<100;e+=1)a.push(a[e]+i);for(let e=0;e<n;e+=1)r[e].search(/<!/)>-1?(c+=a[s]+r[e],o=!0,(r[e].search(/-->/)>-1||r[e].search(/\]>/)>-1||r[e].search(/!DOCTYPE/)>-1)&&(o=!1)):r[e].search(/-->/)>-1||r[e].search(/\]>/)>-1?(c+=r[e],o=!1):/^<\w/.exec(r[e-1])&&/^<\/\w/.exec(r[e])&&/^<[\w:\-\.\,]+/.exec(r[e-1])==/^<\/[\w:\-\.\,]+/.exec(r[e])[0].replace("/","")?(c+=r[e],o||(s-=1)):r[e].search(/<\w/)>-1&&-1===r[e].search(/<\//)&&-1===r[e].search(/\/>/)?c=c+=o?r[e]:a[s++]+r[e]:r[e].search(/<\w/)>-1&&r[e].search(/<\//)>-1?c=c+=o?r[e]:a[s]+r[e]:r[e].search(/<\//)>-1?c=c+=o?r[e]:a[--s]+r[e]:r[e].search(/\/>/)>-1?c=c+=o?r[e]:a[s]+r[e]:r[e].search(/<\?/)>-1||r[e].search(/xmlns\:/)>-1||r[e].search(/xmlns\=/)>-1?c+=a[s]+r[e]:c+=r[e];return"\n"===c[0]?c.slice(1):c}((new(SVGWindow().XMLSerializer)).serializeToString(e));return t.download&&qr&&!Rr&&function(e,t){const r=new(SVGWindow().Blob)([t],{type:"text/plain"}),n=SVGWindow().document.createElement("a");n.setAttribute("href",SVGWindow().URL.createObjectURL(r)),n.setAttribute("download",e),SVGWindow().document.body.appendChild(n),n.click(),SVGWindow().document.body.removeChild(n)}(t.filename,r),t.output===wr?e:r},setViewBox=(e,...t)=>{const r=1===t.length&&typeof t[0]===jr?t[0]:viewBox$1(...t);return r&&e.setAttribute($r,r),e},getViewBox=function(e){const t=e.getAttribute($r);return null==t?void 0:t.split(" ").map((e=>parseFloat(e)))},convertToViewBox=function(e,t,r){const n=e.createSVGPoint();n.x=t,n.y=r;const o=n.matrixTransform(e.getScreenCTM().inverse());return[o.x,o.y]};var gn=Object.freeze({__proto__:null,setViewBox:setViewBox,getViewBox:getViewBox,convertToViewBox:convertToViewBox});const loadSVG=(e,t)=>{const r=Load(t);if(null!=r)return typeof r.then===kr?r.then((t=>assignSVG(e,t))):assignSVG(e,r)},getFrame=function(e){const t=getViewBox(e);if(void 0!==t)return t;if(typeof e.getBoundingClientRect===kr){const t=e.getBoundingClientRect();return[t.x,t.y,t.width,t.height]}return[]},pn="svg-background-rectangle",stylesheet=function(e,t){let r=function(e){const t=e.getElementsByTagName(Lr);return 0===t.length?void 0:t[0]}(e);return null==r&&(r=this.Constructor(Lr),e.insertBefore(r,e.firstChild)),r.textContent="",r.appendChild(cdata(t)),r};var hn={clear:e=>(Array.from(e.attributes).filter((e=>"xmlns"!==e)).forEach((t=>e.removeAttribute(t.name))),removeChildren(e)),size:setViewBox,setViewBox:setViewBox,getViewBox:getViewBox,padding:function(e,t){const r=getViewBox(e);return void 0!==r&&setViewBox(e,...[-t,-t,2*t,2*t].map(((e,t)=>r[t]+e))),e},background:function(e,t){let r=Array.from(e.childNodes).filter((e=>e.getAttribute(Or)===pn)).shift();return null==r&&(r=this.Constructor("rect",null,...getFrame(e)),r.setAttribute(Or,pn),r.setAttribute(Fr,Vr),e.insertBefore(r,e.firstChild)),r.setAttribute("fill",t),e},getWidth:e=>getFrame(e)[2],getHeight:e=>getFrame(e)[3],stylesheet:function(e,t){return stylesheet.call(this,e,t)},load:loadSVG,save:save};const mn={math:{vector:(...e)=>[...e]}},vn={move:["mousemove","touchmove"],press:["mousedown","touchstart"],release:["mouseup","touchend"],leave:["mouseleave","touchcancel"]},_n=Object.values(vn).reduce(((e,t)=>e.concat(t)),[]),defineGetter=(e,t,r)=>Object.defineProperty(e,t,{get:()=>r,enumerable:!0,configurable:!0}),assignPress=(e,t)=>{["pressX","pressY"].filter((t=>!Object.prototype.hasOwnProperty.call(e,t))).forEach(((r,n)=>defineGetter(e,r,t[n]))),Object.prototype.hasOwnProperty.call(e,"press")||defineGetter(e,"press",mn.math.vector(...t))},TouchEvents=function(e){let t=[];const r=[];Object.keys(vn).forEach((e=>{vn[e].forEach((e=>{r[e]=[]}))}));const n={press:(e,r)=>{t=r,assignPress(e,t)},release:()=>{},leave:()=>{},move:(e,r)=>{e.buttons>0&&void 0===t[0]?t=r:0===e.buttons&&void 0!==t[0]&&(t=[]),assignPress(e,t)}};Object.keys(vn).forEach((t=>{const o=`on${Qr.capitalized(t)}`;Object.defineProperty(e,o,{set:o=>{null!=o?vn[t].forEach((s=>{const handlerFunc=r=>{const s=null!=r.touches?r.touches[0]:r;if(void 0!==s){const o=convertToViewBox(e,s.clientX,s.clientY).map((e=>Number.isNaN(e)?void 0:e));["x","y"].filter((e=>!Object.prototype.hasOwnProperty.call(r,e))).forEach(((e,t)=>defineGetter(r,e,o[t]))),Object.prototype.hasOwnProperty.call(r,"position")||defineGetter(r,"position",mn.math.vector(...o)),n[t](r,o)}o(r)};e.addEventListener&&(r[s].push(handlerFunc),e.addEventListener(s,handlerFunc))})):(t=>{vn[t].forEach((t=>r[t].forEach((r=>e.removeEventListener(t,r)))))})(t)},enumerable:!0})})),Object.defineProperty(e,"off",{value:()=>((e,t)=>_n.forEach((r=>{t[r].forEach((t=>e.removeEventListener(r,t))),t[r]=[]})))(e,r)})};var UUID=()=>Math.random().toString(36).replace(/[^a-z]+/g,"").concat("aaaaa").substr(0,5);const yn=[["cx","cy"],["x","y"]],controlPoint=function(e,t={}){const r=[0,0],n={selected:!1,svg:void 0,updatePosition:e=>e},updateSVG=()=>{n.svg&&(n.svg.parentNode||e.appendChild(n.svg),yn.filter((e=>null!=n.svg[e[0]])).forEach((e=>e.forEach(((e,t)=>{n.svg.setAttribute(e,r[t])})))))},o=new Proxy(r,{set:(e,t,r)=>(e[t]=r,updateSVG(),!0)}),setPosition=function(...e){coordinates(...svg_flatten_arrays(...e)).forEach(((e,t)=>{r[t]=e})),updateSVG(),typeof r.delegate===kr&&r.delegate.apply(r.pointsContainer,[o,r.pointsContainer])};return r.delegate=void 0,r.setPosition=setPosition,r.onMouseMove=e=>n.selected?setPosition(n.updatePosition(e)):void 0,r.onMouseUp=()=>{n.selected=!1},r.distance=e=>Math.sqrt(svg_distanceSq2(e,r)),["x","y"].forEach(((e,t)=>Object.defineProperty(r,e,{get:()=>r[t],set:e=>{r[t]=e}}))),[wr,"updatePosition","selected"].forEach((e=>Object.defineProperty(r,e,{get:()=>n[e],set:t=>{n[e]=t}}))),Object.defineProperty(r,"remove",{value:()=>{var e;(e=n.svg)&&e.parentNode&&e.parentNode.removeChild(e),r.delegate=void 0}}),o},controls=function(e,t,r){let n,o;const s=Array.from(Array(t)).map((()=>controlPoint(e,r))),protocol=e=>typeof o===kr?o.call(s,e,n,s):void 0;s.forEach((e=>{e.delegate=protocol,e.pointsContainer=s}));e.onPress=function(e){s.length>0&&(n=s.map(((t,r)=>({i:r,d:svg_distanceSq2(t,[e.x,e.y])}))).sort(((e,t)=>e.d-t.d)).shift().i,s[n].selected=!0)},e.onMove=function(e){s.forEach((t=>t.onMouseMove(e)))},e.onRelease=function(){s.forEach((e=>e.onMouseUp())),n=void 0},Object.defineProperty(s,"selectedIndex",{get:()=>n}),Object.defineProperty(s,"selected",{get:()=>s[n]}),Object.defineProperty(s,"add",{value:t=>{s.push(controlPoint(e,t))}}),s.removeAll=()=>{for(;s.length>0;)s.pop().remove()};const c={onChange:(e,t)=>{if(o=e,!0===t){const t=s.length-1;e.call(s,s[t],t,s)}},position:e=>s.forEach(((t,r)=>t.setPosition(e.call(s,t,r,s)))),svg:e=>s.forEach(((t,r)=>{t.svg=e.call(s,t,r,s)}))};return Object.keys(c).forEach((e=>{s[e]=function(){return typeof arguments[0]===kr&&c[e](...arguments),s}})),s.parent=function(e){return null!=e&&null!=e.appendChild&&s.forEach((t=>{e.appendChild(t.svg)})),s},s},applyControlsToSVG=e=>{e.controls=(...t)=>controls.call(e,e,...t)};var bn={svg:{args:(...e)=>[viewBox$1(coordinates(...e))].filter((e=>null!=e)),methods:hn,init:(e,...t)=>{t.filter((e=>typeof e===jr)).forEach((t=>loadSVG(e,t))),t.filter((e=>null!=e)).filter((e=>typeof e.appendChild===kr)).forEach((t=>t.appendChild(e))),TouchEvents(e),function(e){let t;const r={};let n,o=0;const removeHandlers=()=>{SVGWindow().cancelAnimationFrame&&SVGWindow().cancelAnimationFrame(n),Object.keys(r).forEach((e=>delete r[e])),t=void 0,o=0};Object.defineProperty(e,"play",{set:e=>{if(removeHandlers(),null==e)return;const s=UUID();r[s]=c=>{t||(t=c,o=0),e({time:.001*(c-t),frame:o}),o+=1,r[s]&&(n=SVGWindow().requestAnimationFrame(r[s]))},SVGWindow().requestAnimationFrame&&(n=SVGWindow().requestAnimationFrame(r[s]))},enumerable:!0}),Object.defineProperty(e,"stop",{value:removeHandlers,enumerable:!0})}(e),applyControlsToSVG(e)}}};const loadGroup=(e,...t)=>{const r=t.map((e=>sync(e))).filter((e=>void 0!==e));return r.filter((e=>e.tagName===wr)).forEach((t=>moveChildren(e,t))),r.filter((e=>e.tagName!==wr)).forEach((t=>e.appendChild(t))),e};var En={g:{init:loadGroup,methods:{load:loadGroup}}},xn=Object.assign(Object.create(null),{svg:[$r],line:["x1","y1","x2","y2"],rect:["x","y","width","height"],circle:["cx","cy","r"],ellipse:["cx","cy","rx","ry"],polygon:[zr],polyline:[zr],path:["d"],text:["x","y"],mask:[Cr],symbol:[Cr],clipPath:[Cr,"clip-rule"],marker:[Cr,"markerHeight","markerUnits","markerWidth","orient","refX","refY"],linearGradient:["x1","x2","y1","y2"],radialGradient:["cx","cy","r","fr","fx","fy"],stop:["offset","stop-color","stop-opacity"],pattern:["patternContentUnits","patternTransform","patternUnits"]});const setRadius=(e,t)=>(e.setAttribute(xn.circle[2],t),e),setOrigin=(e,t,r)=>([...coordinates(...svg_flatten_arrays(t,r)).slice(0,2)].forEach(((t,r)=>e.setAttribute(xn.circle[r],t))),e);var On={circle:{args:(e,t,r,n)=>{const o=coordinates(...svg_flatten_arrays(e,t,r,n));switch(o.length){case 0:case 1:return[,,...o];case 2:case 3:return o;default:return((e,t,r,n)=>[e,t,svg_distance2([e,t],[r,n])])(...o)}},methods:{radius:setRadius,setRadius:setRadius,origin:setOrigin,setOrigin:setOrigin,center:setOrigin,setCenter:setOrigin,position:setOrigin,setPosition:setOrigin}}};const setRadii=(e,t,r)=>([,,t,r].forEach(((t,r)=>e.setAttribute(xn.ellipse[r],t))),e),setCenter=(e,t,r)=>([...coordinates(...svg_flatten_arrays(t,r)).slice(0,2)].forEach(((t,r)=>e.setAttribute(xn.ellipse[r],t))),e);var kn={ellipse:{args:(e,t,r,n)=>{const o=coordinates(...svg_flatten_arrays(e,t,r,n)).slice(0,4);switch(o.length){case 0:case 1:case 2:return[,,...o];default:return o}},methods:{radius:setRadii,setRadius:setRadii,origin:setCenter,setOrigin:setCenter,center:setCenter,setCenter:setCenter,position:setCenter,setPosition:setCenter}}};const Args$1=(...e)=>coordinates(...svg_semi_flatten_arrays(...e)).slice(0,4);var Mn={line:{args:Args$1,methods:{setPoints:(e,...t)=>(Args$1(...t).forEach(((t,r)=>e.setAttribute(xn.line[r],t))),e)}}};const An=/[MmLlSsQqLlHhVvCcSsQqTtAaZz]/g,jn=/-?[0-9]*\.?\d+/g,Pn={m:"move",l:"line",v:"vertical",h:"horizontal",a:"ellipse",c:"curve",s:"smoothCurve",q:"quadCurve",t:"smoothQuadCurve",z:"close"};Object.keys(Pn).forEach((e=>{const t=Pn[e];Pn[e.toUpperCase()]=t.charAt(0).toUpperCase()+t.slice(1)}));const getD=e=>{const t=e.getAttribute("d");return null==t?"":t},appendPathCommand=(e,t,...r)=>(e.setAttribute("d",`${getD(e)}${t}${svg_flatten_arrays(...r).join(" ")}`),e),getCommands=e=>function(e){const t=[];let r;for(;null!==(r=An.exec(e));)t.push(r);return t.map((t=>({command:e[t.index],index:t.index}))).reduceRight(((t,r)=>{const n=e.substring(r.index,t.length?t[t.length-1].index:e.length);return t.concat([{command:r.command,index:r.index,chunk:n.length>0?n.substr(1,n.length-1):n}])}),[]).reverse().map((e=>{const t=e.chunk.match(jn);return e.en=Pn[e.command],e.values=t?t.map(parseFloat):[],delete e.chunk,e}))}(getD(e)),wn={addCommand:appendPathCommand,appendCommand:appendPathCommand,clear:e=>(e.removeAttribute("d"),e),getCommands:getCommands,get:getCommands,getD:e=>e.getAttribute("d")};Object.keys(Pn).forEach((e=>{wn[Pn[e]]=(t,...r)=>appendPathCommand(t,e,...r)}));var Sn={path:{methods:wn}};const setRectSize=(e,t,r)=>([,,t,r].forEach(((t,r)=>e.setAttribute(xn.rect[r],t))),e),setRectOrigin=(e,t,r)=>([...coordinates(...svg_flatten_arrays(t,r)).slice(0,2)].forEach(((t,r)=>e.setAttribute(xn.rect[r],t))),e),fixNegatives=function(e){return[0,1].forEach((t=>{e[2+t]<0&&(void 0===e[0+t]&&(e[0+t]=0),e[0+t]+=e[2+t],e[2+t]=-e[2+t])})),e};var Cn={rect:{args:(e,t,r,n)=>{const o=coordinates(...svg_flatten_arrays(e,t,r,n)).slice(0,4);switch(o.length){case 0:case 1:case 2:case 3:return fixNegatives([,,...o]);default:return fixNegatives(o)}},methods:{origin:setRectOrigin,setOrigin:setRectOrigin,center:setRectOrigin,setCenter:setRectOrigin,size:setRectSize,setSize:setRectSize}}},Ln={style:{init:(e,t)=>{e.textContent="",e.appendChild(cdata(t))},methods:{setTextContent:(e,t)=>(e.textContent="",e.appendChild(cdata(t)),e)}}},$n={text:{args:(e,t,r)=>coordinates(...svg_flatten_arrays(e,t,r)).slice(0,2),init:(e,t,r,n,o)=>{const s=[t,r,n,o].filter((e=>typeof e===jr)).shift();s&&e.appendChild(SVGWindow().document.createTextNode(s))}}};const makeIDString=function(){return Array.from(arguments).filter((e=>typeof e===jr||e instanceof String)).shift()||UUID()},maskArgs=(...e)=>[makeIDString(...e)];var Nn={mask:{args:maskArgs},clipPath:{args:maskArgs},symbol:{args:maskArgs},marker:{args:maskArgs,methods:{size:setViewBox,setViewBox:setViewBox}}};const getPoints=e=>{const t=e.getAttribute(zr);return null==t?"":t},polyString=function(){return Array.from(Array(Math.floor(arguments.length/2))).map(((e,t)=>`${arguments[2*t+0]},${arguments[2*t+1]}`)).join(" ")},stringifyArgs=(...e)=>[polyString(...coordinates(...svg_semi_flatten_arrays(...e)))],setPoints=(e,...t)=>(e.setAttribute(zr,stringifyArgs(...t)[0]),e),addPoint=(e,...t)=>(e.setAttribute(zr,[getPoints(e),stringifyArgs(...t)[0]].filter((e=>""!==e)).join(" ")),e),Args=function(...e){return 1===e.length&&typeof e[0]===jr?[e[0]]:stringifyArgs(...e)};var zn={polyline:{args:Args,methods:{setPoints:setPoints,addPoint:addPoint}},polygon:{args:Args,methods:{setPoints:setPoints,addPoint:addPoint}}},Fn=Object.assign({},bn,En,On,kn,Mn,Sn,Cn,Ln,$n,Nn,zn),Vn={presentation:["color","color-interpolation","cursor","direction","display","fill","fill-opacity","fill-rule","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","image-rendering","letter-spacing","opacity","overflow","paint-order","pointer-events","preserveAspectRatio","shape-rendering","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","tabindex","transform-origin","user-select","vector-effect","visibility"],animation:["accumulate","additive","attributeName","begin","by","calcMode","dur","end","from","keyPoints","keySplines","keyTimes","max","min","repeatCount","repeatDur","restart","to","values"],effects:["azimuth","baseFrequency","bias","color-interpolation-filters","diffuseConstant","divisor","edgeMode","elevation","exponent","filter","filterRes","filterUnits","flood-color","flood-opacity","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","lighting-color","limitingConeAngle","mode","numOctaves","operator","order","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","primitiveUnits","radius","result","seed","specularConstant","specularExponent","stdDeviation","stitchTiles","surfaceScale","targetX","targetY","type","xChannelSelector","yChannelSelector"],text:["dx","dy","alignment-baseline","baseline-shift","dominant-baseline","lengthAdjust","method","overline-position","overline-thickness","rotate","spacing","startOffset","strikethrough-position","strikethrough-thickness","text-anchor","text-decoration","text-rendering","textLength","underline-position","underline-thickness","word-spacing","writing-mode"],gradient:["gradientTransform","gradientUnits","spreadMethod"]};Object.values(Wr).reduce(((e,t)=>e.concat(t)),[]).filter((e=>void 0===xn[e])).forEach((e=>{xn[e]=[]})),[[[wr,"defs","g"].concat(Wr.v,Wr.t),Vn.presentation],[["filter"],Vn.effects],[Wr.cT.concat("text"),Vn.text],[Wr.cF,Vn.effects],[Wr.cG,Vn.gradient]].forEach((e=>e[0].forEach((t=>{xn[t]=xn[t].concat(e[1])}))));const getClassList=e=>{if(null==e)return[];const t=e.getAttribute(Or);return null==t?[]:t.split(" ").filter((e=>""!==e))};var In={addClass:(e,t)=>{const r=getClassList(e).filter((e=>e!==t));r.push(t),e.setAttributeNS(null,Or,r.join(" "))},removeClass:(e,t)=>{const r=getClassList(e).filter((e=>e!==t));e.setAttributeNS(null,Or,r.join(" "))},setClass:(e,t)=>{e.setAttributeNS(null,Or,t)},setId:(e,t)=>{e.setAttributeNS(null,Cr,t)}};const getAttr=e=>{const t=e.getAttribute(Nr);return null==t||""===t?void 0:t},Bn={clearTransform:e=>(e.removeAttribute(Nr),e)};["translate","rotate","scale","matrix"].forEach((e=>{Bn[e]=(t,...r)=>t.setAttribute(Nr,[getAttr(t),`${e}(${r.join(" ")})`].filter((e=>void 0!==e)).join(" "))}));const Tn={};["clip-path","mask","symbol","marker-end","marker-mid","marker-start"].forEach((e=>{Tn[Qr.toCamel(e)]=(t,r)=>t.setAttribute(e,function(e){if(null==e)return"";if(typeof e===jr)return"url"===e.slice(0,3)?e:`url(#${e})`;if(null!=e.getAttribute)return`url(#${e.getAttribute(Cr)})`;return""}(r))}));const qn={};Wr.v.push(...Object.keys(sn)),Object.keys(sn).forEach((e=>{sn[e].attributes=void 0===sn[e].attributes?[...Vn.presentation]:sn[e].attributes.concat(Vn.presentation)})),Object.assign(qn,Fn,sn),Object.keys(Wr).forEach((e=>Wr[e].filter((e=>void 0===qn[e])).forEach((e=>{qn[e]={}}))));const passthrough=function(){return Array.from(arguments)};Object.keys(qn).forEach((e=>{qn[e].nodeName||(qn[e].nodeName=e),qn[e].init||(qn[e].init=passthrough),qn[e].args||(qn[e].args=passthrough),qn[e].methods||(qn[e].methods={}),qn[e].attributes||(qn[e].attributes=xn[e]||[])}));const assignMethods=(e,t)=>{e.forEach((e=>Object.keys(t).forEach((r=>{qn[e].methods[r]=function(){return t[r](...arguments),arguments[0]}}))))};assignMethods(svg_flatten_arrays(Wr.t,Wr.v,Wr.g,Wr.s,Wr.p,Wr.i,Wr.h,Wr.d),In),assignMethods(svg_flatten_arrays(Wr.t,Wr.v,Wr.g,Wr.s,Wr.p,Wr.i,Wr.h,Wr.d),un),assignMethods(svg_flatten_arrays(Wr.v,Wr.g,Wr.s),Bn),assignMethods(svg_flatten_arrays(Wr.t,Wr.v,Wr.g),Tn);const Rn={svg:{version:"1.1",xmlns:Gr},style:{type:"text/css"}},Un={},constructor=(e,t,...r)=>{const n=SVGWindow().document.createElementNS(Gr,qn[e].nodeName);return t&&t.appendChild(n),((e,t)=>{Rn[t]&&Object.keys(Rn[t]).forEach((r=>e.setAttribute(r,Rn[t][r])))})(n,e),qn[e].init(n,...r),qn[e].args(...r).forEach(((t,r)=>{null!=qn[e].attributes[r]&&n.setAttribute(qn[e].attributes[r],t)})),qn[e].attributes.forEach((e=>{Object.defineProperty(n,Qr.toCamel(e),{value:function(){return n.setAttribute(e,...arguments),n}})})),Object.keys(qn[e].methods).forEach((t=>Object.defineProperty(n,t,{value:function(){return qn[e].methods[t].call(Un,n,...arguments)}}))),fn[e]&&fn[e].forEach((e=>{const value=function(){return constructor(e,n,...arguments)};qn[e].static&&Object.keys(qn[e].static).forEach((t=>{value[t]=function(){return qn[e].static[t](n,...arguments)}})),Object.defineProperty(n,e,{value:value})})),n};Un.Constructor=constructor;const Dn={};Object.keys(Wr).forEach((e=>Wr[e].forEach((e=>{Dn[e]=(...t)=>constructor(e,null,...t)}))));const link_rabbitear_math=(e,t)=>{["segment","circle","ellipse","rect","polygon"].filter((e=>t[e]&&t[e].prototype)).forEach((r=>{t[r].prototype.svg=function(){return e.path(this.svgPath())}})),mn.math.vector=t.vector},initialize=function(e,...t){t.filter((e=>typeof e===kr)).forEach((t=>t.call(e,e)))};xr.init=function(){const e=constructor(wr,null,...arguments);return"loading"===SVGWindow().document.readyState?SVGWindow().document.addEventListener("DOMContentLoaded",(()=>initialize(e,...arguments))):initialize(e,...arguments),e},SVG.NS=Gr,SVG.linker=function(e){e.graph&&e.origami&&(e.svg=this,link_rabbitear_math(this,e),((e,t)=>{const r="origami";qn.origami={nodeName:"g",init:function(e,...r){return t.graph.svg.drawInto(e,...r)},args:()=>[],methods:qn.g.methods,attributes:qn.g.attributes,static:{}},Object.keys(t.graph.svg).forEach((e=>{qn.origami.static[e]=(r,...n)=>{const o=t.graph.svg[e](...n);return r.appendChild(o),o}})),fn.origami=[...fn.g],fn.svg.push(r),fn.g.push(r),e.origami=(...e)=>constructor(r,null,...e),Object.keys(t.graph.svg).forEach((r=>{e.origami[r]=t.graph.svg[r]}))})(this,e))}.bind(SVG),Object.assign(SVG,Dn),SVG.core=Object.assign(Object.create(null),{load:Load,save:save,coordinates:coordinates,flatten:svg_flatten_arrays,attributes:xn,children:fn,cdata:cdata},Qr,In,un,Zr,Bn,gn),Object.defineProperty(SVG,"window",{enumerable:!1,set:e=>{var t;(t=e).document||(t.document=(e=>(new e.DOMParser).parseFromString("<!DOCTYPE html><title>.</title>","text/html"))(t)),Dr.window=t,Dr.window}});const compileShader=(e,t,r)=>{const n=e.createShader(r);if(e.shaderSource(n,t),e.compileShader(n),!e.getShaderParameter(n,e.COMPILE_STATUS))throw new Error(e.getShaderInfoLog(n));return n};var Gn=Object.assign(Object.create(null),{createProgram:(e,t,r)=>((e,t,r)=>{const n=e.createProgram();if(e.attachShader(n,t),e.attachShader(n,r),e.linkProgram(n),!e.getProgramParameter(n,e.LINK_STATUS))throw new Error(e.getProgramInfoLog(n));return e.deleteShader(t),e.deleteShader(r),n})(e,compileShader(e,t,e.VERTEX_SHADER),compileShader(e,r,e.FRAGMENT_SHADER)),initialize:(e,t)=>{const r=[null,"webgl","webgl2"],n=window.devicePixelRatio||1;if(e.width=e.clientWidth*n,e.height=e.clientHeight*n,t)return{gl:e.getContext(r[t]),version:t};const o=e.getContext(r[2]);if(o)return{gl:o,version:2};const s=e.getContext(r[1]);if(s)return{gl:s,version:1};throw new Error("WebGl not Supported")}});const Wn=Object.assign(k,Nt,{math:Ce.core,axiom:axiom,diagram:Dt,layer:sr,singleVertex:ir,text:ar,webgl:Gn});return Object.keys(Ce).filter((e=>"core"!==e)).forEach((e=>{Wn[e]=Ce[e]})),Object.defineProperty(Wn,"use",{enumerable:!1,value:function(e){null!=e&&"function"==typeof e.linker&&e.linker(this)}.bind(Wn)}),x||(Wn.use(FOLDtoSVG),Wn.use(SVG)),Object.defineProperty(Wn,"window",{enumerable:!1,set:e=>{var t;(t=e).document||(t.document=(e=>(new e.DOMParser).parseFromString("<!DOCTYPE html><title>.</title>","text/html"))(t)),O.window=t,O.window,SVG.window=e}}),Wn}));
