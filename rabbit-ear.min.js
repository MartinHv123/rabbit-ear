/* Rabbit Ear 0.9.33 alpha 2023-02-02 (c) Kraft, MIT License */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).ear=t()}(this,(function(){"use strict";const e="undefined",t="number",r="object",n="index",o="vertices",s="edges",a="faces",i="boundaries",c="vertices_coords",l="edges_vertices",d="faces_edges",u="edges_assignment",m="edges_foldAngle",p="faces_layer",g="boundary",h="front",v="back",_="foldedForm",y="black",b="white",E="none",x=typeof window!==e&&typeof window.document!==e;typeof process!==e&&null!=process.versions&&process.versions.node;const k=typeof self===r&&self.constructor&&"DedicatedWorkerGlobalScope"===self.constructor.name;var A="graph could not planarize",O="manifold required",M="cycle not allowed",w="planar boundary detection error, bad graph",j="circular edges not allowed",P="replace() index < value. indices parameter modified",S="replace() generated undefined",C="foldAngles cannot be determined from flat-folded faces without an assignment",z="WebGl not Supported",F="only convex faces are supported",L="window not set; if using node/deno include package @xmldom/xmldom and set ear.window = xmldom",N="non-convex triangulation requires vertices_coords";const $={window:void 0};x&&($.window=window);const RabbitEarWindow=()=>{if(void 0===$.window)throw new Error(L);return $.window};var V=Object.create(null);const I=1e-6,T=180/Math.PI,B=Math.PI/180,q=2*Math.PI,R=Object.freeze({__proto__:null,EPSILON:I,R2D:T,D2R:B,TWO_PI:q}),fnTrue=()=>!0,fnSquare=e=>e*e,fnAdd=(e,t)=>e+(t||0),fnNotUndefined=e=>void 0!==e,fnVec2Angle=e=>Math.atan2(e[1],e[0]),fnToVec2=e=>[Math.cos(e),Math.sin(e)],fnEpsilonEqual=(e,t,r=I)=>Math.abs(e-t)<r,fnEpsilonSort=(e,t,r=I)=>fnEpsilonEqual(e,t,r)?0:Math.sign(t-e),fnEpsilonEqualVectors=(e,t,r=I)=>{for(let n=0;n<Math.max(e.length,t.length);n+=1)if(!fnEpsilonEqual(e[n]||0,t[n]||0,r))return!1;return!0},include=(e,t=I)=>e>-t,exclude=(e,t=I)=>e>t,U=fnTrue,D=fnTrue,G=include,W=exclude,includeS=(e,t=I)=>e>-t&&e<1+t,excludeS=(e,t=I)=>e>t&&e<1-t,clampRay=e=>e<-I?0:e,clampSegment=e=>e<-I?0:e>1.000001?1:e,Z=Object.freeze({__proto__:null,fnTrue:fnTrue,fnSquare:fnSquare,fnAdd:fnAdd,fnNotUndefined:fnNotUndefined,fnAnd:(e,t)=>e&&t,fnCat:(e,t)=>e.concat(t),fnVec2Angle:fnVec2Angle,fnToVec2:fnToVec2,fnEqual:(e,t)=>e===t,fnEpsilonEqual:fnEpsilonEqual,fnEpsilonSort:fnEpsilonSort,fnEpsilonEqualVectors:fnEpsilonEqualVectors,include:include,exclude:exclude,includeL:U,excludeL:D,includeR:G,excludeR:W,includeS:includeS,excludeS:excludeS,clampLine:e=>e,clampRay:clampRay,clampSegment:clampSegment}),magnitude=e=>Math.sqrt(e.map(fnSquare).reduce(fnAdd,0)),magnitude2=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]),magnitude3=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]),magSquared=e=>e.map(fnSquare).reduce(fnAdd,0),normalize=e=>{const t=magnitude(e);return 0===t?e:e.map((e=>e/t))},normalize2=e=>{const t=magnitude2(e);return 0===t?e:[e[0]/t,e[1]/t]},normalize3=e=>{const t=magnitude3(e);return 0===t?e:[e[0]/t,e[1]/t,e[2]/t]},scale=(e,t)=>e.map((e=>e*t)),scale2=(e,t)=>[e[0]*t,e[1]*t],scale3=(e,t)=>[e[0]*t,e[1]*t,e[2]*t],add=(e,t)=>e.map(((e,r)=>e+(t[r]||0))),add2=(e,t)=>[e[0]+t[0],e[1]+t[1]],add3=(e,t)=>[e[0]+t[0],e[1]+t[1],e[2]+t[2]],subtract=(e,t)=>e.map(((e,r)=>e-(t[r]||0))),subtract2=(e,t)=>[e[0]-t[0],e[1]-t[1]],subtract3=(e,t)=>[e[0]-t[0],e[1]-t[1],e[2]-t[2]],dot=(e,t)=>e.map(((r,n)=>e[n]*t[n])).reduce(fnAdd,0),dot2=(e,t)=>e[0]*t[0]+e[1]*t[1],midpoint=(e,t)=>e.map(((e,r)=>(e+t[r])/2)),average=function(){if(0===arguments.length)return[];const e=arguments[0].length>0?arguments[0].length:0,t=Array(e).fill(0);return Array.from(arguments).forEach((e=>t.forEach(((r,n)=>{t[n]+=e[n]||0})))),t.map((e=>e/arguments.length))},lerp=(e,t,r)=>{const n=1-r;return e.map(((e,o)=>e*n+(t[o]||0)*r))},cross2=(e,t)=>e[0]*t[1]-e[1]*t[0],cross3=(e,t)=>[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]],distance=(e,t)=>Math.sqrt(e.map(((r,n)=>(e[n]-t[n])**2)).reduce(fnAdd,0)),distance2=(e,t)=>{const r=e[0]-t[0],n=e[1]-t[1];return Math.sqrt(r*r+n*n)},flip=e=>e.map((e=>-e)),rotate90=e=>[-e[1],e[0]],rotate270=e=>[e[1],-e[0]],degenerate=(e,t=I)=>e.map((e=>Math.abs(e))).reduce(fnAdd,0)<t,parallelNormalized=(e,t,r=I)=>1-Math.abs(dot(e,t))<r,parallel=(e,t,r=I)=>parallelNormalized(normalize(e),normalize(t),r),J=Object.freeze({__proto__:null,magnitude:magnitude,magnitude2:magnitude2,magnitude3:magnitude3,magSquared:magSquared,normalize:normalize,normalize2:normalize2,normalize3:normalize3,scale:scale,scale2:scale2,scale3:scale3,add:add,add2:add2,add3:add3,subtract:subtract,subtract2:subtract2,subtract3:subtract3,dot:dot,dot2:dot2,dot3:(e,t)=>e[0]*t[0]+e[1]*t[1]+e[2]*t[2],midpoint:midpoint,midpoint2:(e,t)=>scale2(add2(e,t),.5),midpoint3:(e,t)=>scale3(add3(e,t),.5),average:average,lerp:lerp,cross2:cross2,cross3:cross3,distance:distance,distance2:distance2,distance3:(e,t)=>{const r=e[0]-t[0],n=e[1]-t[1],o=e[2]-t[2];return Math.sqrt(r*r+n*n+o*o)},flip:flip,rotate90:rotate90,rotate270:rotate270,degenerate:degenerate,parallelNormalized:parallelNormalized,parallel:parallel,parallel2:(e,t,r=I)=>Math.abs(cross2(e,t))<r}),resize=(e,t)=>t.length===e?t:Array(e).fill(0).map(((e,r)=>t[r]?t[r]:e)),resizeUp=(e,t)=>[e,t].map((r=>resize(Math.max(e.length,t.length),r))),countPlaces=function(e){const t=`${e}`.match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);return t?Math.max(0,(t[1]?t[1].length:0)-(t[2]?+t[2]:0)):0},cleanNumber=function(e,t=15){if("number"!=typeof e)return e;const r=parseFloat(e.toFixed(t));return countPlaces(r)===Math.min(t,countPlaces(e))?e:r},isIterable=e=>null!=e&&"function"==typeof e[Symbol.iterator],semiFlattenArrays=function(){switch(arguments.length){case void 0:case 0:return Array.from(arguments);case 1:return isIterable(arguments[0])&&"string"!=typeof arguments[0]?semiFlattenArrays(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>isIterable(e)?[...semiFlattenArrays(e)]:e))}},flattenArrays=function(){switch(arguments.length){case void 0:case 0:return Array.from(arguments);case 1:return isIterable(arguments[0])&&"string"!=typeof arguments[0]?flattenArrays(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>isIterable(e)?[...flattenArrays(e)]:e)).reduce(((e,t)=>e.concat(t)),[])}},Y=Object.freeze({__proto__:null,resize:resize,resizeUp:resizeUp,cleanNumber:cleanNumber,semiFlattenArrays:semiFlattenArrays,flattenArrays:flattenArrays}),smallestComparisonSearch=(e,t,r)=>{const n=t.map(((t,n)=>({o:t,i:n,d:r(e,t)})));let o,s=1/0;for(let e=0;e<n.length;e+=1)n[e].d<s&&(o=e,s=n[e].d);return o},minimum2DPointIndex=(e,t=I)=>{const r=((e,t=fnEpsilonSort,r=I)=>{let n=[0];for(let o=1;o<e.length;o+=1)switch(t(e[o][0],e[n[0]][0],r)){case 0:n.push(o);break;case 1:n=[o]}return n})(e,fnEpsilonSort,t);let n=0;for(let t=1;t<r.length;t+=1)e[r[t]][1]<e[r[n]][1]&&(n=t);return r[n]},nearestPointOnLine=(e,t,r,n,o=I)=>{t=resize(e.length,t),r=resize(e.length,r);const s=magSquared(e),a=subtract(r,t),i=n(dot(e,a)/s,o);return add(t,scale(e,i))},nearestPointOnPolygon=(e,t)=>{const r=e.map(((e,t,r)=>subtract(r[(t+1)%r.length],e)));return e.map(((e,n)=>nearestPointOnLine(r[n],e,t,clampSegment))).map(((e,r)=>({point:e,i:r,distance:distance(e,t)}))).sort(((e,t)=>e.distance-t.distance)).shift()},nearestPointOnCircle=(e,t,r)=>add(t,scale(normalize(subtract(r,t)),e)),H=Object.freeze({__proto__:null,smallestComparisonSearch:smallestComparisonSearch,minimum2DPointIndex:minimum2DPointIndex,nearestPoint2:(e,t)=>{const r=smallestComparisonSearch(e,t,distance2);return void 0===r?void 0:t[r]},nearestPoint:(e,t)=>{const r=smallestComparisonSearch(e,t,distance);return void 0===r?void 0:t[r]},nearestPointOnLine:nearestPointOnLine,nearestPointOnPolygon:nearestPointOnPolygon,nearestPointOnCircle:nearestPointOnCircle}),clusterIndicesOfSortedNumbers=(e,t=I)=>{const r=[[0]];let n=0;for(let o=1;o<e.length;o+=1)fnEpsilonEqual(e[o],e[o-1],t)?r[n].push(o):(n=r.length,r.push([o]));return r},radialSortPointIndices=(e=[],t=I)=>{const r=minimum2DPointIndex(e,t),n=e.map((t=>subtract2(t,e[r]))).map((e=>normalize2(e))).map((e=>dot2([0,1],e))),o=n.map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).map((e=>e.i)).filter((e=>e!==r));return[[r]].concat(clusterIndicesOfSortedNumbers(o.map((e=>n[e])),t).map((e=>e.map((e=>o[e])))).map((t=>1===t.length?t:t.map((t=>({i:t,len:distance2(e[t],e[r])}))).sort(((e,t)=>e.len-t.len)).map((e=>e.i)))))},X=Object.freeze({__proto__:null,sortPointsAlongVector2:(e,t)=>e.map((e=>({point:e,d:e[0]*t[0]+e[1]*t[1]}))).sort(((e,t)=>e.d-t.d)).map((e=>e.point)),clusterIndicesOfSortedNumbers:clusterIndicesOfSortedNumbers,radialSortPointIndices:radialSortPointIndices}),K=[1,0,0,1],Q=K.concat(0,0),determinant2=e=>e[0]*e[3]-e[1]*e[2],makeMatrix2Rotate=(e,t=[0,0])=>{const r=Math.cos(e),n=Math.sin(e);return[r,n,-n,r,t[0],t[1]]},makeMatrix2Reflect=(e,t=[0,0])=>{const r=Math.atan2(e[1],e[0]),n=Math.cos(r),o=Math.sin(r),s=Math.cos(-r),a=Math.sin(-r),i=n*s+o*a,c=n*-a+o*s,l=o*s+-n*a,d=o*-a+-n*s;return[i,c,l,d,t[0]+i*-t[0]+-t[1]*l,t[1]+c*-t[0]+-t[1]*d]},ee=Object.freeze({__proto__:null,identity2x2:K,identity2x3:Q,multiplyMatrix2Vector2:(e,t)=>[e[0]*t[0]+e[2]*t[1]+e[4],e[1]*t[0]+e[3]*t[1]+e[5]],multiplyMatrix2Line2:(e,t,r)=>({vector:[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1]],origin:[e[0]*r[0]+e[2]*r[1]+e[4],e[1]*r[0]+e[3]*r[1]+e[5]]}),multiplyMatrices2:(e,t)=>[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1],e[0]*t[2]+e[2]*t[3],e[1]*t[2]+e[3]*t[3],e[0]*t[4]+e[2]*t[5]+e[4],e[1]*t[4]+e[3]*t[5]+e[5]],determinant2:determinant2,invertMatrix2:e=>{const t=determinant2(e);if(!(Math.abs(t)<1e-6||Number.isNaN(t))&&Number.isFinite(e[4])&&Number.isFinite(e[5]))return[e[3]/t,-e[1]/t,-e[2]/t,e[0]/t,(e[2]*e[5]-e[3]*e[4])/t,(e[1]*e[4]-e[0]*e[5])/t]},makeMatrix2Translate:(e=0,t=0)=>K.concat(e,t),makeMatrix2Scale:(e=[1,1],t=[0,0])=>[e[0],0,0,e[1],e[0]*-t[0]+t[0],e[1]*-t[1]+t[1]],makeMatrix2Rotate:makeMatrix2Rotate,makeMatrix2Reflect:makeMatrix2Reflect}),te=Object.freeze([1,0,0,0,1,0,0,0,1]),re=Object.freeze(te.concat(0,0,0)),isIdentity3x4=e=>re.map(((t,r)=>Math.abs(t-e[r])<I)).reduce(((e,t)=>e&&t),!0),multiplyMatrix3Vector3=(e,t)=>[e[0]*t[0]+e[3]*t[1]+e[6]*t[2]+e[9],e[1]*t[0]+e[4]*t[1]+e[7]*t[2]+e[10],e[2]*t[0]+e[5]*t[1]+e[8]*t[2]+e[11]],multiplyMatrix3Line3=(e,t,r)=>({vector:[e[0]*t[0]+e[3]*t[1]+e[6]*t[2],e[1]*t[0]+e[4]*t[1]+e[7]*t[2],e[2]*t[0]+e[5]*t[1]+e[8]*t[2]],origin:[e[0]*r[0]+e[3]*r[1]+e[6]*r[2]+e[9],e[1]*r[0]+e[4]*r[1]+e[7]*r[2]+e[10],e[2]*r[0]+e[5]*r[1]+e[8]*r[2]+e[11]]}),multiplyMatrices3=(e,t)=>[e[0]*t[0]+e[3]*t[1]+e[6]*t[2],e[1]*t[0]+e[4]*t[1]+e[7]*t[2],e[2]*t[0]+e[5]*t[1]+e[8]*t[2],e[0]*t[3]+e[3]*t[4]+e[6]*t[5],e[1]*t[3]+e[4]*t[4]+e[7]*t[5],e[2]*t[3]+e[5]*t[4]+e[8]*t[5],e[0]*t[6]+e[3]*t[7]+e[6]*t[8],e[1]*t[6]+e[4]*t[7]+e[7]*t[8],e[2]*t[6]+e[5]*t[7]+e[8]*t[8],e[0]*t[9]+e[3]*t[10]+e[6]*t[11]+e[9],e[1]*t[9]+e[4]*t[10]+e[7]*t[11]+e[10],e[2]*t[9]+e[5]*t[10]+e[8]*t[11]+e[11]],determinant3=e=>e[0]*e[4]*e[8]-e[0]*e[7]*e[5]-e[3]*e[1]*e[8]+e[3]*e[7]*e[2]+e[6]*e[1]*e[5]-e[6]*e[4]*e[2],invertMatrix3=e=>{const t=determinant3(e);if(Math.abs(t)<1e-6||Number.isNaN(t)||!Number.isFinite(e[9])||!Number.isFinite(e[10])||!Number.isFinite(e[11]))return;const r=[e[4]*e[8]-e[7]*e[5],-e[1]*e[8]+e[7]*e[2],e[1]*e[5]-e[4]*e[2],-e[3]*e[8]+e[6]*e[5],e[0]*e[8]-e[6]*e[2],-e[0]*e[5]+e[3]*e[2],e[3]*e[7]-e[6]*e[4],-e[0]*e[7]+e[6]*e[1],e[0]*e[4]-e[3]*e[1],-e[3]*e[7]*e[11]+e[3]*e[8]*e[10]+e[6]*e[4]*e[11]-e[6]*e[5]*e[10]-e[9]*e[4]*e[8]+e[9]*e[5]*e[7],e[0]*e[7]*e[11]-e[0]*e[8]*e[10]-e[6]*e[1]*e[11]+e[6]*e[2]*e[10]+e[9]*e[1]*e[8]-e[9]*e[2]*e[7],-e[0]*e[4]*e[11]+e[0]*e[5]*e[10]+e[3]*e[1]*e[11]-e[3]*e[2]*e[10]-e[9]*e[1]*e[5]+e[9]*e[2]*e[4]],n=1/t;return r.map((e=>e*n))},makeMatrix3Translate=(e=0,t=0,r=0)=>te.concat(e,t,r),singleAxisRotate=(e,t,r,n,o)=>{const s=te.concat([0,1,2].map((e=>t[e]||0))),a=Math.cos(e),i=Math.sin(e);return s[3*r+r]=a,s[3*r+n]=(o?1:-1)*i,s[3*n+r]=(o?-1:1)*i,s[3*n+n]=a,s},makeMatrix3RotateX=(e,t=[0,0,0])=>singleAxisRotate(e,t,1,2,!0),makeMatrix3RotateY=(e,t=[0,0,0])=>singleAxisRotate(e,t,0,2,!1),makeMatrix3RotateZ=(e,t=[0,0,0])=>singleAxisRotate(e,t,0,1,!0),makeMatrix3Rotate=(e,t=[0,0,1],r=[0,0,0])=>{const n=[0,1,2].map((e=>r[e]||0)),[o,s,a]=resize(3,normalize(t)),i=Math.cos(e),c=Math.sin(e),l=1-i,d=te.concat(-n[0],-n[1],-n[2]),u=te.concat(n[0],n[1],n[2]);return multiplyMatrices3(u,multiplyMatrices3([l*o*o+i,l*s*o+a*c,l*a*o-s*c,l*o*s-a*c,l*s*s+i,l*a*s+o*c,l*o*a+s*c,l*s*a-o*c,l*a*a+i,0,0,0],d))},makeMatrix3Scale=(e=[1,1,1],t=[0,0,0])=>[e[0],0,0,0,e[1],0,0,0,e[2],e[0]*-t[0]+t[0],e[1]*-t[1]+t[1],e[2]*-t[2]+t[2]],makeMatrix3ReflectZ=(e,t=[0,0])=>{const r=makeMatrix2Reflect(e,t);return[r[0],r[1],0,r[2],r[3],0,0,0,1,r[4],r[5],0]},ne=Object.freeze({__proto__:null,identity3x3:te,identity3x4:re,isIdentity3x4:isIdentity3x4,multiplyMatrix3Vector3:multiplyMatrix3Vector3,multiplyMatrix3Line3:multiplyMatrix3Line3,multiplyMatrices3:multiplyMatrices3,determinant3:determinant3,invertMatrix3:invertMatrix3,makeMatrix3Translate:makeMatrix3Translate,makeMatrix3RotateX:makeMatrix3RotateX,makeMatrix3RotateY:makeMatrix3RotateY,makeMatrix3RotateZ:makeMatrix3RotateZ,makeMatrix3Rotate:makeMatrix3Rotate,makeMatrix3Scale:makeMatrix3Scale,makeMatrix3ReflectZ:makeMatrix3ReflectZ}),oe=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),multiplyMatrices4=(e,t)=>[e[0]*t[0]+e[4]*t[1]+e[8]*t[2]+e[12]*t[3],e[1]*t[0]+e[5]*t[1]+e[9]*t[2]+e[13]*t[3],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]+e[14]*t[3],e[3]*t[0]+e[7]*t[1]+e[11]*t[2]+e[15]*t[3],e[0]*t[4]+e[4]*t[5]+e[8]*t[6]+e[12]*t[7],e[1]*t[4]+e[5]*t[5]+e[9]*t[6]+e[13]*t[7],e[2]*t[4]+e[6]*t[5]+e[10]*t[6]+e[14]*t[7],e[3]*t[4]+e[7]*t[5]+e[11]*t[6]+e[15]*t[7],e[0]*t[8]+e[4]*t[9]+e[8]*t[10]+e[12]*t[11],e[1]*t[8]+e[5]*t[9]+e[9]*t[10]+e[13]*t[11],e[2]*t[8]+e[6]*t[9]+e[10]*t[10]+e[14]*t[11],e[3]*t[8]+e[7]*t[9]+e[11]*t[10]+e[15]*t[11],e[0]*t[12]+e[4]*t[13]+e[8]*t[14]+e[12]*t[15],e[1]*t[12]+e[5]*t[13]+e[9]*t[14]+e[13]*t[15],e[2]*t[12]+e[6]*t[13]+e[10]*t[14]+e[14]*t[15],e[3]*t[12]+e[7]*t[13]+e[11]*t[14]+e[15]*t[15]],determinant4=e=>{const t=e[10]*e[15]-e[11]*e[14],r=e[9]*e[15]-e[11]*e[13],n=e[9]*e[14]-e[10]*e[13],o=e[8]*e[15]-e[11]*e[12],s=e[8]*e[14]-e[10]*e[12],a=e[8]*e[13]-e[9]*e[12];return e[0]*(e[5]*t-e[6]*r+e[7]*n)-e[1]*(e[4]*t-e[6]*o+e[7]*s)+e[2]*(e[4]*r-e[5]*o+e[7]*a)-e[3]*(e[4]*n-e[5]*s+e[6]*a)},se=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0]),makeMatrix4Translate=(e=0,t=0,r=0)=>[...se,e,t,r,1],singleAxisRotate4=(e,t,r,n,o)=>{const s=makeMatrix4Translate(...t),a=Math.cos(e),i=Math.sin(e);return s[4*r+r]=a,s[4*r+n]=(o?1:-1)*i,s[4*n+r]=(o?-1:1)*i,s[4*n+n]=a,s},ae=Object.freeze({__proto__:null,identity4x4:oe,isIdentity4x4:e=>oe.map(((t,r)=>Math.abs(t-e[r])<I)).reduce(((e,t)=>e&&t),!0),multiplyMatrix4Vector3:(e,t)=>[e[0]*t[0]+e[4]*t[1]+e[8]*t[2]+e[12],e[1]*t[0]+e[5]*t[1]+e[9]*t[2]+e[13],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]+e[14]],multiplyMatrix4Line3:(e,t,r)=>({vector:[e[0]*t[0]+e[4]*t[1]+e[8]*t[2],e[1]*t[0]+e[5]*t[1]+e[9]*t[2],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]],origin:[e[0]*r[0]+e[4]*r[1]+e[8]*r[2]+e[12],e[1]*r[0]+e[5]*r[1]+e[9]*r[2]+e[13],e[2]*r[0]+e[6]*r[1]+e[10]*r[2]+e[14]]}),multiplyMatrices4:multiplyMatrices4,determinant4:determinant4,invertMatrix4:e=>{const t=determinant4(e);if(Math.abs(t)<1e-6||Number.isNaN(t)||!Number.isFinite(e[12])||!Number.isFinite(e[13])||!Number.isFinite(e[14]))return;const r=e[10]*e[15]-e[11]*e[14],n=e[9]*e[15]-e[11]*e[13],o=e[9]*e[14]-e[10]*e[13],s=e[8]*e[15]-e[11]*e[12],a=e[8]*e[14]-e[10]*e[12],i=e[8]*e[13]-e[9]*e[12],c=e[6]*e[15]-e[7]*e[14],l=e[5]*e[15]-e[7]*e[13],d=e[5]*e[14]-e[6]*e[13],u=e[6]*e[11]-e[7]*e[10],m=e[5]*e[11]-e[7]*e[9],p=e[5]*e[10]-e[6]*e[9],g=e[4]*e[15]-e[7]*e[12],h=e[4]*e[14]-e[6]*e[12],v=e[4]*e[11]-e[7]*e[8],_=e[4]*e[10]-e[6]*e[8],y=e[4]*e[13]-e[5]*e[12],b=e[4]*e[9]-e[5]*e[8],E=[+(e[5]*r-e[6]*n+e[7]*o),-(e[1]*r-e[2]*n+e[3]*o),+(e[1]*c-e[2]*l+e[3]*d),-(e[1]*u-e[2]*m+e[3]*p),-(e[4]*r-e[6]*s+e[7]*a),+(e[0]*r-e[2]*s+e[3]*a),-(e[0]*c-e[2]*g+e[3]*h),+(e[0]*u-e[2]*v+e[3]*_),+(e[4]*n-e[5]*s+e[7]*i),-(e[0]*n-e[1]*s+e[3]*i),+(e[0]*l-e[1]*g+e[3]*y),-(e[0]*m-e[1]*v+e[3]*b),-(e[4]*o-e[5]*a+e[6]*i),+(e[0]*o-e[1]*a+e[2]*i),-(e[0]*d-e[1]*h+e[2]*y),+(e[0]*p-e[1]*_+e[2]*b)],x=1/t;return E.map((e=>e*x))},makeMatrix4Translate:makeMatrix4Translate,makeMatrix4RotateX:(e,t=[0,0,0])=>singleAxisRotate4(e,t,1,2,!0),makeMatrix4RotateY:(e,t=[0,0,0])=>singleAxisRotate4(e,t,0,2,!1),makeMatrix4RotateZ:(e,t=[0,0,0])=>singleAxisRotate4(e,t,0,1,!0),makeMatrix4Rotate:(e,t=[0,0,1],r=[0,0,0])=>{const n=[0,1,2].map((e=>r[e]||0)),[o,s,a]=resize(3,normalize(t)),i=Math.cos(e),c=Math.sin(e),l=1-i,d=makeMatrix4Translate(-n[0],-n[1],-n[2]),u=makeMatrix4Translate(n[0],n[1],n[2]);return multiplyMatrices4(u,multiplyMatrices4([l*o*o+i,l*s*o+a*c,l*a*o-s*c,0,l*o*s-a*c,l*s*s+i,l*a*s+o*c,0,l*o*a+s*c,l*s*a-o*c,l*a*a+i,0,0,0,0,1],d))},makeMatrix4Scale:(e=[1,1,1],t=[0,0,0])=>[e[0],0,0,0,0,e[1],0,0,0,0,e[2],0,e[0]*-t[0]+t[0],e[1]*-t[1]+t[1],e[2]*-t[2]+t[2],1],makeMatrix4ReflectZ:(e,t=[0,0])=>{const r=makeMatrix2Reflect(e,t);return[r[0],r[1],0,0,r[2],r[3],0,0,0,0,1,0,r[4],r[5],0,1]},makePerspectiveMatrix4:(e,t,r,n)=>{const o=Math.tan(.5*Math.PI-.5*e),s=1/(r-n);return[o/t,0,0,0,0,o,0,0,0,0,(r+n)*s,-1,0,0,r*n*s*2,0]},makeOrthographicMatrix4:(e,t,r,n,o,s)=>[2/(t-n),0,0,0,0,2/(e-r),0,0,0,0,2/(o-s),0,(n+t)/(n-t),(r+e)/(r-e),(o+s)/(o-s),1],makeLookAtMatrix4:(e,t,r)=>{const n=normalize3(subtract3(e,t)),o=normalize3(cross3(r,n)),s=normalize3(cross3(n,o));return[o[0],o[1],o[2],0,s[0],s[1],s[2],0,n[0],n[1],n[2],0,e[0],e[1],e[2],1]}}),ie={...R,...Z,...J,...X,...ee,...ne,...ae,...Object.freeze({__proto__:null,quaternionFromTwoVectors:(e,t)=>{const r=cross3(e,t),n=[r[0],r[1],r[2],dot(e,t)];return n[3]+=magnitude(n),normalize(n)},matrix4FromQuaternion:e=>multiplyMatrices4([e[3],e[2],-e[1],e[0],-e[2],e[3],e[0],e[1],e[1],-e[0],e[3],e[2],-e[0],-e[1],-e[2],e[3]],[e[3],e[2],-e[1],-e[0],-e[2],e[3],e[0],-e[1],e[1],-e[0],e[3],-e[2],e[0],e[1],e[2],e[3]])}),...H},clockwiseAngleRadians=(e,t)=>{for(;e<0;)e+=q;for(;t<0;)t+=q;for(;e>q;)e-=q;for(;t>q;)t-=q;const r=e-t;return r>=0?r:q-(t-e)},counterClockwiseAngleRadians=(e,t)=>{for(;e<0;)e+=q;for(;t<0;)t+=q;for(;e>q;)e-=q;for(;t>q;)t-=q;const r=t-e;return r>=0?r:q-(e-t)},clockwiseAngle2=(e,t)=>{const r=t[0]*e[0]+t[1]*e[1],n=t[0]*e[1]-t[1]*e[0];let o=Math.atan2(n,r);return o<0&&(o+=q),o},counterClockwiseAngle2=(e,t)=>{const r=e[0]*t[0]+e[1]*t[1],n=e[0]*t[1]-e[1]*t[0];let o=Math.atan2(n,r);return o<0&&(o+=q),o},clockwiseBisect2=(e,t)=>fnToVec2(fnVec2Angle(e)-clockwiseAngle2(e,t)/2),counterClockwiseBisect2=(e,t)=>fnToVec2(fnVec2Angle(e)+counterClockwiseAngle2(e,t)/2),clockwiseSubsectRadians=(e,t,r)=>{const n=clockwiseAngleRadians(t,r)/e;return Array.from(Array(e-1)).map(((e,r)=>t+n*(r+1)))},counterClockwiseSubsectRadians=(e,t,r)=>{const n=counterClockwiseAngleRadians(t,r)/e;return Array.from(Array(e-1)).map(((e,r)=>t+n*(r+1)))},clockwiseSubsect2=(e,t,r)=>{const n=Math.atan2(t[1],t[0]),o=Math.atan2(r[1],r[0]);return clockwiseSubsectRadians(e,n,o).map(fnToVec2)},counterClockwiseSubsect2=(e,t,r)=>{const n=Math.atan2(t[1],t[0]),o=Math.atan2(r[1],r[0]);return counterClockwiseSubsectRadians(e,n,o).map(fnToVec2)},bisectLines2=(e,t,r,n,o=I)=>{const s=cross2(e,r),a=dot(e,r),i=s>-o?[counterClockwiseBisect2(e,r)]:[clockwiseBisect2(e,r)];i[1]=s>-o?rotate90(i[0]):rotate270(i[0]);const c=((n[0]-t[0])*r[1]-r[0]*(n[1]-t[1]))/s,l=[e,r].map((e=>normalize(e))),d=Math.abs(cross2(...l))<o,u=d?midpoint(t,n):[t[0]+e[0]*c,t[1]+e[1]*c],m=i.map((e=>({vector:e,origin:u})));return d&&delete m[a>-o?1:0],m},counterClockwiseOrderRadians=function(){const e=Array.from(arguments).flat(),t=e.map(((e,t)=>t)).sort(((t,r)=>e[t]-e[r]));return t.slice(t.indexOf(0),t.length).concat(t.slice(0,t.indexOf(0)))},counterClockwiseSectorsRadians=function(){const e=Array.from(arguments).flat(),t=counterClockwiseOrderRadians(e).map((t=>e[t]));return t.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>counterClockwiseAngleRadians(e[0],e[1])))},threePointTurnDirection=(e,t,r,n=I)=>{const o=normalize2(subtract2(t,e)),s=normalize2(subtract2(r,e)),a=cross2(o,s);return fnEpsilonEqual(a,0,n)?fnEpsilonEqual(distance2(e,t)+distance2(t,r),distance2(e,r))?0:void 0:Math.sign(a)},ce=Object.freeze({__proto__:null,isCounterClockwiseBetween:(e,t,r)=>{for(;r<t;)r+=q;for(;e>t;)e-=q;for(;e<t;)e+=q;return e<r},clockwiseAngleRadians:clockwiseAngleRadians,counterClockwiseAngleRadians:counterClockwiseAngleRadians,clockwiseAngle2:clockwiseAngle2,counterClockwiseAngle2:counterClockwiseAngle2,clockwiseBisect2:clockwiseBisect2,counterClockwiseBisect2:counterClockwiseBisect2,clockwiseSubsectRadians:clockwiseSubsectRadians,counterClockwiseSubsectRadians:counterClockwiseSubsectRadians,clockwiseSubsect2:clockwiseSubsect2,counterClockwiseSubsect2:counterClockwiseSubsect2,bisectLines2:bisectLines2,counterClockwiseOrderRadians:counterClockwiseOrderRadians,counterClockwiseOrder2:function(){return counterClockwiseOrderRadians(semiFlattenArrays(arguments).map(fnVec2Angle))},counterClockwiseSectorsRadians:counterClockwiseSectorsRadians,counterClockwiseSectors2:function(){return counterClockwiseSectorsRadians(semiFlattenArrays(arguments).map(fnVec2Angle))},threePointTurnDirection:threePointTurnDirection}),convexHullIndices=(e=[],t=!1,r=I)=>{if(e.length<2)return[];const n=radialSortPointIndices(e,r).map((e=>1===e.length?e:(e=>e.concat(e.slice(0,-1).reverse()))(e))).flat();n.push(n[0]);const o=[n[0]];let s=1;const a={"-1":()=>o.pop(),1:e=>{o.push(e),s+=1},undefined:()=>{s+=1}};for(a[0]=t?a[1]:a[-1];s<n.length;){if(o.length<2){o.push(n[s]),s+=1;continue}const t=o[o.length-2],i=o[o.length-1],c=n[s];a[threePointTurnDirection(...[t,i,c].map((t=>e[t])),r)](c)}return o.pop(),o},convexHull=(e=[],t=!1,r=I)=>convexHullIndices(e,t,r).map((t=>e[t])),le=Object.freeze({__proto__:null,convexHullIndices:convexHullIndices,convexHull:convexHull}),fe=Object.create(null),vectorOriginForm=(e,t)=>({vector:e||[],origin:t||[]}),getVector=function(){if(arguments[0]instanceof fe.vector)return arguments[0];let e=flattenArrays(arguments);return e.length>0&&"object"==typeof e[0]&&null!==e[0]&&!Number.isNaN(e[0].x)&&(e=["x","y","z"].map((t=>e[0][t])).filter(fnNotUndefined)),e.filter((e=>"number"==typeof e))},getVectorOfVectors=function(){return semiFlattenArrays(arguments).map((e=>getVector(e)))},getSegment=function(){if(arguments[0]instanceof fe.segment)return arguments[0];const e=semiFlattenArrays(arguments);return 4===e.length?[[e[0],e[1]],[e[2],e[3]]]:e.map((e=>getVector(e)))},getLine$1=function(){const e=semiFlattenArrays(arguments);return 0===e.length?vectorOriginForm([],[]):e[0]instanceof fe.line||e[0]instanceof fe.ray||e[0]instanceof fe.segment?e[0]:e[0].constructor===Object&&void 0!==e[0].vector?vectorOriginForm(e[0].vector||[],e[0].origin||[]):"number"==typeof e[0]?vectorOriginForm(getVector(e)):vectorOriginForm(...e.map((e=>getVector(e))))},de=getLine$1,getRectParams=(e=0,t=0,r=0,n=0)=>({x:e,y:t,width:r,height:n}),getRect=function(){if(arguments[0]instanceof fe.rect)return arguments[0];const e=flattenArrays(arguments);if(e.length>0&&"object"==typeof e[0]&&null!==e[0]&&!Number.isNaN(e[0].width))return getRectParams(...["x","y","width","height"].map((t=>e[0][t])).filter(fnNotUndefined));const t=e.filter((e=>"number"==typeof e)),r=t.length<4?[,,...t]:t;return getRectParams(...r)},getCircleParams=(e=1,...t)=>({radius:e,origin:[...t]}),getCircle=function(){if(arguments[0]instanceof fe.circle)return arguments[0];const e=getVectorOfVectors(arguments),t=flattenArrays(arguments).filter((e=>"number"==typeof e));if(2===arguments.length){if(1===e[1].length)return getCircleParams(e[1][0],...e[0]);if(1===e[0].length)return getCircleParams(e[0][0],...e[1]);if(e[0].length>1&&e[1].length>1)return getCircleParams(distance2(...e),...e[0])}else switch(t.length){case 0:return getCircleParams(1,0,0,0);case 1:return getCircleParams(t[0],0,0,0);default:return getCircleParams(t.pop(),...t)}return getCircleParams(1,0,0,0)},ue=[[0,1,3,4,9,10],[0,1,2,3,4,5,6,7,8,9,10,11],[0,1,2,void 0,3,4,5,void 0,6,7,8,void 0,9,10,11]];[11,7,3].forEach((e=>delete ue[2][e]));const matrixMap3x4=e=>{let t;return t=e<8?0:e<13?1:2,ue[t]},getMatrix3x4=function(){const e=flattenArrays(arguments),t=[...re];return matrixMap3x4(e.length).forEach(((r,n)=>{null!=e[n]&&(t[r]=e[n])})),t},me=Object.freeze({__proto__:null,getVector:getVector,getVectorOfVectors:getVectorOfVectors,getSegment:getSegment,getLine:getLine$1,getRay:de,getRectParams:getRectParams,getRect:getRect,getCircle:getCircle,getMatrix3x4:getMatrix3x4}),intersectLineLine=(e,t,r,n,o=U,s=U,a=I)=>{const i=cross2(normalize(e),normalize(r));if(Math.abs(i)<a)return;const c=cross2(e,r),l=-c,d=[n[0]-t[0],n[1]-t[1]],u=[-d[0],-d[1]],m=cross2(d,r)/c,p=cross2(u,e)/l;return o(m,a/magnitude(e))&&s(p,a/magnitude(r))?add(t,scale(e,m)):void 0},pe=Object.freeze({__proto__:null,pleat:(e,t,r)=>{const n=getLine$1(t),o=getLine$1(r);return parallel(n.vector,o.vector)?((e,t,r)=>{const n=Array.from(Array(e-1)).map(((t,r)=>(r+1)/e)).map((e=>lerp(t.origin,r.origin,e))),o=[...t.vector];return n.map((e=>({origin:e,vector:o})))})(e,n,o):((e,t,r)=>{const n=intersectLineLine(t.vector,t.origin,r.vector,r.origin);return(clockwiseAngle2(t.vector,r.vector)<counterClockwiseAngle2(t.vector,r.vector)?clockwiseSubsect2(e,t.vector,r.vector):counterClockwiseSubsect2(e,t.vector,r.vector)).map((e=>({origin:n,vector:e})))})(e,n,o)}}),angleArray=e=>Array.from(Array(Math.floor(e))).map(((t,r)=>q*(r/e))),anglesToVecs=(e,t)=>e.map((e=>[t*Math.cos(e),t*Math.sin(e)])).map((e=>e.map((e=>cleanNumber(e,14))))),makePolygonCircumradius=(e=3,t=1)=>anglesToVecs(angleArray(e),t),makePolygonCircumradiusSide=(e=3,t=1)=>{const r=Math.PI/e,n=angleArray(e).map((e=>e+r));return anglesToVecs(n,t)},circumcircle=function(e,t,r){const n=t[0]-e[0],o=t[1]-e[1],s=r[0]-e[0],a=r[1]-e[1],i=n*(e[0]+t[0])+o*(e[1]+t[1]),c=s*(e[0]+r[0])+a*(e[1]+r[1]),l=2*(n*(r[1]-t[1])-o*(r[0]-t[0]));if(Math.abs(l)<I){const n=Math.min(e[0],t[0],r[0]),o=Math.min(e[1],t[1],r[1]),s=.5*(Math.max(e[0],t[0],r[0])-n),a=.5*(Math.max(e[1],t[1],r[1])-o);return{origin:[n+s,o+a],radius:Math.sqrt(s*s+a*a)}}const d=[(a*i-o*c)/l,(n*c-s*i)/l],u=d[0]-e[0],m=d[1]-e[1];return{origin:d,radius:Math.sqrt(u*u+m*m)}},signedArea=e=>.5*e.map(((e,t,r)=>{const n=r[(t+1)%r.length];return e[0]*n[1]-n[0]*e[1]})).reduce(fnAdd,0),centroid=e=>{const t=1/(6*signedArea(e));return e.map(((e,t,r)=>{const n=r[(t+1)%r.length],o=e[0]*n[1]-n[0]*e[1];return[(e[0]+n[0])*o,(e[1]+n[1])*o]})).reduce(((e,t)=>[e[0]+t[0],e[1]+t[1]]),[0,0]).map((e=>e*t))},boundingBox$1=(e,t=0)=>{if(!e||!e.length)return;const r=Array(e[0].length).fill(1/0),n=Array(e[0].length).fill(-1/0);e.forEach((e=>e.forEach(((e,o)=>{e<r[o]&&(r[o]=e-t),e>n[o]&&(n[o]=e+t)}))));const o=n.map(((e,t)=>e-r[t]));return{min:r,max:n,span:o}},ge=Object.freeze({__proto__:null,makePolygonCircumradius:makePolygonCircumradius,makePolygonCircumradiusSide:makePolygonCircumradiusSide,makePolygonInradius:(e=3,t=1)=>makePolygonCircumradius(e,t/Math.cos(Math.PI/e)),makePolygonInradiusSide:(e=3,t=1)=>makePolygonCircumradiusSide(e,t/Math.cos(Math.PI/e)),makePolygonSideLength:(e=3,t=1)=>makePolygonCircumradius(e,t/2/Math.sin(Math.PI/e)),makePolygonSideLengthSide:(e=3,t=1)=>makePolygonCircumradiusSide(e,t/2/Math.sin(Math.PI/e)),makePolygonNonCollinear:(e,t=I)=>{const r=e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>subtract(e[1],e[0]))).map(((e,t,r)=>[e,r[(t+r.length-1)%r.length]])).map((e=>!parallel(e[1],e[0],t)));return e.filter(((e,t)=>r[t]))},circumcircle:circumcircle,signedArea:signedArea,centroid:centroid,boundingBox:boundingBox$1}),overlapConvexPolygonPoint=(e,t,r=exclude,n=I)=>e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>cross2(normalize(subtract(e[1],e[0])),subtract(t,e[0])))).map((e=>r(e,n))).map(((e,t,r)=>e===r[0])).reduce(((e,t)=>e&&t),!0),linePointFromParameter=(e,t,r)=>add(t,scale(e,r)),getIntersectParameters=(e,t,r,n,o)=>e.map(((e,t,r)=>[subtract(r[(t+1)%r.length],e),e])).map((e=>((e,t,r,n,o=includeS,s=I)=>{const a=cross2(normalize(e),normalize(r));if(Math.abs(a)<s)return;const i=cross2(e,r),c=-i,l=subtract(n,t),d=flip(l),u=cross2(l,r)/i;return o(cross2(d,e)/c,s/magnitude(r))?u:void 0})(t,r,e[0],e[1],n,o))).filter(fnNotUndefined).sort(((e,t)=>e-t)),clipLineConvexPolygon=(e,t,r,n=include,o=U,s=I)=>{const a=getIntersectParameters(e,t,r,includeS,s);if(a.length<2)return;const i=((e,t,r)=>{let n=0,o=e.length-1;for(;n<o&&!t(e[n+1]-e[n],r);)n+=1;for(;o>n&&!t(e[o]-e[o-1],r);)o-=1;if(!(n>=o))return[e[n],e[o]]})(a,n,2*s/magnitude(t));if(void 0===i)return;const c=i.map((e=>o(e)?e:e<.5?0:1));if(Math.abs(c[0]-c[1])<2*s/magnitude(t))return;const l=linePointFromParameter(t,r,(c[0]+c[1])/2);return overlapConvexPolygonPoint(e,l,n,s)?c.map((e=>linePointFromParameter(t,r,e))):void 0},overlapLinePoint=(e,t,r,n=D,o=I)=>{const s=subtract(r,t),a=magSquared(e),i=Math.sqrt(a);if(i<o)return!1;const c=cross2(s,e.map((e=>e/i))),l=dot(s,e)/a;return Math.abs(c)<o&&n(l,o/i)},splitConvexPolygon=(e,t,r)=>{const n=e.map(((e,n)=>({point:overlapLinePoint(t,r,e,U)?e:null,at_index:n}))).filter((e=>null!=e.point)),o=e.map(((e,n,o)=>({point:intersectLineLine(t,r,subtract(e,o[(n+1)%o.length]),o[(n+1)%o.length],D,excludeS),at_index:n}))).filter((e=>null!=e.point));if(2===o.length){const t=o.slice().sort(((e,t)=>e.at_index-t.at_index)),r=e.slice(t[1].at_index+1).concat(e.slice(0,t[0].at_index+1));r.push(t[0].point),r.push(t[1].point);const n=e.slice(t[0].at_index+1,t[1].at_index+1);return n.push(t[1].point),n.push(t[0].point),[r,n]}if(1===o.length&&1===n.length){n[0].type="v",o[0].type="e";const t=n.concat(o).sort(((e,t)=>e.at_index-t.at_index)),r=e.slice(t[1].at_index+1).concat(e.slice(0,t[0].at_index+1));"e"===t[0].type&&r.push(t[0].point),r.push(t[1].point);const s=e.slice(t[0].at_index+1,t[1].at_index+1);return"e"===t[1].type&&s.push(t[1].point),s.push(t[0].point),[r,s]}if(2===n.length){const t=n.slice().sort(((e,t)=>e.at_index-t.at_index));return[e.slice(t[1].at_index).concat(e.slice(0,t[0].at_index+1)),e.slice(t[0].at_index,t[1].at_index+1)]}return[e.slice()]},recurseSkeleton=(e,t,r)=>{const n=e.map(((e,t)=>({vector:r[t],origin:e}))).map(((e,t,r)=>intersectLineLine(e.vector,e.origin,r[(t+1)%r.length].vector,r[(t+1)%r.length].origin,W,W))),o=t.map(((e,t)=>nearestPointOnLine(e.vector,e.origin,n[t],(e=>e))));if(3===e.length)return e.map((e=>({type:"skeleton",points:[e,n[0]]}))).concat([{type:"perpendicular",points:[o[0],n[0]]}]);const s=n.map(((e,t)=>distance(e,o[t])));let a=0;s.forEach(((e,t)=>{e<s[a]&&(a=t)}));const i=[{type:"skeleton",points:[e[a],n[a]]},{type:"skeleton",points:[e[(a+1)%e.length],n[a]]},{type:"perpendicular",points:[o[a],n[a]]}],c=clockwiseBisect2(flip(t[(a+t.length-1)%t.length].vector),t[(a+1)%t.length].vector),l=a===e.length-1;return e.splice(a,2,n[a]),t.splice(a,1),r.splice(a,2,c),l&&(e.splice(0,1),r.splice(0,1),t.push(t.shift())),i.concat(recurseSkeleton(e,t,r))},straightSkeleton=e=>{const t=e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>({vector:subtract(e[1],e[0]),origin:e[0]}))),r=e.map(((e,t,r)=>[(t-1+r.length)%r.length,t,(t+1)%r.length].map((e=>r[e])))).map((e=>[subtract(e[0],e[1]),subtract(e[2],e[1])])).map((e=>clockwiseBisect2(...e)));return recurseSkeleton([...e],t,r)},he={...le,...pe,...ge,...ce,clipLineConvexPolygon:clipLineConvexPolygon,clipPolygonPolygon:(e,t,r=I)=>{let n,o,s,a;const inside=e=>(o[0]-n[0])*(e[1]-n[1])>(o[1]-n[1])*(e[0]-n[0])+r,intersection=()=>{const e=[n[0]-o[0],n[1]-o[1]],t=[s[0]-a[0],s[1]-a[1]],r=n[0]*o[1]-n[1]*o[0],i=s[0]*a[1]-s[1]*a[0],c=1/(e[0]*t[1]-e[1]*t[0]);return[(r*t[0]-i*e[0])*c,(r*t[1]-i*e[1])*c]};let i=e;n=t[t.length-1];for(let e in t){o=t[e];const r=i;i=[],s=r[r.length-1];for(let e in r)a=r[e],inside(a)?(inside(s)||i.push(intersection()),i.push(a)):inside(s)&&i.push(intersection()),s=a;n=o}return 0===i.length?void 0:i},splitConvexPolygon:splitConvexPolygon,straightSkeleton:straightSkeleton},ve=Object.freeze({__proto__:null,collinearBetween:(e,t,r,n=!1,o=I)=>{if([e,r].map((e=>fnEpsilonEqualVectors(t,e))).reduce(((e,t)=>e||t),!1))return n;const s=[[e,t],[t,r]].map((e=>subtract(e[1],e[0]))).map((e=>normalize(e)));return fnEpsilonEqual(1,dot(...s),o)}}),_e=Object.freeze({__proto__:null,enclosingBoundingBoxes:(e,t)=>{const r=Math.min(e.min.length,t.min.length);for(let n=0;n<r;n+=1)if(t.min[n]<e.min[n]||t.max[n]>e.max[n])return!1;return!0},enclosingPolygonPolygon:(e,t,r=include)=>{const n=e.map((e=>overlapConvexPolygonPoint(t,e,r))).reduce(((e,t)=>e||t),!1),o=t.map((e=>overlapConvexPolygonPoint(t,e,r))).reduce(((e,t)=>e&&t),!0);return!n&&o}}),typeOf=function(e){switch(e.constructor.name){case"vector":case"matrix":case"segment":case"ray":case"line":case"circle":case"ellipse":case"rect":case"polygon":return e.constructor.name}if("object"==typeof e){if(null!=e.radius)return"circle";if(null!=e.width)return"rect";if(null!=e.x||"number"==typeof e[0])return"vector";if(null!=e[0]&&e[0].length&&("number"==typeof e[0].x||"number"==typeof e[0][0]))return"segment";if(null!=e.vector&&null!=e.origin)return"line"}},rotateVector2=(e,t,r)=>{const n=t[0]-e[0],o=t[1]-e[1],s=n*Math.cos(r)+o*Math.sin(r),a=o*Math.cos(r)-n*Math.sin(r);return[e[0]+s,e[1]+a]},intersectCircleCircle=(e,t,r,n,o=I)=>{const s=e<r?e:r,a=e<r?r:e,i=e<r?t:n,c=e<r?n:t,l=[i[0]-c[0],i[1]-c[1]],d=Math.sqrt(l[0]**2+l[1]**2);if(d<o)return;const u=l.map(((e,t)=>e/d*a+c[t]));if(Math.abs(a+s-d)<o||Math.abs(a-(s+d))<o)return[u];if(d+s<a||a+s<d)return;const m=(p=(s*s-d*d-a*a)/(-2*d*a))>=1?0:p<=-1?Math.PI:Math.acos(p);var p;return[rotateVector2(c,u,+m),rotateVector2(c,u,-m)]},intersectCircleLine=(e,t,r,n,o=U,s=I)=>{const a=r[0]**2+r[1]**2,i=Math.sqrt(a),c=0===i?r:r.map((e=>e/i)),l=rotate90(c),d=subtract(n,t),u=cross2(d,c);if(Math.abs(u)>e+s)return;const m=Math.sqrt(e**2-u**2),f=(e,r)=>t[r]-l[r]*u+c[r]*e,p=Math.abs(e-Math.abs(u))<s?[m].map((e=>[e,e].map(f))):[-m,m].map((e=>[e,e].map(f))),g=p.map((e=>e.map(((e,t)=>e-n[t])))).map((e=>e[0]*r[0]+r[1]*e[1])).map((e=>e/a));return p.filter(((e,t)=>o(g[t],s)))},getUniquePair=e=>{for(let t=1;t<e.length;t+=1)if(!fnEpsilonEqualVectors(e[0],e[t]))return[e[0],e[t]]},intersectConvexPolygonLineInclusive=(e,t,r,n=includeS,o=U,s=I)=>{const a=e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>intersectLineLine(subtract(e[1],e[0]),e[0],t,r,n,o,s))).filter((e=>void 0!==e));switch(a.length){case 0:return;case 1:return[a];default:return getUniquePair(a)||[a[0]]}},intersectConvexPolygonLine=(e,t,r,n=includeS,o=D,s=I)=>{const a=intersectConvexPolygonLineInclusive(e,t,r,n,o,s);let i;switch(o){case W:i=G;break;case excludeS:i=includeS;break;default:return a}const c=intersectConvexPolygonLineInclusive(e,t,r,includeS,i,s);if(void 0===c)return;const l=getUniquePair(c);if(void 0===l)switch(o){case W:return overlapConvexPolygonPoint(e,r,exclude,s)?c:void 0;case excludeS:return overlapConvexPolygonPoint(e,add(r,t),exclude,s)||overlapConvexPolygonPoint(e,r,exclude,s)?c:void 0;default:return}return overlapConvexPolygonPoint(e,midpoint(...l),exclude,s)?l:a},ye={polygon:e=>[e],rect:e=>[e],circle:e=>[e.radius,e.origin],line:e=>[e.vector,e.origin],ray:e=>[e.vector,e.origin],segment:e=>[e.vector,e.origin]},be={polygon:{line:(e,t,r,n,o)=>intersectConvexPolygonLine(...e,...t,includeS,n,o),ray:(e,t,r,n,o)=>intersectConvexPolygonLine(...e,...t,includeS,n,o),segment:(e,t,r,n,o)=>intersectConvexPolygonLine(...e,...t,includeS,n,o)},circle:{circle:(e,t,r,n,o)=>intersectCircleCircle(...e,...t,o),line:(e,t,r,n,o)=>intersectCircleLine(...e,...t,n,o),ray:(e,t,r,n,o)=>intersectCircleLine(...e,...t,n,o),segment:(e,t,r,n,o)=>intersectCircleLine(...e,...t,n,o)},line:{polygon:(e,t,r,n,o)=>intersectConvexPolygonLine(...t,...e,includeS,r,o),circle:(e,t,r,n,o)=>intersectCircleLine(...t,...e,r,o),line:(e,t,r,n,o)=>intersectLineLine(...e,...t,r,n,o),ray:(e,t,r,n,o)=>intersectLineLine(...e,...t,r,n,o),segment:(e,t,r,n,o)=>intersectLineLine(...e,...t,r,n,o)},ray:{polygon:(e,t,r,n,o)=>intersectConvexPolygonLine(...t,...e,includeS,r,o),circle:(e,t,r,n,o)=>intersectCircleLine(...t,...e,r,o),line:(e,t,r,n,o)=>intersectLineLine(...t,...e,n,r,o),ray:(e,t,r,n,o)=>intersectLineLine(...e,...t,r,n,o),segment:(e,t,r,n,o)=>intersectLineLine(...e,...t,r,n,o)},segment:{polygon:(e,t,r,n,o)=>intersectConvexPolygonLine(...t,...e,includeS,r,o),circle:(e,t,r,n,o)=>intersectCircleLine(...t,...e,r,o),line:(e,t,r,n,o)=>intersectLineLine(...t,...e,n,r,o),ray:(e,t,r,n,o)=>intersectLineLine(...t,...e,n,r,o),segment:(e,t,r,n,o)=>intersectLineLine(...e,...t,r,n,o)}},Ee={polygon:"polygon",rect:"polygon",circle:"circle",line:"line",ray:"ray",segment:"segment"},xe={polygon:exclude,rect:exclude,circle:exclude,line:D,ray:W,segment:excludeS},intersect=function(e,t,r){const n=typeOf(e),o=typeOf(t),s=Ee[n],a=Ee[o],i=ye[n](e),c=ye[o](t),l=e.domain_function||xe[n],d=t.domain_function||xe[o];return be[s][a](i,c,l,d,r)},overlapConvexPolygons=(e,t,r=I)=>{for(let n=0;n<2;n+=1){const o=0===n?e:t,s=0===n?t:e;for(let e=0;e<o.length;e+=1){const t=o[e],n=rotate90(subtract(o[(e+1)%o.length],o[e])),a=s.map((e=>subtract(e,t))).map((e=>dot(n,e))),i=o[(e+2)%o.length],c=dot(n,subtract(i,t))>0;if(a.map((e=>c?e<r:e>-r)).reduce(((e,t)=>e&&t),!0))return!1}}return!0},overlapCirclePoint=(e,t,r,n=exclude,o=I)=>n(e-distance2(t,r),o),overlapLineLine=(e,t,r,n,o=D,s=D,a=I)=>{const i=cross2(e,r),c=-i,l=[n[0]-t[0],n[1]-t[1]];if(Math.abs(i)<a){if(Math.abs(cross2(l,e))>a)return!1;const t=l,n=add(t,r),o=dot(e,e),s=dot(t,e)/o,i=dot(n,e)/o;return!((s<i?s:i)>1-a)&&!((s<i?i:s)<a)}const d=[-l[0],-l[1]],u=cross2(l,r)/i,m=cross2(d,e)/c;return o(u,a/magnitude(e))&&s(m,a/magnitude(r))},ke={polygon:e=>[e],rect:e=>[e],circle:e=>[e.radius,e.origin],line:e=>[e.vector,e.origin],ray:e=>[e.vector,e.origin],segment:e=>[e.vector,e.origin],vector:e=>[e]},Ae={polygon:{polygon:(e,t,r,n,o)=>overlapConvexPolygons(...e,...t,o),vector:(e,t,r,n,o)=>overlapConvexPolygonPoint(...e,...t,r,o)},circle:{vector:(e,t,r,n,o)=>overlapCirclePoint(...e,...t,exclude,o)},line:{line:(e,t,r,n,o)=>overlapLineLine(...e,...t,r,n,o),ray:(e,t,r,n,o)=>overlapLineLine(...e,...t,r,n,o),segment:(e,t,r,n,o)=>overlapLineLine(...e,...t,r,n,o),vector:(e,t,r,n,o)=>overlapLinePoint(...e,...t,r,o)},ray:{line:(e,t,r,n,o)=>overlapLineLine(...t,...e,n,r,o),ray:(e,t,r,n,o)=>overlapLineLine(...e,...t,r,n,o),segment:(e,t,r,n,o)=>overlapLineLine(...e,...t,r,n,o),vector:(e,t,r,n,o)=>overlapLinePoint(...e,...t,r,o)},segment:{line:(e,t,r,n,o)=>overlapLineLine(...t,...e,n,r,o),ray:(e,t,r,n,o)=>overlapLineLine(...t,...e,n,r,o),segment:(e,t,r,n,o)=>overlapLineLine(...e,...t,r,n,o),vector:(e,t,r,n,o)=>overlapLinePoint(...e,...t,r,o)},vector:{polygon:(e,t,r,n,o)=>overlapConvexPolygonPoint(...t,...e,n,o),circle:(e,t,r,n,o)=>overlapCirclePoint(...t,...e,exclude,o),line:(e,t,r,n,o)=>overlapLinePoint(...t,...e,n,o),ray:(e,t,r,n,o)=>overlapLinePoint(...t,...e,n,o),segment:(e,t,r,n,o)=>overlapLinePoint(...t,...e,n,o),vector:(e,t,r,n,o)=>fnEpsilonEqualVectors(...e,...t,o)}},Oe={polygon:"polygon",rect:"polygon",circle:"circle",line:"line",ray:"ray",segment:"segment",vector:"vector"},Me={polygon:exclude,rect:exclude,circle:exclude,line:D,ray:W,segment:excludeS,vector:D},overlap=function(e,t,r){const n=typeOf(e),o=typeOf(t),s=Oe[n],a=Oe[o],i=ke[n](e),c=ke[o](t),l=e.domain_function||Me[n],d=t.domain_function||Me[o];return Ae[s][a](i,c,l,d,r)},we={...ve,..._e,intersect:intersect,overlap:overlap,intersectConvexPolygonLine:intersectConvexPolygonLine,intersectCircleCircle:intersectCircleCircle,intersectCircleLine:intersectCircleLine,intersectLineLine:intersectLineLine,overlapConvexPolygons:overlapConvexPolygons,overlapConvexPolygonPoint:overlapConvexPolygonPoint,overlapBoundingBoxes:(e,t)=>{const r=Math.min(e.min.length,t.min.length);for(let n=0;n<r;n+=1)if(e.min[n]>t.max[n]||e.max[n]<t.min[n])return!1;return!0},overlapLineLine:overlapLineLine,overlapLinePoint:overlapLinePoint},rayLineToUniqueLine=({vector:e,origin:t})=>{const r=magnitude(e),n=rotate90(e),o=dot(t,n)/r;return{normal:scale(n,1/r),distance:o}},uniqueLineToRayLine=({normal:e,distance:t})=>({vector:rotate270(e),origin:scale(e,t)}),je={...Y,...Object.freeze({__proto__:null,rayLineToUniqueLine:rayLineToUniqueLine,uniqueLineToRayLine:uniqueLineToRayLine}),...me,typeOf:typeOf},Pe={preserve:{magnitude:function(){return magnitude(this)},isEquivalent:function(){return fnEpsilonEqualVectors(this,getVector(arguments))},isParallel:function(){return parallel(...resizeUp(this,getVector(arguments)))},isCollinear:function(e){return overlap(this,e)},dot:function(){return dot(...resizeUp(this,getVector(arguments)))},distanceTo:function(){return distance(...resizeUp(this,getVector(arguments)))},overlap:function(e){return overlap(this,e)}},vector:{copy:function(){return[...this]},normalize:function(){return normalize(this)},scale:function(){return scale(this,arguments[0])},flip:function(){return flip(this)},rotate90:function(){return rotate90(this)},rotate270:function(){return rotate270(this)},cross:function(){return cross3(resize(3,this),resize(3,getVector(arguments)))},transform:function(){return multiplyMatrix3Vector3(getMatrix3x4(arguments),resize(3,this))},add:function(){return add(this,resize(this.length,getVector(arguments)))},subtract:function(){return subtract(this,resize(this.length,getVector(arguments)))},rotateZ:function(e,t){return multiplyMatrix3Vector3(getMatrix3x4(makeMatrix2Rotate(e,t)),resize(3,this))},lerp:function(e,t){return lerp(this,resize(this.length,getVector(e)),t)},midpoint:function(){return midpoint(...resizeUp(this,getVector(arguments)))},bisect:function(){return counterClockwiseBisect2(this,getVector(arguments))}}},Se={};Object.keys(Pe.preserve).forEach((e=>{Se[e]=Pe.preserve[e]})),Object.keys(Pe.vector).forEach((e=>{Se[e]=function(){return fe.vector(...Pe.vector[e].apply(this,arguments))}}));const Ce={fromAngle:function(e){return fe.vector(Math.cos(e),Math.sin(e))},fromAngleDegrees:function(e){return fe.vector.fromAngle(e*B)}},ze={vector:{P:Array.prototype,A:function(){this.push(...getVector(arguments))},G:{x:function(){return this[0]},y:function(){return this[1]},z:function(){return this[2]}},M:Se,S:Ce}},Fe={fromPoints:function(){const e=getVectorOfVectors(arguments);return this.constructor({vector:subtract(e[1],e[0]),origin:e[0]})},fromAngle:function(){const e=arguments[0]||0;return this.constructor({vector:[Math.cos(e),Math.sin(e)],origin:[0,0]})},perpendicularBisector:function(){const e=getVectorOfVectors(arguments);return this.constructor({vector:rotate90(subtract(e[1],e[0])),origin:average(e[0],e[1])})}},Le={isParallel:function(){const e=resizeUp(this.vector,getLine$1(arguments).vector);return parallel(...e)},isCollinear:function(){const e=getLine$1(arguments);return overlapLinePoint(this.vector,this.origin,e.origin)&&parallel(...resizeUp(this.vector,e.vector))},isDegenerate:function(e=I){return degenerate(this.vector,e)},reflectionMatrix:function(){return fe.matrix(makeMatrix3ReflectZ(this.vector,this.origin))},nearestPoint:function(){const e=getVector(arguments);return fe.vector(nearestPointOnLine(this.vector,this.origin,e,this.clip_function))},transform:function(){const e=this.dimension,t=multiplyMatrix3Line3(getMatrix3x4(arguments),resize(3,this.vector),resize(3,this.origin));return this.constructor(resize(e,t.vector),resize(e,t.origin))},translate:function(){const e=add(...resizeUp(this.origin,getVector(arguments)));return this.constructor(this.vector,e)},intersect:function(){return intersect(this,...arguments)},overlap:function(){return overlap(this,...arguments)},bisect:function(e,t){const r=getLine$1(e);return bisectLines2(this.vector,this.origin,r.vector,r.origin,t).map((e=>this.constructor(e)))}},Ne={line:{P:Object.prototype,A:function(){const e=getLine$1(...arguments);this.vector=fe.vector(e.vector),this.origin=fe.vector(resize(this.vector.length,e.origin));const t=rayLineToUniqueLine({vector:this.vector,origin:this.origin});this.normal=t.normal,this.distance=t.distance,Object.defineProperty(this,"domain_function",{writable:!0,value:U})},G:{dimension:function(){return[this.vector,this.origin].map((e=>e.length)).reduce(((e,t)=>Math.max(e,t)),0)}},M:Object.assign({},Le,{inclusive:function(){return this.domain_function=U,this},exclusive:function(){return this.domain_function=D,this},clip_function:e=>e,svgPath:function(e=2e4){const t=add(this.origin,scale(this.vector,-e/2)),r=scale(this.vector,e);return`M${t[0]} ${t[1]}l${r[0]} ${r[1]}`}}),S:Object.assign({fromNormalDistance:function(){return this.constructor(uniqueLineToRayLine(arguments[0]))}},Fe)}},$e={ray:{P:Object.prototype,A:function(){const e=getLine$1(...arguments);this.vector=fe.vector(e.vector),this.origin=fe.vector(resize(this.vector.length,e.origin)),Object.defineProperty(this,"domain_function",{writable:!0,value:G})},G:{dimension:function(){return[this.vector,this.origin].map((e=>e.length)).reduce(((e,t)=>Math.max(e,t)),0)}},M:Object.assign({},Le,{inclusive:function(){return this.domain_function=G,this},exclusive:function(){return this.domain_function=W,this},flip:function(){return fe.ray(flip(this.vector),this.origin)},scale:function(e){return fe.ray(this.vector.scale(e),this.origin)},normalize:function(){return fe.ray(this.vector.normalize(),this.origin)},clip_function:clampRay,svgPath:function(e=1e4){const t=this.vector.scale(e);return`M${this.origin[0]} ${this.origin[1]}l${t[0]} ${t[1]}`}}),S:Fe}},Ve={segment:{P:Array.prototype,A:function(){const e=getSegment(...arguments);this.push(...[e[0],e[1]].map((e=>fe.vector(e)))),this.vector=fe.vector(subtract(this[1],this[0])),this.origin=this[0],Object.defineProperty(this,"domain_function",{writable:!0,value:includeS})},G:{points:function(){return this},magnitude:function(){return magnitude(this.vector)},dimension:function(){return[this.vector,this.origin].map((e=>e.length)).reduce(((e,t)=>Math.max(e,t)),0)}},M:Object.assign({},Le,{inclusive:function(){return this.domain_function=includeS,this},exclusive:function(){return this.domain_function=excludeS,this},clip_function:clampSegment,transform:function(...e){const t=this.points[0].length,r=getMatrix3x4(e),n=this.points.map((e=>resize(3,e))).map((e=>multiplyMatrix3Vector3(r,e))).map((e=>resize(t,e)));return fe.segment(n)},translate:function(){const e=getVector(arguments),t=this.points.map((t=>add(...resizeUp(t,e))));return fe.segment(t)},midpoint:function(){return fe.vector(average(this.points[0],this.points[1]))},svgPath:function(){const e=this.points.map((e=>`${e[0]} ${e[1]}`));return["M","L"].map(((t,r)=>`${t}${e[r]}`)).join("")}}),S:{fromPoints:function(){return this.constructor(...arguments)}}}},pointOnEllipse=function(e,t,r,n,o,s){const a=Math.cos(o),i=Math.sin(o),c=Math.cos(s),l=Math.sin(s);return[e+a*r*c+-i*n*l,t+i*r*c+a*n*l]},pathInfo=function(e,t,r,n,o,s,a){let i=s;if(i<0&&!Number.isNaN(i))for(;i<0;)i+=2*Math.PI;const c=a>2*Math.PI?2*Math.PI:a,l=pointOnEllipse(e,t,r,n,o,i),d=pointOnEllipse(e,t,r,n,o,i+c/2),u=pointOnEllipse(e,t,r,n,o,i+c),m=c/2>Math.PI?1:0,p=c/2>0?1:0;return{x1:l[0],y1:l[1],x2:d[0],y2:d[1],x3:u[0],y3:u[1],fa:m,fs:p}},cln=e=>cleanNumber(e,4),ellipticalArcTo=(e,t,r,n,o,s,a)=>`A${cln(e)} ${cln(t)} ${cln(r)} ${cln(n)} ${cln(o)} ${cln(s)} ${cln(a)}`,Ie={nearestPoint:function(){return fe.vector(nearestPointOnCircle(this.radius,this.origin,getVector(arguments)))},intersect:function(e){return intersect(this,e)},overlap:function(e){return overlap(this,e)},svgPath:function(e=0,t=2*Math.PI){const r=pathInfo(this.origin[0],this.origin[1],this.radius,this.radius,0,e,t),n=ellipticalArcTo(this.radius,this.radius,0,r.fa,r.fs,r.x2,r.y2),o=ellipticalArcTo(this.radius,this.radius,0,r.fa,r.fs,r.x3,r.y3);return`M${r.x1} ${r.y1}${n}${o}`},points:function(e=128){return Array.from(Array(e)).map(((t,r)=>2*Math.PI/e*r)).map((e=>[this.origin[0]+this.radius*Math.cos(e),this.origin[1]+this.radius*Math.sin(e)]))},polygon:function(){return fe.polygon(this.points(arguments[0]))},segments:function(){const e=this.points(arguments[0]);return e.map(((t,r)=>{const n=(r+1)%e.length;return[t,e[n]]}))}},Te={fromPoints:function(){if(3===arguments.length){const e=circumcircle(...arguments);return this.constructor(e.radius,e.origin)}return this.constructor(...arguments)},fromThreePoints:function(){const e=circumcircle(...arguments);return this.constructor(e.radius,e.origin)}},Be={circle:{A:function(){const e=getCircle(...arguments);this.radius=e.radius,this.origin=fe.vector(...e.origin)},G:{x:function(){return this.origin[0]},y:function(){return this.origin[1]},z:function(){return this.origin[2]}},M:Ie,S:Te}},getFoci=function(e,t,r,n){const o=t>r,s=o?t**2-r**2:r**2-t**2,a=Math.sqrt(s),i=o?Math.cos(n):Math.sin(n),c=o?Math.sin(n):Math.cos(n);return[fe.vector(e[0]+a*i,e[1]+a*c),fe.vector(e[0]-a*i,e[1]-a*c)]},qe={ellipse:{A:function(){const e=flattenArrays(arguments).filter((e=>!Number.isNaN(e))),t=resize(5,e);this.rx=t[0],this.ry=t[1],this.origin=fe.vector(t[2],t[3]),this.spin=t[4],this.foci=getFoci(this.origin,this.rx,this.ry,this.spin)},G:{x:function(){return this.origin[0]},y:function(){return this.origin[1]}},M:{svgPath:function(e=0,t=2*Math.PI){const r=pathInfo(this.origin[0],this.origin[1],this.rx,this.ry,this.spin,e,t),n=ellipticalArcTo(this.rx,this.ry,this.spin/Math.PI*180,r.fa,r.fs,r.x2,r.y2),o=ellipticalArcTo(this.rx,this.ry,this.spin/Math.PI*180,r.fa,r.fs,r.x3,r.y3);return`M${r.x1} ${r.y1}${n}${o}`},points:function(e=128){return Array.from(Array(e)).map(((t,r)=>2*Math.PI/e*r)).map((e=>pointOnEllipse(this.origin.x,this.origin.y,this.rx,this.ry,this.spin,e)))},polygon:function(){return fe.polygon(this.points(arguments[0]))},segments:function(){const e=this.points(arguments[0]);return e.map(((t,r)=>{const n=(r+1)%e.length;return[t,e[n]]}))}},S:{}}},Re={area:function(){return signedArea(this)},centroid:function(){return fe.vector(centroid(this))},boundingBox:function(){return boundingBox$1(this)},straightSkeleton:function(){return straightSkeleton(this)},scale:function(e,t=centroid(this)){const r=this.map((e=>[0,1].map(((r,n)=>e[n]-t[n])))).map((r=>r.map(((n,o)=>t[o]+r[o]*e))));return this.constructor.fromPoints(r)},rotate:function(e,t=centroid(this)){const r=this.map((r=>{const n=[r[0]-t[0],r[1]-t[1]],o=Math.sqrt(n[0]**2+n[1]**2),s=Math.atan2(n[1],n[0]);return[t[0]+Math.cos(s+e)*o,t[1]+Math.sin(s+e)*o]}));return fe.polygon(r)},translate:function(){const e=getVector(...arguments),t=this.map((t=>t.map(((t,r)=>t+e[r]))));return this.constructor.fromPoints(t)},transform:function(){const e=getMatrix3x4(...arguments),t=this.map((t=>multiplyMatrix3Vector3(e,resize(3,t))));return fe.polygon(t)},nearest:function(){const e=getVector(...arguments),t=nearestPointOnPolygon(this,e);return void 0===t?void 0:Object.assign(t,{edge:this.sides[t.i]})},split:function(){const e=getLine$1(...arguments),t=splitConvexPolygon;return t(this,e.vector,e.origin).map((e=>fe.polygon(e)))},overlap:function(){return overlap(this,...arguments)},intersect:function(){return intersect(this,...arguments)},clip:function(e,t){const r=e.domain_function?e.domain_function:U,n=clipLineConvexPolygon(this,e.vector,e.origin,this.domain_function,r,t);return n?fe.segment(n):void 0},svgPath:function(){const e=Array(this.length).fill("L");return e[0]="M",`${this.map(((t,r)=>`${e[r]}${t[0]} ${t[1]}`)).join("")}z`}},rectToPoints=e=>[[e.x,e.y],[e.x+e.width,e.y],[e.x+e.width,e.y+e.height],[e.x,e.y+e.height]],Ue={rect:{P:Array.prototype,A:function(){const e=getRect(...arguments);this.width=e.width,this.height=e.height,this.origin=fe.vector(e.x,e.y),this.push(...rectToPoints(this)),Object.defineProperty(this,"domain_function",{writable:!0,value:include})},G:{x:function(){return this.origin[0]},y:function(){return this.origin[1]},center:function(){return fe.vector(this.origin[0]+this.width/2,this.origin[1]+this.height/2)}},M:Object.assign({},Re,{inclusive:function(){return this.domain_function=include,this},exclusive:function(){return this.domain_function=exclude,this},area:function(){return this.width*this.height},segments:function(){return[[[(e=this).x,e.y],[e.x+e.width,e.y]],[[e.x+e.width,e.y],[e.x+e.width,e.y+e.height]],[[e.x+e.width,e.y+e.height],[e.x,e.y+e.height]],[[e.x,e.y+e.height],[e.x,e.y]]];var e},svgPath:function(){return`M${this.origin.join(" ")}h${this.width}v${this.height}h${-this.width}Z`}}),S:{fromPoints:function(){const e=boundingBox$1(getVectorOfVectors(arguments));return fe.rect(e.min[0],e.min[1],e.span[0],e.span[1])}}}},De={polygon:{P:Array.prototype,A:function(){this.push(...semiFlattenArrays(arguments)),this.sides=this.map(((e,t,r)=>[e,r[(t+1)%r.length]])),this.vectors=this.sides.map((e=>subtract(e[1],e[0]))),Object.defineProperty(this,"domain_function",{writable:!0,value:include})},G:{isConvex:function(){},points:function(){return this}},M:Object.assign({},Re,{inclusive:function(){return this.domain_function=include,this},exclusive:function(){return this.domain_function=exclude,this},segments:function(){return this.sides}}),S:{fromPoints:function(){return this.constructor(...arguments)},regularPolygon:function(){return this.constructor(makePolygonCircumradius(...arguments))},convexHull:function(){return this.constructor(convexHull(...arguments))}}}},Ge={polyline:{P:Array.prototype,A:function(){this.push(...semiFlattenArrays(arguments))},G:{points:function(){return this}},M:{svgPath:function(){const e=Array(this.length).fill("L");return e[0]="M",`${this.map(((t,r)=>`${e[r]}${t[0]} ${t[1]}`)).join("")}`}},S:{fromPoints:function(){return this.constructor(...arguments)}}}},array_assign=(e,t)=>{for(let r=0;r<12;r+=1)e[r]=t[r];return e},We={matrix:{P:Array.prototype,A:function(){getMatrix3x4(arguments).forEach((e=>this.push(e)))},G:{},M:{copy:function(){return fe.matrix(...Array.from(this))},set:function(){return array_assign(this,getMatrix3x4(arguments))},isIdentity:function(){return isIdentity3x4(this)},multiply:function(e){return array_assign(this,multiplyMatrices3(this,e))},determinant:function(){return determinant3(this)},inverse:function(){return array_assign(this,invertMatrix3(this))},translate:function(e,t,r){return array_assign(this,multiplyMatrices3(this,makeMatrix3Translate(e,t,r)))},rotateX:function(e){return array_assign(this,multiplyMatrices3(this,makeMatrix3RotateX(e)))},rotateY:function(e){return array_assign(this,multiplyMatrices3(this,makeMatrix3RotateY(e)))},rotateZ:function(e){return array_assign(this,multiplyMatrices3(this,makeMatrix3RotateZ(e)))},rotate:function(e,t,r){const n=makeMatrix3Rotate(e,t,r);return array_assign(this,multiplyMatrices3(this,n))},scale:function(...e){return array_assign(this,multiplyMatrices3(this,makeMatrix3Scale(...e)))},reflectZ:function(e,t){const r=makeMatrix3ReflectZ(e,t);return array_assign(this,multiplyMatrices3(this,r))},transform:function(...e){return fe.vector(multiplyMatrix3Vector3(this,resize(3,getVector(e))))},transformVector:function(e){return fe.vector(multiplyMatrix3Vector3(this,resize(3,getVector(e))))},transformLine:function(...e){const t=getLine$1(e);return fe.line(multiplyMatrix3Line3(this,t.vector,t.origin))}},S:{}}},Ze=Object.assign({},ze,Ne,$e,Ve,Be,qe,Ue,De,Ge,We),create=function(e,t){const r=Object.create(Ze[e].proto);return Ze[e].A.apply(r,t),r};Object.assign(fe,{vector:function(){return create("vector",arguments)},line:function(){return create("line",arguments)},ray:function(){return create("ray",arguments)},segment:function(){return create("segment",arguments)},circle:function(){return create("circle",arguments)},ellipse:function(){return create("ellipse",arguments)},rect:function(){return create("rect",arguments)},polygon:function(){return create("polygon",arguments)},polyline:function(){return create("polyline",arguments)},matrix:function(){return create("matrix",arguments)}}),Object.keys(Ze).forEach((e=>{const t={};t.prototype=null!=Ze[e].P?Object.create(Ze[e].P):Object.create(Object.prototype),t.prototype.constructor=t,fe[e].prototype=t.prototype,fe[e].prototype.constructor=fe[e],Object.keys(Ze[e].G).forEach((r=>Object.defineProperty(t.prototype,r,{get:Ze[e].G[r]}))),Object.keys(Ze[e].M).forEach((r=>Object.defineProperty(t.prototype,r,{value:Ze[e].M[r]}))),Object.keys(Ze[e].S).forEach((t=>Object.defineProperty(fe[e],t,{value:Ze[e].S[t].bind(fe[e].prototype)}))),Ze[e].proto=t.prototype}));const Je=fe;Object.assign(Je,{...ie,...he,...we,...je});const vertex_degree=function(e,t){const r=this;Object.defineProperty(e,"degree",{get:()=>r.vertices_vertices&&r.vertices_vertices[t]?r.vertices_vertices[t].length:null})},edge_coords=function(e,t){const r=this;Object.defineProperty(e,"coords",{get:()=>{if(r.edges_vertices&&r.edges_vertices[t]&&r.vertices_coords)return r.edges_vertices[t].map((e=>r.vertices_coords[e]))}})},face_simple=function(e,t){const r=this;Object.defineProperty(e,"simple",{get:()=>{if(!r.faces_vertices||!r.faces_vertices[t])return null;for(let n=0;n<e.length-1;n+=1)for(let o=n+1;o<e.length;o+=1)if(r.faces_vertices[t][n]===r.faces_vertices[t][o])return!1;return!0}})},face_coords=function(e,t){const r=this;Object.defineProperty(e,"coords",{get:()=>{if(r.faces_vertices&&r.faces_vertices[t]&&r.vertices_coords)return r.faces_vertices[t].map((e=>r.vertices_coords[e]))}})};var Ye={vertices:function(e,t){return vertex_degree.call(this,e,t),e},edges:function(e,t){return edge_coords.call(this,e,t),e},faces:function(e,t){return face_simple.call(this,e,t),face_coords.call(this,e,t),e}};const He={file:["file_spec","file_creator","file_author","file_title","file_description","file_classes","file_frames"],frame:["frame_author","frame_title","frame_description","frame_attributes","frame_classes","frame_unit","frame_parent","frame_inherit"],graph:["vertices_coords","vertices_vertices","vertices_faces","edges_vertices","edges_faces","edges_assignment","edges_foldAngle","edges_length","faces_vertices","faces_edges","vertices_edges","edges_edges","faces_faces"],orders:["edgeOrders","faceOrders"]};var Xe=Object.freeze({__proto__:null,foldKeys:He,foldFileClasses:["singleModel","multiModel","animation","diagrams"],foldFrameClasses:["creasePattern","foldedForm","graph","linkage"],foldFrameAttributes:["2D","3D","abstract","manifold","nonManifold","orientable","nonOrientable","selfTouching","nonSelfTouching","selfIntersecting","nonSelfIntersecting"]});const Ke={vertices:"vertex",edges:"edge",faces:"face"},Qe=Array.from("BbMmVvFfJjUu"),et={b:"boundary",m:"mountain",v:"valley",f:"flat",j:"join",u:"unassigned"};Object.keys(et).forEach((e=>{et[e.toUpperCase()]=et[e]}));const tt={M:-180,m:-180,V:180,v:180,B:0,b:0,F:0,f:0,J:0,j:0,U:0,u:0},edgeAssignmentToFoldAngle=e=>tt[e]||0,edgeFoldAngleToAssignment=e=>e>Je.EPSILON?"V":e<-Je.EPSILON?"M":"U",edgeFoldAngleIsFlat=e=>Je.fnEpsilonEqual(0,e)||Je.fnEpsilonEqual(-180,e)||Je.fnEpsilonEqual(180,e),edgesFoldAngleAreAllFlat=({edges_foldAngle:e})=>{if(!e)return!0;for(let t=0;t<e.length;t+=1)if(!edgeFoldAngleIsFlat(e[t]))return!1;return!0},filterKeysWithSuffix=(e,t)=>Object.keys(e).map((e=>e.substring(e.length-t.length,e.length)===t?e:void 0)).filter((e=>void 0!==e)),filterKeysWithPrefix=(e,t)=>Object.keys(e).map((e=>e.substring(0,t.length)===t?e:void 0)).filter((e=>void 0!==e)),getGraphKeysWithPrefix=(e,t)=>filterKeysWithPrefix(e,`${t}_`),getGraphKeysWithSuffix=(e,t)=>filterKeysWithSuffix(e,`_${t}`),transposeGraphArrays=(e,t)=>{const r=getGraphKeysWithPrefix(e,t);if(0===r.length)return[];const n=Math.max(...r.map((t=>e[t].length))),o=Array.from(Array(n)).map((()=>({})));return r.forEach((t=>o.forEach(((r,n)=>{o[n][t]=e[t][n]})))),o},rt=Object.freeze([].concat(He.file).concat(He.frame).concat(He.graph).concat(He.orders)),isFoldObject=(e={})=>0===Object.keys(e).length?0:rt.filter((t=>e[t])).length/Object.keys(e).length;var nt=Object.freeze({__proto__:null,singularize:Ke,pluralize:{vertex:"vertices",edge:"edges",face:"faces"},edgesAssignmentValues:Qe,edgesAssignmentNames:et,edgeAssignmentToFoldAngle:edgeAssignmentToFoldAngle,edgeFoldAngleToAssignment:edgeFoldAngleToAssignment,edgeFoldAngleIsFlat:edgeFoldAngleIsFlat,edgesFoldAngleAreAllFlat:edgesFoldAngleAreAllFlat,filterKeysWithSuffix:filterKeysWithSuffix,filterKeysWithPrefix:filterKeysWithPrefix,getGraphKeysWithPrefix:getGraphKeysWithPrefix,getGraphKeysWithSuffix:getGraphKeysWithSuffix,transposeGraphArrays:transposeGraphArrays,transposeGraphArrayAtIndex:(e,t,r)=>{const n=getGraphKeysWithPrefix(e,t);if(0===n.length)return;const o={};return n.forEach((t=>{o[t]=e[t][r]})),o},isFoldObject:isFoldObject});const verticesClusters=({vertices_coords:e},t=Je.EPSILON)=>{if(!e)return[];const r=[],n=[],o=e.map(((e,t)=>({i:t,d:e[0]}))).sort(((e,t)=>e.d-t.d)).map((e=>e.i));let s=0,a=[0,0],i=[0,0];const updateRange=r=>{const n=r[r.length-1];for(;e[n]-e[r[s]]>t;)s+=1;const o=r.slice(s,r.length).map((t=>e[t])),c=o.map((e=>e[1]));a=[Math.min(...c)-t,Math.max(...c)+t],i=[o[0][0]-t,o[o.length-1][0]+t]};for(;n.length!==e.length;){const t=[],l=o.shift();t.push(l),n.push(l),s=0,updateRange(t);let d=0;for(;d<o.length&&e[o[d]][0]<i[1];)if(c=o[d],e[c][0]>i[0]&&e[c][0]<i[1]&&e[c][1]>a[0]&&e[c][1]<a[1]){const e=o.splice(d,1).shift();t.push(e),n.push(e),updateRange(t)}else d+=1;r.push(t)}var c;return r},max_arrays_length=(...e)=>Math.max(0,...e.filter((e=>void 0!==e)).map((e=>e.length))),count=(e,t)=>max_arrays_length(...getGraphKeysWithPrefix(e,t).map((t=>e[t])));count.vertices=({vertices_coords:e,vertices_faces:t,vertices_vertices:r})=>max_arrays_length(e,t,r),count.edges=({edges_vertices:e,edges_edges:t,edges_faces:r})=>max_arrays_length(e,t,r),count.faces=({faces_vertices:e,faces_edges:t,faces_faces:r})=>max_arrays_length(e,t,r);const uniqueElements=e=>Array.from(new Set(e)),nonUniqueElements=e=>{const t={};return e.forEach((e=>{void 0===t[e]&&(t[e]=0),t[e]+=1})),e.filter((e=>t[e]>1))},uniqueSortedNumbers=e=>uniqueElements(e).sort(((e,t)=>e-t)),splitCircularArray=(e,t)=>(t.sort(((e,t)=>e-t)),[e.slice(t[1]).concat(e.slice(0,t[0]+1)),e.slice(t[0],t[1]+1)]),booleanMatrixToIndexedArray=e=>e.map((e=>e.map(((e,t)=>!0===e?t:void 0)).filter((e=>void 0!==e)))),booleanMatrixToUniqueIndexPairs=e=>{const t=[];for(let r=0;r<e.length-1;r+=1)for(let n=r+1;n<e.length;n+=1)e[r][n]&&t.push([r,n]);return t},selfRelationalUniqueIndexPairs=e=>{const t=[],r=[];return e.forEach(((e,n)=>e.forEach((e=>{n<e&&r.push([n,e]),n!==e||t[n]||(t[n]=!0,r.push([n,e]))})))),r},clusterScalars=(e,t=Je.EPSILON)=>{const r=e.map(((e,t)=>({v:e,i:t}))).sort(((e,t)=>e.v-t.v)).map((e=>e.i)),n=[[r[0]]];for(let o=1;o<r.length;o+=1){const s=r[o],a=n.length-1,i=n[a][n[a].length-1];Math.abs(e[i]-e[s])<t?n[a].push(s):n.push([s])}return n},chooseTwoPairs=e=>{const t=Array(e.length*(e.length-1)/2);let r=0;for(let n=0;n<e.length-1;n+=1)for(let o=n+1;o<e.length;o+=1,r+=1)t[r]=[e[n],e[o]];return t};var ot=Object.freeze({__proto__:null,uniqueElements:uniqueElements,nonUniqueElements:nonUniqueElements,uniqueSortedNumbers:uniqueSortedNumbers,splitCircularArray:splitCircularArray,booleanMatrixToIndexedArray:booleanMatrixToIndexedArray,booleanMatrixToUniqueIndexPairs:booleanMatrixToUniqueIndexPairs,selfRelationalUniqueIndexPairs:selfRelationalUniqueIndexPairs,clusterScalars:clusterScalars,chooseTwoPairs:chooseTwoPairs});const removeGeometryIndices=(e,t,r)=>{const n=count(e,t),o=uniqueSortedNumbers(r),s=[];for(let e=0,t=0,r=0;e<n;e+=1,t+=1){for(;e===o[r];)s[e]=void 0,e+=1,r+=1;e<n&&(s[e]=t)}return getGraphKeysWithSuffix(e,t).forEach((t=>e[t].forEach(((r,n)=>e[t][n].forEach(((r,o)=>{e[t][n][o]=s[r]})))))),o.reverse(),getGraphKeysWithPrefix(e,t).forEach((t=>o.forEach((r=>e[t].splice(r,1))))),s},replaceGeometryIndices=(e,t,r)=>{const n=count(e,t);let o=!1;Object.entries(r).filter((([e,t])=>e<t)).forEach((([e,t])=>{o=!0,delete r[e],r[t]=e})),o&&console.warn(P);const s=Object.keys(r).map((e=>parseInt(e,10))),a=uniqueSortedNumbers(s),i=[];for(let e=0,t=0,o=0;e<n;e+=1,t+=1){for(;e===a[o];){if(i[e]=i[r[a[o]]],void 0===i[e])throw new Error(S);e+=1,o+=1}e<n&&(i[e]=t)}return getGraphKeysWithSuffix(e,t).forEach((t=>e[t].forEach(((r,n)=>e[t][n].forEach(((r,o)=>{e[t][n][o]=i[r]})))))),a.reverse(),getGraphKeysWithPrefix(e,t).forEach((t=>a.forEach((r=>e[t].splice(r,1))))),i},duplicateVertices=(e,t)=>verticesClusters(e,t).filter((e=>e.length>1)),isolatedVertices=({vertices_coords:e,edges_vertices:t,faces_vertices:r})=>{if(!e)return[];let n=e.length;const o=Array(n).fill(!1);return t&&t.forEach((e=>{e.filter((e=>!o[e])).forEach((e=>{o[e]=!0,n-=1}))})),r&&r.forEach((e=>{e.filter((e=>!o[e])).forEach((e=>{o[e]=!0,n-=1}))})),o.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))},removeIsolatedVertices=(e,t)=>(t||(t=isolatedVertices(e)),{map:removeGeometryIndices(e,o,t),remove:t}),removeDuplicateVertices=(e,t=Je.EPSILON)=>{const r=[],n=[],s=verticesClusters(e,t).filter((e=>e.length>1));return s.forEach((e=>{Math.min(...e)!==e[0]&&e.sort(((e,t)=>e-t));for(let t=1;t<e.length;t+=1)r[e[t]]=e[0],n.push(e[t])})),s.map((t=>t.map((t=>e.vertices_coords[t])))).map((e=>Je.average(...e))).forEach(((t,r)=>{e.vertices_coords[s[r][0]]=t})),{map:replaceGeometryIndices(e,o,r),remove:n}};var st=Object.freeze({__proto__:null,duplicateVertices:duplicateVertices,edgeIsolatedVertices:({vertices_coords:e,edges_vertices:t})=>{if(!e||!t)return[];let r=e.length;const n=Array(r).fill(!1);return t.forEach((e=>{e.filter((e=>!n[e])).forEach((e=>{n[e]=!0,r-=1}))})),n.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))},faceIsolatedVertices:({vertices_coords:e,faces_vertices:t})=>{if(!e||!t)return[];let r=e.length;const n=Array(r).fill(!1);return t.forEach((e=>{e.filter((e=>!n[e])).forEach((e=>{n[e]=!0,r-=1}))})),n.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))},isolatedVertices:isolatedVertices,removeIsolatedVertices:removeIsolatedVertices,removeDuplicateVertices:removeDuplicateVertices});const at={edges:"edgeOrders",faces:"faceOrders"},countImplied=(e,t)=>Math.max((e=>{let t=-1;return e.filter((e=>void 0!==e)).forEach((e=>e.forEach((e=>e.forEach((e=>{e>t&&(t=e)})))))),t})(getGraphKeysWithSuffix(e,t).map((t=>e[t]))),e[at[t]]?(e=>{let t=-1;return e.forEach((e=>{e[0]>t&&(t=e[0]),e[1]>t&&(t=e[1])})),t})(e[at[t]]):-1)+1;countImplied.vertices=e=>countImplied(e,o),countImplied.edges=e=>countImplied(e,s),countImplied.faces=e=>countImplied(e,a);const counterClockwiseWalk=({vertices_vertices:e,vertices_sectors:t},r,n,o={})=>{const s={},a={vertices:[r],edges:[],angles:[]};let i=r,c=n;for(;;){const r=e[c],n=(r.indexOf(i)+r.length-1)%r.length,l=r[n],d=`${c} ${l}`;if(s[d])return Object.assign(o,s),a.vertices.pop(),a;if(s[d]=!0,o[d])return;a.vertices.push(c),a.edges.push(d),t&&a.angles.push(t[c][n]),i=c,c=l}},planarVertexWalk=({vertices_vertices:e,vertices_sectors:t})=>{const r={vertices_vertices:e,vertices_sectors:t},n={};return e.map(((e,t)=>e.map((e=>counterClockwiseWalk(r,t,e,n))).filter((e=>void 0!==e)))).flat()},filterWalkedBoundaryFace=e=>e.filter((e=>e.angles.map((e=>Math.PI-e)).reduce(((e,t)=>e+t),0)>0));var it=Object.freeze({__proto__:null,counterClockwiseWalk:counterClockwiseWalk,planarVertexWalk:planarVertexWalk,filterWalkedBoundaryFace:filterWalkedBoundaryFace});const sortVerticesCounterClockwise=({vertices_coords:e},t,r)=>t.map((t=>e[t])).map((t=>Je.subtract(t,e[r]))).map((e=>Math.atan2(e[1],e[0]))).map((e=>e>-Je.EPSILON?e:e+2*Math.PI)).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).map((e=>e.i)).map((e=>t[e])),sortVerticesAlongVector=({vertices_coords:e},t,r)=>t.map((t=>({i:t,d:Je.dot(e[t],r)}))).sort(((e,t)=>e.d-t.d)).map((e=>e.i));var ct=Object.freeze({__proto__:null,sortVerticesCounterClockwise:sortVerticesCounterClockwise,sortVerticesAlongVector:sortVerticesAlongVector});const makeFacesNormal=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))).map((e=>{const t=Je.resize(3,Je.subtract(e[1],e[0])),r=Je.resize(3,Je.subtract(e[2],e[0]));return Je.normalize3(Je.cross3(t,r))})),makeVerticesNormal=({vertices_coords:e,faces_vertices:t,faces_normal:r})=>{r||(r=makeFacesNormal({vertices_coords:e,faces_vertices:t}));const n=e.map((()=>[0,0,0]));return t.forEach(((e,t)=>e.forEach((e=>{return o=n[e],s=r[t],o[0]+=s[0],o[1]+=s[1],void(o[2]+=s[2]);var o,s})))),n.map((e=>Je.normalize3(e)))};var lt=Object.freeze({__proto__:null,makeFacesNormal:makeFacesNormal,makeVerticesNormal:makeVerticesNormal});const makeVerticesEdgesUnsorted=({edges_vertices:e})=>{const t=[];return e.forEach(((e,r)=>e.forEach((e=>{void 0===t[e]&&(t[e]=[]),t[e].push(r)})))),t},makeVerticesEdges=({edges_vertices:e,vertices_vertices:t})=>{const r=makeVerticesToEdgeBidirectional({edges_vertices:e});return t.map(((e,t)=>e.map((e=>r[`${t} ${e}`]))))},makeVerticesVertices2D=({vertices_coords:e,vertices_edges:t,edges_vertices:r})=>{t||(t=makeVerticesEdgesUnsorted({edges_vertices:r}));const n=t.map(((e,t)=>e.map((e=>r[e].filter((e=>e!==t)))).reduce(((e,t)=>e.concat(t)),[])));return void 0===e?n:n.map(((t,r)=>sortVerticesCounterClockwise({vertices_coords:e},t,r)))},makeVerticesVerticesFromFaces=({vertices_coords:e,vertices_faces:t,faces_vertices:r})=>{t||(t=makeVerticesFacesUnsorted({vertices_coords:e,faces_vertices:r}));const n=t.map((e=>e.map((e=>r[e])))),o=n.map(((e,t)=>e.map((e=>e.indexOf(t)))));return n.map(((e,t)=>e.map(((e,r)=>[(o[t][r]+e.length-1)%e.length,o[t][r],(o[t][r]+1)%e.length])))).map(((e,t)=>e.map(((e,r)=>e.map((e=>n[t][r][e])))))).map((e=>{const t=e.map((e=>[[0,1],[1,2]].map((t=>t.map((t=>e[t])).join(" "))))),r={},n={};return t.forEach(((e,t)=>{r[e[0]]=t,n[e[1]]=t})),{facesVerts:t,to:n,from:r}})).map((e=>{const t=Object.keys(e.to),r=t.map((e=>e.split(" ").reverse().join(" "))),n=t.filter(((t,n)=>!(r[n]in e.from)));if(n.length>2)return console.warn("vertices_vertices found an unsolvable vertex"),[];const o=n.length?n:[t[0]],s=[],a={};for(let t=0;t<o.length;t+=1){const r=o[t],n=[r];a[r]=!0;let i=!1;do{const t=n[n.length-1],r=e.to[t];if(!(r in e.facesVerts))break;let o;if(e.facesVerts[r][0]===t&&(o=e.facesVerts[r][1]),e.facesVerts[r][1]===t&&(o=e.facesVerts[r][0]),void 0===o)return"not found";const s=o.split(" ").reverse().join(" ");n.push(o),i=s in a,i||n.push(s),a[o]=!0,a[s]=!0}while(!i);const c=n.filter(((e,t)=>t%2==0)).map((e=>e.split(" ")[1])).map((e=>parseInt(e,10)));s.push(...c)}return s}))},makeVerticesVertices=e=>e.vertices_coords&&e.vertices_coords.length?3===e.vertices_coords[0].length?makeVerticesVerticesFromFaces(e):makeVerticesVertices2D(e):[],makeVerticesVerticesUnsorted=({vertices_edges:e,edges_vertices:t})=>(e||(e=makeVerticesEdgesUnsorted({edges_vertices:t})),e.map(((e,r)=>e.flatMap((e=>t[e].filter((e=>e!==r))))))),makeVerticesFacesUnsorted=({vertices_coords:e,faces_vertices:t})=>{if(!t)return e.map((()=>[]));const r=void 0!==e?e.map((()=>[])):Array.from(Array(countImplied.vertices({faces_vertices:t}))).map((()=>[]));return t.forEach(((e,t)=>{const n=[];e.forEach((e=>{n[e]=t})),n.forEach(((e,t)=>r[t].push(e)))})),r},makeVerticesFaces=({vertices_coords:e,vertices_vertices:t,faces_vertices:r})=>{if(!r)return e.map((()=>[]));if(!t)return makeVerticesFacesUnsorted({vertices_coords:e,faces_vertices:r});const n=makeVerticesToFace({faces_vertices:r});return t.map(((e,t)=>e.map(((e,r,n)=>[n[(r+1)%n.length],t,e].join(" "))))).map((e=>e.map((e=>n[e]))))},makeVerticesToEdgeBidirectional=({edges_vertices:e})=>{const t={};return e.map((e=>e.join(" "))).forEach(((e,r)=>{t[e]=r})),e.map((e=>`${e[1]} ${e[0]}`)).forEach(((e,r)=>{t[e]=r})),t},makeVerticesToEdge=({edges_vertices:e})=>{const t={};return e.map((e=>e.join(" "))).forEach(((e,r)=>{t[e]=r})),t},makeVerticesToFace=({faces_vertices:e})=>{const t={};return e.forEach(((e,r)=>e.map(((t,r)=>[0,1,2].map((t=>(r+t)%e.length)).map((t=>e[t])).join(" "))).forEach((e=>{t[e]=r})))),t},makeVerticesVerticesVector=({vertices_coords:e,vertices_vertices:t,edges_vertices:r,edges_vector:n})=>{n||(n=makeEdgesVector({vertices_coords:e,edges_vertices:r}));const o=makeVerticesToEdge({edges_vertices:r});return t.map(((e,r)=>t[r].map((e=>{const t=o[`${r} ${e}`],s=o[`${e} ${r}`];return void 0!==t?n[t]:void 0!==s?Je.flip(n[s]):void 0}))))},makeVerticesSectors=({vertices_coords:e,vertices_vertices:t,edges_vertices:r,edges_vector:n})=>makeVerticesVerticesVector({vertices_coords:e,vertices_vertices:t,edges_vertices:r,edges_vector:n}).map((e=>1===e.length?[Je.TWO_PI]:Je.counterClockwiseSectors2(e))),makeEdgesFacesUnsorted=({edges_vertices:e,faces_edges:t})=>{const r=void 0!==e?e.map((()=>[])):Array.from(Array(countImplied.edges({faces_edges:t}))).map((()=>[]));return t.forEach(((e,t)=>{const n=[];e.forEach((e=>{n[e]=t})),n.forEach(((e,t)=>r[t].push(e)))})),r},makeEdgesFaces=({vertices_coords:e,edges_vertices:t,edges_vector:r,faces_vertices:n,faces_edges:o,faces_center:s})=>{if(!t)return makeEdgesFacesUnsorted({faces_edges:o});r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const a=t.map((t=>e[t[0]]));s||(s=makeFacesConvexCenter({vertices_coords:e,faces_vertices:n}));const i=t.map((()=>[]));return o.forEach(((e,t)=>{const r=[];e.forEach((e=>{r[e]=t})),r.forEach(((e,t)=>i[t].push(e)))})),i.forEach(((e,t)=>{const n=e.map((e=>s[e])).map((e=>Je.subtract2(e,a[t]))).map((e=>Je.cross2(e,r[t])));e.sort(((e,t)=>n[e]-n[t]))})),i},ft={M:-180,m:-180,V:180,v:180},makeEdgesAssignmentSimple=({edges_foldAngle:e})=>e.map((e=>0===e?"F":e<0?"M":"V")),makeEdgesAssignment=({edges_vertices:e,edges_foldAngle:t,edges_faces:r,faces_vertices:n,faces_edges:o})=>(r||(o||(o=makeFacesEdgesFromVertices({edges_vertices:e,faces_vertices:n})),r=makeEdgesFacesUnsorted({edges_vertices:e,faces_edges:o})),t.map(((e,t)=>r[t].length<2?"B":0===e?"F":e<0?"M":"V"))),makeEdgesFoldAngle=({edges_assignment:e})=>e.map((e=>ft[e]||0)),makeEdgesFoldAngleFromFaces=({vertices_coords:e,edges_vertices:t,edges_faces:r,edges_assignment:n,faces_vertices:o,faces_edges:s,faces_normal:a,faces_center:i})=>(r||(s||(s=makeFacesEdgesFromVertices({edges_vertices:t,faces_vertices:o})),r=makeEdgesFacesUnsorted({edges_vertices:t,faces_edges:s})),a||(a=makeFacesNormal({vertices_coords:e,faces_vertices:o})),i||(i=makeFacesConvexCenter({vertices_coords:e,faces_vertices:o})),r.map(((e,t)=>{if(e.length>2)throw new Error(O);if(e.length<2)return 0;const r=a[e[0]],o=a[e[1]],s=Je.normalize(Je.subtract(i[e[1]],i[e[0]]));let c=Math.sign(Je.dot(r,s));if(0===c){if(!n||!n[t])throw new Error(C);"F"!==n[t]&&"F"!==n[t]||(c=0),"M"!==n[t]&&"m"!==n[t]||(c=-1),"V"!==n[t]&&"v"!==n[t]||(c=1)}return Math.acos(Je.dot(r,o))*(180/Math.PI)*c}))),makeEdgesCoords=({vertices_coords:e,edges_vertices:t})=>t.map((t=>t.map((t=>e[t])))),makeEdgesVector=({vertices_coords:e,edges_vertices:t})=>makeEdgesCoords({vertices_coords:e,edges_vertices:t}).map((e=>Je.subtract(e[1],e[0]))),makeEdgesLength=({vertices_coords:e,edges_vertices:t})=>makeEdgesVector({vertices_coords:e,edges_vertices:t}).map((e=>Je.magnitude(e))),makeEdgesBoundingBox=({vertices_coords:e,edges_vertices:t,edges_coords:r},n=0)=>(r||(r=makeEdgesCoords({vertices_coords:e,edges_vertices:t})),r.map((e=>Je.boundingBox(e,n)))),makePlanarFaces=({vertices_coords:e,vertices_vertices:t,vertices_edges:r,vertices_sectors:n,edges_vertices:o,edges_vector:s})=>{t||(t=makeVerticesVertices({vertices_coords:e,edges_vertices:o,vertices_edges:r})),n||(n=makeVerticesSectors({vertices_coords:e,vertices_vertices:t,edges_vertices:o,edges_vector:s}));const a=makeVerticesToEdgeBidirectional({edges_vertices:o});return filterWalkedBoundaryFace(planarVertexWalk({vertices_vertices:t,vertices_sectors:n})).map((e=>({...e,edges:e.edges.map((e=>a[e]))})))},makeFacesVerticesFromEdges=e=>e.faces_edges.map((t=>t.map((t=>e.edges_vertices[t])).map(((e,t,r)=>{const n=r[(t+1)%r.length];return e[0]===n[0]||e[0]===n[1]?e[1]:e[0]})))),makeFacesEdgesFromVertices=e=>{const t=makeVerticesToEdgeBidirectional(e);return e.faces_vertices.map((e=>e.map(((e,t,r)=>[e,r[(t+1)%r.length]].join(" "))))).map((e=>e.map((e=>t[e]))))},makeFacesFaces=({faces_vertices:e})=>{const t=e.map((()=>[])),r={};return e.forEach(((e,t)=>e.forEach(((n,o,s)=>{let a=s[(o+1)%e.length];a<n&&([n,a]=[a,n]);const i=`${n} ${a}`;void 0===r[i]&&(r[i]={}),r[i][t]=!0})))),Object.values(r).map((e=>Object.keys(e))).filter((e=>e.length>1)).forEach((e=>{t[e[0]].push(parseInt(e[1],10)),t[e[1]].push(parseInt(e[0],10))})),t},makeFacesPolygon=({vertices_coords:e,faces_vertices:t},r)=>t.map((t=>t.map((t=>e[t])))).map((e=>Je.makePolygonNonCollinear(e,r))),makeFacesConvexCenter=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])).reduce(((e,t)=>Je.add(e,t)),Array(e[0].length).fill(0)).map((e=>e/t.length))));var dt=Object.freeze({__proto__:null,makeVerticesEdgesUnsorted:makeVerticesEdgesUnsorted,makeVerticesEdges:makeVerticesEdges,makeVerticesVertices2D:makeVerticesVertices2D,makeVerticesVerticesFromFaces:makeVerticesVerticesFromFaces,makeVerticesVertices:makeVerticesVertices,makeVerticesVerticesUnsorted:makeVerticesVerticesUnsorted,makeVerticesFacesUnsorted:makeVerticesFacesUnsorted,makeVerticesFaces:makeVerticesFaces,makeVerticesToEdgeBidirectional:makeVerticesToEdgeBidirectional,makeVerticesToEdge:makeVerticesToEdge,makeVerticesToFace:makeVerticesToFace,makeVerticesVerticesVector:makeVerticesVerticesVector,makeVerticesSectors:makeVerticesSectors,makeEdgesEdges:({edges_vertices:e,vertices_edges:t})=>e.map(((e,r)=>{const n=t[e[0]].filter((e=>e!==r)),o=t[e[1]].filter((e=>e!==r));return n.concat(o)})),makeEdgesFacesUnsorted:makeEdgesFacesUnsorted,makeEdgesFaces:makeEdgesFaces,makeEdgesAssignmentSimple:makeEdgesAssignmentSimple,makeEdgesAssignment:makeEdgesAssignment,makeEdgesFoldAngle:makeEdgesFoldAngle,makeEdgesFoldAngleFromFaces:makeEdgesFoldAngleFromFaces,makeEdgesCoords:makeEdgesCoords,makeEdgesVector:makeEdgesVector,makeEdgesLength:makeEdgesLength,makeEdgesBoundingBox:makeEdgesBoundingBox,makePlanarFaces:makePlanarFaces,makeFacesVerticesFromEdges:makeFacesVerticesFromEdges,makeFacesEdgesFromVertices:makeFacesEdgesFromVertices,makeFacesFaces:makeFacesFaces,makeFacesPolygon:makeFacesPolygon,makeFacesPolygonQuick:({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))),makeFacesCenter2D:({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))).map((e=>Je.centroid(e))),makeFacesConvexCenter:makeFacesConvexCenter});const circularEdges=({edges_vertices:e})=>{if(!e)return[];const t=[];for(let r=0;r<e.length;r+=1)e[r][0]===e[r][1]&&t.push(r);return t},duplicateEdges=({edges_vertices:e})=>{if(!e)return[];const t=[],r={};for(let n=0;n<e.length;n+=1){const o=`${e[n][0]} ${e[n][1]}`,s=`${e[n][1]} ${e[n][0]}`;void 0!==r[o]?t[n]=r[o]:(r[o]=n,r[s]=n)}return t},removeCircularEdges=(e,t)=>(t||(t=circularEdges(e)),t.length&&((e,t,r)=>{const n={};r.forEach((e=>{n[e]=!0})),getGraphKeysWithSuffix(e,t).forEach((t=>e[t].forEach(((r,o)=>{for(let s=r.length-1;s>=0;s-=1)!0===n[r[s]]&&e[t][o].splice(s,1)}))))})(e,s,t),{map:removeGeometryIndices(e,s,t),remove:t}),removeDuplicateEdges=(e,t)=>{t||(t=duplicateEdges(e));const r=Object.keys(t).map((e=>parseInt(e,10))),n=replaceGeometryIndices(e,s,t);return r.length&&(e.vertices_edges||e.vertices_vertices||e.vertices_faces)&&(e.vertices_edges=makeVerticesEdgesUnsorted(e),e.vertices_vertices=makeVerticesVertices(e),e.vertices_edges=makeVerticesEdges(e),e.vertices_faces=makeVerticesFaces(e)),{map:n,remove:r}};var ut=Object.freeze({__proto__:null,circularEdges:circularEdges,duplicateEdges:duplicateEdges,removeCircularEdges:removeCircularEdges,removeDuplicateEdges:removeDuplicateEdges});const mergeSimpleNextmaps=(...e)=>{if(0===e.length)return[];const t=e[0].map(((e,t)=>t));return e.forEach((e=>t.forEach(((r,n)=>{t[n]=e[r]})))),t},mergeNextmaps=(...e)=>{if(0===e.length)return[];const t=e[0].map(((e,t)=>[t]));return e.forEach((e=>{t.forEach(((r,n)=>r.forEach(((r,o)=>{t[n][o]=e[r]})))),t.forEach(((e,r)=>{t[r]=e.reduce(((e,t)=>e.concat(t)),[]).filter((e=>void 0!==e))}))})),t},mergeBackmaps=(...e)=>{if(0===e.length)return[];let r=e[0].reduce(((e,t)=>e.concat(t)),[]).map(((e,t)=>[t]));return e.forEach((e=>{const n=[];e.forEach(((e,o)=>{n[o]=typeof e===t?r[e]:e.map((e=>r[e])).reduce(((e,t)=>e.concat(t)),[])})),r=n})),r},invertMap=e=>{const r=[],setIndexValue=(e,n)=>{void 0!==r[e]?typeof r[e]===t?r[e]=[r[e],n]:r[e].push(n):r[e]=n};return e.forEach(((e,r)=>{null!=e&&(typeof e===t&&setIndexValue(e,r),e.constructor===Array&&e.forEach((e=>setIndexValue(e,r))))})),r},invertSimpleMap=e=>{const t=[];return e.forEach(((e,r)=>{t[e]=r})),t};var mt=Object.freeze({__proto__:null,mergeSimpleNextmaps:mergeSimpleNextmaps,mergeNextmaps:mergeNextmaps,mergeSimpleBackmaps:(...e)=>{if(0===e.length)return[];let t=e[0].map(((e,t)=>t));return e.forEach((e=>{const r=e.map((e=>t[e]));t=r})),t},mergeBackmaps:mergeBackmaps,invertMap:invertMap,invertSimpleMap:invertSimpleMap});const clean=(e,t)=>{const r=removeDuplicateVertices(e,t),n=removeCircularEdges(e),o=removeDuplicateEdges(e),s=removeIsolatedVertices(e),a=invertSimpleMap(r.map),i=s.remove.map((e=>a[e])),c=invertSimpleMap(n.map),l=o.remove.map((e=>c[e]));return{vertices:{map:mergeSimpleNextmaps(r.map,s.map),remove:r.remove.concat(i)},edges:{map:mergeSimpleNextmaps(n.map,o.map),remove:n.remove.concat(l)}}},validate=(e,t)=>{const r=duplicateEdges(e),n=circularEdges(e),o=isolatedVertices(e),s=duplicateVertices(e,t),a=(e=>{const t=count.vertices(e),r=count.edges(e),n=count.faces(e);return{vertices:t>=countImplied.vertices(e),edges:r>=countImplied.edges(e),faces:n>=countImplied.faces(e)}})(e);return{summary:0===r.length&&0===n.length&&0===o.length&&a.vertices&&a.edges&&a.faces?"valid":"problematic",vertices:{isolated:o,duplicate:s,references:a.vertices},edges:{circular:n,duplicate:r,references:a.edges},faces:{references:a.faces}}},populate=(e,t)=>"object"!=typeof e?e:e.edges_vertices?(e.vertices_edges=makeVerticesEdgesUnsorted(e),e.vertices_vertices=makeVerticesVertices(e),e.vertices_edges=makeVerticesEdges(e),(e=>{const t=e.edges_vertices.length;if(e.edges_assignment||(e.edges_assignment=[]),e.edges_foldAngle||(e.edges_foldAngle=[]),e.edges_assignment.length>e.edges_foldAngle.length)for(let t=e.edges_foldAngle.length;t<e.edges_assignment.length;t+=1)e.edges_foldAngle[t]=edgeAssignmentToFoldAngle(e.edges_assignment[t]);if(e.edges_foldAngle.length>e.edges_assignment.length)for(let t=e.edges_assignment.length;t<e.edges_foldAngle.length;t+=1)e.edges_assignment[t]=edgeFoldAngleToAssignment(e.edges_foldAngle[t]);for(let r=e.edges_assignment.length;r<t;r+=1)e.edges_assignment[r]="U",e.edges_foldAngle[r]=0})(e),((e,t)=>{if(void 0!==t||e.faces_vertices||e.faces_edges||(t=!0),t&&e.vertices_coords){const t=makePlanarFaces(e);return e.faces_vertices=t.map((e=>e.vertices)),void(e.faces_edges=t.map((e=>e.edges)))}e.faces_vertices&&e.faces_edges||(e.faces_vertices&&!e.faces_edges?e.faces_edges=makeFacesEdgesFromVertices(e):e.faces_edges&&!e.faces_vertices?e.faces_vertices=makeFacesVerticesFromEdges(e):(e.faces_vertices=[],e.faces_edges=[]))})(e,t),e.vertices_faces=makeVerticesFaces(e),e.edges_faces=makeEdgesFacesUnsorted(e),e.faces_faces=makeFacesFaces(e),e):e,getEdgesVerticesOverlappingSpan=(e,t=Je.EPSILON)=>makeEdgesBoundingBox(e,t).map((t=>e.vertices_coords.map((e=>e[0]>t.min[0]&&e[1]>t.min[1]&&e[0]<t.max[0]&&e[1]<t.max[1])))),getEdgesEdgesOverlapingSpans=({vertices_coords:e,edges_vertices:t,edges_coords:r},n=Je.EPSILON)=>{const o=makeEdgesBoundingBox({vertices_coords:e,edges_vertices:t,edges_coords:r},n),s=t.map((()=>[]));for(let e=0;e<t.length-1;e+=1)for(let r=e+1;r<t.length;r+=1){const t=(o[e].max[0]<o[r].min[0]||o[r].max[0]<o[e].min[0])&&(o[e].max[1]<o[r].min[1]||o[r].max[1]<o[e].min[1]);s[e][r]=!t,s[r][e]=!t}for(let e=0;e<t.length;e+=1)s[e][e]=!0;return s};var pt=Object.freeze({__proto__:null,getEdgesVerticesOverlappingSpan:getEdgesVerticesOverlappingSpan,getEdgesEdgesOverlapingSpans:getEdgesEdgesOverlapingSpans});const getOppositeVertices=({edges_vertices:e},t,r)=>(r.forEach((r=>{if(e[r][0]===t&&e[r][1]===t)throw new Error(j)})),r.map((r=>e[r][0]===t?e[r][1]:e[r][0]))),isVertexCollinear=({vertices_coords:e,vertices_edges:t,edges_vertices:r},n,o=Je.EPSILON)=>{if(!e||!r)return!1;t||(t=makeVerticesEdgesUnsorted({edges_vertices:r}));const s=t[n];if(void 0===s||2!==s.length)return!1;const a=getOppositeVertices({edges_vertices:r},n,s),i=[a[0],n,a[1]].map((t=>e[t]));return Je.collinearBetween(...i,!1,o)},getVerticesEdgesOverlap=({vertices_coords:e,edges_vertices:t,edges_coords:r},n=Je.EPSILON)=>{r||(r=t.map((t=>t.map((t=>e[t])))));const o=getEdgesVerticesOverlappingSpan({vertices_coords:e,edges_vertices:t,edges_coords:r},n);for(let t=0;t<r.length;t+=1)for(let s=0;s<e.length;s+=1)o[t][s]&&(o[t][s]=Je.overlapLinePoint(Je.subtract(r[t][1],r[t][0]),r[t][0],e[s],Je.excludeS,n));return o.map((e=>e.map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e))))};var gt=Object.freeze({__proto__:null,isVertexCollinear:isVertexCollinear,getVerticesEdgesOverlap:getVerticesEdgesOverlap});const makeEdgesLineParallelOverlap=({vertices_coords:e,edges_vertices:t},r,n,o=Je.EPSILON)=>{const s=Je.normalize2(r),a=t.map((t=>e[t[0]])),i=t.map((t=>t.map((t=>e[t])))).map((e=>Je.subtract2(e[1],e[0]))).map((e=>Je.parallel2(e,r,o)));for(let e=0;e<t.length;e+=1){if(!i[e])continue;if(Je.fnEpsilonEqualVectors(a[e],n)){i[e]=!0;continue}const t=Je.normalize2(Je.subtract2(a[e],n)),r=Math.abs(Je.dot2(t,s));i[e]=Math.abs(1-r)<o}return i},makeEdgesSegmentIntersection=({vertices_coords:e,edges_vertices:t,edges_coords:r},n,o,s=Je.EPSILON)=>{r||(r=makeEdgesCoords({vertices_coords:e,edges_vertices:t}));const a=Je.boundingBox([n,o],s),i=Je.subtract2(o,n);return makeEdgesBoundingBox({vertices_coords:e,edges_vertices:t,edges_coords:r},s).map((e=>Je.overlapBoundingBoxes(a,e))).map(((e,t)=>e?Je.intersectLineLine(i,n,Je.subtract2(r[t][1],r[t][0]),r[t][0],Je.includeS,Je.includeS,s):void 0))},makeEdgesEdgesIntersection=function({vertices_coords:e,edges_vertices:t,edges_vector:r,edges_origin:n},o=Je.EPSILON){r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t})),n||(n=t.map((t=>e[t[0]])));const s=r.map((()=>[])),a=getEdgesEdgesOverlapingSpans({vertices_coords:e,edges_vertices:t},o);for(let e=0;e<r.length-1;e+=1)for(let t=e+1;t<r.length;t+=1){if(!0!==a[e][t])continue;const i=Je.intersectLineLine(r[e],n[e],r[t],n[t],Je.excludeS,Je.excludeS,o);void 0!==i&&(s[e][t]=i,s[t][e]=i)}return s},intersectConvexFaceLine=({vertices_coords:e,edges_vertices:t,faces_vertices:r,faces_edges:n},o,s,a,i=Je.EPSILON)=>{const c=r[o].map((t=>e[t])).map((e=>Je.overlapLinePoint(s,a,e,(()=>!0),i))).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)),l=c.map((e=>r[o][e]));if(c.concat(c.map((e=>e+r[o].length))).map(((e,t,r)=>r[t+1]-e==1)).reduce(((e,t)=>e||t),!1))return;if(l.length>1)return{vertices:l,edges:[]};const d=n[o].map((r=>t[r].map((t=>e[t])))).map((e=>Je.intersectLineLine(s,a,Je.subtract(e[1],e[0]),e[0],Je.includeL,Je.excludeS,i))).map(((e,t)=>({coords:e,edge:n[o][t]}))).filter((e=>void 0!==e.coords)).filter((e=>!l.map((r=>t[e.edge].includes(r))).reduce(((e,t)=>e||t),!1)));return d.length+l.length===2?{vertices:l,edges:d}:void 0};var ht=Object.freeze({__proto__:null,makeEdgesLineParallelOverlap:makeEdgesLineParallelOverlap,makeEdgesSegmentIntersection:makeEdgesSegmentIntersection,makeEdgesEdgesIntersection:makeEdgesEdgesIntersection,intersectConvexFaceLine:intersectConvexFaceLine});const fragment_graph=(e,t=Je.EPSILON)=>{const r=e.edges_vertices.map((t=>t.map((t=>e.vertices_coords[t])))),n=r.map((e=>Je.subtract(e[1],e[0]))),o=r.map((e=>e[0])),s=makeEdgesEdgesIntersection({vertices_coords:e.vertices_coords,edges_vertices:e.edges_vertices,edges_vector:n,edges_origin:o},1e-6),a=getVerticesEdgesOverlap({vertices_coords:e.vertices_coords,edges_vertices:e.edges_vertices,edges_coords:r},t);if(0===s.flat().filter((e=>void 0!==e)).length&&0===a.flat().filter((e=>void 0!==e)).length)return;const i=e.vertices_coords.length;s.forEach((t=>t.filter((e=>void 0!==e)).filter((e=>2===e.length)).forEach((t=>{const r=e.vertices_coords.length;e.vertices_coords.push([...t]),t.splice(0,2),t.push(r)})))),s.forEach(((e,t)=>{e.forEach(((e,r)=>{e&&(s[t][r]=e[0])}))}));const c=s.map((e=>e.filter((e=>void 0!==e))));e.edges_vertices.forEach(((e,t)=>e.push(...c[t],...a[t]))),e.edges_vertices.forEach(((t,r)=>{e.edges_vertices[r]=sortVerticesAlongVector({vertices_coords:e.vertices_coords},t,n[r])}));const l=e.edges_vertices.map(((e,t)=>Array(e.length-1).fill(t))).flat();if(e.edges_vertices=e.edges_vertices.map((e=>Array.from(Array(e.length-1)).map(((t,r,n)=>[e[r],e[r+1]])))).flat(),e.edges_assignment&&e.edges_foldAngle&&e.edges_foldAngle.length>e.edges_assignment.length)for(let t=e.edges_assignment.length;t<e.edges_foldAngle.length;t+=1)e.edges_assignment[t]=edgeFoldAngleToAssignment(e.edges_foldAngle[t]);return e.edges_assignment&&(e.edges_assignment=l.map((t=>e.edges_assignment[t]||"U"))),e.edges_foldAngle&&(e.edges_foldAngle=l.map((t=>e.edges_foldAngle[t])).map(((t,r)=>void 0===t?edgeAssignmentToFoldAngle(e.edges_assignment[r]):t))),{vertices:{new:Array.from(Array(e.vertices_coords.length-i)).map(((e,t)=>i+t))},edges:{backmap:l}}},vt=[c,l,u,m],fragment=(e,t=Je.EPSILON)=>{e.vertices_coords=e.vertices_coords.map((e=>e.slice(0,2))),[o,s,a].map((t=>getGraphKeysWithPrefix(e,t))).flat().filter((e=>!vt.includes(e))).forEach((t=>delete e[t]));const r={vertices:{},edges:{}};let n;for(n=0;n<20;n+=1){const n=removeDuplicateVertices(e,t/2),o=removeDuplicateEdges(e),s=removeCircularEdges(e),a=fragment_graph(e,t);if(void 0===a){r.vertices.map=void 0===r.vertices.map?n.map:mergeNextmaps(r.vertices.map,n.map),r.edges.map=void 0===r.edges.map?mergeNextmaps(o.map,s.map):mergeNextmaps(r.edges.map,o.map,s.map);break}const i=invertMap(a.edges.backmap),c=mergeNextmaps(o.map,s.map,i);r.vertices.map=void 0===r.vertices.map?n.map:mergeNextmaps(r.vertices.map,n.map),r.edges.map=void 0===r.edges.map?c:mergeNextmaps(r.edges.map,c)}if(20===n)throw new Error(A);return r},boundingBox=({vertices_coords:e},t)=>Je.boundingBox(e,t),boundaryVertices=({edges_vertices:e,edges_assignment:t})=>uniqueElements(e.filter(((e,r)=>"B"===t[r]||"b"===t[r])).flat()),boundary=({vertices_edges:e,edges_vertices:t,edges_assignment:r})=>{if(void 0===r)return{vertices:[],edges:[]};e||(e=makeVerticesEdgesUnsorted({edges_vertices:t}));const n=r.map((e=>"B"===e||"b"===e)),o=[],s=[];let a=-1;for(let e=0;e<n.length;e+=1)if(n[e]){a=e;break}if(-1===a)return{vertices:[],edges:[]};n[a]=!1,o.push(a),s.push(t[a][0]);let i=t[a][1];for(;s[0]!==i;){if(s.push(i),a=e[i].filter((e=>n[e])).shift(),void 0===a)return{vertices:[],edges:[]};t[a][0]===i?[,i]=t[a]:[i]=t[a],n[a]=!1,o.push(a)}return{vertices:s,edges:o}},planarBoundary=({vertices_coords:e,vertices_edges:t,vertices_vertices:r,edges_vertices:n},o=!0)=>{r||(r=makeVerticesVertices({vertices_coords:e,vertices_edges:t,edges_vertices:n}));const s=makeVerticesToEdgeBidirectional({edges_vertices:n}),a=[],i=[],c={vertices:i,edges:a};let l=-1/0,d=-1;if(e.forEach(((e,t)=>{e[0]>l&&(l=e[0],d=t)})),-1===d)return c;i.push(d);const u=e[d],m=r[d],p=m.map((t=>e[t])).map((e=>[e[0]-u[0],e[1]-u[1]])).map((e=>Math.atan2(e[1],e[0]))).map((e=>e<0?e+2*Math.PI:e)).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).shift().i,g=m[p],h=s[d<g?`${d} ${g}`:`${g} ${d}`];a.push(h);let v=d,_=g;const y=performance.now();let b=0;for(;;){const e=r[_],t=e.indexOf(v),n=e[(t+1)%e.length],l=s[_<n?`${_} ${n}`:`${n} ${_}`];if(l===a[0])return c;if(i.push(_),a.push(l),v=_,_=n,b+=1,o&&b%1e3==0&&performance.now()-y>1e4)throw new Error(w)}};var _t=Object.freeze({__proto__:null,boundingBox:boundingBox,boundaryVertices:boundaryVertices,boundary:boundary,planarBoundary:planarBoundary});const apply_matrix_to_graph=function(e,t){return filterKeysWithSuffix(e,"coords").forEach((r=>{e[r]=e[r].map((e=>Je.resize(3,e))).map((e=>Je.multiplyMatrix3Vector3(t,e)))})),filterKeysWithSuffix(e,"matrix").forEach((r=>{e[r]=e[r].map((e=>Je.multiplyMatrices3(e,t)))})),e};var yt={scale:(e,...t)=>{const r=1===t.length?[t[0],t[0],t[0]]:[1,1,1].map(((e,r)=>void 0===t[r]?e:t[r])),n=Je.makeMatrix3Scale(r);return apply_matrix_to_graph(e,n)},translate:(e,...t)=>{const r=Je.getVector(...t),n=Je.resize(3,r),o=Je.makeMatrix3Translate(...n);return apply_matrix_to_graph(e,o)},rotateZ:(e,t,...r)=>{const n=Je.getVector(...r),o=Je.resize(3,n),s=Je.makeMatrix3RotateZ(t,...o);return apply_matrix_to_graph(e,s)},transform:apply_matrix_to_graph};const getFaceFaceSharedVertices=(e,t)=>{const r={};t.forEach((e=>{r[e]=!0}));const n=e.map((e=>!!r[e])),o=[],s=n.indexOf(!1),a={};for(let t=s+1;t<n.length;t+=1)n[t]&&!a[e[t]]&&(o.push(e[t]),a[e[t]]=!0);for(let t=0;t<s;t+=1)n[t]&&!a[e[t]]&&(o.push(e[t]),a[e[t]]=!0);return o},makeFaceSpanningTree=({faces_vertices:e,faces_faces:t},r=0)=>{if(t||(t=makeFacesFaces({faces_vertices:e})),0===t.length)return[];const n=[[{face:r}]],o={};o[r]=!0;do{const r=n[n.length-1].map((e=>t[e.face].map((t=>({face:t,parent:e.face}))))).reduce(((e,t)=>e.concat(t)),[]),s={};r.forEach(((e,t)=>{o[e.face]&&(s[t]=!0),o[e.face]=!0}));const a=r.filter(((e,t)=>!s[t]));a.map((t=>getFaceFaceSharedVertices(e[t.face],e[t.parent]))).forEach(((e,t)=>{const r=e.slice(0,2);a[t].edge_vertices=r})),n[n.length]=a}while(n[n.length-1].length>0);return n.length>0&&0===n[n.length-1].length&&n.pop(),n};var bt=Object.freeze({__proto__:null,getFaceFaceSharedVertices:getFaceFaceSharedVertices,makeFaceSpanningTree:makeFaceSpanningTree});const multiplyVerticesFacesMatrix2=({vertices_coords:e,vertices_faces:t,faces_vertices:r},n)=>{t||(t=makeVerticesFaces({faces_vertices:r}));const o=t.map((e=>e.filter((e=>null!=e)).shift())).map((e=>void 0===e?Je.identity2x3:n[e]));return e.map(((e,t)=>Je.multiplyMatrix2Vector2(o[t],e)))},Et={U:!0,u:!0},makeFacesMatrix=({vertices_coords:e,edges_vertices:t,edges_foldAngle:r,edges_assignment:n,faces_vertices:o,faces_faces:s},a=0)=>{!n&&r&&(n=makeEdgesAssignmentSimple({edges_foldAngle:r})),r||(r=n?makeEdgesFoldAngle({edges_assignment:n}):Array(t.length).fill(0));const i=makeVerticesToEdgeBidirectional({edges_vertices:t}),c=o.map((()=>Je.identity3x4));return makeFaceSpanningTree({faces_vertices:o,faces_faces:s},a).slice(1).forEach((t=>t.forEach((t=>{const o=t.edge_vertices.map((t=>e[t])),s=t.edge_vertices.join(" "),a=i[s],l=Et[n[a]]?Math.PI:r[a]*Math.PI/180,d=Je.makeMatrix3Rotate(l,Je.subtract(...Je.resizeUp(o[1],o[0])),o[0]);c[t.face]=Je.multiplyMatrices3(c[t.parent],d)})))),c},xt={M:!0,m:!0,V:!0,v:!0,U:!0,u:!0,F:!1,f:!1,B:!1,b:!1},makeEdgesIsFolded=({edges_vertices:e,edges_foldAngle:t,edges_assignment:r})=>void 0===r?void 0===t?e.map((()=>!0)):t.map((e=>e<-Je.EPSILON||e>Je.EPSILON)):r.map((e=>xt[e])),makeFacesMatrix2=({vertices_coords:e,edges_vertices:t,edges_foldAngle:r,edges_assignment:n,faces_vertices:o,faces_faces:s},a=0)=>{r||(r=n?makeEdgesFoldAngle({edges_assignment:n}):Array(t.length).fill(0));const i=makeEdgesIsFolded({edges_vertices:t,edges_foldAngle:r,edges_assignment:n}),c=makeVerticesToEdgeBidirectional({edges_vertices:t}),l=o.map((()=>Je.identity2x3));return makeFaceSpanningTree({faces_vertices:o,faces_faces:s},a).slice(1).forEach((t=>t.forEach((t=>{const r=t.edge_vertices.map((t=>e[t])),n=t.edge_vertices.join(" "),o=c[n],s=Je.subtract2(r[1],r[0]),a=r[0],d=i[o]?Je.makeMatrix2Reflect(s,a):Je.identity2x3;l[t.face]=Je.multiplyMatrices2(l[t.parent],d)})))),l};var kt=Object.freeze({__proto__:null,multiplyVerticesFacesMatrix2:multiplyVerticesFacesMatrix2,makeFacesMatrix:makeFacesMatrix,makeEdgesIsFolded:makeEdgesIsFolded,makeFacesMatrix2:makeFacesMatrix2});const makeVerticesCoordsFolded=({vertices_coords:e,vertices_faces:t,edges_vertices:r,edges_foldAngle:n,edges_assignment:o,faces_vertices:s,faces_faces:a,faces_matrix:i},c)=>{i=makeFacesMatrix({vertices_coords:e,edges_vertices:r,edges_foldAngle:n,edges_assignment:o,faces_vertices:s,faces_faces:a},c),t||(t=makeVerticesFaces({faces_vertices:s}));const l=t.map((e=>e.filter((e=>null!=e)).shift())).map((e=>void 0===e?Je.identity3x4:i[e]));return e.map((e=>Je.resize(3,e))).map(((e,t)=>Je.multiplyMatrix3Vector3(l[t],e)))},makeVerticesCoordsFlatFolded=({vertices_coords:e,edges_vertices:t,edges_foldAngle:r,edges_assignment:n,faces_vertices:o,faces_faces:s},a=0)=>{const i=makeEdgesIsFolded({edges_vertices:t,edges_foldAngle:r,edges_assignment:n}),c=[];o[a].forEach((t=>{c[t]=[...e[t]]}));const l=[];l[a]=!1;const d=makeVerticesToEdgeBidirectional({edges_vertices:t});return makeFaceSpanningTree({faces_vertices:o,faces_faces:s},a).slice(1).forEach((r=>r.forEach((r=>{const n=r.edge_vertices.join(" "),s=d[n],a=t[s].map((e=>c[e]));if(void 0===a[0]||void 0===a[1])return;const u=t[s].map((t=>e[t])),m=u[0],p=Je.normalize2(Je.subtract2(u[1],u[0])),g=Je.rotate90(p);l[r.face]=i[s]?!l[r.parent]:l[r.parent];const h=Je.normalize2(Je.subtract2(a[1],a[0])),v=a[0],_=l[r.face]?Je.rotate270(h):Je.rotate90(h);o[r.face].filter((e=>void 0===c[e])).forEach((t=>{const r=Je.subtract2(e[t],m),n=Je.dot(r,g),o=Je.dot(r,p),s=Je.scale2(h,o),a=Je.scale2(_,n),i=Je.add2(Je.add2(v,s),a);c[t]=i}))})))),c};var At=Object.freeze({__proto__:null,makeVerticesCoordsFolded:makeVerticesCoordsFolded,makeVerticesCoordsFlatFolded:makeVerticesCoordsFlatFolded});const clone=function(e){let t,n;if(typeof e!==r)return e;if(!e)return e;if("[object Array]"===Object.prototype.toString.apply(e)){for(t=[],n=0;n<e.length;n+=1)t[n]=clone(e[n]);return t}for(n in t={},e)e.hasOwnProperty(n)&&(t[n]=clone(e[n]));return t},makeFacesWindingFromMatrix2=e=>e.map((e=>e[0]*e[3]-e[1]*e[2])).map((e=>e>=0)),makeFacesWinding=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])).map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>(e[1][0]-e[0][0])*(e[1][1]+e[0][1]))).reduce(((e,t)=>e+t),0))).map((e=>e<0));var Ot=Object.freeze({__proto__:null,makeFacesWindingFromMatrix:e=>e.map((e=>e[0]*e[4]-e[1]*e[3])).map((e=>e>=0)),makeFacesWindingFromMatrix2:makeFacesWindingFromMatrix2,makeFacesWinding:makeFacesWinding});const explode=e=>{if(!e.faces_vertices)return{};const t=e.faces_edges?e.faces_edges:makeFacesEdgesFromVertices(e),r=e.faces_vertices.flatMap((e=>e)),n=t.flatMap((e=>e));let o=0,s=0,a=0;return e.faces_vertices=e.faces_vertices.map((e=>e.map((()=>o++)))),e.faces_edges=e.faces_edges.map((e=>e.map((()=>s++)))),e.edges_vertices=e.faces_edges.flatMap((e=>e.map(((e,t,r)=>{const n=t===r.length-1?[a,a+1-r.length]:[a,a+1];return a+=1,n})))),e.vertices_coords&&(e.vertices_coords=clone(r.map((t=>e.vertices_coords[t])))),e.edges_assignment&&(e.edges_assignment=clone(n.map((t=>e.edges_assignment[t])))),e.edges_foldAngle&&(e.edges_foldAngle=clone(n.map((t=>e.edges_foldAngle[t])))),e.vertices_vertices&&delete e.vertices_vertices,e.vertices_edges&&delete e.vertices_edges,e.vertices_faces&&delete e.vertices_faces,e.edges_edges&&delete e.edges_edges,e.edges_faces&&delete e.edges_faces,e.faces_faces&&delete e.faces_faces,{vertices:{map:r},edges:{map:n}}},explodeFaces=e=>{const t=e.faces_vertices.flatMap((t=>t.map((t=>e.vertices_coords[t]))));let r=0;const n=e.faces_vertices.map((e=>e.map((()=>r++))));return{vertices_coords:JSON.parse(JSON.stringify(t)),faces_vertices:n}},explodeShrinkFaces=({vertices_coords:e,faces_vertices:t},r=.333)=>{const n=explodeFaces({vertices_coords:e,faces_vertices:t}),o=makeFacesWinding(n),s=n.faces_vertices.map((e=>e.map((e=>n.vertices_coords[e])))).map((e=>e.map(((e,t,r)=>Je.subtract2(e,r[(t+1)%r.length]))))),a=makeFacesConvexCenter({vertices_coords:e,faces_vertices:t}),i=t.map((t=>t.map((t=>e[t])))).map(((e,t)=>e.map((e=>Je.distance2(e,a[t]))))),c=s.map(((e,t)=>e.map(((e,t,r)=>[e,Je.flip(r[(t-1+r.length)%r.length])])).map((e=>o[t]?Je.counterClockwiseBisect2(...e):Je.clockwiseBisect2(...e))))).map(((e,t)=>e.map(((e,r)=>Je.scale(e,i[t][r])))));return n.faces_vertices.forEach(((e,t)=>e.forEach(((e,o)=>{n.vertices_coords[e]=Je.add2(n.vertices_coords[e],Je.scale2(c[t][o],-r))})))),n};var Mt=Object.freeze({__proto__:null,explode:explode,explodeFaces:explodeFaces,explodeShrinkFaces:explodeShrinkFaces});const nearestVertex=({vertices_coords:e},t)=>{if(!e)return;const r=Je.resize(e[0].length,t),n=e.map(((e,t)=>({d:Je.distance(r,e),i:t}))).sort(((e,t)=>e.d-t.d)).shift();return n?n.i:void 0},nearestEdge=({vertices_coords:e,edges_vertices:t},r)=>{if(!e||!t)return;const n=t.map((t=>t.map((t=>e[t])))).map((e=>Je.nearestPointOnLine(Je.subtract(e[1],e[0]),e[0],r,Je.segmentLimiter)));return Je.smallestComparisonSearch(r,n,Je.distance)},faceContainingPoint=({vertices_coords:e,faces_vertices:t},r)=>{if(!e||!t)return;const n=t.map(((t,r)=>({face:t.map((t=>e[t])),i:r}))).filter((e=>Je.overlapConvexPolygonPoint(e.face,r))).shift();return void 0===n?void 0:n.i},nearestFace=(e,t)=>{const r=faceContainingPoint(e,t);if(void 0!==r)return r;if(e.edges_faces){const r=nearestEdge(e,t),n=e.edges_faces[r];if(1===n.length)return n[0];if(n.length>1){const r=makeFacesConvexCenter({vertices_coords:e.vertices_coords,faces_vertices:n.map((t=>e.faces_vertices[t]))}).map((e=>Je.distance(e,t)));let o=0;for(let e=0;e<r.length;e+=1)r[e]<r[o]&&(o=e);return n[o]}}};var wt=Object.freeze({__proto__:null,nearestVertex:nearestVertex,nearestEdge:nearestEdge,faceContainingPoint:faceContainingPoint,nearestFace:nearestFace,nearest:(e,...t)=>{const r={vertices:nearestVertex,edges:nearestEdge,faces:nearestFace},n=Je.getVector(...t),o=Object.create(null);return["vertices","edges","faces"].forEach((t=>{Object.defineProperty(o,Ke[t],{enumerable:!0,get:()=>r[t](e,n)}),filterKeysWithPrefix(e,t).forEach((r=>Object.defineProperty(o,r,{enumerable:!0,get:()=>e[r][o[Ke[t]]]})))})),o}});const addVertices=(e,t,r=Je.EPSILON)=>{e.vertices_coords||(e.vertices_coords=[]),"number"==typeof t[0]&&(t=[t]);const n=t.map((t=>e.vertices_coords.map((e=>Je.distance(e,t)<r)).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).shift()));let o=e.vertices_coords.length;const s=t.filter(((e,t)=>void 0===n[t]));return e.vertices_coords.push(...s),n.map((e=>void 0===e?o++:e))},splitEdge=(e,t,r,n=Je.EPSILON)=>{if(e.edges_vertices.length<t)return{};const o=e.edges_vertices[t];r||(r=Je.midpoint(...o));const a=o.map((t=>e.vertices_coords[t])).map((e=>Je.distance(e,r)<n));if(a[0])return{vertex:o[0],edges:{}};if(a[1])return{vertex:o[1],edges:{}};const i=e.vertices_coords.length;e.vertices_coords[i]=r;const c=[0,1].map((t=>t+e.edges_vertices.length));((e,t,r)=>{const n=e.edges_vertices[t],o=[{edges_vertices:[n[0],r]},{edges_vertices:[r,n[1]]}];if(o.forEach((r=>[u,m].filter((r=>e[r]&&void 0!==e[r][t])).forEach((n=>{r[n]=e[n][t]})))),e.vertices_coords&&(e.edges_length||e.edges_vector)){const t=o.map((t=>t.edges_vertices.map((t=>e.vertices_coords[t]))));e.edges_vector&&o.forEach(((e,r)=>{e.edges_vector=Je.subtract(t[r][1],t[r][0])})),e.edges_length&&o.forEach(((e,r)=>{e.edges_length=Je.distance2(...t[r])}))}return o})(e,t,i).forEach(((t,r)=>Object.keys(t).forEach((n=>{e[n][c[r]]=t[n]})))),(({vertices_vertices:e},t,r)=>{e&&(e[t]=[...r],r.forEach(((r,n,o)=>{const s=o[(n+1)%o.length],a=e[r].indexOf(s);e[r][a]=t})))})(e,i,o),(({vertices_coords:e,vertices_vertices:t,vertices_sectors:r},n)=>{r&&(r[n]=1===t[n].length?[Je.TWO_PI]:Je.counterClockwiseSectors2(t[n].map((t=>Je.subtract2(e[t],e[n])))))})(e,i),(({vertices_edges:e},t,r,n,o)=>{e&&(e[r]=[...o],n.map((r=>e[r].indexOf(t))).forEach(((t,r)=>{e[n[r]][t]=o[r]})))})(e,t,i,o,c);const l=(({vertices_faces:e,edges_vertices:t,edges_faces:r,faces_edges:n,faces_vertices:o},s)=>{if(r&&r[s])return r[s];const a=t[s];if(void 0!==e){const t=[];for(let r=0;r<e[a[0]].length;r+=1)for(let n=0;n<e[a[1]].length;n+=1)if(e[a[0]][r]===e[a[1]][n]){if(void 0===e[a[0]][r])continue;t.push(e[a[0]][r])}return t}if(n){const e=[];for(let t=0;t<n.length;t+=1)for(let r=0;r<n[t].length;r+=1)n[t][r]===s&&e.push(t);return e}o&&console.warn("todo: findAdjacentFacesToEdge")})(e,t);l&&((({vertices_faces:e},t,r)=>{e&&(e[t]=[...r])})(e,i,l),(({edges_faces:e},t,r)=>{e&&t.forEach((t=>{e[t]=[...r]}))})(e,c,l),(({faces_vertices:e},t,r,n)=>{e&&n.map((t=>e[t])).forEach((e=>e.map(((e,t,n)=>{const o=(t+1)%n.length;return e===r[0]&&n[o]===r[1]||e===r[1]&&n[o]===r[0]?o:void 0})).filter((e=>void 0!==e)).sort(((e,t)=>t-e)).forEach((r=>e.splice(r,0,t)))))})(e,i,o,l),(({edges_vertices:e,faces_vertices:t,faces_edges:r},n)=>{const o=makeVerticesToEdgeBidirectional({edges_vertices:e});n.map((e=>t[e].map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>o[e.join(" ")])))).forEach(((e,t)=>{r[n[t]]=e}))})(e,l));const d=removeGeometryIndices(e,s,[t]);return c.forEach(((e,t)=>{c[t]=d[c[t]]})),d.splice(-2),d[t]=c,{vertex:i,edges:{map:d,new:c,remove:t}}},rebuild_edge=(e,t,r)=>{const n=e.edges_vertices.length,o=(({vertices_coords:e},t,r)=>{const n=t.map((t=>e[t])).reverse();return{edges_vertices:[...t],edges_foldAngle:0,edges_assignment:"U",edges_length:Je.distance2(...n),edges_vector:Je.subtract(...n),edges_faces:[r,r]}})(e,r,t);return Object.keys(o).filter((t=>void 0!==e[t])).forEach((t=>{e[t][n]=o[t]})),n},build_faces=(e,t,r)=>{const n=[0,1].map((t=>e.faces_vertices.length+t));return(({edges_vertices:e,faces_vertices:t,faces_edges:r},n,o)=>{const s=o.map((e=>t[n].indexOf(e))),a=splitCircularArray(t[n],s).map((e=>({faces_vertices:e})));if(r){const t=makeVerticesToEdgeBidirectional({edges_vertices:e});a.map((e=>e.faces_vertices.map(((e,t,r)=>`${e} ${r[(t+1)%r.length]}`)).map((e=>t[e])))).forEach(((e,t)=>{a[t].faces_edges=e}))}return a})(e,t,r).forEach(((t,r)=>Object.keys(t).forEach((o=>{e[o][n[r]]=t[o]})))),n},splitFace=(e,t,r,n,o)=>{const s=intersectConvexFaceLine(e,t,r,n,o);if(void 0===s)return;const i=((e,{vertices:t,edges:r})=>{let n;const o=r.map((t=>{const r=splitEdge(e,n?n[t.edge]:t.edge,t.coords);return n=n?mergeNextmaps(n,r.edges.map):r.edges.map,r}));let s;return t.push(...o.map((e=>e.vertex))),o.forEach((e=>{e.edges.remove=s?s[e.edges.remove]:e.edges.remove;const t=invertSimpleMap(e.edges.map);s=s?mergeBackmaps(s,t):t})),{vertices:t,edges:{map:n,remove:o.map((e=>e.edges.remove))}}})(e,s);i.edges.new=rebuild_edge(e,t,i.vertices),(({vertices_coords:e,vertices_vertices:t,edges_vertices:r},n)=>{const o=r[n][0],s=r[n][1];t[o]=sortVerticesCounterClockwise({vertices_coords:e},t[o].concat(s),o),t[s]=sortVerticesCounterClockwise({vertices_coords:e},t[s].concat(o),s)})(e,i.edges.new),(({edges_vertices:e,vertices_edges:t,vertices_vertices:r},n)=>{if(!t||!r)return;const o=e[n];o.map((e=>r[e])).map(((e,t)=>e.indexOf(o[(t+1)%o.length]))).forEach(((e,r)=>t[o[r]].splice(e,0,n)))})(e,i.edges.new);const c=build_faces(e,t,i.vertices);((e,t,r)=>{const n={};r.forEach((t=>e.faces_vertices[t].forEach((e=>{n[e]||(n[e]=[]),n[e].push(t)})))),e.faces_vertices[t].forEach((r=>{const o=e.vertices_faces[r].indexOf(t),s=n[r];if(-1===o||!s)throw new Error(F);e.vertices_faces[r].splice(o,1,...s)}))})(e,t,c),((e,t,r,n)=>{const o={};n.forEach((t=>e.faces_edges[t].forEach((e=>{o[e]||(o[e]=[]),o[e].push(t)})))),[...e.faces_edges[t],r].forEach((r=>{const n=o[r],s=[];for(let n=0;n<e.edges_faces[r].length;n+=1)e.edges_faces[r][n]===t&&s.push(n);if(0===s.length||!n)throw new Error(F);s.reverse().forEach((t=>e.edges_faces[r].splice(t,1)));const a=s[s.length-1];e.edges_faces[r].splice(a,0,...n)}))})(e,t,i.edges.new,c),(({faces_vertices:e,faces_faces:t},r,n)=>{const o=t[r],s=n.map((t=>e[t])),a=o.map((t=>{const r=e[t],o=[0,0];for(let e=0;e<s.length;e+=1){let t=0;for(let n=0;n<r.length;n+=1)-1!==s[e].indexOf(r[n])&&(t+=1);o[e]=t}return o[0]>=2?n[0]:o[1]>=2?n[1]:void 0}));n.forEach(((e,r,o)=>{t[e]=[o[(r+1)%n.length]]})),o.forEach(((e,n)=>{for(let o=0;o<t[e].length;o+=1)t[e][o]===r&&(t[e][o]=a[n],t[a[n]].push(e))}))})(e,t,c);const l=removeGeometryIndices(e,a,[t]);return c.forEach(((e,t)=>{c[t]=l[c[t]]})),l.splice(-2),l[t]=c,i.faces={map:l,new:c,remove:t},i},jt={};jt.prototype=Object.create(Object.prototype),jt.prototype.constructor=jt;const Pt={clean:clean,validate:validate,populate:populate,fragment:fragment,addVertices:addVertices,splitEdge:splitEdge,faceSpanningTree:makeFaceSpanningTree,explodeFaces:explodeFaces,explodeShrinkFaces:explodeShrinkFaces,...yt};Object.keys(Pt).forEach((e=>{jt.prototype[e]=function(){return Pt[e](this,...arguments)}})),jt.prototype.splitFace=function(e,...t){const r=Je.core.getLine(...t);return splitFace(this,e,r.vector,r.origin)},jt.prototype.copy=function(){return Object.assign(Object.create(Object.getPrototypeOf(this)),clone(this))},jt.prototype.clear=function(){return He.graph.forEach((e=>delete this[e])),He.orders.forEach((e=>delete this[e])),delete this.file_frames,this},jt.prototype.boundingBox=function(){return Je.rect.fromPoints(this.vertices_coords)},jt.prototype.unitize=function(){if(!this.vertices_coords)return this;const e=Je.core.bounding_box(this.vertices_coords),t=Math.max(...e.span),r=0===t?1:1/t,n=e.min;return this.vertices_coords=this.vertices_coords.map((e=>Je.core.subtract(e,n))).map((e=>e.map((e=>e*r)))),this},jt.prototype.folded=function(){const e=this.faces_matrix2?multiplyVerticesFacesMatrix2(this,this.faces_matrix2):makeVerticesCoordsFolded(this,...arguments);return Object.assign(Object.create(Object.getPrototypeOf(this)),Object.assign(clone(this),{vertices_coords:e,frame_classes:[_]}))},jt.prototype.flatFolded=function(){const e=this.faces_matrix2?multiplyVerticesFacesMatrix2(this,this.faces_matrix2):makeVerticesCoordsFlatFolded(this,...arguments);return Object.assign(Object.create(Object.getPrototypeOf(this)),Object.assign(clone(this),{vertices_coords:e,frame_classes:[_]}))};const shortenKeys=function(e){const t=Object.create(null);return Object.keys(e).forEach((r=>{t[r.substring(this.length+1)]=e[r]})),t},getComponent=function(e){return transposeGraphArrays(this,e).map(shortenKeys.bind(e)).map(Ye[e].bind(this))};[o,s,a].forEach((e=>Object.defineProperty(jt.prototype,e,{enumerable:!0,get:function(){return getComponent.call(this,e)}}))),Object.defineProperty(jt.prototype,g,{enumerable:!0,get:function(){const e=boundary(this),t=e.vertices.map((e=>this.vertices_coords[e]));return Object.keys(e).forEach((r=>{t[r]=e[r]})),Object.assign(t,e)}});const St={vertices:nearestVertex,edges:nearestEdge,faces:nearestFace};jt.prototype.nearest=function(){const e=Je.core.getVector(arguments),t=Object.create(null),r={};return[o,s,a].forEach((n=>{Object.defineProperty(t,Ke[n],{enumerable:!0,get:()=>(void 0!==r[n]||(r[n]=St[n](this,e)),r[n])}),filterKeysWithPrefix(this,n).forEach((e=>Object.defineProperty(t,e,{enumerable:!0,get:()=>this[e][t[Ke[n]]]})))})),t};var Ct=jt.prototype;const clip=function(e,t){const r=boundary(e).vertices.map((t=>e.vertices_coords[t])),n=t.vector?t.vector:Je.subtract2(t[1],t[0]),o=t.origin?t.origin:t[0],s=t.domain_function?t.domain_function:Je.includeL;return Je.clipLineConvexPolygon(r,n,o,Je.include,s)},addEdges=(e,t)=>{e.edges_vertices||(e.edges_vertices=[]),"number"==typeof t[0]&&(t=[t]);const r=t.map(((t,r)=>e.edges_vertices.length+r));e.edges_vertices.push(...t);const n=removeDuplicateEdges(e).map;return r.map((e=>n[e]))},addPlanarSegment=(e,t,r,n=Je.EPSILON)=>{e.vertices_sectors||(e.vertices_sectors=makeVerticesSectors(e));const o=[t,r].map((e=>[e[0],e[1]])),s=Je.subtract2(o[1],o[0]),a=makeEdgesSegmentIntersection(e,o[0],o[1],n),i=a.map(((e,t)=>void 0===e?void 0:t)).filter((e=>void 0!==e)).sort(((e,t)=>e-t)),c={};i.forEach((t=>e.edges_faces[t].forEach((e=>{c[e]=!0}))));const l=Object.keys(c).map((e=>parseInt(e,10))).sort(((e,t)=>e-t)),d=i.reverse().map((t=>splitEdge(e,t,a[t],n))).map((e=>e.vertex)),u=addVertices(e,o,n),m={};d.forEach((e=>{m[e]=!0})),u.forEach((e=>{m[e]=!0}));const p=Object.keys(m).map((e=>parseInt(e,10))),g=sortVerticesAlongVector(e,p,s),h=makeVerticesToEdgeBidirectional(e),v=((e,t,r)=>{const n=Array.from(Array(t.length-1)).map(((e,r)=>[t[r],t[r+1]])),o=n.map((e=>e.join(" "))).map((e=>void 0===r[e])),s=n.filter(((e,t)=>o[t])),a=Array.from(Array(s.length)).map(((t,r)=>e.edges_vertices.length+r));a.forEach(((t,r)=>{e.edges_vertices[t]=s[r]})),e.edges_assignment&&a.forEach((t=>{e.edges_assignment[t]="U"})),e.edges_foldAngle&&a.forEach((t=>{e.edges_foldAngle[t]=0}));for(let r=0;r<t.length;r+=1){const n=t[r],s=[o[r-1]?t[r-1]:void 0,o[r]?t[r+1]:void 0].filter((e=>void 0!==e)),a=(e.vertices_vertices[n]?e.vertices_vertices[n]:[]).concat(s);e.vertices_vertices[n]=sortVerticesCounterClockwise(e,a,t[r])}const i=makeVerticesToEdgeBidirectional(e);for(let r=0;r<t.length;r+=1){const n=t[r];e.vertices_edges[n]=e.vertices_vertices[n].map((e=>i[`${n} ${e}`]))}return t.map((t=>1===e.vertices_vertices[t].length?[Je.TWO_PI]:Je.counterClockwiseSectors2(e.vertices_vertices[t].map((r=>Je.subtract2(e.vertices_coords[r],e.vertices_coords[t])))))).forEach(((r,n)=>{e.vertices_sectors[t[n]]=r})),a})(e,g,h);v.forEach((t=>{const r=e.edges_vertices[t];h[`${r[0]} ${r[1]}`]=t,h[`${r[1]} ${r[0]}`]=t}));const _=g.map((t=>e.vertices_vertices[t].map((e=>[[e,t],[t,e]])))).reduce(((e,t)=>e.concat(t)),[]).reduce(((e,t)=>e.concat(t)),[]),y={},b=_.map((t=>counterClockwiseWalk(e,t[0],t[1],y))).filter((e=>void 0!==e)),E=filterWalkedBoundaryFace(b);removeGeometryIndices(e,"faces",l);const x=E.map(((t,r)=>e.faces_vertices.length+r));return e.faces_vertices&&x.forEach(((t,r)=>{e.faces_vertices[t]=E[r].vertices})),e.faces_edges&&x.forEach(((t,r)=>{e.faces_edges[t]=E[r].edges.map((e=>h[e]))})),e.faces_angles&&x.forEach(((t,r)=>{e.faces_angles[t]=E[r].faces_angles})),e.vertices_faces&&(e.vertices_faces=makeVerticesFaces(e)),e.edges_faces&&(e.edges_faces=makeEdgesFacesUnsorted(e)),e.faces_faces&&(e.faces_faces=makeFacesFaces(e)),e.vertices_coords.length===e.vertices_vertices.length&&e.vertices_coords.length===e.vertices_edges.length&&e.vertices_coords.length===e.vertices_faces.length||console.warn("vertices mismatch",JSON.parse(JSON.stringify(e))),e.edges_vertices.length===e.edges_faces.length&&e.edges_vertices.length===e.edges_assignment.length||console.warn("edges mismatch",JSON.parse(JSON.stringify(e))),e.faces_vertices.length===e.faces_edges.length&&e.faces_vertices.length===e.faces_faces.length||console.warn("faces mismatch",JSON.parse(JSON.stringify(e))),v},removePlanarEdge=(e,t)=>{const r=[...e.edges_vertices[t]].sort(((e,t)=>t-e)),n=[...e.edges_faces[t]];(({vertices_vertices:e},t)=>{const r=[t[1],t[0]];t.map(((t,n)=>e[t].indexOf(r[n]))).forEach(((r,n)=>e[t[n]].splice(r,1)))})(e,r),(({vertices_edges:e},t,r)=>{r.map(((r,n)=>e[r].indexOf(t))).forEach(((t,n)=>e[r[n]].splice(t,1)))})(e,t,r);const o=r.map((t=>0===e.vertices_vertices[t].length)),s=r.filter(((e,t)=>o[t]));if(2===n.length&&n[0]!==n[1]){const o=e.faces_vertices.length,s=((e,t,r,n)=>{const o=t.map((t=>e.faces_edges[t].indexOf(r))),s=[];t.forEach(((t,r)=>e.faces_vertices[t].forEach(((e,t,o)=>{const a=o[(t+1)%o.length];(e===n[0]&&a===n[1]||e===n[1]&&a===n[0])&&(s[r]=t)})))),void 0!==s[0]&&void 0!==s[1]||console.warn("removePlanarEdge error joining faces");const a=t.map((t=>e.faces_edges[t].length)),i=t.map((t=>e.faces_vertices[t].length)),c=a.map((e=>e-1)),l=i.map((e=>e-1)),d=o.map(((e,t)=>(e+1)%a[t])),u=s.map(((e,t)=>(e+1)%i[t])),m=t.map(((t,r)=>Array.from(Array(c[r])).map(((e,t)=>(d[r]+t)%a[r])).map((r=>e.faces_edges[t][r])))),p=t.map(((t,r)=>Array.from(Array(l[r])).map(((e,t)=>(u[r]+t)%i[r])).map((r=>e.faces_vertices[t][r])))),g=t.map((t=>e.faces_faces[t])).reduce(((e,t)=>e.concat(t)),[]).filter((e=>e!==t[0]&&e!==t[1]));return{vertices:p[0].concat(p[1]),edges:m[0].concat(m[1]),faces:g}})(e,n,t,r);e.faces_vertices.push(s.vertices),e.faces_edges.push(s.edges),e.faces_faces.push(s.faces),e.vertices_faces.forEach(((t,r)=>{let s=!1;t.forEach(((a,i)=>{if(a===n[0]||a===n[1]){e.vertices_faces[r][i]=o;const n=s?[r,1]:[r,1,o];t.splice(...n),s=!0}}))})),e.edges_faces.forEach(((t,r)=>t.forEach(((t,s)=>{t!==n[0]&&t!==n[1]||(e.edges_faces[r][s]=o)})))),e.faces_faces.forEach(((t,r)=>t.forEach(((t,s)=>{t!==n[0]&&t!==n[1]||(e.faces_faces[r][s]=o)})))),e.faces_vertices.forEach((t=>t.forEach((t=>{void 0===t&&console.log("FOUND ONE before remove",e.faces_vertices)})))),removeGeometryIndices(e,"faces",n)}if(2===n.length&&n[0]===n[1]&&s.length){const r=n[0];e.faces_vertices[r]=e.faces_vertices[r].filter((e=>!s.includes(e))).filter(((e,t,r)=>e!==r[(t+1)%r.length])),e.faces_edges[r]=e.faces_edges[r].filter((e=>e!==t))}removeGeometryIndices(e,"edges",[t]),removeGeometryIndices(e,"vertices",s)},removePlanarVertex=(e,t)=>{const r=e.vertices_edges[t],n=uniqueSortedNumbers(e.vertices_faces[t].filter((e=>null!=e)));if(2!==r.length||n.length>2)return void console.warn("cannot remove non 2-degree vertex yet (e,f)",r,n);const o=getOppositeVertices(e,t,r),s=o.slice().reverse();r.sort(((e,t)=>e-t)),o.forEach((t=>{const n=e.vertices_edges[t].indexOf(r[1]);-1!==n&&(e.vertices_edges[t][n]=r[0])})),o.forEach(((r,n)=>{const o=e.vertices_vertices[r].indexOf(t);-1!==o?e.vertices_vertices[r][o]=s[n]:console.warn("removePlanarVertex unknown vertex issue")})),e.edges_vertices[r[0]]=[...o],n.forEach((r=>{const n=e.faces_vertices[r].indexOf(t);-1!==n?e.faces_vertices[r].splice(n,1):console.warn("removePlanarVertex unknown face_vertex issue")})),n.forEach((t=>{const n=e.faces_edges[t].indexOf(r[1]);-1!==n?e.faces_edges[t].splice(n,1):console.warn("removePlanarVertex unknown face_edge issue")})),removeGeometryIndices(e,"vertices",[t]),removeGeometryIndices(e,"edges",[r[1]])},alternatingSum=e=>[0,1].map((t=>e.filter(((e,r)=>r%2===t)).reduce(((e,t)=>e+t),0))),kawasakiSolutionsRadians=e=>e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>Je.counterClockwiseAngleRadians(...e))).map(((e,t,r)=>r.slice(t+1,r.length).concat(r.slice(0,t)))).map((e=>alternatingSum(e).map((e=>Math.PI-e)))).map(((t,r)=>e[r]+t[0])).map(((t,r)=>Je.isCounterClockwiseBetween(t,e[r],e[(r+1)%e.length])?t:void 0)),kawasakiSolutionsVectors=e=>{const t=e.map((e=>Math.atan2(e[1],e[0])));return kawasakiSolutionsRadians(t).map((e=>void 0===e?void 0:[Math.cos(e),Math.sin(e)]))};var zt=Object.freeze({__proto__:null,alternatingSum:alternatingSum,alternatingSumDifference:e=>{const t=e.reduce(((e,t)=>e+t),0)/2;return alternatingSum(e).map((e=>e-t))},kawasakiSolutionsRadians:kawasakiSolutionsRadians,kawasakiSolutionsVectors:kawasakiSolutionsVectors});const Ft={B:!0,b:!0,F:!0,f:!0,U:!0,u:!0},vertices_flat=({vertices_edges:e,edges_assignment:t})=>e.map((e=>e.map((e=>Ft[t[e]])).reduce(((e,t)=>e&&t),!0))).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)),Lt={M:!0,m:!0,V:!0,v:!0},Nt={M:-1,m:-1,V:1,v:1},validateMaekawa=({edges_vertices:e,vertices_edges:t,edges_assignment:r})=>{t||(t=makeVerticesEdgesUnsorted({edges_vertices:e}));const n=t.map((e=>e.map((e=>Nt[r[e]])).filter((e=>void 0!==e)).reduce(((e,t)=>e+t),0))).map((e=>2===e||-2===e));return boundaryVertices({edges_vertices:e,edges_assignment:r}).forEach((e=>{n[e]=!0})),vertices_flat({vertices_edges:t,edges_assignment:r}).forEach((e=>{n[e]=!0})),n.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))},validateKawasaki=({vertices_coords:e,vertices_vertices:t,vertices_edges:r,edges_vertices:n,edges_assignment:o,edges_vector:s},a=Je.EPSILON)=>{t||(t=makeVerticesVertices({vertices_coords:e,vertices_edges:r,edges_vertices:n}));const i=makeVerticesVerticesVector({vertices_coords:e,vertices_vertices:t,edges_vertices:n,edges_vector:s}).map(((e,t)=>e.filter(((e,n)=>Lt[o[r[t][n]]])))).map((e=>e.length>1?Je.counterClockwiseSectors2(e):[0,0])).map((e=>alternatingSum(e))).map((e=>Math.abs(e[0]-e[1])<a));return boundaryVertices({edges_vertices:n,edges_assignment:o}).forEach((e=>{i[e]=!0})),vertices_flat({vertices_edges:r,edges_assignment:o}).forEach((e=>{i[e]=!0})),i.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))};var $t=Object.freeze({__proto__:null,validateMaekawa:validateMaekawa,validateKawasaki:validateKawasaki});const Vt={};Vt.prototype=Object.create(Ct),Vt.prototype.constructor=Vt;const make_edges_array=function(e){return e.mountain=(t=-180)=>(e.forEach((e=>{this.edges_assignment[e]="M",this.edges_foldAngle[e]=t})),e),e.valley=(t=180)=>(e.forEach((e=>{this.edges_assignment[e]="V",this.edges_foldAngle[e]=t})),e),e.flat=()=>(e.forEach((e=>{this.edges_assignment[e]="F",this.edges_foldAngle[e]=0})),e),e};["line","ray","segment"].forEach((e=>{Vt.prototype[e]=function(){const t=Je[e](...arguments);if(!t)return;const r=clip(this,t);if(!r)return;const n=addPlanarSegment(this,r[0],r[1]);return make_edges_array.call(this,n)}})),["circle","ellipse","rect","polygon"].forEach((e=>{Vt.prototype[e]=function(){const t=Je[e](...arguments);if(!t)return;const r=t.segments(96).map((e=>Je.segment(e))).map((e=>clip(this,e))).filter((e=>void 0!==e));if(!r)return;const n=[],o=[];r.forEach((e=>{const t=addVertices(this,e);n.push(...t),o.push(...addEdges(this,t))}));const{map:s}=fragment(this).edges;return populate(this),make_edges_array.call(this,o.map((e=>s[e])).reduce(((e,t)=>e.concat(t)),[]))}})),Vt.prototype.removeEdge=function(e){const t=this.edges_vertices[e];return removePlanarEdge(this,e),t.map((e=>isVertexCollinear(this,e))).map(((e,r)=>e?t[r]:void 0)).filter((e=>void 0!==e)).sort(((e,t)=>t-e)).forEach((e=>removePlanarVertex(this,e))),!0},Vt.prototype.validate=function(e){const t=validate(this,e);return t.vertices.kawasaki=validateKawasaki(this,e),t.vertices.maekawa=validateMaekawa(this),this.edges_foldAngle&&(t.edges.not_flat=this.edges_foldAngle.map(((e,t)=>edgeFoldAngleIsFlat(e)?void 0:t)).filter((e=>void 0!==e))),"valid"===t.summary&&(t.vertices.kawasaki.length||t.vertices.maekawa.length?t.summary="invalid":t.edges.not_flat.length&&(t.summary="not flat")),t};var It=Vt.prototype;const make_face_side=(e,t,r,n)=>{const o=Je.subtract2(r,t),s=Je.cross2(e,o);return n?s>0:s<0},make_face_center=(e,t)=>e.faces_vertices[t]?e.faces_vertices[t].map((t=>e.vertices_coords[t])).reduce(((e,t)=>[e[0]+t[0],e[1]+t[1]]),[0,0]).map((r=>r/e.faces_vertices[t].length)):[0,0],Tt={F:!0,f:!0,U:!0,u:!0},Bt={M:"V",m:"V",V:"M",v:"M"},face_snapshot=(e,t)=>({center:e.faces_center[t],matrix:e.faces_matrix2[t],winding:e.faces_winding[t],crease:e.faces_crease[t],side:e.faces_side[t],layer:e.faces_layer[t]}),flatFold=(e,t,r,n="V",o=Je.EPSILON)=>{const s=Bt[a=n]||a;var a;populate(e),e.faces_layer||(e.faces_layer=Array(e.faces_vertices.length).fill(0)),e.faces_center=e.faces_vertices.map(((t,r)=>make_face_center(e,r))),e.faces_matrix2||(e.faces_matrix2=makeFacesMatrix2(e,0)),e.faces_winding=makeFacesWindingFromMatrix2(e.faces_matrix2),e.faces_crease=e.faces_matrix2.map(Je.invertMatrix2).map((e=>Je.multiplyMatrix2Line2(e,t,r))),e.faces_side=e.faces_vertices.map(((t,r)=>make_face_side(e.faces_crease[r].vector,e.faces_crease[r].origin,e.faces_center[r],e.faces_winding[r])));const i=multiplyVerticesFacesMatrix2(e,e.faces_matrix2),c=makeEdgesLineParallelOverlap({vertices_coords:i,edges_vertices:e.edges_vertices},t,r,o).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).filter((t=>Tt[e.edges_assignment[t]]));c.map((t=>e.edges_faces[t].find((e=>null!=e)))).map((t=>e.faces_winding[t])).map((e=>e?n:s)).forEach(((t,r)=>{e.edges_assignment[c[r]]=t,e.edges_foldAngle[c[r]]=edgeAssignmentToFoldAngle(t)}));const l=face_snapshot(e,0),d=e.faces_vertices.map(((e,t)=>t)).reverse().map((t=>{const r=face_snapshot(e,t),a=splitFace(e,t,r.crease.vector,r.crease.origin,o);if(void 0===a)return;e.edges_assignment[a.edges.new]=r.winding?n:s,e.edges_foldAngle[a.edges.new]=edgeAssignmentToFoldAngle(e.edges_assignment[a.edges.new]);return a.faces.map[a.faces.remove].forEach((t=>{e.faces_center[t]=make_face_center(e,t),e.faces_side[t]=make_face_side(r.crease.vector,r.crease.origin,e.faces_center[t],r.winding),e.faces_layer[t]=r.layer})),a})).filter((e=>void 0!==e)),u=mergeNextmaps(...d.map((e=>e.faces.map))),m=mergeNextmaps(...d.map((e=>e.edges.map)).filter((e=>void 0!==e))),p=d.map((e=>e.faces.remove)).reverse();e.faces_layer=((e,t)=>{const r=[],n=e.map(((e,t)=>t)),o=n.filter((e=>t[e])),s=n.filter((e=>!t[e]));return s.sort(((t,r)=>e[t]-e[r])).forEach(((e,t)=>{r[e]=t})),o.sort(((t,r)=>e[r]-e[t])).forEach(((e,t)=>{r[e]=s.length+t})),r})(e.faces_layer,e.faces_side);const g=u&&u[0]&&2===u[0].length,h=g?u[0].filter((t=>e.faces_side[t])).shift():0;let v=l.matrix;return n!==s&&(v=g||e.faces_side[0]?Je.multiplyMatrices2(l.matrix,Je.makeMatrix2Reflect(l.crease.vector,l.crease.origin)):l.matrix),e.faces_matrix2=makeFacesMatrix2(e,h).map((e=>Je.multiplyMatrices2(v,e))),delete e.faces_center,delete e.faces_winding,delete e.faces_crease,delete e.faces_side,{faces:{map:u,remove:p},edges:{map:m}}},qt={};qt.prototype=Object.create(Ct),qt.prototype.constructor=qt,qt.prototype.flatFold=function(){const e=Je.core.getLine(arguments);return flatFold(this,e.vector,e.origin),this};var Rt=qt.prototype;const isFoldedForm=e=>e.frame_classes&&e.frame_classes.includes("foldedForm")||e.file_classes&&e.file_classes.includes("foldedForm");var Ut=Object.freeze({__proto__:null,isFoldedForm:isFoldedForm});const selfRelationalArraySubset=(e,t)=>{const r={};t.forEach((e=>{r[e]=!0}));const n=[];return t.forEach((t=>{n[t]=e[t].filter((e=>r[e]))})),n},subgraph=(e,t)=>{const r=["faces","edges","vertices"],n={};r.forEach((e=>{n[e]={}})),r.forEach((e=>t[e].forEach((t=>{n[e][t]=!0}))));const o={};r.forEach((t=>{filterKeysWithPrefix(e,t).forEach((e=>{o[e]={}})),filterKeysWithSuffix(e,t).forEach((e=>{o[e]={}}))})),r.forEach((t=>{filterKeysWithPrefix(e,t).forEach((e=>{o[e].prefix=t})),filterKeysWithSuffix(e,t).forEach((e=>{o[e].suffix=t}))}));const s={...e};return He.graph.forEach((e=>delete s[e])),delete s.file_frames,Object.keys(o).forEach((e=>{s[e]=[]})),Object.keys(o).forEach((r=>{const{prefix:a,suffix:i}=o[r];a&&i?t[a].forEach((t=>{s[r][t]=e[r][t].filter((e=>n[i][e]))})):a?t[a].forEach((t=>{s[r][t]=e[r][t]})):s[r]=i?e[r].map((e=>e.filter((e=>n[i][e])))):e[r]})),s},subgraphWithFaces=(e,t)=>{let r=[];e.faces_vertices&&(r=uniqueSortedNumbers(t.flatMap((t=>e.faces_vertices[t]))));let n=[];if(e.faces_edges)n=uniqueSortedNumbers(t.flatMap((t=>e.faces_edges[t])));else if(e.edges_vertices){const t={};r.forEach((e=>{t[e]=!0})),n=e.edges_vertices.map(((e,r)=>t[e[0]]&&t[e[1]]?r:void 0)).filter((e=>void 0!==e))}return subgraph(e,{faces:t,edges:n,vertices:r})};var Dt=Object.freeze({__proto__:null,selfRelationalArraySubset:selfRelationalArraySubset,subgraph:subgraph,subgraphWithFaces:subgraphWithFaces});const makeEdgesFacesOverlap=({vertices_coords:e,edges_vertices:t,edges_vector:r,edges_faces:n,faces_vertices:o},s)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const a=makeFacesWinding({vertices_coords:e,faces_vertices:o}),i=t.map((t=>e[t[0]])),c=t.map((t=>t.map((t=>e[t])))),l=o.map((t=>t.map((t=>e[t]))));a.forEach(((e,t)=>{e||l[t].reverse()}));const d=t.map((()=>o.map((()=>{}))));n.forEach(((e,t)=>e.forEach((e=>{d[t][e]=!1}))));const u=makeEdgesBoundingBox({edges_coords:c}),m=l.map((e=>Je.boundingBox(e)));return u.forEach(((e,t)=>m.forEach(((r,n)=>{!1!==d[t][n]&&(Je.overlapBoundingBoxes(r,e)||(d[t][n]=!1))})))),c.forEach(((e,t)=>l.forEach(((e,n)=>{if(void 0!==d[t][n])return;if(c[t].map((e=>Je.overlapConvexPolygonPoint(l[n],e,Je.exclude,s))).reduce(((e,t)=>e||t),!1))return void(d[t][n]=!0);Je.intersectConvexPolygonLine(l[n],r[t],i[t],Je.excludeS,Je.excludeS,s)?d[t][n]=!0:d[t][n]=!1})))),d},getFacesFaces2DOverlap=({vertices_coords:e,faces_vertices:t},r=Je.EPSILON)=>{const n=Array.from(Array(t.length)).map((()=>Array.from(Array(t.length)))),o=t.map((t=>t.map((t=>e[t])))),s=o.map((e=>Je.boundingBox(e)));for(let e=0;e<s.length-1;e+=1)for(let t=e+1;t<s.length;t+=1)Je.overlapBoundingBoxes(s[e],s[t])||(n[e][t]=!1,n[t][e]=!1);const a=o.map((e=>Je.makePolygonNonCollinear(e,r)));for(let e=0;e<t.length-1;e+=1)for(let o=e+1;o<t.length;o+=1){if(!1===n[e][o])continue;const t=Je.overlapConvexPolygons(a[e],a[o],r);n[e][o]=t,n[o][e]=t}return n};var Gt=Object.freeze({__proto__:null,makeEdgesFacesOverlap:makeEdgesFacesOverlap,getFacesFaces2DOverlap:getFacesFaces2DOverlap});const triangulateConvexFacesVertices=({faces_vertices:e})=>e.flatMap((e=>{return e.length<4?[e]:(t=e,Array.from(Array(t.length-2)).map(((e,r)=>[t[0],t[r+1],t[r+2]])));var t})),triangulateNonConvexFacesVertices=({vertices_coords:e,faces_vertices:t},r)=>{if(!e||!e.length)throw new Error(N);const n=e[0].length;return t.map((t=>t.flatMap((t=>e[t])))).map((e=>r(e,null,n))).map(((e,r)=>e.map((e=>t[r][e])))).flatMap((e=>{return 3===(t=e).length?[t]:Array.from(Array(Math.floor(t.length/3))).map(((e,r)=>[3*r+0,3*r+1,3*r+2].map((e=>t[e]))));var t}))},triangulate=(e,t)=>{if(!e.faces_vertices)return{};const r=e.edges_vertices?e.edges_vertices.length:0,n=(({faces_vertices:e})=>{let t=0;return e.map((e=>Math.max(3,e.length))).map((e=>Array.from(Array(e-2)).map((()=>t++))))})(e);e.faces_vertices=t?triangulateNonConvexFacesVertices(e,t):triangulateConvexFacesVertices(e),(e=>{e.edges_vertices||(e.edges_vertices=[]);const t=makeVerticesToEdgeBidirectional(e);let r=e.edges_vertices.length;const n=[];e.faces_edges=e.faces_vertices.map((e=>e.map(((e,o,s)=>{const a=[e,s[(o+1)%s.length]],i=a.join(" ");return i in t?t[i]:(n.push(a),t[i]=r,t[a.reverse().join(" ")]=r,r++)}))));const o=n.length;e.edges_vertices.push(...n),e.edges_assignment&&e.edges_assignment.push(...Array(o).fill("J")),e.edges_foldAngle&&e.edges_foldAngle.push(...Array(o).fill(0)),e.vertices_vertices&&delete e.vertices_vertices,e.vertices_edges&&delete e.vertices_edges,e.vertices_faces&&delete e.vertices_faces,e.edges_faces&&delete e.edges_faces,e.faces_faces&&delete e.faces_faces,e.faceOrders&&delete e.faceOrders})(e);return{faces:{map:n},edges:{new:Array.from(Array(e.edges_vertices.length-r)).map(((e,t)=>r+t))}}};var Wt=Object.freeze({__proto__:null,triangulateConvexFacesVertices:triangulateConvexFacesVertices,triangulateNonConvexFacesVertices:triangulateNonConvexFacesVertices,triangulate:triangulate});const connectedComponents=e=>{const t=[],recurse=(r,n)=>void 0!==t[r]?0:(t[r]=n,e[r].forEach((e=>recurse(e,n))),1);for(let t=0,r=0;t<e.length;t+=1)t in e&&(r+=recurse(t,r));return t},makeEdgesEdgesParallel=({vertices_coords:e,edges_vertices:t,edges_vector:r},n=Je.EPSILON)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const o=r.map((e=>Je.normalize(e)));return o.map(((e,t)=>o.map(((e,r)=>t===r?void 0:1-Math.abs(Je.dot(o[t],o[r]))<n)).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e))))},overwriteEdgesOverlaps=(e,t,r,n,o)=>{const s=e.map((()=>[]));return e.forEach(((e,a)=>e.forEach((e=>{a>=e||Je.overlapLineLine(t[a],r[a],t[e],r[e],n,n,o)&&(s[a].push(e),s[e].push(a))})))),s},makeEdgesEdgesParallelOverlap=({vertices_coords:e,edges_vertices:t,edges_vector:r},n)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const o=t.map((t=>e[t[0]])),s=makeEdgesEdgesParallel({vertices_coords:e,edges_vertices:t,edges_vector:r},n);return overwriteEdgesOverlaps(s,r,o,Je.excludeS,n)};var Zt=Object.freeze({__proto__:null,makeEdgesEdgesSimilar:({vertices_coords:e,edges_vertices:t,edges_coords:r},n=Je.EPSILON)=>{r||(r=makeEdgesCoords({vertices_coords:e,edges_vertices:t}));const o=makeEdgesBoundingBox({vertices_coords:e,edges_vertices:t,edges_coords:r}),s=Array.from(Array(r.length)).map((()=>[])),a=o.length?o[0].min.length:0;for(let e=0;e<r.length-1;e+=1)for(let t=e+1;t<r.length;t+=1){let r=!0;for(let s=0;s<a;s+=1)Je.fnEpsilonEqual(o[e].min[s],o[t].min[s],n)&&Je.fnEpsilonEqual(o[e].max[s],o[t].max[s],n)||(r=!1);s[e][t]=r,s[t][e]=r}for(let e=0;e<r.length-1;e+=1)for(let t=e+1;t<r.length;t+=1){if(!s[e][t])continue;const o=Je.fnEpsilonEqualVectors(r[e][0],r[t][0],n)&&Je.fnEpsilonEqualVectors(r[e][1],r[t][1],n),a=Je.fnEpsilonEqualVectors(r[e][0],r[t][1],n)&&Je.fnEpsilonEqualVectors(r[e][1],r[t][0],n),i=o||a;s[e][t]=i,s[t][e]=i}return booleanMatrixToIndexedArray(s)},makeEdgesEdgesParallel:makeEdgesEdgesParallel,makeEdgesEdges2DParallel:({vertices_coords:e,edges_vertices:t,edges_vector:r},n=Je.EPSILON)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const o=r.map((e=>Math.atan2(e[1],e[0]))).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a));o.forEach(((e,t)=>{}));const s=o.slice(-1).concat(o.slice(0,-1)).filter((e=>e));console.log("shifted",s)},makeEdgesEdgesCrossing:({vertices_coords:e,edges_vertices:t,edges_vector:r},n)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const o=t.map((t=>e[t[0]])),s=(({vertices_coords:e,edges_vertices:t,edges_vector:r},n=Je.EPSILON)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const o=r.map((e=>Je.normalize(e)));return o.map(((e,t)=>o.map(((e,r)=>t===r?void 0:1-Math.abs(Je.dot(o[t],o[r]))<n)).map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))))})({vertices_coords:e,edges_vertices:t,edges_vector:r},n);return overwriteEdgesOverlaps(s,r,o,Je.excludeS,n)},makeEdgesEdgesParallelOverlap:makeEdgesEdgesParallelOverlap});var Jt=Object.assign(Object.create(null),{count:count,countImplied:countImplied,validate:validate,clean:clean,populate:populate,remove:removeGeometryIndices,replace:replaceGeometryIndices,removePlanarVertex:removePlanarVertex,removePlanarEdge:removePlanarEdge,addVertices:addVertices,addEdges:addEdges,splitEdge:splitEdge,splitFace:splitFace,flatFold:flatFold,addPlanarSegment:addPlanarSegment,clip:clip,fragment:fragment,verticesClusters:verticesClusters,connectedComponents:connectedComponents,clone:clone,flattenFrame:(e,t=1)=>{if(!e.file_frames||e.file_frames.length<t)return e;const r=["frame_parent","frame_inherit"],n={visited_frames:[]},o={};filterKeysWithPrefix(e,"file_").filter((e=>"file_frames"!==e)).forEach((t=>{o[t]=e[t]}));const recurse=(e,t,r)=>{if(-1!==n.visited_frames.indexOf(t))throw new Error(M);return n.visited_frames.push(t),r=[t].concat(r),0===t?r:e.file_frames[t-1].frame_inherit&&null!=e.file_frames[t-1].frame_parent?recurse(e,e.file_frames[t-1].frame_parent,r):r};return recurse(e,t,[]).map((t=>{if(0===t){const t=e.file_frames;e.file_frames=null;const n=clone(e);return e.file_frames=t,delete n.file_frames,r.forEach((e=>delete n[e])),n}const n=clone(e.file_frames[t-1]);return r.forEach((e=>delete n[e])),n})).reduce(((e,t)=>Object.assign(e,t)),o)}},Xe,nt,dt,_t,it,wt,ct,pt,mt,Ut,Dt,ht,Gt,Wt,lt,yt,st,ut,gt,Zt,At,bt,kt,Ot,Mt,ot);const Yt=1.1,Ht="Rabbit Ear",Xt={},make_rect_vertices_coords=(e,t)=>[[0,0],[e,0],[e,t],[0,t]],make_closed_polygon=e=>populate({vertices_coords:e,edges_vertices:e.map(((e,t,r)=>[t,(t+1)%r.length])),edges_assignment:Array(e.length).fill("B")});Xt.square=(e=1)=>make_closed_polygon(make_rect_vertices_coords(e,e)),Xt.rectangle=(e=1,t=1)=>make_closed_polygon(make_rect_vertices_coords(e,t)),Xt.polygon=(e=3,t=1)=>make_closed_polygon(Je.makePolygonCircumradius(e,t)),Xt.kite=()=>populate({vertices_coords:[[0,0],[1,0],[1,Math.sqrt(2)-1],[1,1],[Math.sqrt(2)-1,1],[0,1]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,2],[0,4],[0,3]],edges_assignment:Array.from("BBBBBBVVF")});const Kt=Object.create(null),Qt={graph:Ct,cp:It,origami:Rt},er={graph:()=>{},cp:Xt.square,origami:Xt.square},tr={graph:()=>({file_spec:Yt,file_creator:Ht}),cp:()=>({file_spec:Yt,file_creator:Ht,frame_classes:["creasePattern"]}),origami:()=>({file_spec:Yt,file_creator:Ht,frame_classes:["foldedForm"]})};Object.keys(Qt).forEach((e=>{Kt[e]=function(){const t=Array.from(arguments).filter((e=>isFoldObject(e))).map((e=>JSON.parse(JSON.stringify(e))));return populate(Object.assign(Object.create(Qt[e]),t.length?{}:er[e](),...t,tr[e]()))},Kt[e].prototype=Qt[e],Kt[e].prototype.constructor=Kt[e],Object.keys(Xt).forEach((t=>{Kt[e][t]=function(){return Kt[e](Xt[t](...arguments))}}))})),Object.assign(Kt.graph,Jt);const cubrt=e=>e<0?-Math.pow(-e,1/3):Math.pow(e,1/3),normalAxiom6=(e,t,r,n)=>{if(Math.abs(1-Je.dot2(e.normal,r)/e.distance)<.02)return[];const o=Je.rotate90(e.normal),s=Je.subtract2(Je.add2(r,Je.scale2(e.normal,e.distance)),Je.scale2(n,2)),a=Je.subtract2(Je.scale2(e.normal,e.distance),r),i=Je.dot2(n,t.normal)-t.distance,c=2*Je.dot2(a,o),l=Je.dot2(a,a),d=Je.dot2(Je.add2(s,a),o),u=Je.dot2(s,a),m=Je.dot2(o,t.normal),p=Je.dot2(a,t.normal),g=m,h=i+d*m+p,v=i*c+u*m+d*p,_=i*l+u*p;let y=0;return Math.abs(v)>Je.EPSILON&&(y=1),Math.abs(h)>Je.EPSILON&&(y=2),Math.abs(g)>Je.EPSILON&&(y=3),((e,t,r,n,o)=>{switch(e){case 1:return[-o/n];case 2:{const e=Math.pow(n,2)-4*r*o;if(e<-Je.EPSILON)return[];const t=-n/(2*r);if(e<Je.EPSILON)return[t];const s=Math.sqrt(e)/(2*r);return[t+s,t-s]}case 3:{const e=r/t,s=n/t,a=o/t,i=(3*s-Math.pow(e,2))/9,c=(9*e*s-27*a-2*Math.pow(e,3))/54,l=Math.pow(i,3)+Math.pow(c,2),d=-e/3;if(l>0){const e=Math.sqrt(l);return[d+cubrt(c+e)+cubrt(c-e)]}if(Math.abs(l)<Je.EPSILON){const e=Math.pow(c,1/3);return c<0?[]:[d+2*e,d-e]}const u=Math.sqrt(-l),m=Math.atan2(u,c)/3,p=Math.pow(Math.pow(c,2)-l,1/6),g=p*Math.cos(m),h=p*Math.sin(m);return[d+2*g,d-g-Math.sqrt(3)*h,d-g+Math.sqrt(3)*h]}default:return[]}})(y,g,h,v,_).map((t=>Je.add2(Je.scale2(e.normal,e.distance),Je.scale2(o,t)))).map((e=>({p:e,normal:Je.normalize2(Je.subtract2(e,r))}))).map((e=>({normal:e.normal,distance:Je.dot2(e.normal,Je.midpoint2(e.p,r))})))};var rr=Object.freeze({__proto__:null,normalAxiom1:(e,t)=>{const r=Je.normalize2(Je.rotate90(Je.subtract2(t,e)));return{normal:r,distance:Je.dot2(Je.add2(e,t),r)/2}},normalAxiom2:(e,t)=>{const r=Je.normalize2(Je.subtract2(t,e));return{normal:r,distance:Je.dot2(Je.add2(e,t),r)/2}},normalAxiom3:(e,t)=>{const r=((e,t)=>{const r=Je.cross2(e.normal,t.normal);if(Math.abs(r)<Je.EPSILON)return;return[(e.distance*t.normal[1]-t.distance*e.normal[1])/r,(t.distance*e.normal[0]-e.distance*t.normal[0])/r]})(e,t);return void 0===r?[{normal:e.normal,distance:(e.distance+t.distance*Je.dot2(e.normal,t.normal))/2}]:[Je.add2,Je.subtract2].map((r=>Je.normalize2(r(e.normal,t.normal)))).map((e=>({normal:e,distance:Je.dot2(r,e)})))},normalAxiom4:(e,t)=>{const r=Je.rotate90(e.normal);return{normal:r,distance:Je.dot2(t,r)}},normalAxiom5:(e,t,r)=>{const n=Je.dot2(t,e.normal),o=e.distance-n,s=Je.distance2(t,r);if(o>s)return[];const a=Math.sqrt(s*s-o*o),i=Je.scale2(e.normal,o),c=Je.add2(t,i),l=Je.scale2(Je.rotate90(e.normal),a);return(a<Je.EPSILON?[c]:[Je.add2(c,l),Je.subtract2(c,l)]).map((e=>Je.normalize2(Je.subtract2(r,e)))).map((e=>({normal:e,distance:Je.dot2(t,e)})))},normalAxiom6:normalAxiom6,normalAxiom7:(e,t,r)=>{const n=Je.rotate90(e.normal),o=Je.dot2(n,t.normal);if(Math.abs(o)<Je.EPSILON)return;const s=Je.dot2(r,n),a=Je.dot2(r,t.normal);return{normal:n,distance:(t.distance+2*s*o-a)/(2*o)}}});var nr=Object.freeze({__proto__:null,axiom1:(e,t)=>({vector:Je.normalize2(Je.subtract2(...Je.resizeUp(t,e))),origin:e}),axiom2:(e,t)=>({vector:Je.normalize2(Je.rotate90(Je.subtract2(...Je.resizeUp(t,e)))),origin:Je.midpoint2(e,t)}),axiom3:(e,t)=>Je.bisectLines2(e.vector,e.origin,t.vector,t.origin),axiom4:(e,t)=>({vector:Je.rotate90(Je.normalize2(e.vector)),origin:t}),axiom5:(e,t,r)=>(Je.intersectCircleLine(Je.distance2(t,r),t,e.vector,e.origin,Je.include_l)||[]).map((e=>({vector:Je.normalize2(Je.rotate90(Je.subtract2(...Je.resizeUp(e,r)))),origin:Je.midpoint2(r,e)}))),axiom6:(e,t,r,n)=>normalAxiom6(Je.rayLineToUniqueLine(e),Je.rayLineToUniqueLine(t),r,n).map(Je.uniqueLineToRayLine),axiom7:(e,t,r)=>{const n=Je.intersectLineLine(e.vector,e.origin,t.vector,r,Je.include_l,Je.include_l);return void 0===n?void 0:{vector:Je.normalize2(Je.rotate90(Je.subtract2(...Je.resizeUp(n,r)))),origin:Je.midpoint2(r,n)}}});const arrayify=(e,t)=>{switch(e){case 3:case"3":case 5:case"5":case 6:case"6":return t;case 7:case"7":return void 0===t?[]:[t];default:return[t]}},reflectPoint=(e,t)=>{const r=Je.makeMatrix2Reflect(e.vector,e.origin);return Je.multiplyMatrix2Vector2(r,t)},validateAxiom1=(e,t)=>e.points.map((e=>Je.overlapConvexPolygonPoint(t,e,Je.include))).reduce(((e,t)=>e&&t),!0),or=validateAxiom1,validateAxiom3=(e,t,r)=>{const n=e.lines.map((e=>Je.clipLineConvexPolygon(t,e.vector,e.origin,Je.include,Je.includeL)));if(void 0===n[0]||void 0===n[1])return[!1,!1];const o=r.map((e=>void 0===e?void 0:Je.clipLineConvexPolygon(t,e.vector,e.origin,Je.include,Je.includeL))),s=[0,1].map((e=>void 0!==o[e])),a=r.map((e=>void 0===e?void 0:[reflectPoint(e,n[0][0]),reflectPoint(e,n[0][1])])).map((e=>void 0!==e&&(Je.overlapLinePoint(Je.subtract(n[1][1],n[1][0]),n[1][0],e[0],Je.includeS)||Je.overlapLinePoint(Je.subtract(n[1][1],n[1][0]),n[1][0],e[1],Je.includeS)||Je.overlapLinePoint(Je.subtract(e[1],e[0]),e[0],n[1][0],Je.includeS)||Je.overlapLinePoint(Je.subtract(e[1],e[0]),e[0],n[1][1],Je.includeS))));return[0,1].map((e=>!0===a[e]&&!0===s[e]))},validateAxiom4=(e,t)=>{const r=Je.intersectLineLine(e.lines[0].vector,e.lines[0].origin,Je.rotate90(e.lines[0].vector),e.points[0],Je.includeL,Je.includeL);return[e.points[0],r].filter((e=>void 0!==e)).map((e=>Je.overlapConvexPolygonPoint(t,e,Je.include))).reduce(((e,t)=>e&&t),!0)},validateAxiom5=(e,t,r)=>{if(0===r.length)return[];const n=e.points.map((e=>Je.overlapConvexPolygonPoint(t,e,Je.include))).reduce(((e,t)=>e&&t),!0);return r.map((t=>reflectPoint(t,e.points[1]))).map((e=>Je.overlapConvexPolygonPoint(t,e,Je.include))).map((e=>e&&n))},validateAxiom6=function(e,t,r){if(0===r.length)return[];if(!e.points.map((e=>Je.overlapConvexPolygonPoint(t,e,Je.include))).reduce(((e,t)=>e&&t),!0))return r.map((()=>!1));const n=r.map((t=>reflectPoint(t,e.points[0]))).map((e=>Je.overlapConvexPolygonPoint(t,e,Je.include))),o=r.map((t=>reflectPoint(t,e.points[1]))).map((e=>Je.overlapConvexPolygonPoint(t,e,Je.include)));return r.map(((e,t)=>n[t]&&o[t]))},validateAxiom7=(e,t,r)=>{const n=Je.overlapConvexPolygonPoint(t,e.points[0],Je.include);if(void 0===r)return[!1];const o=reflectPoint(r,e.points[0]),s=Je.overlapConvexPolygonPoint(t,o,Je.include),a=void 0!==Je.intersectConvexPolygonLine(t,e.lines[1].vector,e.lines[1].origin,Je.includeS,Je.includeL),i=Je.intersectLineLine(e.lines[1].vector,e.lines[1].origin,r.vector,r.origin,Je.includeL,Je.includeL),c=!!i&&Je.overlapConvexPolygonPoint(t,i,Je.include);return n&&s&&a&&c},validateAxiom=(e,t,r,n)=>arrayify(e,[null,validateAxiom1,or,validateAxiom3,validateAxiom4,validateAxiom5,validateAxiom6,validateAxiom7][e](t,r,((e,t)=>{switch(e){case 3:case"3":case 5:case"5":case 6:case"6":return t;default:return t?t[0]:void 0}})(e,n)));var sr=Object.freeze({__proto__:null,validateAxiom1:validateAxiom1,validateAxiom2:or,validateAxiom3:validateAxiom3,validateAxiom4:validateAxiom4,validateAxiom5:validateAxiom5,validateAxiom6:validateAxiom6,validateAxiom7:validateAxiom7,validateAxiom:validateAxiom});const spreadParams=e=>[...e.lines?e.lines:[],...e.points?e.points:[]],axiomInBoundary=(e,t={},r)=>{const n=arrayify(e,nr[`axiom${e}`](...spreadParams(t))).map((e=>Je.line(e)));return r&&arrayify(e,sr[`validateAxiom${e}`](t,r,n)).forEach(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).forEach((e=>delete n[e])),n};var ar=Object.freeze({__proto__:null,axiomInBoundary:axiomInBoundary,normalAxiomInBoundary:(e,t={},r)=>{const n=arrayify(e,rr[`normalAxiom${e}`](...spreadParams(t))).map((e=>Je.line.fromNormalDistance(e)));return r&&arrayify(e,sr[`validateAxiom${e}`]((e=>({points:e.points,lines:e.lines.map(Je.uniqueLineToRayLine)}))(t),r,n)).forEach(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).forEach((e=>delete n[e])),n}});const axiom=(e,t={},r)=>axiomInBoundary(e,t,r);Object.keys(nr).forEach((e=>{axiom[e]=nr[e]})),Object.keys(rr).forEach((e=>{axiom[e]=rr[e]})),Object.keys(ar).forEach((e=>{axiom[e]=ar[e]})),axiom.validateAxiom1=validateAxiom1,axiom.validateAxiom2=or,axiom.validateAxiom3=validateAxiom3,axiom.validateAxiom4=validateAxiom4,axiom.validateAxiom5=validateAxiom5,axiom.validateAxiom6=validateAxiom6,axiom.validateAxiom7=validateAxiom7,axiom.validate=validateAxiom;const line_line_for_arrows=(e,t)=>Je.intersectLineLine(e.vector,e.origin,t.vector,t.origin,Je.includeL,Je.includeL),diagram_reflect_point=(e,t)=>{const r=Je.makeMatrix2Reflect(e.vector,e.origin);return Je.multiplyMatrix2Vector2(r,t)},boundary_for_arrows$1=({vertices_coords:e})=>Je.convexHull(e),widest_perp=(e,t,r)=>{const n=boundary_for_arrows$1(e);if(void 0===r){const e=Je.clipLineConvexPolygon(n,t.vector,t.origin,Je.exclude,Je.includeL);r=Je.midpoint(...e)}const o=Je.rotate270(t.vector),s=Je.clipLineConvexPolygon(n,o,r,Je.exclude,Je.includeL).map((e=>Je.distance(r,e))).sort(((e,t)=>e-t)).shift(),a=Je.scale(Je.normalize(o),s);return Je.segment(Je.add(r,Je.flip(a)),Je.add(r,a))},between_2_segments=(e,t,r)=>{const n=t.map((e=>Je.midpoint(e[0],e[1]))),o=Je.line.fromPoints(...n),s=Je.intersect(r,o),a=Je.line(r.vector.rotate90(),s);return Je.segment(e.lines.map((e=>Je.intersect(e,a))))},ir=[null,(e,t)=>axiom(1,e).map((e=>[widest_perp(t,e)])),e=>[[Je.segment(e.points)]],(e,t)=>{const r=boundary_for_arrows$1(t),n=e.lines.map((e=>Je.clipLineConvexPolygon(r,e.vector,e.origin,Je.exclude,Je.includeL))),o=n.map((e=>Je.subtract(e[1],e[0]))),s=Je.intersectLineLine(o[0],n[0][0],o[1],n[1][0],Je.excludeS,Je.excludeS);return s?axiom(3,e).map((t=>((e,t,r,n)=>{const o=e.lines.map((e=>e.vector)),s=o.map(Je.flip),a=o.concat(s).map((e=>Je.ray(e,t))),i=a.filter((e=>Je.dot(e.vector,r.vector)>0&&Je.cross2(e.vector,r.vector)>0)).shift(),c=a.filter((e=>Je.dot(e.vector,r.vector)>0&&Je.cross2(e.vector,r.vector)<0)).shift(),l=a.filter((e=>Je.dot(e.vector,r.vector)<0&&Je.cross2(e.vector,r.vector)>0)).shift(),d=a.filter((e=>Je.dot(e.vector,r.vector)<0&&Je.cross2(e.vector,r.vector)<0)).shift(),u=[i,c,l,d].map((e=>Je.intersectConvexPolygonLine(n,e.vector,e.origin,Je.excludeS,Je.excludeR).shift().shift())),m=u.map((e=>Je.distance(e,t))),p=m[0]<m[1]?u[0]:u[1],g=m[0]<m[1]?Je.add(c.origin,c.vector.normalize().scale(m[0])):Je.add(i.origin,i.vector.normalize().scale(m[1])),h=m[2]<m[3]?u[2]:u[3],v=m[2]<m[3]?Je.add(d.origin,d.vector.normalize().scale(m[2])):Je.add(l.origin,l.vector.normalize().scale(m[3]));return[Je.segment(p,g),Je.segment(h,v)]})(e,s,t,r))):[between_2_segments(e,n,axiom(3,e).filter((e=>void 0!==e)).shift())]},(e,t)=>axiom(4,e).map((r=>[widest_perp(t,r,line_line_for_arrows(r,e.lines[0]))])),e=>axiom(5,e).map((t=>[Je.segment(e.points[1],diagram_reflect_point(t,e.points[1]))])),e=>axiom(6,e).map((t=>e.points.map((e=>Je.segment(e,diagram_reflect_point(t,e)))))),(e,t)=>axiom(7,e).map((r=>[Je.segment(e.points[0],diagram_reflect_point(r,e.points[0])),widest_perp(t,r,line_line_for_arrows(r,e.lines[1]))]))];delete ir[0];const axiomArrows=(e,t={},...r)=>{const n=t.points?t.points.map((e=>Je.getVector(e))):void 0,o=t.lines?t.lines.map((e=>Je.getLine(e))):void 0;return ir[e]({points:n,lines:o},...r)};Object.keys(ir).forEach((e=>{axiomArrows[e]=(...t)=>axiomArrows(e,...t)}));var cr=Object.assign(Object.create(null),{axiom_arrows:axiomArrows,simple_arrow:(e,t)=>{const r=(({vertices_coords:e})=>Je.convexHull(e))(e),n=Je.boundingBox(r),o=((e,t,r)=>{if(void 0===r){const n=Je.clipLineConvexPolygon(e,t.vector,t.origin,Je.exclude,Je.includeL);if(void 0===n)return;r=Je.midpoint(...n)}const n=Je.rotate90(t.vector),o=Je.clipLineConvexPolygon(e,n,r,Je.exclude,Je.includeL).map((e=>Je.distance(r,e))).sort(((e,t)=>e-t)).shift(),s=Je.scale(Je.normalize(n),o);return Je.segment(Je.add(r,Je.flip(s)),Je.add(r,s))})(r,t);if(void 0===o)return;const s=Je.subtract(o[1],o[0]),a=Je.magnitude(s),i=Je.dot(s,[1,0]),c=n.span[0]<n.span[1]?n.span[0]:n.span[1];return o.head={width:.1*c,height:.15*c},o.bend=i>0?.3:-.3,o.padding=.05*a,o}});var lr=Object.freeze({__proto__:null,flipFacesLayer:e=>invertMap(invertMap(e).reverse()),facesLayerToEdgesAssignments:(e,t)=>{const r=[],n=makeFacesWinding(e);return(e.edges_faces?e.edges_faces:makeEdgesFaces(e)).forEach(((e,o)=>{if(1===e.length&&(r[o]="B"),2===e.length){const s=e.map((e=>n[e]));if(s[0]===s[1])return void(r[o]="F");const a=e.map((e=>t[e])),i=a[0]<a[1],c=s[0]?i:!i;r[o]=c?"V":"M"}})),r},faceOrdersToMatrix:e=>{const t=[];e.forEach((e=>{t[e[0]]=void 0,t[e[1]]=void 0}));const r=t.map((()=>[]));return e.forEach((([e,t,n])=>{r[e][t]=n,r[t][e]=-n})),r}});const nudgeFacesWithFacesLayer=({faces_layer:e})=>{const t=[];return invertMap(e).forEach(((e,r)=>{t[e]={vector:[0,0,1],layer:r}})),t},nudgeFacesWithFaceOrders=({vertices_coords:e,faces_vertices:t,faceOrders:r})=>{const n=makeFacesNormal({vertices_coords:e,faces_vertices:t}),o=connectedComponents(makeVerticesVerticesUnsorted({edges_vertices:r.map((e=>[e[0],e[1]]))})),s=invertMap(o).map((e=>e.constructor===Array?e:[e])),a=s.map((e=>(({faceOrders:e,faces_normal:t},r)=>{if(!e)return[];const n={};r.forEach((e=>{n[e]=!0})),r[0];const o=[];r.map((e=>{o[e]=Je.dot(t[e],t[r[0]])>0}));const s=[];r.forEach((e=>{s[e]=[]})),e.forEach((e=>{if(!n[e[0]])return;const t=-1===e[2]^!o[e[1]]?[e[1],e[0]]:[e[0],e[1]];s[t[0]].push(t[1])}));const a=[],i={},recurse=e=>{i[e]=!0,s[e].forEach((e=>{i[e]||recurse(e)})),a.push(e)};return r.forEach((e=>{i[e]||recurse(e)})),a})({faceOrders:r,faces_normal:n},e))),i=s.map((e=>n[e[0]])),c=[];return a.forEach(((e,t)=>e.forEach(((e,r)=>{c[e]={vector:i[t],layer:r}})))),c};var fr=Object.freeze({__proto__:null,nudgeFacesWithFacesLayer:nudgeFacesWithFacesLayer,nudgeFacesWithFaceOrders:nudgeFacesWithFaceOrders});const between=(e,t,r)=>t<r?e.slice(t+1,r):e.slice(r+1,t),validateTacoTacoFacePairs=e=>{const t=nonUniqueElements(e),r={};let n=0;for(let e=0;e<t.length;e+=1)if(void 0===r[t[e]])n+=1,r[t[e]]=n;else if(void 0!==r[t[e]]){if(r[t[e]]!==n)return!1;n-=1,r[t[e]]=void 0}return!0},build_layers=(e,t)=>e.map((e=>t[e])).filter((e=>void 0!==e)),validateLayerSolver=(e,t,r,n,o)=>{const s=Je.flattenArrays(t);if(!((e,t,r=!0,n=Je.EPSILON)=>{const o=invertMap(t),s=e.map((e=>e?e[1]:void 0)),a=e.map((e=>e?Math.min(...e):void 0)).map((e=>e+n)),i=e.map((e=>e?Math.max(...e):void 0)).map((e=>e-n)),c=o.length+(r?0:-1);for(let e=0;e<c;e+=1){const r=(e+1)%o.length;if(o[e]===o[r])continue;const n=between(t,o[e],o[r]).flat(),c=n.map((t=>s[e]<a[t])).reduce(((e,t)=>e&&t),!0),l=n.map((t=>s[e]>i[t])).reduce(((e,t)=>e&&t),!0);if(!c&&!l)return!1}return!0})(e,t,n,o))return!1;for(let e=0;e<r.length;e+=1){const t=build_layers(s,r[e]);if(!validateTacoTacoFacePairs(t))return!1}return!0},dr={V:!0,v:!0,M:!0,m:!0},ur={V:1,v:1,M:-1,m:-1},assignmentsToFacesVertical=e=>{let t=0;return e.slice(1).concat([e[0]]).map((e=>{const r=(n=e,t%2==0?ur[n]||0:-(ur[n]||0));var n;return t+=void 0===ur[e]?0:1,r}))},foldStripWithAssignments=(e,t)=>{const r=(e=>{let t=0;const r=e.slice(1);return[!1].concat(r.map((e=>dr[e]?++t:t)).map((e=>e%2==1)))})(t).map(((t,r)=>e[r]*(t?-1:1))),n=e.map((()=>{}));n[0]=[0,r[0]];for(let o=1;o<e.length&&("B"!==t[o]&&"b"!==t[o]);o+=1){const t=n[(o-1+e.length)%e.length][1];n[o]=[t,t+r[o]]}return n},mr={B:!0,b:!0},singleVertexSolver=(e,t,r=Je.EPSILON)=>{const n=foldStripWithAssignments(e,t),o=assignmentsToFacesVertical(t),s=t.map((e=>!mr[e])).reduce(((e,t)=>e&&t),!0);if(s){const e=n[0][0],t=n[n.length-1][1];if(Math.abs(e-t)>r)return[]}const a=((e,t,r)=>{const n=e.map((e=>e?(e[0]+e[1])/2:void 0)),o=[];return e.forEach(((s,a)=>{if(!s)return;if(!t&&a===e.length-1)return;const i=s[1],c=i-2*r,l=i+2*r,d=[a,(a+1)%e.length],u=d.map((e=>n[e])).map((e=>e>i)),m=1*(!u[0]&&!u[1])+2*(u[0]&&u[1]),p=o.filter((e=>e.min<i&&e.max>i)).shift(),g={faces:d,taco_type:m};p?p.pairs.push(g):o.push({min:c,max:l,pairs:[g]})})),o.map((e=>e.pairs)).filter((e=>e.length>1)).map((e=>({both:e.filter((e=>0===e.taco_type)).map((e=>e.faces)),left:e.filter((e=>1===e.taco_type)).map((e=>e.faces)),right:e.filter((e=>2===e.taco_type)).map((e=>e.faces))})))})(n,s,r).map((e=>[e.left,e.right].map(invertMap).filter((e=>e.length>1)))).reduce(((e,t)=>e.concat(t)),[]),recurse=(t=[0],i=0,c=0)=>{const l=i+1,d=o[i],u=i>=e.length-1,m=s&&u;if(!validateLayerSolver(n,t,a,m,r))return[];if(m){const e=invertMap(t),r=e[0],n=e[i];if(d>0&&n>r)return[];if(d<0&&n<r)return[]}if(u)return[t];if(0===d)return t[c]=[l].concat(t[c]),recurse(t,l,c);const p=1===d?Array.from(Array(t.length-c)).map(((e,t)=>c+t+1)):Array.from(Array(c+1)).map(((e,t)=>t)),g=p.map((()=>clone(t)));return g.forEach(((e,t)=>e.splice(p[t],0,l))),g.map(((e,t)=>recurse(e,l,p[t]))).reduce(((e,t)=>e.concat(t)),[])};return recurse().map(invertMap)},maekawaAssignments=e=>{const t=(r=e).map(((e,t)=>t)).filter((e=>"U"===r[e]||"u"===r[e]));var r;const n=Array.from(Array(2**t.length)).map(((e,t)=>t.toString(2))).map((e=>Array(t.length-e.length+1).join("0")+e)).map((e=>Array.from(e).map((e=>"0"===e?"V":"M")))).map((r=>{const n=e.slice();return t.forEach(((e,t)=>{n[e]=r[t]})),n}));if(e.includes("B")||e.includes("b"))return n;const o=n.map((e=>e.filter((e=>"M"===e||"m"===e)).length)),s=n.map((e=>e.filter((e=>"V"===e||"v"===e)).length));return n.filter(((e,t)=>2===Math.abs(o[t]-s[t])))},make_lookup$1=e=>{const t=e[0].length,r=Array.from(Array(t+1)).map((()=>({})));Array.from(Array(Math.pow(2,t))).map(((e,t)=>t.toString(2))).map((e=>Array.from(e).map((e=>parseInt(e,10)+1)).join(""))).map((e=>`11111${e}`.slice(-t))).forEach((e=>{r[0][e]=!1})),e.forEach((e=>{r[0][e]=!0})),Array.from(Array(t)).map(((e,t)=>t+1)).map((e=>Array.from(Array(Math.pow(3,t))).map(((e,t)=>t.toString(3))).map((e=>`000000${e}`.slice(-t))).forEach((t=>((e,t,r)=>{const n=Array.from(r).map((e=>parseInt(e,10)));if(n.filter((e=>0===e)).length!==t)return;e[t][r]=!1;let o=!1;for(let r=0;r<n.length;r+=1){const s=[];if(0===n[r]){for(let o=1;o<=2;o+=1)n[r]=o,!1!==e[t-1][n.join("")]&&s.push([r,o]);n[r]=0,s.length>0&&!1===o&&(o=[]),1===s.length&&o.push(s[0])}}!1!==o&&0===o.length&&(o=!0),e[t][r]=o})(r,e,t)))));let n=[];Array.from(Array(t+1)).map(((e,r)=>t-r)).forEach((e=>{const t=[];Object.keys(r[e]).forEach((n=>{let o=r[e][n];o.constructor===Array&&(o=o[0]),t.push([n,o])})),n=n.concat(t)})),n.sort(((e,t)=>parseInt(e[0],10)-parseInt(t[0],10)));const o={};return n.forEach((e=>{o[e[0]]=Object.freeze(e[1])})),Object.freeze(o)},pr={taco_taco:make_lookup$1(["111112","111121","111222","112111","121112","121222","122111","122212","211121","211222","212111","212221","221222","222111","222212","222221"]),taco_tortilla:make_lookup$1(["112","121","212","221"]),tortilla_tortilla:make_lookup$1(["11","22"]),transitivity:make_lookup$1(["112","121","122","211","212","221"])},gr={taco_taco:e=>[[e[0],e[2]],[e[1],e[3]],[e[1],e[2]],[e[0],e[3]],[e[0],e[1]],[e[2],e[3]]],taco_tortilla:e=>[[e[0],e[2]],[e[0],e[1]],[e[1],e[2]]],tortilla_tortilla:e=>[[e[0],e[2]],[e[1],e[3]]],transitivity:e=>[[e[0],e[1]],[e[1],e[2]],[e[2],e[0]]]},pairArrayToSortedPairString$1=e=>e[0]<e[1]?`${e[0]} ${e[1]}`:`${e[1]} ${e[0]}`,hr={taco_taco:e=>[pairArrayToSortedPairString$1([e[0],e[2]]),pairArrayToSortedPairString$1([e[1],e[3]]),pairArrayToSortedPairString$1([e[1],e[2]]),pairArrayToSortedPairString$1([e[0],e[3]]),pairArrayToSortedPairString$1([e[0],e[1]]),pairArrayToSortedPairString$1([e[2],e[3]])],taco_tortilla:e=>[pairArrayToSortedPairString$1([e[0],e[2]]),pairArrayToSortedPairString$1([e[0],e[1]]),pairArrayToSortedPairString$1([e[1],e[2]])],tortilla_tortilla:e=>[pairArrayToSortedPairString$1([e[0],e[2]]),pairArrayToSortedPairString$1([e[1],e[3]])],transitivity:e=>[pairArrayToSortedPairString$1([e[0],e[1]]),pairArrayToSortedPairString$1([e[1],e[2]]),pairArrayToSortedPairString$1([e[2],e[0]])]},vr={0:0,1:1,2:-1},keysToFaceOrders$1=(e,t)=>{const r=Object.keys(e),n=r.map((e=>e.split(" ").map((e=>parseInt(e,10)))));return n.forEach(((n,o)=>{const s=-2*(1===vr[e[r[o]]]^t[n[1]])+1;n.push(s)})),n},reformatSolution=(e,t)=>(e.orders&&(e.orders=e.orders.flatMap((e=>keysToFaceOrders$1(e,t)))),e.leaves&&(e.leaves=e.leaves.map((e=>keysToFaceOrders$1(e,t)))),e.partitions&&e.partitions.forEach((e=>reformatSolution(e,t))),e.node&&e.node.forEach((e=>reformatSolution(e,t))),e),_r=Object.freeze(Object.keys(pr)),yr={0:0,1:2,2:1},buildRuleAndLookup$1=(e,t,...r)=>{const n=gr[e](t),o=n.map((e=>e[1]<e[0])),s=n.map(((e,t)=>o[t]?`${e[1]} ${e[0]}`:`${e[0]} ${e[1]}`)),a=s.map(((e,t)=>{for(let n=0;n<r.length;n+=1)if(r[n][e])return o[t]?yr[r[n][e]]:r[n][e];return 0})).join("");if(!0===pr[e][a])return!0;if(!1===pr[e][a])return!1;const i=pr[e][a];return[s[i[0]],o[i[0]]?yr[i[1]]:i[1]]},getConstraintIndicesFromFacePairs$1=(e,t,r)=>{const n={};return _r.forEach((o=>{const s=r.flatMap((e=>t[o][e]));n[o]=uniqueElements(s).filter((t=>e[o][t]))})),n},propagate$1=(e,t,r,...n)=>{let o=r;const s={};do{const r=getConstraintIndicesFromFacePairs$1(e,t,o),a={};for(let t=0;t<_r.length;t+=1){const o=_r[t],i=r[o];for(let t=0;t<i.length;t+=1){const r=buildRuleAndLookup$1(o,e[o][i[t]],...n,s);if(!0!==r){if(!1===r)return console.warn("invalid state found",o,e[o][i[t]]),!1;if(s[r[0]]){if(s[r[0]]!==r[1])return console.warn("order conflict",o,e[o][i[t]]),!1}else{const[e,t]=r;a[e]=!0,s[r[0]]=t}}}}o=Object.keys(a)}while(o.length);return s},getNeighborsArray=(e,t,r)=>{const n={};return Object.keys(t).forEach((o=>{const s=r[o][e];s&&s.map((e=>t[o][e])).map((e=>hr[o](e).forEach((e=>{n[e]=!0}))))})),Object.keys(n)},coplanarOverlappingFacesGroups=({vertices_coords:e,faces_vertices:t,faces_faces:r},n=Je.EPSILON)=>{r||(r=makeFacesFaces({faces_vertices:t}));const o=(({vertices_coords:e,faces_vertices:t},r=Je.EPSILON)=>{const n=makeFacesNormal({vertices_coords:e,faces_vertices:t}),o=t.map((()=>[]));for(let e=0;e<t.length-1;e+=1)for(let s=e+1;s<t.length;s+=1)e!==s&&Je.parallelNormalized(n[e],n[s],r)&&(o[e].push(s),o[s].push(e));const s=connectedComponents(o),a=invertMap(s).map((e=>"number"==typeof e?[e]:e)),i=a.map((e=>n[e[0]])),c=[];a.forEach(((e,t)=>e.forEach((e=>{c[e]=Je.dot3(n[e],i[t])>0}))));const l=t.map((t=>e[t[0]])).map((e=>Je.resize(3,e))),d=a.map(((e,t)=>e.map((e=>Je.dot3(i[t],l[e]))))).map(((e,t)=>clusterScalars(e).map((e=>e.map((e=>a[t][e])))))),u=d.flatMap(((e,t)=>e.map((()=>[...i[t]])))),m=d.flat(),p=m.map((e=>e[0])).map((e=>l[e])).map(((e,t)=>Je.dot3(u[t],e))).map(((e,t)=>Je.scale3(u[t],e))),g=m.map(((e,t)=>({normal:u[t],origin:p[t]})));return m.map(((e,t)=>({faces:e,facesAligned:e.map((e=>c[e])),plane:g[t]})))})({vertices_coords:e,faces_vertices:t},n),s=[];o.forEach((e=>e.facesAligned.forEach(((t,r)=>{s[e.faces[r]]=t}))));const a=[0,0,1],i=o.map((e=>e.plane.normal)).map((e=>{const t=Je.dot(e,a);return Math.abs(t+1)<.01?Je.makeMatrix4Rotate(Math.PI,[1,0,0]):Je.matrix4FromQuaternion(Je.quaternionFromTwoVectors(e,a))})),c=((e,t,r,n)=>{const o=e.vertices_coords.map((e=>Je.resize(3,e))),s=t.map((t=>t.faces.map(((r,n)=>t.facesAligned[n]?e.faces_vertices[r]:e.faces_vertices[r].slice().reverse())).map((e=>e.map((e=>o[e])))).map((e=>Je.makePolygonNonCollinear(e,n))))),a=[],i=s.map(((e,t)=>e.map((e=>e.map((e=>Je.multiplyMatrix4Vector3(r[t],e))).map((e=>[e[0],e[1]]))))));return t.map((e=>e.faces)).forEach(((e,t)=>e.forEach(((e,r)=>{a[e]=i[t][r]})))),a})({vertices_coords:e,faces_vertices:t},o,i,n),l=o.map((e=>e.faces)).map((e=>selfRelationalArraySubset(r,e))).map((e=>connectedComponents(e))),d=l.map((e=>invertMap(e).map((e=>e.constructor===Array?e:[e])))),u=l.map((e=>{const t=e.map(((e,t)=>t));return e.map((r=>t.filter((t=>e[t]!==r))))})),m=t.map((()=>[]));u.forEach((e=>e.forEach(((e,t)=>{for(let r=0;r<e.length;r+=1){const o=e[r],s=[t,o].map((e=>c[e]));Je.overlapConvexPolygons(...s,n)&&(m[t][o]=!0,m[o][t]=!0)}}))));const p=u.map((e=>e.map(((e,t)=>e.filter((e=>m[t][e])))))),g=[];p.forEach(((e,t)=>{g[t]=[],e.forEach(((e,r)=>{const n=l[t][r],o=e.map((e=>l[t][e]));g[t][n]||(g[t][n]=new Set),o.forEach((e=>{g[t][e]||(g[t][e]=new Set)})),o.forEach((e=>{g[t][n].add(e),g[t][e].add(n)}))}))})),g.forEach(((e,t)=>e.forEach(((e,r)=>{g[t][r]=[...e]}))));const h=g.map((e=>invertMap(connectedComponents(e)).map((e=>e.constructor===Array?e:[e])))),v=h.flatMap(((e,t)=>e.map((()=>t)))),_=o.map(((e,t)=>h[t].map((e=>e.flatMap((e=>d[t][e])))))).flatMap(((e,t)=>e.map((e=>({faces:e,facesAligned:e.map((e=>s[e])),plane:o[t].plane}))))),y=v.map((e=>o[e].plane)),b=v.map((e=>i[e])),E=_.map((e=>e.faces));return{sets_faces:E,sets_plane:y,sets_transformXY:b,faces_set:invertMap(E),faces_winding:s}},makeTortillaTortillaFacesCrossing$1=(e,t,r)=>{const n=((e,t,r)=>{const n=makeFacesWinding(e),o=makeFacesPolygon(e,r);n.forEach(((e,t)=>{e||o[t].reverse()}));const s=t.map((e=>2===e.length&&e[0]!==e[1])).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)),a=s.map((t=>e.edges_vertices[t])).map((t=>t.map((t=>e.vertices_coords[t])))),i=a.map((e=>Je.subtract2(e[1],e[0]))),c=[];return s.forEach((e=>{c[e]=[]})),s.map(((e,t)=>o.map((e=>Je.clipLineConvexPolygon(e,i[t],a[t][0],Je.exclude,Je.excludeS,r))).map((e=>void 0!==e)))).forEach(((e,t)=>e.forEach(((e,r)=>{e&&c[s[t]].push(r)})))),c})(e,t,r);return n.map(((t,r)=>t.map((t=>[e.edges_faces[r],[t,t]])))).reduce(((e,t)=>e.concat(t)),[])},classify_faces_pair$1=e=>1===e[0]&&-1===e[1]||-1===e[0]&&1===e[1]?"both":1===e[0]&&1===e[1]?"right":-1===e[0]&&-1===e[1]?"left":void 0,makeTacosTortillas$1=(e,t=Je.EPSILON)=>{const r=(e=>{const t={...e},r={};return t.edges_foldAngle.map(edgeFoldAngleIsFlat).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).forEach((e=>{r[e]=!0})),filterKeysWithPrefix(e,"edges_").forEach((n=>{t[n]=[],e[n].forEach(((e,o)=>{r[o]&&(t[n][o]=JSON.parse(JSON.stringify(e)))}))})),t})(e),n=(e=>{const t=e.edges_vertices.map((t=>e.vertices_coords[t[0]])),r=e.edges_vertices.map((t=>Je.subtract2(e.vertices_coords[t[1]],e.vertices_coords[t[0]])));return e.edges_faces.map(((n,o)=>n.map((n=>Je.cross2(Je.subtract2(e.faces_center[n],t[o]),r[o]))).map((e=>Math.sign(e)))))})(r),o=makeEdgesEdgesParallelOverlap(r,t),s=selfRelationalUniqueIndexPairs(o).filter((e=>e.map((e=>r.edges_faces[e].length>1)).reduce(((e,t)=>e&&t),!0))),a=s.map((e=>e.map((e=>r.edges_faces[e])))),i=((e,t,r)=>{const n=t.map((t=>e.edges_vertices[t[0]].map((t=>e.vertices_coords[t])))),o=n.map((e=>e[0])),s=n.map((e=>Je.subtract2(e[1],e[0])));return r.map((t=>t.map((t=>t.map((t=>e.faces_center[t])))))).map(((e,t)=>e.map((e=>e.map((e=>Je.cross2(Je.subtract2(e,o[t]),s[t]))).map((e=>Math.sign(e)))))))})(r,s,a),c=i.map((e=>e.map(classify_faces_pair$1))),l=c.map(((e,t)=>{return(r=e)[0]===r[1]&&"both"!==r[0]?a[t]:void 0;var r})).filter((e=>void 0!==e)),d=c.map(((e,t)=>{return(r=e)[0]===r[1]&&"both"===r[0]?a[t]:void 0;var r})).map(((e,t)=>((e,t)=>{if(void 0!==e)return t[0][0]===t[1][0]?e:[e[0],[e[1][1],e[1][0]]]})(e,i[t]))).filter((e=>void 0!==e)),u=makeTortillaTortillaFacesCrossing$1(r,n,t),m=d.concat(u),p=c.map(((e,t)=>{return(r=e)[0]===r[1]||"both"!==r[0]&&"both"!==r[1]?void 0:((e,t,r)=>{const n="left"===t[0]||"left"===t[1]?-1:1,o="both"===t[0]?[...e[1]]:[...e[0]],s="both"===t[0]?0:1;return{taco:o,tortilla:r[s][0]===n?e[s][0]:e[s][1]}})(a[t],c[t],i[t]);var r})).filter((e=>void 0!==e)),g=makeEdgesFacesOverlap(r,t),h=booleanMatrixToIndexedArray(g).map(((e,t)=>n[t].length>1&&n[t][0]===n[t][1]?e:[])).map(((e,t)=>({taco:r.edges_faces[t],tortillas:e}))).filter((e=>e.tortillas.length)).flatMap((e=>e.tortillas.map((t=>({taco:[...e.taco],tortilla:t})))));return{taco_taco:l,tortilla_tortilla:m,taco_tortilla:p.concat(h)}},br={0:0,1:2,2:1},Er={M:1,m:1,V:2,v:2},doEdgesOverlap=(e,t,r,n=1e-6)=>{const o=((e,t,r=1e-6)=>{const n=e[0]<e[1]?e:[e[1],e[0]],o=t[0]<t[1]?t:[t[1],t[0]];return Math.min(n[1],o[1])-Math.max(n[0],o[0])>r})(...t.map((t=>e.edges_vertices[t].map((t=>e.vertices_coords[t])))).map((e=>e.map((e=>Je.dot(e,r))))),n);return o},make3DTortillas=(e,t,r,n=1e-6)=>{const o=((e,t,r=1e-6)=>{const n=t.map((e=>e.join(" "))),o={};n.forEach(((e,t)=>{void 0===o[e]&&(o[e]=[]),o[e].push(t)})),Object.keys(o).filter((e=>o[e].length<2)).forEach((e=>delete o[e]));const s={};Object.keys(o).forEach((e=>{s[e]=chooseTwoPairs(o[e])}));const a={};Object.keys(s).forEach((t=>{const n=s[t][0][0],o=e.edges_vertices[n].map((t=>e.vertices_coords[t])),i=Je.normalize(Je.subtract(o[1],o[0]));a[t]=s[t].map((t=>doEdgesOverlap(e,t,i,r)))}));const i={};return Object.keys(s).forEach((e=>{i[e]=s[e].filter(((t,r)=>a[e][r]))})),Object.keys(i).flatMap((e=>i[e]))})(e,r,n),s=o.map((t=>t.map((t=>e.edges_faces[t]))));return s.forEach(((e,r)=>{t[e[0][0]]!==t[e[1][0]]&&s[r][1].reverse()})),s},make3DTacoTortillas=(e,t,r,n,o,s,a=1e-6)=>{if(t.length<2)return[];const i=t.map((e=>e.map((e=>e.split(" ").map((e=>parseInt(e,10))))))).map((e=>e.flat().sort(((e,t)=>e-t)))),c=e.edges_faces.map((e=>{const t={};return e.forEach((e=>{t[e]={}})),t})),l=s.map(((e,t)=>e.flatMap((e=>i[e])).filter((e=>!c[t][e])))),d=s.map(((e,t)=>e.flatMap((e=>i[e])).filter((e=>c[t][e]))));l.map(((t,r)=>edgeFoldAngleIsFlat(e.edges_foldAngle[r])?r:void 0)).filter((e=>void 0!==e)).forEach((e=>{delete l[e],delete d[e]}));const u=l.map(((t,r)=>e.edges_vertices[r].map((t=>e.vertices_coords[t])))),m=l.map(((e,t)=>r[s[t][0]]));u.map(((e,t)=>e.map((e=>Je.multiplyMatrix4Vector3(m[t],e))))).map((e=>e.map((e=>[e[0],e[1]]))));const p=l.map(((e,t)=>e.map((e=>((e,t,r)=>!!e.map((e=>Je.overlapConvexPolygonPoint(t,e,Je.exclude,r))).reduce(((e,t)=>e||t),!1)||!!Je.intersectConvexPolygonLine(t,Je.subtract2(e[1],e[0]),e[0],Je.excludeS,Je.excludeS,r))(u[t].map((t=>Je.multiplyMatrix4Vector3(r[n[e]],t))),o[e],a))))),g=p.flatMap(((e,t)=>e.map(((e,r)=>e?{edge:t,face:l[t][r],otherFace:d[t][r]}:void 0)).filter((e=>void 0!==e))));return g},graphGroupCopies=(e,t,r)=>{const n=e.vertices_coords.map((e=>Je.resize(3,e))),o=t.map((t=>subgraphWithFaces(e,t)));return r.forEach(((e,t)=>{o[t].vertices_coords=o[t].vertices_coords.map(((t,r)=>((e,t)=>{const r=Je.multiplyMatrix4Vector3(e,t);return[r[0],r[1]]})(e,n[r])))})),o},prepare$1=(e,t=1e-6)=>{const r={...e};r.faces_edges||(r.faces_edges=makeFacesEdgesFromVertices(r)),r.edges_faces||(r.edges_faces=makeEdgesFacesUnsorted(r)),!r.edges_foldAngle&&r.edges_assignment&&(r.edges_foldAngle=makeEdgesFoldAngle(r));const{sets_faces:n,sets_transformXY:o,faces_set:s,faces_winding:a}=coplanarOverlappingFacesGroups(r,t),i=graphGroupCopies(r,n,o),c=[];i.map((e=>makeFacesPolygon(e,t))).forEach((e=>e.forEach(((e,t)=>{c[t]=e})))),a.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e)).forEach((e=>c[e].reverse()));const l=c.map((e=>e.reduce(((e,t)=>Je.add2(e,t)),[0,0]).map((t=>t/e.length))));i.forEach((e=>{e.faces_center=e.faces_vertices.map(((e,t)=>l[t]))}));const d=((e,t,r,n)=>{const o=e.faces_vertices.map((()=>[]));return t.forEach((e=>{for(let t=0;t<e.length-1;t+=1)for(let s=t+1;s<e.length;s+=1){const a=[e[t],e[s]],i=a.map((e=>r[e]));Je.overlapConvexPolygons(...i,n)&&(o[a[0]][a[1]]=!0,o[a[1]][a[0]]=!0)}})),o.map((e=>e.map(((e,t)=>t)).filter((e=>void 0!==e))))})(r,n,c,t),u=i.map((e=>makeTacosTortillas$1(e,t))),m=i.map((e=>((e,t,r=Je.EPSILON)=>{const n=makeFacesPolygon(e,r),o=e.faces_vertices.map((()=>[]));n.forEach(((e,s)=>t[s].forEach((e=>{if(e<=s)return;const t=Je.clipPolygonPolygon(n[s],n[e],r);t&&(o[s][e]=t)}))));const s=[];return o.forEach(((e,t)=>e.forEach(((e,a)=>{a<=t||!o[t][a]||o.forEach(((o,i)=>{i<=t||i<=a||Je.clipPolygonPolygon(e,n[i],r)&&s.push([t,a,i].sort(((e,t)=>e-t)))}))})))),s})(e,d,t))),p=m.map(((e,t)=>((e,t)=>{const r={};return t.taco_taco.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]].sort(((e,t)=>e-t)))).forEach((e=>[`${e[0]} ${e[1]} ${e[2]}`,`${e[0]} ${e[1]} ${e[3]}`,`${e[0]} ${e[2]} ${e[3]}`,`${e[1]} ${e[2]} ${e[3]}`].forEach((e=>{r[e]=!0})))),t.taco_tortilla.map((e=>[e.taco[0],e.taco[1],e.tortilla].sort(((e,t)=>e-t)).join(" "))).forEach((e=>{r[e]=!0})),e.filter((e=>void 0===r[e.join(" ")]))})(e,u[t]))),g=u.map(((e,t)=>((e,t)=>{const r={};return r.taco_taco=e.taco_taco.map((e=>[e[0][0],e[1][0],e[0][1],e[1][1]])),r.taco_tortilla=e.taco_tortilla.map((e=>[e.taco[0],e.tortilla,e.taco[1]])),r.tortilla_tortilla=e.tortilla_tortilla.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]])),r.transitivity=t.map((e=>[e[0],e[1],e[2]])),r})(e,p[t]))),h=selfRelationalUniqueIndexPairs(d),v=h.map((e=>e.join(" "))),_=h.map((e=>s[e[0]])),y=invertMap(_).map((e=>e.constructor===Array?e:[e])).map((e=>e.map((e=>v[e])))),b=g.map(((e,t)=>y[t]?y[t]:[])),E=((e,t)=>{const r=e.edges_vertices.map((()=>({})));t.forEach(((t,n)=>e.faces_edges[n].forEach((e=>{r[e][t]=!0}))));const n=r.map((e=>Object.keys(e).map((e=>parseInt(e,10)))));return n.forEach(((e,t)=>{2!==e.length&&delete n[t]})),n.forEach(((e,t)=>{e[0]>e[1]&&n[t].reverse()})),n})(r,s),x=make3DTortillas(r,s,E,t).map((e=>[...e[0],...e[1]])),k=make3DTacoTortillas(r,b,o,s,c,E,t);k.map((e=>[e.face,e.otherFace].map((e=>a[e]))));const A=k.map((e=>e.face<e.otherFace)),O=k.map(((e,t)=>A[t]?[e.face,e.otherFace]:[e.otherFace,e.face])).map((e=>e.join(" "))),M={"-1":2,1:1,0:0},w=k.map((e=>Math.sign(r.edges_foldAngle[e.edge]))).map((e=>M[e]));console.log("tacoTortillas3D",k);const j={taco_taco:[],taco_tortilla:[],tortilla_tortilla:[],transitivity:[]};g.forEach((e=>{j.taco_taco.push(...e.taco_taco),j.taco_tortilla.push(...e.taco_tortilla),j.tortilla_tortilla.push(...e.tortilla_tortilla),j.transitivity.push(...e.transitivity)})),j.tortilla_tortilla.push(...x);const P=(e=>{const t={};return Object.keys(e).forEach((e=>{t[e]={}})),Object.keys(e).forEach((r=>{e[r].forEach(((e,n)=>hr[r](e).forEach((e=>{void 0===t[r][e]&&(t[r][e]=[]),t[r][e].push(n)}))))})),t})(j),S=b.flat(),C=((e,t,r)=>{const n={};t.forEach((e=>{n[e]=!0}));const o={};return e.edges_faces.forEach(((t,s)=>{const a=e.edges_assignment[s],i=Er[a];if(t.length<2||void 0===i)return;const c=r[t[0]]?i:br[i],l=`${t[0]} ${t[1]}`,d=`${t[1]} ${t[0]}`;l in n&&(o[l]=c),d in n&&(o[d]=br[c])})),o})(r,v,a);return console.log("constraints",j),console.log("constraintsLookup",P),console.log("facePairsFlat",S),console.log("edgeAdjacentOrders",C),O.forEach(((e,t)=>{C[e]=w[t]})),{constraints:j,constraintsLookup:P,facePairs:S,edgeAdjacentOrders:C,faces_winding:a}},allSolutions=(e,...t)=>{const r=e.orders?[...t,e.orders]:[...t];if(e.partitions){const t=e.partitions.map((e=>allSolutions(e)));return(e=>{const t=e.map((e=>e.length)),r=t.slice();for(let e=r.length-2;e>=0;e-=1)r[e]*=r[e+1];r[0]>2**28&&console.warn("allSolutions() might fail: too many");const n=r.slice();return n.push(1),n.shift(),Array.from(Array(r[0])).map(((e,t)=>t)).map((e=>n.map(((r,n)=>Math.floor(e/r)%t[n]))))})(t).map((e=>e.flatMap(((e,r)=>t[r][e])))).map((e=>[...r,...e]))}const n=[];if(e.leaves&&e.leaves.forEach((e=>n.push([...r,e]))),e.node){const t=e.node.flatMap((e=>allSolutions(e,...r)));n.push(...t)}return e.leaves||e.node||n.push([...r]),n},anySolution=e=>{const t=e.orders?e.orders:[];return e.partitions?[...t,...e.partitions.flatMap((e=>anySolution(e)))]:e.leaves?[...t,...e.leaves[0]]:e.node?[...t,...anySolution(e.node[0])]:t},xr={anySolution:function(){return anySolution(this)},allSolutions:function(){return this.allSolutionsMemo||(this.allSolutionsMemo=allSolutions(this)),this.allSolutionsMemo},count:function(){return this.allSolutions().length}},solveNonBranchingNode=(e,t,r,n,...o)=>{if(!r.length)return{};const s=r[0],a=[],i=[];[1,2].forEach((c=>{const l=propagate$1(e,t,[s],...n,...o,{[s]:c});if(!1===l)return;l[s]=c;(Object.keys(l).length===r.length?a:i).push(l)}));const c={leaves:a,node:i.map((s=>solveNode(e,t,r.filter((e=>!(e in s))),[...n,...o],s)))};return 0===c.leaves.length&&delete c.leaves,0===c.node.length&&delete c.node,c},solveNode=(e,t,r,n,...o)=>{if(!r.length)return{orders:o};const s=((e,t,r,n={})=>{const o={};e.forEach((e=>{o[e]=!0}));let s=0;const a=[];for(;s<e.length;){if(!o[e[s]]){s+=1;continue}const i=[],c=[e[s]],l={[e[s]]:!0};do{const e=c.shift();delete o[e],i.push(e);const s=n[e]?n[e]:getNeighborsArray(e,t,r);n[e]=s;const a=s.filter((e=>o[e]&&!l[e]));c.push(...a),a.forEach((e=>{l[e]=!0}))}while(c.length);s+=1,a.push(i)}return a})(r,e,t);return s.length>1?{orders:o,partitions:s.map((r=>solveNonBranchingNode(e,t,r,n,...o)))}:{orders:o,...solveNonBranchingNode(e,t,s[0],n,...o)}},make_lookup=e=>{const t=e[0].length,r=Array.from(Array(t+1)).map((()=>({})));Array.from(Array(Math.pow(2,t))).map(((e,t)=>t.toString(2))).map((e=>Array.from(e).map((e=>parseInt(e,10)+1)).join(""))).map((e=>`11111${e}`.slice(-t))).forEach((e=>{r[0][e]=!1})),e.forEach((e=>{r[0][e]=!0})),Array.from(Array(t)).map(((e,t)=>t+1)).map((e=>Array.from(Array(Math.pow(3,t))).map(((e,t)=>t.toString(3))).map((e=>`000000${e}`.slice(-t))).forEach((t=>((e,t,r)=>{const n=Array.from(r).map((e=>parseInt(e,10)));if(n.filter((e=>0===e)).length!==t)return;e[t][r]=!1;let o=!1;for(let r=0;r<n.length;r+=1){const s=[];if(0===n[r]){for(let o=1;o<=2;o+=1)n[r]=o,!1!==e[t-1][n.join("")]&&s.push([r,o]);n[r]=0,s.length>0&&!1===o&&(o=[]),1===s.length&&o.push(s[0])}}!1!==o&&0===o.length&&(o=!0),e[t][r]=o})(r,e,t)))));let n=[];Array.from(Array(t+1)).map(((e,r)=>t-r)).forEach((e=>{const t=[];Object.keys(r[e]).forEach((n=>{let o=r[e][n];o.constructor===Array&&(o=o[0]),t.push([n,o])})),n=n.concat(t)})),n.sort(((e,t)=>parseInt(e[0],10)-parseInt(t[0],10)));const o={};return n.forEach((e=>{o[e[0]]=Object.freeze(e[1])})),Object.freeze(o)},kr={taco_taco:make_lookup(["111112","111121","111222","112111","121112","121222","122111","122212","211121","211222","212111","212221","221222","222111","222212","222221"]),taco_tortilla:make_lookup(["112","121","212","221"]),tortilla_tortilla:make_lookup(["11","22"]),transitivity:make_lookup(["112","121","122","211","212","221"])},Ar={taco_taco:e=>[[e[0],e[2]],[e[1],e[3]],[e[1],e[2]],[e[0],e[3]],[e[0],e[1]],[e[2],e[3]]],taco_tortilla:e=>[[e[0],e[2]],[e[0],e[1]],[e[1],e[2]]],tortilla_tortilla:e=>[[e[0],e[2]],[e[1],e[3]]],transitivity:e=>[[e[0],e[1]],[e[1],e[2]],[e[2],e[0]]]},pairArrayToSortedPairString=e=>e[0]<e[1]?`${e[0]} ${e[1]}`:`${e[1]} ${e[0]}`,Or={taco_taco:e=>[pairArrayToSortedPairString([e[0],e[2]]),pairArrayToSortedPairString([e[1],e[3]]),pairArrayToSortedPairString([e[1],e[2]]),pairArrayToSortedPairString([e[0],e[3]]),pairArrayToSortedPairString([e[0],e[1]]),pairArrayToSortedPairString([e[2],e[3]])],taco_tortilla:e=>[pairArrayToSortedPairString([e[0],e[2]]),pairArrayToSortedPairString([e[0],e[1]]),pairArrayToSortedPairString([e[1],e[2]])],tortilla_tortilla:e=>[pairArrayToSortedPairString([e[0],e[2]]),pairArrayToSortedPairString([e[1],e[3]])],transitivity:e=>[pairArrayToSortedPairString([e[0],e[1]]),pairArrayToSortedPairString([e[1],e[2]]),pairArrayToSortedPairString([e[2],e[0]])]},Mr={0:0,1:1,2:-1},wr=Object.freeze(Object.keys(kr)),jr={0:0,1:2,2:1},buildRuleAndLookup=(e,t,...r)=>{const n=Ar[e](t),o=n.map((e=>e[1]<e[0])),s=n.map(((e,t)=>o[t]?`${e[1]} ${e[0]}`:`${e[0]} ${e[1]}`)),a=s.map(((e,t)=>{for(let n=0;n<r.length;n+=1)if(r[n][e])return o[t]?jr[r[n][e]]:r[n][e];return 0})).join("");if(!0===kr[e][a])return!0;if(!1===kr[e][a])return!1;const i=kr[e][a];return[s[i[0]],o[i[0]]?jr[i[1]]:i[1]]},getConstraintIndicesFromFacePairs=(e,t,r)=>{const n={};return wr.forEach((o=>{const s=r.flatMap((e=>t[o][e]));n[o]=uniqueElements(s).filter((t=>e[o][t]))})),n},propagate=(e,t,r,...n)=>{let o=r;const s={};do{const r=getConstraintIndicesFromFacePairs(e,t,o),a={};for(let t=0;t<wr.length;t+=1){const o=wr[t],i=r[o];for(let t=0;t<i.length;t+=1){const r=buildRuleAndLookup(o,e[o][i[t]],...n,s);if(!0!==r){if(!1===r)return console.warn("invalid state found",o,e[o][i[t]]),!1;if(s[r[0]]){if(s[r[0]]!==r[1])return console.warn("order conflict",o,e[o][i[t]]),!1}else{const[e,t]=r;a[e]=!0,s[r[0]]=t}}}}o=Object.keys(a)}while(o.length);return s},getBranches=(e,t,r,n={})=>{const o=Object.keys(t),s={};e.forEach((e=>{s[e]=!0}));let a=0;const i=[];for(;a<e.length;){if(!s[e[a]]){a+=1;continue}const c=[],l=[e[a]],d={[e[a]]:!0};do{const e=l.shift();let a;if(delete s[e],c.push(e),n[e])a=n[e];else{const s={};o.forEach((n=>{const o=r[n][e];o&&o.map((e=>t[n][e])).map((e=>Or[n](e).forEach((e=>{s[e]=!0}))))})),a=Object.keys(s),n[e]=a}const i=a.filter((e=>s[e])).filter((e=>!d[e]));l.push(...i),i.forEach((e=>{d[e]=!0}))}while(l.length);a+=1,i.push(c)}return i},makeTortillaTortillaFacesCrossing=(e,t,r)=>{const n=((e,t,r)=>{const n=makeFacesWinding(e),o=makeFacesPolygon(e,r);for(let e=0;e<o.length;e+=1)n[e]||o[e].reverse();const s=t.map((e=>2===e.length&&e[0]!==e[1])).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)),a=s.map((t=>e.edges_vertices[t])).map((t=>t.map((t=>e.vertices_coords[t])))),i=a.map((e=>Je.subtract2(e[1],e[0]))),c=[];return s.forEach((e=>{c[e]=[]})),s.map(((e,t)=>o.map((e=>Je.clipLineConvexPolygon(e,i[t],a[t][0],Je.exclude,Je.excludeS,r))).map((e=>void 0!==e)))).forEach(((e,t)=>e.forEach(((e,r)=>{e&&c[s[t]].push(r)})))),c})(e,t,r);return n.map(((t,r)=>t.map((t=>[e.edges_faces[r],[t,t]])))).reduce(((e,t)=>e.concat(t)),[])},classify_faces_pair=e=>1===e[0]&&-1===e[1]||-1===e[0]&&1===e[1]?"both":1===e[0]&&1===e[1]?"right":-1===e[0]&&-1===e[1]?"left":void 0,makeTacosTortillas=(e,t=Je.EPSILON)=>{const r=makeFacesConvexCenter(e),n=((e,t)=>{const r=e.edges_vertices.map((t=>e.vertices_coords[t[0]])),n=e.edges_vertices.map((t=>Je.subtract2(e.vertices_coords[t[1]],e.vertices_coords[t[0]])));return e.edges_faces.map(((e,o)=>e.map((e=>Je.cross2(Je.subtract2(t[e],r[o]),n[o]))).map((e=>Math.sign(e)))))})(e,r),o=(e=>{const t=Array.from(Array(e.length)).map((()=>Array(e.length).fill(!1)));return e.forEach(((e,r)=>e.forEach((e=>{t[r][e]=!0})))),t})(makeEdgesEdgesParallelOverlap(e,t)),s=booleanMatrixToUniqueIndexPairs(o).filter((t=>t.map((t=>e.edges_faces[t].length>1)).reduce(((e,t)=>e&&t),!0))),a=s.map((t=>t.map((t=>e.edges_faces[t])))),i=((e,t,r,n)=>{const o=r.map((t=>e.edges_vertices[t[0]].map((t=>e.vertices_coords[t])))),s=o.map((e=>e[0])),a=o.map((e=>Je.subtract2(e[1],e[0])));return n.map((e=>e.map((e=>e.map((e=>t[e])))))).map(((e,t)=>e.map((e=>e.map((e=>Je.cross2(Je.subtract2(e,s[t]),a[t]))).map((e=>Math.sign(e)))))))})(e,r,s,a),c=i.map((e=>e.map(classify_faces_pair))),l=c.map(((e,t)=>{return(r=e)[0]===r[1]&&"both"!==r[0]?a[t]:void 0;var r})).filter((e=>void 0!==e)),d=c.map(((e,t)=>{return(r=e)[0]===r[1]&&"both"===r[0]?a[t]:void 0;var r})).map(((e,t)=>((e,t)=>{if(void 0!==e)return t[0][0]===t[1][0]?e:[e[0],[e[1][1],e[1][0]]]})(e,i[t]))).filter((e=>void 0!==e)),u=makeTortillaTortillaFacesCrossing(e,n,t),m=d.concat(u),p=c.map(((e,t)=>{return(r=e)[0]===r[1]||"both"!==r[0]&&"both"!==r[1]?void 0:((e,t,r)=>{const n="left"===t[0]||"left"===t[1]?-1:1,o="both"===t[0]?[...e[1]]:[...e[0]],s="both"===t[0]?0:1;return{taco:o,tortilla:r[s][0]===n?e[s][0]:e[s][1]}})(a[t],c[t],i[t]);var r})).filter((e=>void 0!==e)),g=makeEdgesFacesOverlap(e,t),h=booleanMatrixToIndexedArray(g).map(((e,t)=>n[t].length>1&&n[t][0]===n[t][1]?e:[])).map(((t,r)=>({taco:e.edges_faces[r],tortillas:t}))).filter((e=>e.tortillas.length)).flatMap((e=>e.tortillas.map((t=>({taco:[...e.taco],tortilla:t})))));return{taco_taco:l,tortilla_tortilla:m,taco_tortilla:p.concat(h)}},Pr={0:0,1:2,2:1},Sr={M:1,m:1,V:2,v:2},prepare=(e,t=1e-6)=>{const r=getFacesFaces2DOverlap(e,t),n=makeFacesWinding(e),o=makeTacosTortillas(e,t),s=((e,t,r,n=Je.EPSILON)=>{t||(t=getFacesFaces2DOverlap(e,n)),r||(r=makeFacesWinding(e));const o=e.faces_vertices.map((t=>t.map((t=>e.vertices_coords[t]))));o.forEach(((e,t)=>{r[t]||e.reverse()}));const s=e.faces_vertices.map((()=>[]));for(let e=0;e<s.length-1;e+=1)for(let r=e+1;r<s.length;r+=1){if(!t[e][r])continue;const a=Je.clipPolygonPolygon(o[e],o[r],n);a&&(s[e][r]=a)}const a=[];for(let e=0;e<s.length-1;e+=1)for(let r=e+1;r<s.length;r+=1)if(s[e][r])for(let i=r+1;i<s.length;i+=1)e!==i&&r!==i&&t[e][i]&&t[r][i]&&Je.clipPolygonPolygon(s[e][r],o[i],n)&&a.push([e,r,i].sort(((e,t)=>e-t)));return a})(e,r,n,t),a=((e,t)=>{const r={};return t.taco_taco.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]].sort(((e,t)=>e-t)))).forEach((e=>[`${e[0]} ${e[1]} ${e[2]}`,`${e[0]} ${e[1]} ${e[3]}`,`${e[0]} ${e[2]} ${e[3]}`,`${e[1]} ${e[2]} ${e[3]}`].forEach((e=>{r[e]=!0})))),t.taco_tortilla.map((e=>[e.taco[0],e.taco[1],e.tortilla].sort(((e,t)=>e-t)).join(" "))).forEach((e=>{r[e]=!0})),e.filter((e=>void 0===r[e.join(" ")]))})(s,o),i=((e,t)=>{const r={};return r.taco_taco=e.taco_taco.map((e=>[e[0][0],e[1][0],e[0][1],e[1][1]])),r.taco_tortilla=e.taco_tortilla.map((e=>[e.taco[0],e.tortilla,e.taco[1]])),r.tortilla_tortilla=e.tortilla_tortilla.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]])),r.transitivity=t.map((e=>[e[0],e[1],e[2]])),r})(o,a),c=(e=>{const t={};return Object.keys(e).forEach((e=>{t[e]={}})),Object.keys(e).forEach((r=>{e[r].forEach(((e,n)=>Or[r](e).forEach((e=>{void 0===t[r][e]&&(t[r][e]=[]),t[r][e].push(n)}))))})),t})(i),l=((e,t)=>(t||(t=getFacesFaces2DOverlap(e)),booleanMatrixToUniqueIndexPairs(t).map((e=>e.join(" ")))))(e,r),d=((e,t,r)=>{r||(r=makeFacesWinding(e));const n={};t.forEach((e=>{n[e]=!0}));const o={};return e.edges_faces.forEach(((t,s)=>{const a=e.edges_assignment[s],i=Sr[a];if(t.length<2||void 0===i)return;const c=r[t[0]]?i:Pr[i],l=`${t[0]} ${t[1]}`,d=`${t[1]} ${t[0]}`;l in n&&(o[l]=c),d in n&&(o[d]=Pr[c])})),o})(e,l,n);return console.log("overlap",r),console.log("graph",e),console.log("facesWinding",n),console.log("tacos_tortillas",o),console.log("unfiltered_trios",s),console.log("transitivity_trios",a),console.log("facePairs",l),console.log("constraints",i),console.log("constraintsLookup",c),console.log("edgeAdjacentOrders",d),{constraints:i,constraintsLookup:c,facePairs:l,edgeAdjacentOrders:d}},Cr={allSolutions:function(){return(e=>{const recurse=(e,t=[])=>{e.faceOrders&&t.push(e.faceOrders);const r=e.finished?e.finished.map((e=>[...t,e.faceOrders])):void 0;if(e.unfinished){const n=e.unfinished.map((e=>recurse(e,JSON.parse(JSON.stringify(t))))),o=n.length>1?((e,t)=>{const r=[];for(let n=0;n<e.length;n+=1)for(let o=0;o<t.length;o+=1)r.push([e[n],t[o]]);return r})(...n):n;o.forEach((e=>{e.branch=!0})),r.forEach((e=>e.push(...o)))}return r.finished=!0,r};return recurse(e)})(this)}},solveBranch=(e,t,r,n,o,...s)=>{if(!n.length)return[];const a=n[0],i=[],c=[];[1,2].forEach((r=>{const o=propagate(e,t,[a],...s,{[a]:r});!1!==o&&(o[a]=r,Object.keys(o).length===n.length?i.push(o):c.push(o))}));const l=c.map((e=>({faceOrders:e}))),d=c.map(((o,a)=>{const i=n.filter((e=>!(e in o)));return getBranches(i,e,t,r).map((n=>solveBranch(e,t,r,n,l[a],...s,o)))}));return i.length&&(o.finished=i.map((e=>({faceOrders:e})))),l.length&&(o.unfinished=l),l.length>1&&i.length&&console.log("HAPPENED"),i.map((e=>[...s,e])).concat(...d)};var zr=Object.assign(Object.create(null),{solver:(e,t=1e-6)=>{const{constraints:r,constraintsLookup:n,facePairs:o,edgeAdjacentOrders:s,faces_winding:a}=prepare$1(e,t),i=((e,t,r,n,o)=>{const s=propagate$1(e,t,Object.keys(n),n);if(!s)return;const a=r.filter((e=>!(e in n))).filter((e=>!(e in s))),i=solveNode(e,t,a,[],n,s);return reformatSolution(i,o)})(r,n,o,s,a);return Object.assign(Object.create(xr),i)},solver2d:(e,t=1e-6)=>{const r=new Date,{constraints:n,constraintsLookup:o,facePairs:s,edgeAdjacentOrders:a}=prepare(e,t),i=Date.now()-r,c=new Date,l=propagate(n,o,Object.keys(a),a);if(!l)return;console.log("2D initialResult",JSON.parse(JSON.stringify(l)));const d={},u=s.filter((e=>!(e in a))).filter((e=>!(e in l))),m={},p=getBranches(u,n,o,m);console.log("branches",p);const g=p.map((()=>({}))),h=p.map(((e,t)=>solveBranch(n,o,m,e,g[t],a,l)));g.length&&(d.unfinished=g),d.faceOrders={...a,...l},console.log("2D solution",JSON.parse(JSON.stringify(d.faceOrders)));const v=e.faces_normal?e.faces_normal:makeFacesNormal(e),_=[0,0,1],recurse=e=>{e.faceOrders&&(e.faceOrders=((e,t,r)=>{const n=t.map((e=>Je.dot(e,r)>0)),o=Object.keys(e),s=o.map((e=>e.split(" ").map((e=>parseInt(e,10)))));return s.forEach(((t,r)=>{const s=Mr[e[o[r]]],a=n[t[1]]?s:-s;t.push(a)})),s})(e.faceOrders,v,_)),e.finished&&e.finished.forEach((e=>recurse(e))),e.unfinished&&e.unfinished.forEach((e=>recurse(e)))};recurse(d),console.log("2D solution final",JSON.parse(JSON.stringify(d.faceOrders)));const y=Date.now()-c;return console.log(`prep ${i}ms solver ${y}ms`),console.log("solution",d),console.log("branches",h),Object.assign(Object.create(Cr),d)},topologicalOrder:(e,t)=>{if(!e)return[];const r=[];Object.keys(e).forEach((t=>{const n=t.split(" ").map((e=>parseInt(e,10)));-1===e[t]&&n.reverse(),void 0===r[n[0]]&&(r[n[0]]=[]),r[n[0]].push(n[1])})),t&&t.faces_vertices&&t.faces_vertices.forEach(((e,t)=>{void 0===r[t]&&(r[t]=[])}));const n=[],o=[];let s=0;for(let e=0;e<r.length;e+=1){if(o[e])continue;const t=[e];for(;t.length&&s<2*r.length;){const e=t[t.length-1];if(r[e]&&r[e].length){const n=r[e].pop();o[n]||t.push(n)}else n.push(e),o[e]=!0,t.pop(),s+=1}}return s>=2*r.length&&console.warn("fix protection in topological order"),n},singleVertexSolver:singleVertexSolver,singleVertexAssignmentSolver:(e,t,r)=>{null==t&&(t=e.map((()=>"U")));const n=maekawaAssignments(t),o=n.map((t=>singleVertexSolver(e,t,r)));return n.map(((e,t)=>t)).filter((e=>o[e].length>0)).map((e=>({assignment:n[e],layer:o[e]})))},foldStripWithAssignments:foldStripWithAssignments},lr,fr);var Fr=Object.freeze({__proto__:null,kawasakiSolutions:({vertices_coords:e,vertices_edges:t,edges_vertices:r,edges_vectors:n},o)=>{n||(n=makeEdgesVector({vertices_coords:e,edges_vertices:r})),t||(t=makeVerticesEdgesUnsorted({edges_vertices:r}));const s=t[o].map((e=>n[e])),a=Je.counterClockwiseOrder2(s).map((e=>s[e]));return kawasakiSolutionsVectors(a)}}),Lr=Object.assign(Object.create(null),{maekawaAssignments:maekawaAssignments,foldAngles4:(e,t,r=0)=>{const n=(e=>{let t=0,r=0;for(let n=0;n<e.length;n+=1)"M"!==e[n]&&"m"!==e[n]||(t+=1),"V"!==e[n]&&"v"!==e[n]||(r+=1);for(let n=0;n<e.length;n+=1){if(t>r&&("V"===e[n]||"v"===e[n]))return n;if(r>t&&("M"===e[n]||"m"===e[n]))return n}})(t);if(void 0===n)return;const o=e[(n+1)%e.length],s=e[(n+2)%e.length],a=Math.PI*r,i=-Math.cos(o)*Math.cos(s)+Math.sin(o)*Math.sin(s)*Math.cos(Math.PI-a),c=Math.cos(Math.PI-a)-Math.sin(Math.PI-a)**2*Math.sin(o)*Math.sin(s)/(1-i),l=-Math.acos(c)+Math.PI;return n%2==0?[l,a,l,a].map(((e,t)=>n===t?-e:e)):[a,l,a,l].map(((e,t)=>n===t?-e:e))}},zt,Fr,$t),Nr={axioms:{ar:[null,"اصنع خطاً يمر بنقطتين","اصنع خطاً عن طريق طي نقطة واحدة إلى أخرى","اصنع خطاً عن طريق طي خط واحد على آخر","اصنع خطاً يمر عبر نقطة واحدة ويجعل خطاً واحداً فوق نفسه","اصنع خطاً يمر بالنقطة الأولى ويجعل النقطة الثانية على الخط","اصنع خطاً يجلب النقطة الأولى إلى الخط الأول والنقطة الثانية إلى الخط الثاني","اصنع خطاً يجلب نقطة إلى خط ويجعل خط ثاني فوق نفسه"],de:[null,"Falte eine Linie durch zwei Punkte","Falte zwei Punkte aufeinander","Falte zwei Linien aufeinander","Falte eine Linie auf sich selbst, falte dabei durch einen Punkt","Falte einen Punkt auf eine Linie, falte dabei durch einen anderen Punkt","Falte einen Punkt auf eine Linie und einen weiteren Punkt auf eine weitere Linie","Falte einen Punkt auf eine Linie und eine weitere Linie in sich selbst zusammen"],en:[null,"fold a line through two points","fold two points together","fold two lines together","fold a line on top of itself, creasing through a point","fold a point to a line, creasing through another point","fold a point to a line and another point to another line","fold a point to a line and another line onto itself"],es:[null,"dobla una línea entre dos puntos","dobla dos puntos juntos","dobla y une dos líneas","dobla una línea sobre sí misma, doblándola hacia un punto","dobla un punto hasta una línea, doblándola a través de otro punto","dobla un punto hacia una línea y otro punto hacia otra línea","dobla un punto hacia una línea y otra línea sobre sí misma"],fr:[null,"créez un pli passant par deux points","pliez pour superposer deux points","pliez pour superposer deux lignes","rabattez une ligne sur elle-même à l'aide d'un pli qui passe par un point","rabattez un point sur une ligne à l'aide d'un pli qui passe par un autre point","rabattez un point sur une ligne et un autre point sur une autre ligne","rabattez un point sur une ligne et une autre ligne sur elle-même"],hi:[null,"एक क्रीज़ बनाएँ जो दो स्थानों से गुजरता है","एक स्थान को दूसरे स्थान पर मोड़कर एक क्रीज़ बनाएँ","एक रेखा पर दूसरी रेखा को मोड़कर क्रीज़ बनाएँ","एक क्रीज़ बनाएँ जो एक स्थान से गुजरता है और एक रेखा को स्वयं के ऊपर ले आता है","एक क्रीज़ बनाएँ जो पहले स्थान से गुजरता है और दूसरे स्थान को रेखा पर ले आता है","एक क्रीज़ बनाएँ जो पहले स्थान को पहली रेखा पर और दूसरे स्थान को दूसरी रेखा पर ले आता है","एक क्रीज़ बनाएँ जो एक स्थान को एक रेखा पर ले आता है और दूसरी रेखा को स्वयं के ऊपर ले आता है"],jp:[null,"2点に沿って折り目を付けます","2点を合わせて折ります","2つの線を合わせて折ります","点を通過させ、既にある線に沿って折ります","点を線沿いに合わせ別の点を通過させ折ります","線に向かって点を折り、同時にもう一方の線に向かってもう一方の点を折ります","線に向かって点を折り、同時に別の線をその上に折ります"],ko:[null,"두 점을 통과하는 선으로 접으세요","두 점을 함께 접으세요","두 선을 함께 접으세요","그 위에 선을 접으면서 점을 통과하게 접으세요","점을 선으로 접으면서, 다른 점을 지나게 접으세요","점을 선으로 접고 다른 점을 다른 선으로 접으세요","점을 선으로 접고 다른 선을 그 위에 접으세요"],ms:[null,"lipat garisan melalui dua titik","lipat dua titik bersama","lipat dua garisan bersama","lipat satu garisan di atasnya sendiri, melipat melalui satu titik","lipat satu titik ke garisan, melipat melalui titik lain","lipat satu titik ke garisan dan satu lagi titik ke garisan lain","lipat satu titik ke garisan dan satu lagi garisan di atasnya sendiri"],pt:[null,"dobre uma linha entre dois pontos","dobre os dois pontos para uni-los","dobre as duas linhas para uni-las","dobre uma linha sobre si mesma, criando uma dobra ao longo de um ponto","dobre um ponto até uma linha, criando uma dobra ao longo de outro ponto","dobre um ponto até uma linha e outro ponto até outra linha","dobre um ponto até uma linha e outra linha sobre si mesma"],ru:[null,"сложите линию через две точки","сложите две точки вместе","сложите две линии вместе","сверните линию сверху себя, сгибая через точку","сложите точку в линию, сгибая через другую точку","сложите точку в линию и другую точку в другую линию","сложите точку в линию и другую линию на себя"],tr:[null,"iki noktadan geçen bir çizgi boyunca katla","iki noktayı birbirine katla","iki çizgiyi birbirine katla","bir noktadan kıvırarak kendi üzerindeki bir çizgi boyunca katla","başka bir noktadan kıvırarak bir noktayı bir çizgiye katla","bir noktayı bir çizgiye ve başka bir noktayı başka bir çizgiye katla","bir noktayı bir çizgiye ve başka bir çizgiyi kendi üzerine katla"],vi:[null,"tạo một nếp gấp đi qua hai điểm","tạo nếp gấp bằng cách gấp một điểm này sang điểm khác","tạo nếp gấp bằng cách gấp một đường lên một đường khác","tạo một nếp gấp đi qua một điểm và đưa một đường lên trên chính nó","tạo một nếp gấp đi qua điểm đầu tiên và đưa điểm thứ hai lên đường thẳng","tạo một nếp gấp mang điểm đầu tiên đến đường đầu tiên và điểm thứ hai cho đường thứ hai","tạo một nếp gấp mang lại một điểm cho một đường và đưa một đường thứ hai lên trên chính nó"],zh:[null,"通過兩點折一條線","將兩點折疊起來","將兩條線折疊在一起","通過一個點折疊一條線在自身上面","將一個點，通過另一個點折疊成一條線，","將一個點折疊為一條線，再將另一個點折疊到另一條線","將一個點折疊成一條線，另一條線折疊到它自身上"]},instructions:{fold:{es:"doblez"},"valley fold":{es:"doblez de valle",zh:"谷摺"},"mountain fold":{es:"doblez de montaña",zh:"山摺"},"inside reverse fold":{zh:"內中割摺"},"outside reverse fold":{zh:"外中割摺"},sink:{},"open sink":{zh:"開放式沉壓摺"},"closed sink":{zh:"封閉式沉壓摺"},"rabbit ear":{zh:"兔耳摺"},"double rabbit ear":{zh:"雙兔耳摺"},"petal fold":{zh:"花瓣摺"},blintz:{zh:"坐墊基"},squash:{zh:"壓摺"},"flip over":{es:"dale la vuelta a tu papel"}}};const pairify=e=>e.map(((e,t,r)=>[e,r[(t+1)%r.length]])),getContainingValue=(e,t)=>Array.from(e.children).filter((e=>e.attributes.length&&void 0!==Array.from(e.attributes).filter((e=>e.nodeValue===t)).shift())).shift(),$r={children:[{textContent:"0"}]},Vr=["F","B","M","V","U"],setMetadata=(e,t)=>{const r={file_description:"memo",file_author:"originalAuthorName",file_title:"title"};Object.keys(r).forEach((t=>{r[t]=((e,t)=>{const r=getContainingValue(e,t),n=r?Array.from(r.children).shift():null;return n?n.textContent:void 0})(e,r[t])})),Object.keys(r).filter((e=>r[e])).forEach((e=>{t[e]=r[e]})),t.file_classes=["singleModel"],t.frame_classes=["creasePattern"]},flattenDomTree=e=>null!=e.children&&e.children.length?Array.from(e.children).flatMap((e=>flattenDomTree(e))):[e],getAttributeValue=(e,t,r,n=[])=>{const o=r.style?r.style.match(new RegExp(`${e}[\\s]*:[^;]*;`)):null;if(o)return o[0].split(":")[1].replace(";","");const s=((e,t,r,n=[])=>{const o=r.class?r.class.split(/\s/).filter(Boolean).map((e=>e.trim())).map((e=>`.${e}`)):[],s=r.id?`#${r.id}`:null;if(s)for(let t=0;t<n.length;t+=1)if(n[t][s]&&n[t][s][e])return n[t][s][e];for(let r=0;r<n.length;r+=1){for(let t=0;t<o.length;t+=1)if(n[r][o[t]]&&n[r][o[t]][e])return n[r][o[t]][e];if(n[r][t]&&n[r][t][e])return n[r][t][e]}})(e,t,r,n);return void 0!==s?s:r[e]?r[e]:null};var Ir={line:{x1:1,y1:1,x2:1,y2:1},rect:{x:1,y:1,width:1,height:1},circle:{cx:1,cy:1,r:1},ellipse:{cx:1,cy:1,rx:1,ry:1},polygon:{points:1},polyline:{points:1},path:{d:1}};const getAttributesFloatValue=(e,t)=>t.map((t=>e.getAttribute(t))).map((e=>null==e?"0":e)).map(parseFloat),PolygonToSegments=e=>(e=>{const t=e.split(/[\s,]+/).map((e=>parseFloat(e)));return Array.from(Array(Math.floor(t.length/2))).map(((e,r)=>[t[2*r+0],t[2*r+1]]))})(e.getAttribute("points")||"").map(((e,t,r)=>[r[t][0],r[t][1],r[(t+1)%r.length][0],r[(t+1)%r.length][1]])),Tr={L:!0,V:!0,H:!0,Z:!0},Br={line:e=>[getAttributesFloatValue(e,["x1","y1","x2","y2"])],rect:function(e){const[t,r,n,o]=getAttributesFloatValue(e,["x","y","width","height"]);return[[t,r,t+n,r],[t+n,r,t+n,r+o],[t+n,r+o,t,r+o],[t,r+o,t,r]]},polygon:PolygonToSegments,polyline:function(e){const t=PolygonToSegments(e);return t.pop(),t},path:e=>V.svg.core.parsePathCommandsEndpoints(e.getAttribute("d")||"").filter((e=>Tr[e.command.toUpperCase()])).map((e=>[e.start,e.end])).filter((e=>!Je.fnEpsilonEqualVectors(...e))).map((e=>e.flat()))};var qr={black:"#000000",silver:"#c0c0c0",gray:"#808080",white:"#ffffff",maroon:"#800000",red:"#ff0000",purple:"#800080",fuchsia:"#ff00ff",green:"#008000",lime:"#00ff00",olive:"#808000",yellow:"#ffff00",navy:"#000080",blue:"#0000ff",teal:"#008080",aqua:"#00ffff",orange:"#ffa500",aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",blanchedalmond:"#ffebcd",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",oldlace:"#fdf5e6",olivedrab:"#6b8e23",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",whitesmoke:"#f5f5f5",yellowgreen:"#9acd32"};const hexToRGB=e=>{const t=e.replace(/#(?=\S)/g,""),r=Array.from(Array(6)).map(((e,r)=>t[r]||"0")),n=t.length<=4?[0,0,1,1,2,2].map((e=>r[e])).join(""):r.join(""),o=parseInt(n,16);return[o>>16&255,o>>8&255,255&o].map((e=>e/255))},parseCSSColor=e=>{if(qr[e])return hexToRGB(qr[e]);if("#"===e[0])return hexToRGB(e);if("rgba"===e.substring(0,4)||"rgb"===e.substring(0,3)){const t=(e=>{const t=e.match(/\(([^\)]+)\)/g);if(null!=t&&t.length)return t[0].substring(1,t[0].length-1).split(/[\s,]+/).map(parseFloat)})(e);return[0,1,2].forEach(((e,r)=>{t[r]/=255})),t}return[0,0,0]},Rr={M:[1,0,0],V:[0,0,1],F:[1,1,0],U:[1,0,1],C:[0,1,0]},parseCSSStyleSheet=e=>{if(!e.cssRules)return{};const t={};for(let r=0;r<e.cssRules.length;r+=1){const n=e.cssRules[r];if(1!==n.type)continue;const o=n.selectorText.split(/,/gm).filter(Boolean).map((e=>e.trim())),s={};Object.values(n.style).forEach((e=>{s[e]=n.style[e]})),o.forEach((e=>{t[e]=s}))}return t},parseStyleElement=e=>{if(e.sheet)return parseCSSStyleSheet(e.sheet);if(!((e=>{let t=e;for(;null!=t.parentNode;)t=t.parentNode;return t})(e).constructor===RabbitEarWindow().HTMLDocument)){const t=e.parentNode;null!=t&&t.removeChild(e);const r=null!=RabbitEarWindow().document.body?RabbitEarWindow().document.body:RabbitEarWindow().document.createElement("body");r.appendChild(e);const n=parseCSSStyleSheet(e.sheet);return r.removeChild(e),null!=t&&t.appendChild(e),n}return{}},objectifyAttributeList=function(e){const t={};return e.forEach((e=>{t[e.nodeName]=e.value})),t},svgToBasicGraph=e=>{const t="string"==typeof e?((e,t="text/xml")=>(new(RabbitEarWindow().DOMParser)).parseFromString(e,t).documentElement)(e,"image/svg+xml"):e,r=flattenDomTree(t),n=r.filter((e=>"style"===e.nodeName)).map(parseStyleElement),o=(e=>e.filter((e=>Br[e.tagName])).flatMap((e=>Br[e.tagName](e).map((t=>{return{nodeName:e.tagName,segment:t,attributes:objectifyAttributeList((r=e,Array.from(r.attributes).filter((e=>!Ir[r.nodeName][e.nodeName]))))};var r})))))(r),s=o.map((e=>getAttributeValue("stroke",e.nodeName,e.attributes,n)||"black")).map((e=>(e=>{if(null==e||"string"!=typeof e)return"U";const t=parseCSSColor(e).slice(0,3),r=t.reduce(((e,t)=>e+t),0)/3,n=[r,r,r],o="F",s=Je.distance3(t,n),a=Object.keys(Rr).map((e=>({key:e,distance:Je.distance3(t,Rr[e])}))).sort(((e,t)=>e.distance-t.distance)).shift();return s<a.distance?o:a.key})(e))),a=o.map((e=>getAttributeValue("opacity",e.nodeName,e.attributes,n)||"1")).map(((e,t)=>((e,t)=>{switch(t){case"M":case"m":return-180*e;case"V":case"v":return 180*e;default:return 0}})(e,s[t])));return{vertices_coords:o.map((e=>e.segment)).flatMap((e=>[[e[0],e[1]],[e[2],e[3]]])),edges_vertices:o.map(((e,t)=>[2*t,2*t+1])),edges_assignment:s,edges_foldAngle:a}};var Ur={objToFold:e=>{const t=e.split("\n").map((e=>e.trim().split(/\s+/))),r=(()=>{const e={};return e.file_spec=Yt,e.file_creator=Ht,e.file_classes=["singleModel"],e.frame_classes=[],e.frame_attributes=[],e.vertices_coords=[],e.faces_vertices=[],e})();for(let e=0;e<t.length;e+=1)switch(t[e][0].toLowerCase()){case"f":r.faces_vertices.push(t[e].slice(1).map((e=>parseInt(e,10)-1)));break;case"v":r.vertices_coords.push(t[e].slice(1).map((e=>parseFloat(e))))}return r.faces_normal=makeFacesNormal(r),r.faces_center=makeFacesConvexCenter(r),r.edges_vertices=(({faces_vertices:e})=>{const t={},r=[];return e.flatMap(pairify).forEach((e=>{const n=[e.join(" "),`${e[1]} ${e[0]}`];n[0]in t||n[1]in t||(r.push(e),t[n[0]]=!0)})),r})(r),r.faces_edges=makeFacesEdgesFromVertices(r),r.edges_faces=makeEdgesFacesUnsorted(r),r.edges_foldAngle=makeEdgesFoldAngleFromFaces(r),r.edges_assignment=makeEdgesAssignment(r),r.vertices_vertices=makeVerticesVerticesFromFaces(r),delete r.faces_normal,delete r.faces_center,delete r.edges_faces,(e=>{if(!e.edges_foldAngle||!e.edges_foldAngle.length)return;let t=!0;for(let r=0;r<e.edges_foldAngle.length;r+=1)if(0!==e.edges_foldAngle[r]&&-180!==e.edges_foldAngle[r]&&180!==e.edges_foldAngle[r]){t=!1;break}e.frame_classes.push(t?"creasePattern":"foldedForm"),e.frame_attributes.push(t?"2D":"3D")})(r),r},opxToFold:(e,t)=>{try{const n=(new(RabbitEarWindow().DOMParser)).parseFromString(e,"text/xml"),o=Array.from(n.documentElement.children).filter((e=>Array.from(e.classList).includes("oripa.DataSet"))).shift(),s=((e,t)=>{const r={};if(r.vertices_coords=e.flatMap((e=>[[e[1],e[3]],[e[2],e[4]]])),r.edges_vertices=e.map(((e,t)=>[2*t,2*t+1])),r.edges_assignment=e.map((e=>Vr[e[0]])),r.edges_foldAngle=makeEdgesFoldAngle(r),void 0===t){const{span:e}=Je.boundingBox(r.vertices_coords);t=1e-6*Math.min(...e)}removeDuplicateVertices(r,t),r.vertices_vertices=makeVerticesVertices(r);const n=makePlanarFaces(r);return r.faces_vertices=n.map((e=>e.vertices)),r.faces_edges=n.map((e=>e.edges)),r})((r=(e=>{const t=getContainingValue(e,"lines"),r=t?Array.from(t.children).filter((e=>"oripa.OriLineProxy"===e.className)).shift():void 0;return r?Array.from(r.children):[]})(o),r.map((e=>{const t=Array.from(e.children[0].children);return["type","x0","x1","y0","y1"].map((e=>parseFloat((t.filter((t=>t.attributes[0].nodeValue===e)).shift()||$r).children[0].textContent)))}))),t);return setMetadata(o,s),s}catch(e){console.error(e)}var r},svgToFold:e=>{const t=(e=>{const t={...e};removeDuplicateVertices(t),fragment(t),t.vertices_vertices=makeVerticesVertices(t);const r=makePlanarFaces(t);t.faces_vertices=r.map((e=>e.vertices)),t.faces_edges=r.map((e=>e.edges));const{edges:n}=planarBoundary(t);return n.forEach((e=>{t.edges_assignment[e]="B"})),t})(svgToBasicGraph(e));return{file_spec:1.1,file_creator:"Rabbit Ear",frame_classes:["creasePattern"],...t}}};const addClassToClassList=(e,...t)=>{if(!e)return;const r={},n=e.getAttribute("class"),o=n?n.split(" "):[];o.push(...t),o.forEach((e=>{r[e]=!0}));const s=Object.keys(r).join(" ");e.setAttribute("class",s)},Dr={},Gr={stroke:y},Wr={},Zr={M:{stroke:"red"},m:{stroke:"red"},V:{stroke:"blue"},v:{stroke:"blue"},F:{stroke:"lightgray"},f:{stroke:"lightgray"}},edgesPathData=e=>(({vertices_coords:e,edges_vertices:t})=>e&&t?t.map((t=>t.map((t=>e[t])))):[])(e).map((e=>{return`M${(t=e)[0][0]} ${t[0][1]}L${t[1][0]} ${t[1][1]}`;var t})).join(""),edgesPathDataAssign=({vertices_coords:e,edges_vertices:t,edges_assignment:r})=>{if(!e||!t)return{};if(!r)return{u:edgesPathData({vertices_coords:e,edges_vertices:t})};const n=(e=>{const t={u:[],f:[],v:[],m:[],b:[]},r=e[u].map((e=>e.toLowerCase()));return e[l].map(((e,t)=>r[t]||"u")).forEach(((e,r)=>t[e].push(r))),t})({vertices_coords:e,edges_vertices:t,edges_assignment:r});return Object.keys(n).forEach((r=>{n[r]=edgesPathData({vertices_coords:e,edges_vertices:n[r].map((e=>t[e]))})})),Object.keys(n).forEach((e=>{""===n[e]&&delete n[e]})),n},applyEdgesStyle=(e,t={})=>Object.keys(t).forEach((r=>e.setAttributeNS(null,r,t[r]))),edgesPaths=(e,t={})=>{const r=V.svg.g();if(!e)return r;const n=isFoldedForm(e),o=(({vertices_coords:e,edges_vertices:t,edges_assignment:r})=>{const n=edgesPathDataAssign({vertices_coords:e,edges_vertices:t,edges_assignment:r});return Object.keys(n).forEach((e=>{const t=V.svg.path(n[e]);addClassToClassList(t,et[e]),n[e]=t})),n})(e);return Object.keys(o).forEach((e=>{addClassToClassList(o[e],et[e]),applyEdgesStyle(o[e],n?Wr[e]:Zr[e]),applyEdgesStyle(o[e],t[e]),applyEdgesStyle(o[e],t[et[e]]),r.appendChild(o[e]),Object.defineProperty(r,et[e],{get:()=>o[e]})})),applyEdgesStyle(r,n?Dr:Gr),applyEdgesStyle(r,t.stroke?{stroke:t.stroke}:{}),r},edgesLines=(e,t={})=>{const r=V.svg.g();if(!e)return r;const n=isFoldedForm(e),o=(e.edges_assignment?e.edges_assignment:makeEdgesAssignment(e)).map((e=>e.toLowerCase())),s={};["b","m","v","f","u"].forEach((e=>{const o=V.svg.g();r.appendChild(o),addClassToClassList(o,et[e]),applyEdgesStyle(o,n?Wr[e]:Zr[e]),applyEdgesStyle(o,t[et[e]]),Object.defineProperty(r,et[e],{get:()=>o}),s[e]=o}));const a=e.edges_vertices.map((t=>t.map((t=>e.vertices_coords[t])))).map((e=>V.svg.line(e[0][0],e[0][1],e[1][0],e[1][1])));return e.edges_foldAngle&&a.forEach(((t,r)=>{const n=e.edges_foldAngle[r];var o;0!==n&&180!==n&&-180!==n&&t.setAttributeNS(null,"opacity",(o=n,Math.abs(o)/180))})),a.forEach(((e,t)=>s[o[t]].appendChild(e))),applyEdgesStyle(r,n?Dr:Gr),applyEdgesStyle(r,t.stroke?{stroke:t.stroke}:{}),r},Jr={back:{fill:b},front:{fill:"#ddd"}},Yr={back:{opacity:.1},front:{opacity:.1}},Hr={},Xr={stroke:y,"stroke-linejoin":"bevel"},Kr={stroke:E,fill:y,"stroke-linejoin":"bevel"},Qr={fill:E},applyFacesStyle=(e,t={})=>Object.keys(t).forEach((r=>e.setAttributeNS(null,r,t[r]))),finalize_faces=(e,t,r,n)=>{const o=isFoldedForm(e),s=null!=e[p],a=[[h],[v]],i=makeFacesWinding(e);i.map((e=>e?a[0]:a[1])).forEach(((e,r)=>{addClassToClassList(t[r],e),applyFacesStyle(t[r],o?s?Jr[e]:Yr[e]:Hr[e]),applyFacesStyle(t[r],n[e])}));const c=s?function(e,t){const r=t.faces_vertices.length||t.faces_edges.length;return Array.from(Array(r)).map(((e,t)=>t)).filter((t=>null==e[t])).concat(invertMap(e))}(e[p],e).map((e=>t[e])):t;return c.forEach((e=>r.appendChild(e))),Object.defineProperty(r,h,{get:()=>t.filter(((e,t)=>i[t]))}),Object.defineProperty(r,v,{get:()=>t.filter(((e,t)=>!i[t]))}),applyFacesStyle(r,o?s?Xr:Kr:Qr),r},en={fill:E},tn={stroke:y,fill:b},rn={vertices:(e,t={})=>{const r=V.svg.g();return e&&e.vertices_coords?(e.vertices_coords.map((e=>V.svg.circle(e[0],e[1],.01))).forEach((e=>r.appendChild(e))),r.setAttributeNS(null,"fill",E),Object.keys(t).forEach((e=>r.setAttributeNS(null,e,t[e]))),r):r},edges:(e,t)=>edgesFoldAngleAreAllFlat(e)?edgesPaths(e,t):edgesLines(e,t),faces:(e,t)=>e&&e.faces_vertices?((e,t={})=>{const r=V.svg.g();if(!e||!e.vertices_coords||!e.faces_vertices)return r;const o=e.faces_vertices.map((t=>t.map((t=>[0,1].map((r=>e.vertices_coords[t][r])))))).map((e=>V.svg.polygon(e)));return o.forEach(((e,t)=>e.setAttributeNS(null,n,t))),r.setAttributeNS(null,"fill",b),finalize_faces(e,o,r,t)})(e,t):e&&e[d]?function(e,t={}){const r=V.svg.g();if(!e||d in e==0||l in e==0||c in e==0)return r;const o=e[d].map((t=>t.map((t=>e[l][t])).map(((e,t,r)=>{const n=r[(t+1)%r.length];return e[1]===n[0]||e[1]===n[1]?e[0]:e[1]})).map((t=>[0,1].map((r=>e[c][t][r])))))).map((e=>V.svg.polygon(e)));return o.forEach(((e,t)=>e.setAttributeNS(null,n,t))),r.setAttributeNS(null,"fill","white"),finalize_faces(e,o,r,t)}(e,t):V.svg.g(),boundaries:(e,t={})=>{const r=V.svg.g();if(!(e&&e.vertices_coords&&e.edges_vertices&&e.edges_assignment))return r;const n=boundary(e).vertices.map((t=>[0,1].map((r=>e.vertices_coords[t][r]))));if(0===n.length)return r;const o=V.svg.polygon(n);return addClassToClassList(o,g),r.appendChild(o),((e,t={})=>{Object.keys(t).forEach((r=>e.setAttributeNS(null,r,t[r])))})(r,isFoldedForm(e)?en:tn),Object.keys(t).forEach((e=>r.setAttributeNS(null,e,t[e]))),r}},drawGroup=(e,t,r)=>{const n=!1===r?V.svg.g():rn[e](t,r);return addClassToClassList(n,e),n},DrawGroups=(e,t={})=>[i,a,s,o].map((r=>drawGroup(r,e,t[r])));[i,a,s,o].forEach((e=>{DrawGroups[e]=function(t,r={}){return drawGroup(e,t,r[e])}}));const getBoundingRect=({vertices_coords:e})=>{if(null==e||0===e.length)return;const t=Array(2).fill(1/0),r=Array(2).fill(-1/0);e.forEach((e=>{e[0]<t[0]&&(t[0]=e[0]),e[0]>r[0]&&(r[0]=e[0]),e[1]<t[1]&&(t[1]=e[1]),e[1]>r[1]&&(r[1]=e[1])}));return Number.isNaN(t[0])||Number.isNaN(t[1])||Number.isNaN(r[0])||Number.isNaN(r[1])?void 0:[t[0],t[1],r[0]-t[0],r[1]-t[1]]},findSVGInParents=e=>"SVG"===(e.nodeName||"").toUpperCase()?e:e.parentNode?findSVGInParents(e.parentNode):void 0,applyTopLevelOptions=(e,t,r,n)=>{const o=t[3]&&t[3].childNodes.length;if(!(n.strokeWidth||n.viewBox||o))return;const s=getBoundingRect(r),a=s?Math.max(s[2],s[3]):1,i=findSVGInParents(e);if(i&&n.viewBox){const e=s?s.join(" "):"0 0 1 1";i.setAttributeNS(null,"viewBox",e)}if(i&&n.padding){const e=i.getAttribute("viewBox");if(null!=e){const t=n.padding*a,r=e.split(" ").map((e=>parseFloat(e))),o=[-t,-t,2*t,2*t].map(((e,t)=>r[t]+e)).join(" ");i.setAttributeNS(null,"viewBox",o)}}if(n.strokeWidth||n["stroke-width"]){const t=n.strokeWidth?n.strokeWidth:n["stroke-width"],o=(({vertices_coords:e,edges_vertices:t,edges_length:r})=>{if(!e||!t)return;r||(r=makeEdgesLength({vertices_coords:e,edges_vertices:t}));const n=r.slice().sort(((e,t)=>e-t));return n[Math.floor(.1*n.length)]})(r);let s;s=o?"number"==typeof t?10*o*t:10*o*.01:"number"==typeof t?a*t:.01*a,e.setAttributeNS(null,"stroke-width",s)}if(o){const e=n.vertices&&null!=n.vertices.radius?n.vertices.radius:n.radius,r="string"==typeof e?parseFloat(e):e,o="number"!=typeof r||Number.isNaN(r)?.02*a:a*r;((e,t)=>{for(let r=0;r<e.childNodes.length;r+=1)e.childNodes[r].setAttributeNS(null,"r",t)})(t[3],o)}},drawInto=(e,t,r={})=>{const n=DrawGroups(t,r);return n.filter((e=>e.childNodes.length>0)).forEach((t=>e.appendChild(t))),applyTopLevelOptions(e,n,t,r),((e,t)=>{const r=[t.file_classes||[],t.frame_classes||[]].flat();r.length&&addClassToClassList(e,...r)})(e,t),Object.keys(DrawGroups).map(((e,t)=>({key:e,i:t}))).filter((t=>null==e[t.key])).forEach((t=>Object.defineProperty(e,t.key,{get:()=>n[t.i]}))),e},FOLDtoSVG=(e,t)=>drawInto(V.svg(),e,t);Object.keys(DrawGroups).forEach((e=>{FOLDtoSVG[e]=DrawGroups[e]})),FOLDtoSVG.drawInto=drawInto,FOLDtoSVG.getViewBox=e=>{const t=getBoundingRect(e);return void 0===t?"":t.join(" ")},Object.defineProperty(FOLDtoSVG,"linker",{enumerable:!1,value:function(e){e.graph.svg=this;const t={svg:this};Object.keys(t).forEach((r=>{e.graph.prototype[r]=function(){return t[r](this,...arguments)}}))}.bind(FOLDtoSVG)});const nn={init:()=>{}};function SVG(){return nn.init(...arguments)}const on="class",sn="function",an="undefined",cn="number",ln="string",fn="object",dn="svg",un="path",mn="id",pn="style",gn="viewBox",hn="transform",vn="points",_n="stroke",yn="none",bn="arrow",En="head",xn="tail",kn=typeof window!==an&&typeof window.document!==an,An=typeof process!==an&&null!=process.versions&&null!=process.versions.node,On=[];On[10]='"error 010: window" not set. if using node/deno, include package @xmldom/xmldom, set to the main export ( ear.window = xmldom; )';const Mn={window:void 0};kn&&(Mn.window=window);const SVGWindow=()=>{if(void 0===Mn.window)throw On[10];return Mn.window};var wn="http://www.w3.org/2000/svg",jn={s:["svg"],d:["defs"],h:["desc","filter","metadata","style","script","title","view"],c:["cdata"],g:["g"],v:["circle","ellipse","line","path","polygon","polyline","rect"],t:["text"],i:["marker","symbol","clipPath","mask"],p:["linearGradient","radialGradient","pattern"],cT:["textPath","tspan"],cG:["stop"],cF:["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]};const svg_add2=(e,t)=>[e[0]+t[0],e[1]+t[1]],svg_sub2=(e,t)=>[e[0]-t[0],e[1]-t[1]],svg_scale2=(e,t)=>[e[0]*t,e[1]*t],svg_magnitudeSq2=e=>e[0]**2+e[1]**2,svg_magnitude2=e=>Math.sqrt(svg_magnitudeSq2(e)),svg_distanceSq2=(e,t)=>svg_magnitudeSq2(svg_sub2(e,t)),svg_distance2=(e,t)=>Math.sqrt(svg_distanceSq2(e,t)),svg_polar_to_cart=(e,t)=>[Math.cos(e)*t,Math.sin(e)*t];var Pn=Object.freeze({__proto__:null,svg_add2:svg_add2,svg_sub2:svg_sub2,svg_scale2:svg_scale2,svg_magnitudeSq2:svg_magnitudeSq2,svg_magnitude2:svg_magnitude2,svg_distanceSq2:svg_distanceSq2,svg_distance2:svg_distance2,svg_polar_to_cart:svg_polar_to_cart});const arcPath=(e,t,r,n,o,s=!1)=>{if(null==o)return"";const a=svg_polar_to_cart(n,r),i=svg_polar_to_cart(o,r),c=[i[0]-a[0],i[1]-a[1]],l=a[0]*i[1]-a[1]*i[0],d=a[0]*i[0]+a[1]*i[1],u=Math.atan2(l,d)>0?0:1;let m=s?`M ${e},${t} l ${a[0]},${a[1]} `:`M ${e+a[0]},${t+a[1]} `;return m+=["a ",r,r,0,u,1,c[0],c[1]].join(" "),s&&(m+=" Z"),m},arcArguments=(e,t,r,n,o)=>[arcPath(e,t,r,n,o,!1)];var Sn={arc:{nodeName:un,attributes:["d"],args:arcArguments,methods:{setArc:(e,...t)=>e.setAttribute("d",arcArguments(...t))}}};const wedgeArguments=(e,t,r,n,o)=>[arcPath(e,t,r,n,o,!0)];var Cn={wedge:{nodeName:un,args:wedgeArguments,attributes:["d"],methods:{setArc:(e,...t)=>e.setAttribute("d",wedgeArguments(...t))}}};const parabolaArguments=(e=-1,t=0,r=2,n=1)=>Array.from(Array(129)).map(((e,t)=>(t-128)/128*2+1)).map((o=>[e+(o+1)*r*.5,t+o**2*n]));var zn={parabola:{nodeName:"polyline",attributes:[vn],args:(e,t,r,n)=>[parabolaArguments(e,t,r,n).map((e=>`${e[0]},${e[1]}`)).join(" ")]}};const regularPolygonArguments=(e,t,r,n)=>{const o=[t,r];return Array.from(Array(e)).map(((t,r)=>2*Math.PI*(r/e))).map((e=>[Math.cos(e),Math.sin(e)])).map((e=>o.map(((t,r)=>t+n*e[r]))))};var Fn={regularPolygon:{nodeName:"polygon",attributes:[vn],args:(e,t=0,r=0,n=1)=>[regularPolygonArguments(e,t,r,n).map((e=>`${e[0]},${e[1]}`)).join(" ")]}};var Ln={roundRect:{nodeName:un,attributes:["d"],args:(e,t,r,n,o=0)=>{o>r/2&&(o=r/2),o>n/2&&(o=n/2);const s=r-2*o,a=n-2*o,i=`A${o} ${o} 0 0 1`;return[[`M${e+(r-s)/2},${t}`,`h${s}`,i,`${e+r},${t+(n-a)/2}`,`v${a}`,i,`${e+r-o},${t+n}`,"h"+-s,i,`${e},${t+n-o}`,"v"+-a,i,`${e+o},${t}`].join(" ")]}}},Nn={toCamel:e=>e.replace(/([-_][a-z])/gi,(e=>e.toUpperCase().replace("-","").replace("_",""))),toKebab:e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z])([A-Z])(?=[a-z])/g,"$1-$2").toLowerCase(),capitalized:e=>e.charAt(0).toUpperCase()+e.slice(1)};const svg_is_iterable=e=>null!=e&&typeof e[Symbol.iterator]===sn,svg_semi_flatten_arrays=function(){switch(arguments.length){case void 0:case 0:return Array.from(arguments);case 1:return svg_is_iterable(arguments[0])&&typeof arguments[0]!==ln?svg_semi_flatten_arrays(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>svg_is_iterable(e)?[...svg_semi_flatten_arrays(e)]:e))}};var coordinates=(...e)=>e.filter((e=>typeof e===cn)).concat(e.filter((e=>typeof e===fn&&null!==e)).map((e=>typeof e.x===cn?[e.x,e.y]:typeof e[0]===cn?[e[0],e[1]]:void 0)).filter((e=>void 0!==e)).reduce(((e,t)=>e.concat(t)),[]));const $n=[xn,En],stringifyPoint=e=>e.join(","),pointsToPath=e=>"M"+e.map((e=>e.join(","))).join("L")+"Z",setArrowheadOptions=(e,t,r)=>{"boolean"==typeof t?e.options[r].visible=t:typeof t===fn?(Object.assign(e.options[r],t),null==t.visible&&(e.options[r].visible=!0)):null==t&&(e.options[r].visible=!0)},setArrowStyle=(e,t={},r=En)=>{const n=e.getElementsByClassName(`${bn}-${r}`)[0];Object.keys(t).map((e=>({key:e,fn:n[Nn.toCamel(e)]}))).filter((e=>typeof e.fn===sn&&"class"!==e.key)).forEach((e=>e.fn(t[e.key]))),Object.keys(t).filter((e=>"class"===e)).forEach((e=>n.classList.add(t[e])))},redraw=e=>{const t=function(e){let t=[[0,1],[2,3]].map((t=>t.map((t=>e.points[t]||0)))),r=svg_sub2(t[1],t[0]),n=svg_add2(t[0],svg_scale2(r,.5));const o=svg_magnitude2(r),s=$n.map((t=>e[t].visible?(1+e[t].padding)*e[t].height*2.5:0)).reduce(((e,t)=>e+t),0);if(o<s){const e=0===o?[s,0]:svg_scale2(r,s/o);t=[svg_sub2,svg_add2].map((t=>t(n,svg_scale2(e,.5)))),r=svg_sub2(t[1],t[0])}let a=[r[1],-r[0]],i=svg_add2(n,svg_scale2(a,e.bend));const c=t.map((e=>svg_sub2(i,e))),l=c.map((e=>svg_magnitude2(e))),d=c.map(((e,t)=>0===l[t]?e:svg_scale2(e,1/l[t]))),u=d.map((e=>svg_scale2(e,-1))),m=u.map((e=>[e[1],-e[0]])),p=$n.map(((t,r)=>e[t].padding?e[t].padding:e.padding?e.padding:0)),g=$n.map(((t,r)=>e[t].height*(e[t].visible?1:0))).map(((e,t)=>e+p[t])),h=t.map(((e,t)=>svg_add2(e,svg_scale2(d[t],g[t]))));r=svg_sub2(h[1],h[0]),a=[r[1],-r[0]],n=svg_add2(h[0],svg_scale2(r,.5)),i=svg_add2(n,svg_scale2(a,e.bend));const v=h.map(((t,r)=>svg_add2(t,svg_scale2(svg_sub2(i,t),e.pinch)))),_=$n.map(((t,r)=>[svg_add2(h[r],svg_scale2(u[r],e[t].height)),svg_add2(h[r],svg_scale2(m[r],e[t].width/2)),svg_add2(h[r],svg_scale2(m[r],-e[t].width/2))]));return{line:`M${stringifyPoint(h[0])}C${stringifyPoint(v[0])},${stringifyPoint(v[1])},${stringifyPoint(h[1])}`,tail:pointsToPath(_[0]),head:pointsToPath(_[1])}}(e.options);return Object.keys(t).map((t=>({path:t,element:e.getElementsByClassName(`${bn}-${t}`)[0]}))).filter((e=>e.element)).map((e=>(e.element.setAttribute("d",t[e.path]),e))).filter((t=>e.options[t.path])).forEach((t=>t.element.setAttribute("visibility",e.options[t.path].visible?"visible":"hidden"))),e},setPoints$3=(e,...t)=>(e.options.points=coordinates(...svg_semi_flatten_arrays(...t)).slice(0,4),redraw(e));var Vn={setPoints:setPoints$3,points:setPoints$3,bend:(e,t)=>(e.options.bend=t,redraw(e)),pinch:(e,t)=>(e.options.pinch=t,redraw(e)),padding:(e,t)=>(e.options.padding=t,redraw(e)),head:(e,t)=>(setArrowheadOptions(e,t,En),setArrowStyle(e,t,En),redraw(e)),tail:(e,t)=>(setArrowheadOptions(e,t,xn),setArrowStyle(e,t,xn),redraw(e)),getLine:e=>e.getElementsByClassName(`${bn}-line`)[0],getHead:e=>e.getElementsByClassName(`${bn}-${En}`)[0],getTail:e=>e.getElementsByClassName(`${bn}-${xn}`)[0]};const In=Object.keys({head:{visible:!1,width:8,height:10,padding:0},tail:{visible:!1,width:8,height:10,padding:0},bend:0,padding:0,pinch:.618,points:[]});var Tn={arrow:{nodeName:"g",attributes:[],args:()=>[],methods:Vn,init:function(e,...t){e.classList.add(bn);const r=["line",xn,En].map((t=>SVG.path().addClass(`${bn}-${t}`).appendTo(e)));r[0].setAttribute(pn,"fill:none;"),r[1].setAttribute(_n,yn),r[2].setAttribute(_n,yn),e.options={head:{visible:!1,width:8,height:10,padding:0},tail:{visible:!1,width:8,height:10,padding:0},bend:0,padding:0,pinch:.618,points:[]},Vn.setPoints(e,...t);const n=((...e)=>{for(let t=0;t<e.length;t+=1){if(typeof e[t]!==fn)continue;const r=Object.keys(e[t]);for(let n=0;n<r.length;n+=1)if(In.includes(r[n]))return e[t]}})(...t);return n&&Object.keys(n).filter((e=>Vn[e])).forEach((t=>Vn[t](e,n[t]))),e}}};const svg_flatten_arrays=function(){return svg_semi_flatten_arrays(arguments).reduce(((e,t)=>e.concat(t)),[])},makeCurvePath=(e=[],t=0,r=.5)=>{const n=[e[0]||0,e[1]||0],o=[e[2]||0,e[3]||0],s=svg_sub2(o,n),a=svg_add2(n,svg_scale2(s,.5)),i=[s[1],-s[0]],c=svg_add2(a,svg_scale2(i,t)),l=svg_add2(n,svg_scale2(svg_sub2(c,n),r)),d=svg_add2(o,svg_scale2(svg_sub2(c,o),r));return`M${n[0]},${n[1]}C${l[0]},${l[1]} ${d[0]},${d[1]} ${o[0]},${o[1]}`},getNumbersFromPathCommand=e=>e.slice(1).split(/[, ]+/).map((e=>parseFloat(e))),getCurveEndpoints=e=>{const t=(e=>e.match(/[Mm][(0-9), .-]+/).map((e=>getNumbersFromPathCommand(e))))(e).shift(),r=(e=>e.match(/[Cc][(0-9), .-]+/).map((e=>getNumbersFromPathCommand(e))))(e).shift();return[...t?[t[t.length-2],t[t.length-1]]:[0,0],...r?[r[r.length-2],r[r.length-1]]:[0,0]]},setPoints$2=(e,...t)=>{const r=coordinates(...svg_flatten_arrays(...t)).slice(0,4);return e.setAttribute("d",makeCurvePath(r,e._bend,e._pinch)),e};var Bn={curve:{nodeName:un,attributes:["d"],args:(...e)=>[makeCurvePath(coordinates(...svg_flatten_arrays(...e)))],methods:{setPoints:setPoints$2,bend:(e,t)=>(e._bend=t,setPoints$2(e,...getCurveEndpoints(e.getAttribute("d")))),pinch:(e,t)=>(e._pinch=t,setPoints$2(e,...getCurveEndpoints(e.getAttribute("d"))))}}};const qn={};Object.assign(qn,Sn,Cn,zn,Fn,Ln,Tn,Bn);const Rn=Object.keys(qn),Un=[jn.h,jn.p,jn.i],Dn=[jn.g,jn.v,jn.t,Rn],Gn={svg:[jn.s,jn.d].concat(Un).concat(Dn),g:Dn,text:[jn.cT],linearGradient:[jn.cG],radialGradient:[jn.cG],defs:Un,filter:[jn.cF],marker:Dn,symbol:Dn,clipPath:Dn,mask:Dn},Wn=Object.create(null);Object.keys(Gn).forEach((e=>{Wn[e]=Gn[e].reduce(((e,t)=>e.concat(t)),[])}));const viewBoxValue=function(e,t,r,n,o=0){const s=r/1-r;return[e-s-o,t-s-o,r+2*s+2*o,n+2*s+2*o].join(" ")};function viewBox$1(){const e=coordinates(...svg_flatten_arrays(arguments));return 2===e.length&&e.unshift(0,0),4===e.length?viewBoxValue(...e):void 0}const cdata=e=>(new(SVGWindow().DOMParser)).parseFromString("<root></root>","text/xml").createCDATASection(`${e}`),removeChildren=e=>{for(;e.lastChild;)e.removeChild(e.lastChild);return e},moveChildren=(e,t)=>{for(;t.childNodes.length>0;){const r=t.childNodes[0];t.removeChild(r),e.appendChild(r)}return e},assignSVG=(e,t)=>(Array.from(t.attributes).forEach((t=>e.setAttribute(t.name,t.value))),moveChildren(e,t));var Zn={removeChildren:removeChildren,appendTo:(e,t)=>(null!=t&&t.appendChild(e),e),setAttributes:(e,t)=>Object.keys(t).forEach((r=>e.setAttribute(Nn.toKebab(r),t[r])))};const filterWhitespaceNodes=e=>{if(null===e)return e;for(let t=e.childNodes.length-1;t>=0;t-=1){const r=e.childNodes[t];3===r.nodeType&&r.data.match(/^\s*$/)&&e.removeChild(r),1===r.nodeType&&filterWhitespaceNodes(r)}return e},parse=e=>(new(SVGWindow().DOMParser)).parseFromString(e,"text/xml"),checkParseError=e=>{const t=e.getElementsByTagName("parsererror");if(t.length>0)throw new Error(t[0]);return filterWhitespaceNodes(e.documentElement)},sync=function(e){if(typeof e===ln||e instanceof String)try{return checkParseError(parse(e))}catch(e){return e}if(null!=e.childNodes)return e},Load=e=>(e=>typeof e===ln&&/^[\w,\s-]+\.[A-Za-z]{3}$/.test(e)&&e.length<1e4)(e)&&kn&&typeof SVGWindow().fetch===sn?function(e){return new Promise(((t,r)=>{if(typeof e===ln||e instanceof String)fetch(e).then((e=>e.text())).then((e=>checkParseError(parse(e)))).then((e=>e.nodeName===dn?e:e.getElementsByTagName(dn)[0])).then((e=>null==e?r(new Error("valid XML found, but no SVG element")):t(e))).catch((e=>r(e)));else if(e instanceof SVGWindow().Document)return asyncDone(e)}))}(e):sync(e);const save=function(e,t){if((t=Object.assign({download:!1,output:ln,windowStyle:!1,filename:"image.svg"},t)).windowStyle){const t=SVGWindow().document.createElementNS(wn,pn);t.setAttribute("type","text/css"),t.innerHTML=function(){const e=[];if(SVGWindow().document.styleSheets)for(let t=0;t<SVGWindow().document.styleSheets.length;t+=1){const r=SVGWindow().document.styleSheets[t];try{const t="cssRules"in r?r.cssRules:r.rules;for(let r=0;r<t.length;r+=1){const n=t[r];"cssText"in n?e.push(n.cssText):e.push(`${n.selectorText} {\n${n.style.cssText}\n}\n`)}}catch(e){console.warn(e)}}return e.join("\n")}(),e.appendChild(t)}const r=function vkXML(e,t){const r=e.replace(/>\s{0,}</g,"><").replace(/</g,"~::~<").replace(/\s*xmlns\:/g,"~::~xmlns:").split("~::~"),n=r.length;let o=!1,s=0,a="";const i=null!=t&&"string"==typeof t?t:"\t",c=["\n"];for(let e=0;e<100;e+=1)c.push(c[e]+i);for(let e=0;e<n;e+=1)r[e].search(/<!/)>-1?(a+=c[s]+r[e],o=!0,(r[e].search(/-->/)>-1||r[e].search(/\]>/)>-1||r[e].search(/!DOCTYPE/)>-1)&&(o=!1)):r[e].search(/-->/)>-1||r[e].search(/\]>/)>-1?(a+=r[e],o=!1):/^<\w/.exec(r[e-1])&&/^<\/\w/.exec(r[e])&&/^<[\w:\-\.\,]+/.exec(r[e-1])==/^<\/[\w:\-\.\,]+/.exec(r[e])[0].replace("/","")?(a+=r[e],o||(s-=1)):r[e].search(/<\w/)>-1&&-1===r[e].search(/<\//)&&-1===r[e].search(/\/>/)?a=a+=o?r[e]:c[s++]+r[e]:r[e].search(/<\w/)>-1&&r[e].search(/<\//)>-1?a=a+=o?r[e]:c[s]+r[e]:r[e].search(/<\//)>-1?a=a+=o?r[e]:c[--s]+r[e]:r[e].search(/\/>/)>-1?a=a+=o?r[e]:c[s]+r[e]:r[e].search(/<\?/)>-1||r[e].search(/xmlns\:/)>-1||r[e].search(/xmlns\=/)>-1?a+=c[s]+r[e]:a+=r[e];return"\n"===a[0]?a.slice(1):a}((new(SVGWindow().XMLSerializer)).serializeToString(e));return t.download&&kn&&!An&&function(e,t){const r=new(SVGWindow().Blob)([t],{type:"text/plain"}),n=SVGWindow().document.createElement("a");n.setAttribute("href",SVGWindow().URL.createObjectURL(r)),n.setAttribute("download",e),SVGWindow().document.body.appendChild(n),n.click(),SVGWindow().document.body.removeChild(n)}(t.filename,r),t.output===dn?e:r},setViewBox=(e,...t)=>{const r=1===t.length&&typeof t[0]===ln?t[0]:viewBox$1(...t);return r&&e.setAttribute(gn,r),e},getViewBox=function(e){const t=e.getAttribute(gn);return null==t?void 0:t.split(" ").map((e=>parseFloat(e)))},convertToViewBox=function(e,t,r){const n=e.createSVGPoint();n.x=t,n.y=r;const o=n.matrixTransform(e.getScreenCTM().inverse());return[o.x,o.y]};var Jn=Object.freeze({__proto__:null,setViewBox:setViewBox,getViewBox:getViewBox,convertToViewBox:convertToViewBox});const loadSVG=(e,t)=>{const r=Load(t);if(null!=r)return typeof r.then===sn?r.then((t=>assignSVG(e,t))):assignSVG(e,r)},getFrame=function(e){const t=getViewBox(e);if(void 0!==t)return t;if(typeof e.getBoundingClientRect===sn){const t=e.getBoundingClientRect();return[t.x,t.y,t.width,t.height]}return[]},Yn="svg-background-rectangle",stylesheet=function(e,t){let r=function(e){const t=e.getElementsByTagName(pn);return 0===t.length?void 0:t[0]}(e);return null==r&&(r=this.Constructor(pn),e.insertBefore(r,e.firstChild)),r.textContent="",r.appendChild(cdata(t)),r};var Hn={clear:e=>(Array.from(e.attributes).filter((e=>"xmlns"!==e)).forEach((t=>e.removeAttribute(t.name))),removeChildren(e)),size:setViewBox,setViewBox:setViewBox,getViewBox:getViewBox,padding:function(e,t){const r=getViewBox(e);return void 0!==r&&setViewBox(e,...[-t,-t,2*t,2*t].map(((e,t)=>r[t]+e))),e},background:function(e,t){let r=Array.from(e.childNodes).filter((e=>e.getAttribute(on)===Yn)).shift();return null==r&&(r=this.Constructor("rect",null,...getFrame(e)),r.setAttribute(on,Yn),r.setAttribute(_n,yn),e.insertBefore(r,e.firstChild)),r.setAttribute("fill",t),e},getWidth:e=>getFrame(e)[2],getHeight:e=>getFrame(e)[3],stylesheet:function(e,t){return stylesheet.call(this,e,t)},load:loadSVG,save:save};const Xn={math:{vector:(...e)=>[...e]}},Kn={move:["mousemove","touchmove"],press:["mousedown","touchstart"],release:["mouseup","touchend"],leave:["mouseleave","touchcancel"]},Qn=Object.values(Kn).reduce(((e,t)=>e.concat(t)),[]),defineGetter=(e,t,r)=>Object.defineProperty(e,t,{get:()=>r,enumerable:!0,configurable:!0}),assignPress=(e,t)=>{["pressX","pressY"].filter((t=>!Object.prototype.hasOwnProperty.call(e,t))).forEach(((r,n)=>defineGetter(e,r,t[n]))),Object.prototype.hasOwnProperty.call(e,"press")||defineGetter(e,"press",Xn.math.vector(...t))},TouchEvents=function(e){let t=[];const r=[];Object.keys(Kn).forEach((e=>{Kn[e].forEach((e=>{r[e]=[]}))}));const n={press:(e,r)=>{t=r,assignPress(e,t)},release:()=>{},leave:()=>{},move:(e,r)=>{e.buttons>0&&void 0===t[0]?t=r:0===e.buttons&&void 0!==t[0]&&(t=[]),assignPress(e,t)}};Object.keys(Kn).forEach((t=>{const o=`on${Nn.capitalized(t)}`;Object.defineProperty(e,o,{set:o=>{null!=o?Kn[t].forEach((s=>{const handlerFunc=r=>{const s=null!=r.touches?r.touches[0]:r;if(void 0!==s){const o=convertToViewBox(e,s.clientX,s.clientY).map((e=>Number.isNaN(e)?void 0:e));["x","y"].filter((e=>!Object.prototype.hasOwnProperty.call(r,e))).forEach(((e,t)=>defineGetter(r,e,o[t]))),Object.prototype.hasOwnProperty.call(r,"position")||defineGetter(r,"position",Xn.math.vector(...o)),n[t](r,o)}o(r)};e.addEventListener&&(r[s].push(handlerFunc),e.addEventListener(s,handlerFunc))})):(t=>{Kn[t].forEach((t=>r[t].forEach((r=>e.removeEventListener(t,r)))))})(t)},enumerable:!0})})),Object.defineProperty(e,"off",{value:()=>((e,t)=>Qn.forEach((r=>{t[r].forEach((t=>e.removeEventListener(r,t))),t[r]=[]})))(e,r)})};var UUID=()=>Math.random().toString(36).replace(/[^a-z]+/g,"").concat("aaaaa").substr(0,5);const eo=[["cx","cy"],["x","y"]],controlPoint=function(e,t={}){const r=[0,0],n={selected:!1,svg:void 0,updatePosition:e=>e},updateSVG=()=>{n.svg&&(n.svg.parentNode||e.appendChild(n.svg),eo.filter((e=>null!=n.svg[e[0]])).forEach((e=>e.forEach(((e,t)=>{n.svg.setAttribute(e,r[t])})))))},o=new Proxy(r,{set:(e,t,r)=>(e[t]=r,updateSVG(),!0)}),setPosition=function(...e){coordinates(...svg_flatten_arrays(...e)).forEach(((e,t)=>{r[t]=e})),updateSVG(),typeof r.delegate===sn&&r.delegate.apply(r.pointsContainer,[o,r.pointsContainer])};return r.delegate=void 0,r.setPosition=setPosition,r.onMouseMove=e=>n.selected?setPosition(n.updatePosition(e)):void 0,r.onMouseUp=()=>{n.selected=!1},r.distance=e=>Math.sqrt(svg_distanceSq2(e,r)),["x","y"].forEach(((e,t)=>Object.defineProperty(r,e,{get:()=>r[t],set:e=>{r[t]=e}}))),[dn,"updatePosition","selected"].forEach((e=>Object.defineProperty(r,e,{get:()=>n[e],set:t=>{n[e]=t}}))),Object.defineProperty(r,"remove",{value:()=>{var e;(e=n.svg)&&e.parentNode&&e.parentNode.removeChild(e),r.delegate=void 0}}),o},controls=function(e,t,r){let n,o;const s=Array.from(Array(t)).map((()=>controlPoint(e,r))),protocol=e=>typeof o===sn?o.call(s,e,n,s):void 0;s.forEach((e=>{e.delegate=protocol,e.pointsContainer=s}));e.onPress=function(e){s.length>0&&(n=s.map(((t,r)=>({i:r,d:svg_distanceSq2(t,[e.x,e.y])}))).sort(((e,t)=>e.d-t.d)).shift().i,s[n].selected=!0)},e.onMove=function(e){s.forEach((t=>t.onMouseMove(e)))},e.onRelease=function(){s.forEach((e=>e.onMouseUp())),n=void 0},Object.defineProperty(s,"selectedIndex",{get:()=>n}),Object.defineProperty(s,"selected",{get:()=>s[n]}),Object.defineProperty(s,"add",{value:t=>{s.push(controlPoint(e,t))}}),s.removeAll=()=>{for(;s.length>0;)s.pop().remove()};const a={onChange:(e,t)=>{if(o=e,!0===t){const t=s.length-1;e.call(s,s[t],t,s)}},position:e=>s.forEach(((t,r)=>t.setPosition(e.call(s,t,r,s)))),svg:e=>s.forEach(((t,r)=>{t.svg=e.call(s,t,r,s)}))};return Object.keys(a).forEach((e=>{s[e]=function(){return typeof arguments[0]===sn&&a[e](...arguments),s}})),s.parent=function(e){return null!=e&&null!=e.appendChild&&s.forEach((t=>{e.appendChild(t.svg)})),s},s},applyControlsToSVG=e=>{e.controls=(...t)=>controls.call(e,e,...t)};var to={svg:{args:(...e)=>[viewBox$1(coordinates(...e))].filter((e=>null!=e)),methods:Hn,init:(e,...t)=>{t.filter((e=>typeof e===ln)).forEach((t=>loadSVG(e,t))),t.filter((e=>null!=e)).filter((e=>typeof e.appendChild===sn)).forEach((t=>t.appendChild(e))),TouchEvents(e),function(e){let t;const r={};let n,o=0;const removeHandlers=()=>{SVGWindow().cancelAnimationFrame&&SVGWindow().cancelAnimationFrame(n),Object.keys(r).forEach((e=>delete r[e])),t=void 0,o=0};Object.defineProperty(e,"play",{set:e=>{if(removeHandlers(),null==e)return;const s=UUID();r[s]=a=>{t||(t=a,o=0),e({time:.001*(a-t),frame:o}),o+=1,r[s]&&(n=SVGWindow().requestAnimationFrame(r[s]))},SVGWindow().requestAnimationFrame&&(n=SVGWindow().requestAnimationFrame(r[s]))},enumerable:!0}),Object.defineProperty(e,"stop",{value:removeHandlers,enumerable:!0})}(e),applyControlsToSVG(e)}}};const loadGroup=(e,...t)=>{const r=t.map((e=>sync(e))).filter((e=>void 0!==e));return r.filter((e=>e.tagName===dn)).forEach((t=>moveChildren(e,t))),r.filter((e=>e.tagName!==dn)).forEach((t=>e.appendChild(t))),e};var ro={g:{init:loadGroup,methods:{load:loadGroup}}},no=Object.assign(Object.create(null),{svg:[gn],line:["x1","y1","x2","y2"],rect:["x","y","width","height"],circle:["cx","cy","r"],ellipse:["cx","cy","rx","ry"],polygon:[vn],polyline:[vn],path:["d"],text:["x","y"],mask:[mn],symbol:[mn],clipPath:[mn,"clip-rule"],marker:[mn,"markerHeight","markerUnits","markerWidth","orient","refX","refY"],linearGradient:["x1","x2","y1","y2"],radialGradient:["cx","cy","r","fr","fx","fy"],stop:["offset","stop-color","stop-opacity"],pattern:["patternContentUnits","patternTransform","patternUnits"]});const setRadius=(e,t)=>(e.setAttribute(no.circle[2],t),e),setOrigin=(e,t,r)=>([...coordinates(...svg_flatten_arrays(t,r)).slice(0,2)].forEach(((t,r)=>e.setAttribute(no.circle[r],t))),e);var oo={circle:{args:(e,t,r,n)=>{const o=coordinates(...svg_flatten_arrays(e,t,r,n));switch(o.length){case 0:case 1:return[,,...o];case 2:case 3:return o;default:return((e,t,r,n)=>[e,t,svg_distance2([e,t],[r,n])])(...o)}},methods:{radius:setRadius,setRadius:setRadius,origin:setOrigin,setOrigin:setOrigin,center:setOrigin,setCenter:setOrigin,position:setOrigin,setPosition:setOrigin}}};const setRadii=(e,t,r)=>([,,t,r].forEach(((t,r)=>e.setAttribute(no.ellipse[r],t))),e),setCenter=(e,t,r)=>([...coordinates(...svg_flatten_arrays(t,r)).slice(0,2)].forEach(((t,r)=>e.setAttribute(no.ellipse[r],t))),e);var so={ellipse:{args:(e,t,r,n)=>{const o=coordinates(...svg_flatten_arrays(e,t,r,n)).slice(0,4);switch(o.length){case 0:case 1:case 2:return[,,...o];default:return o}},methods:{radius:setRadii,setRadius:setRadii,origin:setCenter,setOrigin:setCenter,center:setCenter,setCenter:setCenter,position:setCenter,setPosition:setCenter}}};const Args$1=(...e)=>coordinates(...svg_semi_flatten_arrays(...e)).slice(0,4);var ao={line:{args:Args$1,methods:{setPoints:(e,...t)=>(Args$1(...t).forEach(((t,r)=>e.setAttribute(no.line[r],t))),e)}}};const io={m:"move",l:"line",v:"vertical",h:"horizontal",a:"ellipse",c:"curve",s:"smoothCurve",q:"quadCurve",t:"smoothQuadCurve",z:"close"},add2path=(e,t)=>[e[0]+(t[0]||0),e[1]+(t[1]||0)];Object.keys(io).forEach((e=>{const t=io[e];io[e.toUpperCase()]=t.charAt(0).toUpperCase()+t.slice(1)}));const co=/[MmLlSsQqLlHhVvCcSsQqTtAaZz]/g,lo=/-?[0-9]*\.?\d+/g,parsePathCommands=e=>{const t=[];let r;for(;null!==(r=co.exec(e));)t.push(r);return t.map(((t,r,n)=>[t[0],t.index,r===n.length-1?e.length-1:n[(r+1)%n.length].index-1])).map((t=>{const r=t[0],n=e.substring(t[1]+1,t[2]).match(lo);return{command:r,values:n?n.map(parseFloat):[]}}))};var fo=Object.freeze({__proto__:null,pathCommandNames:io,parsePathCommands:parsePathCommands,parsePathCommandsEndpoints:e=>{let t=[0,0];const r=parsePathCommands(e);if(!r.length)return r;r.forEach(((e,n)=>{r[n].end=((e,t,r=[0,0])=>{const n=e.toUpperCase(),o=e===n?[0,0]:r;switch(n){case"M":case"L":case"V":case"H":case"T":return add2path(o,t);case"A":return add2path(o,[t[5],t[6]]);case"C":return add2path(o,[t[4],t[5]]);case"S":case"Q":return add2path(o,[t[2],t[3]]);case"Z":return;default:return o}})(e.command,e.values,t),r[n].start=0===n?t:r[n-1].end,t=r[n].end}));const n=r[r.length-1],o=r.filter((e=>"M"!==e.command.toUpperCase()&&"Z"!==e.command.toUpperCase())).shift();return"Z"===n.command.toUpperCase()&&(n.end=[...o.start]),r}});const getD=e=>{const t=e.getAttribute("d");return null==t?"":t},appendPathCommand=(e,t,...r)=>(e.setAttribute("d",`${getD(e)}${t}${svg_flatten_arrays(...r).join(" ")}`),e),getCommands=e=>parsePathCommands(getD(e)),uo={addCommand:appendPathCommand,appendCommand:appendPathCommand,clear:e=>(e.removeAttribute("d"),e),getCommands:getCommands,get:getCommands,getD:e=>e.getAttribute("d")};Object.keys(io).forEach((e=>{uo[io[e]]=(t,...r)=>appendPathCommand(t,e,...r)}));var mo={path:{methods:uo}};const setRectSize=(e,t,r)=>([,,t,r].forEach(((t,r)=>e.setAttribute(no.rect[r],t))),e),setRectOrigin=(e,t,r)=>([...coordinates(...svg_flatten_arrays(t,r)).slice(0,2)].forEach(((t,r)=>e.setAttribute(no.rect[r],t))),e),fixNegatives=function(e){return[0,1].forEach((t=>{e[2+t]<0&&(void 0===e[0+t]&&(e[0+t]=0),e[0+t]+=e[2+t],e[2+t]=-e[2+t])})),e};var po={rect:{args:(e,t,r,n)=>{const o=coordinates(...svg_flatten_arrays(e,t,r,n)).slice(0,4);switch(o.length){case 0:case 1:case 2:case 3:return fixNegatives([,,...o]);default:return fixNegatives(o)}},methods:{origin:setRectOrigin,setOrigin:setRectOrigin,center:setRectOrigin,setCenter:setRectOrigin,size:setRectSize,setSize:setRectSize}}},go={style:{init:(e,t)=>{e.textContent="",e.appendChild(cdata(t))},methods:{setTextContent:(e,t)=>(e.textContent="",e.appendChild(cdata(t)),e)}}},ho={text:{args:(e,t,r)=>coordinates(...svg_flatten_arrays(e,t,r)).slice(0,2),init:(e,t,r,n,o)=>{const s=[t,r,n,o].filter((e=>typeof e===ln)).shift();s&&e.appendChild(SVGWindow().document.createTextNode(s))}}};const makeIDString=function(){return Array.from(arguments).filter((e=>typeof e===ln||e instanceof String)).shift()||UUID()},maskArgs=(...e)=>[makeIDString(...e)];var vo={mask:{args:maskArgs},clipPath:{args:maskArgs},symbol:{args:maskArgs},marker:{args:maskArgs,methods:{size:setViewBox,setViewBox:setViewBox}}};const getPoints=e=>{const t=e.getAttribute(vn);return null==t?"":t},polyString=function(){return Array.from(Array(Math.floor(arguments.length/2))).map(((e,t)=>`${arguments[2*t+0]},${arguments[2*t+1]}`)).join(" ")},stringifyArgs=(...e)=>[polyString(...coordinates(...svg_semi_flatten_arrays(...e)))],setPoints=(e,...t)=>(e.setAttribute(vn,stringifyArgs(...t)[0]),e),addPoint=(e,...t)=>(e.setAttribute(vn,[getPoints(e),stringifyArgs(...t)[0]].filter((e=>""!==e)).join(" ")),e),Args=function(...e){return 1===e.length&&typeof e[0]===ln?[e[0]]:stringifyArgs(...e)};var _o={polyline:{args:Args,methods:{setPoints:setPoints,addPoint:addPoint}},polygon:{args:Args,methods:{setPoints:setPoints,addPoint:addPoint}}},yo=Object.assign({},to,ro,oo,so,ao,mo,po,go,ho,vo,_o),bo={presentation:["color","color-interpolation","cursor","direction","display","fill","fill-opacity","fill-rule","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","image-rendering","letter-spacing","opacity","overflow","paint-order","pointer-events","preserveAspectRatio","shape-rendering","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","tabindex","transform-origin","user-select","vector-effect","visibility"],animation:["accumulate","additive","attributeName","begin","by","calcMode","dur","end","from","keyPoints","keySplines","keyTimes","max","min","repeatCount","repeatDur","restart","to","values"],effects:["azimuth","baseFrequency","bias","color-interpolation-filters","diffuseConstant","divisor","edgeMode","elevation","exponent","filter","filterRes","filterUnits","flood-color","flood-opacity","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","lighting-color","limitingConeAngle","mode","numOctaves","operator","order","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","primitiveUnits","radius","result","seed","specularConstant","specularExponent","stdDeviation","stitchTiles","surfaceScale","targetX","targetY","type","xChannelSelector","yChannelSelector"],text:["dx","dy","alignment-baseline","baseline-shift","dominant-baseline","lengthAdjust","method","overline-position","overline-thickness","rotate","spacing","startOffset","strikethrough-position","strikethrough-thickness","text-anchor","text-decoration","text-rendering","textLength","underline-position","underline-thickness","word-spacing","writing-mode"],gradient:["gradientTransform","gradientUnits","spreadMethod"]};Object.values(jn).reduce(((e,t)=>e.concat(t)),[]).filter((e=>void 0===no[e])).forEach((e=>{no[e]=[]})),[[[dn,"defs","g"].concat(jn.v,jn.t),bo.presentation],[["filter"],bo.effects],[jn.cT.concat("text"),bo.text],[jn.cF,bo.effects],[jn.cG,bo.gradient]].forEach((e=>e[0].forEach((t=>{no[t]=no[t].concat(e[1])}))));const getClassList=e=>{if(null==e)return[];const t=e.getAttribute(on);return null==t?[]:t.split(" ").filter((e=>""!==e))};var Eo={addClass:(e,t)=>{const r=getClassList(e).filter((e=>e!==t));r.push(t),e.setAttributeNS(null,on,r.join(" "))},removeClass:(e,t)=>{const r=getClassList(e).filter((e=>e!==t));e.setAttributeNS(null,on,r.join(" "))},setClass:(e,t)=>{e.setAttributeNS(null,on,t)},setId:(e,t)=>{e.setAttributeNS(null,mn,t)}};const getAttr=e=>{const t=e.getAttribute(hn);return null==t||""===t?void 0:t},xo={clearTransform:e=>(e.removeAttribute(hn),e)};["translate","rotate","scale","matrix"].forEach((e=>{xo[e]=(t,...r)=>t.setAttribute(hn,[getAttr(t),`${e}(${r.join(" ")})`].filter((e=>void 0!==e)).join(" "))}));const ko={};["clip-path","mask","symbol","marker-end","marker-mid","marker-start"].forEach((e=>{ko[Nn.toCamel(e)]=(t,r)=>t.setAttribute(e,function(e){if(null==e)return"";if(typeof e===ln)return"url"===e.slice(0,3)?e:`url(#${e})`;if(null!=e.getAttribute)return`url(#${e.getAttribute(mn)})`;return""}(r))}));const Ao={};jn.v.push(...Object.keys(qn)),Object.keys(qn).forEach((e=>{qn[e].attributes=void 0===qn[e].attributes?[...bo.presentation]:qn[e].attributes.concat(bo.presentation)})),Object.assign(Ao,yo,qn),Object.keys(jn).forEach((e=>jn[e].filter((e=>void 0===Ao[e])).forEach((e=>{Ao[e]={}}))));const passthrough=function(){return Array.from(arguments)};Object.keys(Ao).forEach((e=>{Ao[e].nodeName||(Ao[e].nodeName=e),Ao[e].init||(Ao[e].init=passthrough),Ao[e].args||(Ao[e].args=passthrough),Ao[e].methods||(Ao[e].methods={}),Ao[e].attributes||(Ao[e].attributes=no[e]||[])}));const assignMethods=(e,t)=>{e.forEach((e=>Object.keys(t).forEach((r=>{Ao[e].methods[r]=function(){return t[r](...arguments),arguments[0]}}))))};assignMethods(svg_flatten_arrays(jn.t,jn.v,jn.g,jn.s,jn.p,jn.i,jn.h,jn.d),Eo),assignMethods(svg_flatten_arrays(jn.t,jn.v,jn.g,jn.s,jn.p,jn.i,jn.h,jn.d),Zn),assignMethods(svg_flatten_arrays(jn.v,jn.g,jn.s),xo),assignMethods(svg_flatten_arrays(jn.t,jn.v,jn.g),ko);const Oo={svg:{version:"1.1",xmlns:wn},style:{type:"text/css"}},Mo={},constructor=(e,t,...r)=>{const n=SVGWindow().document.createElementNS(wn,Ao[e].nodeName);return t&&t.appendChild(n),((e,t)=>{Oo[t]&&Object.keys(Oo[t]).forEach((r=>e.setAttribute(r,Oo[t][r])))})(n,e),Ao[e].init(n,...r),Ao[e].args(...r).forEach(((t,r)=>{null!=Ao[e].attributes[r]&&n.setAttribute(Ao[e].attributes[r],t)})),Ao[e].attributes.forEach((e=>{Object.defineProperty(n,Nn.toCamel(e),{value:function(){return n.setAttribute(e,...arguments),n}})})),Object.keys(Ao[e].methods).forEach((t=>Object.defineProperty(n,t,{value:function(){return Ao[e].methods[t].call(Mo,n,...arguments)}}))),Wn[e]&&Wn[e].forEach((e=>{const value=function(){return constructor(e,n,...arguments)};Ao[e].static&&Object.keys(Ao[e].static).forEach((t=>{value[t]=function(){return Ao[e].static[t](n,...arguments)}})),Object.defineProperty(n,e,{value:value})})),n};Mo.Constructor=constructor;const wo={};Object.keys(jn).forEach((e=>jn[e].forEach((e=>{wo[e]=(...t)=>constructor(e,null,...t)}))));const link_rabbitear_math=(e,t)=>{["segment","circle","ellipse","rect","polygon"].filter((e=>t[e]&&t[e].prototype)).forEach((r=>{t[r].prototype.svg=function(){return e.path(this.svgPath())}})),Xn.math.vector=t.vector},initialize=function(e,...t){t.filter((e=>typeof e===sn)).forEach((t=>t.call(e,e)))};nn.init=function(){const e=constructor(dn,null,...arguments);return"loading"===SVGWindow().document.readyState?SVGWindow().document.addEventListener("DOMContentLoaded",(()=>initialize(e,...arguments))):initialize(e,...arguments),e},SVG.NS=wn,SVG.linker=function(e){e.graph&&e.origami&&(e.svg=this,link_rabbitear_math(this,e),((e,t)=>{const r="origami";Ao[r]={nodeName:"g",init:function(e,...r){return t.graph.svg.drawInto(e,...r)},args:()=>[],methods:Ao.g.methods,attributes:Ao.g.attributes,static:{}},Object.keys(t.graph.svg).forEach((e=>{Ao[r].static[e]=(r,...n)=>{const o=t.graph.svg[e](...n);return r.appendChild(o),o}})),Wn[r]=[...Wn.g],Wn.svg.push(r),Wn.g.push(r),e[r]=(...e)=>constructor(r,null,...e),Object.keys(t.graph.svg).forEach((n=>{e[r][n]=t.graph.svg[n]}))})(this,e))}.bind(SVG),Object.assign(SVG,wo),SVG.core=Object.assign(Object.create(null),{load:Load,save:save,coordinates:coordinates,flatten:svg_flatten_arrays,attributes:no,children:Wn,cdata:cdata},Nn,Eo,Zn,Pn,fo,xo,Jn),Object.defineProperty(SVG,"window",{enumerable:!1,set:e=>{var t;(t=e).document||(t.document=(e=>(new e.DOMParser).parseFromString("<!DOCTYPE html><title>.</title>","text/html"))(t)),Mn.window=t,Mn.window}});const compileShader=(e,t,r)=>{const n=e.createShader(r);if(e.shaderSource(n,t),e.compileShader(n),!e.getShaderParameter(n,e.COMPILE_STATUS))throw new Error(e.getShaderInfoLog(n));return n},createProgram=(e,t,r)=>((e,t,r)=>{const n=e.createProgram();if(e.attachShader(n,t),e.attachShader(n,r),e.linkProgram(n),!e.getProgramParameter(n,e.LINK_STATUS))throw new Error(e.getProgramInfoLog(n));return e.deleteShader(t),e.deleteShader(r),n})(e,compileShader(e,t,e.VERTEX_SHADER),compileShader(e,r,e.FRAGMENT_SHADER));var jo=Object.freeze({__proto__:null,rebuildViewport:(e,t)=>{if(!e)return;const r=window.devicePixelRatio||1,n=[t.clientWidth,t.clientHeight].map((e=>e*r));t.width===n[0]&&t.height===n[1]||(t.width=n[0],t.height=n[1]),e.viewport(0,0,e.canvas.width,e.canvas.height)},makeProjectionMatrix:(e,t="perspective",r=45)=>{if(!e)return Je.identity4x4;const n=[e.clientWidth,e.clientHeight],o=Math.min(...n),s=[0,1].map((e=>(n[e]-o)/o/2)).map((e=>e+.5));return"orthographic"===t?Je.makeOrthographicMatrix4(s[1],s[0],-s[1],-s[0],-100,100):Je.makePerspectiveMatrix4(r*(Math.PI/180),n[0]/n[1],.1,20)},makeModelMatrix:e=>{if(!e)return Je.identity4x4;const t=boundingBox(e);if(!t)return Je.identity4x4;const r=Math.max(...t.span),n=[r,0,0,0,0,r,0,0,0,0,r,0,...Je.resize(3,Je.midpoint(t.min,t.max)),1];return Je.invertMatrix4(n)}});const uniformFunc=(e,t,r,n)=>{if("uniformMatrix4fv"===r)e[r](t,!1,n);else e[r](t,n)};var Po=Object.freeze({__proto__:null,drawProgram:(e,t,r,n={})=>{e.useProgram(r.program),r.flags.forEach((t=>e.enable(t)));const o=e.getProgramParameter(r.program,e.ACTIVE_UNIFORMS);for(let t=0;t<o;t+=1){const o=e.getActiveUniform(r.program,t).name,s=n[o];if(s){const t=e.getUniformLocation(r.program,o);uniformFunc(e,t,s.func,s.value)}}r.vertexArrays.forEach((t=>{e.bindBuffer(e.ARRAY_BUFFER,t.buffer),e.bufferData(e.ARRAY_BUFFER,t.data,e.STATIC_DRAW),e.vertexAttribPointer(t.location,t.length,t.type,!1,0,0),e.enableVertexAttribArray(t.location)})),r.elementArrays.forEach((r=>{e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r.buffer),e.bufferData(e.ELEMENT_ARRAY_BUFFER,r.data,e.STATIC_DRAW),e.drawElements(r.mode,r.data.length,2===t?e.UNSIGNED_INT:e.UNSIGNED_SHORT,r.buffer)})),r.flags.forEach((t=>e.disable(t)))},deallocProgram:(e,t)=>{t.vertexArrays.forEach((t=>e.disableVertexAttribArray(t.location))),t.vertexArrays.forEach((t=>e.deleteBuffer(t.buffer))),t.elementArrays.forEach((t=>e.deleteBuffer(t.buffer))),e.deleteProgram(t.program)}});const makeFacesVertexData=(e,t={})=>{const r=e.vertices_coords.map((e=>[...e].concat(Array(3-e.length).fill(0)))),n=makeVerticesNormal(e),o=r.map(((e,t)=>t%3)).map((e=>[0===e?1:0,1===e?1:0,2===e?1:0])),s=e.faces_edges.map((t=>t.map((t=>e.edges_assignment[t])).map((e=>"J"===e||"j"===e))));if(!t.showTrianglulation)for(let e=0;e<s.length;e+=1)s[e][0]&&(o[3*e+0][2]=o[3*e+1][2]=100),s[e][1]&&(o[3*e+1][0]=o[3*e+2][0]=100),s[e][2]&&(o[3*e+0][1]=o[3*e+2][1]=100);return{vertices_coords:r,vertices_normal:n,vertices_barycentric:o}},So={B:[.3,.3,.3],b:[.3,.3,.3],V:[.2,.4,.6],v:[.2,.4,.6],M:[.75,.25,.15],m:[.75,.25,.15],F:[.2,.2,.2],f:[.2,.2,.2],C:[1,.75,.25],c:[1,.75,.25],U:[.2,.2,.2],u:[.2,.2,.2]},makeThickEdgesVertexData=(e,t=So)=>{if(!e||!e.vertices_coords||!e.edges_vertices)return[];const r=e.vertices_coords.map((e=>[...e].concat(Array(3-e.length).fill(0)))),n=e.edges_vertices.flatMap((e=>e.map((e=>r[e])))).flatMap((e=>[e,e,e,e])),o=makeEdgesVector(e);return{vertices_coords:n,vertices_color:e.edges_assignment?e.edges_assignment.flatMap((e=>Array(8).fill(t[e]))):e.edges_vertices.flatMap((()=>Array(8).fill(t.U))),verticesEdgesVector:o.flatMap((e=>[e,e,e,e,e,e,e,e])),vertices_vector:e.edges_vertices.flatMap((()=>[[1,0],[0,1],[-1,0],[0,-1],[1,0],[0,1],[-1,0],[0,-1]]))}};var Co=Object.freeze({__proto__:null,makeFacesVertexData:makeFacesVertexData,makeThickEdgesVertexData:makeThickEdgesVertexData});const makeFoldedVertexArrays=(e,t,r,n={})=>{if(!r||!r.vertices_coords||!r.faces_vertices)return[];const{vertices_coords:o,vertices_normal:s,vertices_barycentric:a}=makeFacesVertexData(r,n);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:o[0].length,data:new Float32Array(o.flat())},{location:e.getAttribLocation(t,"v_normal"),buffer:e.createBuffer(),type:e.FLOAT,length:s[0].length,data:new Float32Array(s.flat())},{location:e.getAttribLocation(t,"v_barycentric"),buffer:e.createBuffer(),type:e.FLOAT,length:3,data:new Float32Array(a.flat())}].filter((e=>-1!==e.location))},makeFoldedElementArrays=(e,t=1,r={})=>r&&r.vertices_coords&&r.faces_vertices?[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:2===t?new Uint32Array(r.faces_vertices.flat()):new Uint16Array(r.faces_vertices.flat())}]:[],makeThickEdgesVertexArrays=(e,t,r,n={})=>{if(!r||!r.vertices_coords||!r.edges_vertices)return[];const{vertices_coords:o,vertices_color:s,verticesEdgesVector:a,vertices_vector:i}=makeThickEdgesVertexData(r,n.assignment_color);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:o[0].length,data:new Float32Array(o.flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:s[0].length,data:new Float32Array(s.flat())},{location:e.getAttribLocation(t,"edge_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:a[0].length,data:new Float32Array(a.flat())},{location:e.getAttribLocation(t,"vertex_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:i[0].length,data:new Float32Array(i.flat())}].filter((e=>-1!==e.location))},makeThickEdgesElementArrays=(e,t=1,r={})=>{if(!r||!r.edges_vertices)return[];const n=r.edges_vertices.map(((e,t)=>8*t)).flatMap((e=>[e+0,e+1,e+4,e+4,e+1,e+5,e+1,e+2,e+5,e+5,e+2,e+6,e+2,e+3,e+6,e+6,e+3,e+7,e+3,e+0,e+7,e+7,e+0,e+4]));return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:2===t?new Uint32Array(n):new Uint16Array(n)}]};var zo=Object.freeze({__proto__:null,makeFoldedVertexArrays:makeFoldedVertexArrays,makeFoldedElementArrays:makeFoldedElementArrays,makeThickEdgesVertexArrays:makeThickEdgesVertexArrays,makeThickEdgesElementArrays:makeThickEdgesElementArrays});const makeExplodedGraph=(e,t=1e-5)=>{const r=JSON.parse(JSON.stringify(e));if(!r.edges_assignment){const t=count.edges(e)||countImplied.edges(e);r.edges_assignment=Array(t).fill("U")}let n=[];r.faceOrders?n=nudgeFacesWithFaceOrders(r):r.faces_layer&&(n=nudgeFacesWithFacesLayer(r));const o=triangulate(r);if(explode(r),o.faces){invertMap(o.faces.map).forEach(((e,o)=>{const s=n[e];s&&r.faces_vertices[o].forEach((e=>{const n=Je.scale(s.vector,s.layer*t);r.vertices_coords[e]=Je.add(Je.resize(3,r.vertices_coords[e]),n)}))}))}return r},makeUniforms$1=(e,{projectionMatrix:t,viewMatrix:r,modelMatrix:n,canvas:o,opacity:s,touchPoint:a,frontColor:i,backColor:c,strokeWidth:l})=>({u_matrix:{func:"uniformMatrix4fv",value:Je.multiplyMatrices4(Je.multiplyMatrices4(t,r),n)},u_projection:{func:"uniformMatrix4fv",value:t},u_modelView:{func:"uniformMatrix4fv",value:Je.multiplyMatrices4(r,n)},u_opacity:{func:"uniform1f",value:s},u_touch:{func:"uniform2fv",value:a},u_resolution:{func:"uniform2fv",value:[o.clientWidth,o.clientHeight].map((e=>e*window.devicePixelRatio||1))},u_frontColor:{func:"uniform3fv",value:hexToRGB(i)},u_backColor:{func:"uniform3fv",value:hexToRGB(c)},u_strokeWidth:{func:"uniform1f",value:l}});const foldedFormFaces=(e,t=1,r={},n={})=>{const o=makeExplodedGraph(r,n.layerNudge),s=1===t?createProgram(e,"#version 100\n\nattribute vec3 v_position;\nattribute vec3 v_normal;\n\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nvarying vec3 normal_color;\nvarying vec3 front_color;\nvarying vec3 back_color;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\n\tnormal_color = vec3(\n\t\tdot(v_normal, normalize(u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 1, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 0, 1, 0)).xyz)\n\t);\n\tfloat grayX = abs(normal_color.x);\n\tfloat grayY = abs(normal_color.y);\n\tfloat grayZ = abs(normal_color.z);\n\tfloat gray = 0.25 + clamp(grayY, 1.0, 0.25) * 0.5 + grayX * 0.25 + grayZ * 0.25;\n\tfloat c = clamp(gray, 0.0, 1.0);\n\tfront_color = u_frontColor * c;\n\tback_color = u_backColor * c;\n}\n","#version 100\n\nprecision mediump float;\nuniform float u_opacity;\nvarying vec3 front_color;\nvarying vec3 back_color;\n\nvoid main () {\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\tgl_FragColor = vec4(color, u_opacity)\n}\n"):createProgram(e,"#version 300 es\n\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\n\nin vec3 v_position;\nin vec3 v_normal;\nout vec3 front_color;\nout vec3 back_color;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tvec3 normal_color = vec3(\n\t\tdot(v_normal, normalize(u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 1, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 0, 1, 0)).xyz)\n\t);\n\tfloat grayX = abs(normal_color.x);\n\tfloat grayY = abs(normal_color.y);\n\tfloat grayZ = abs(normal_color.z);\n\tfloat gray = 0.25 + clamp(grayY, 1.0, 0.25) * 0.5 + grayX * 0.25 + grayZ * 0.25;\n\tfloat c = clamp(gray, 0.0, 1.0);\n\tfront_color = u_frontColor * c;\n\tback_color = u_backColor * c;\n}\n","#version 300 es\nprecision highp float;\n\nuniform float u_opacity;\nin vec3 front_color;\nin vec3 back_color;\nout vec4 outColor;\n\nvoid main () {\n\tgl_FragDepth = gl_FragCoord.z;\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\toutColor = vec4(color, u_opacity);\n}\n");return{program:s,vertexArrays:makeFoldedVertexArrays(e,s,o,n),elementArrays:makeFoldedElementArrays(e,t,o),flags:[e.DEPTH_TEST],makeUniforms:makeUniforms$1}},foldedFormEdges=(e,t=1,r={},n={})=>{const o=1===t?createProgram(e,"#version 100\n\nattribute vec3 v_position;\nattribute vec3 v_color;\nattribute vec3 edge_vector;\nattribute vec2 vertex_vector;\n\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\nvarying vec3 blend_color;\n\nvoid main () {\n\tvec3 edge_norm = normalize(edge_vector);\n\t// find an axis with which to compute the cross product\n\t// we want the axis which is most unlike the edge_vector\n\tfloat xdot = abs(dot(vec3(1,0,0), edge_norm));\n\tfloat ydot = abs(dot(vec3(0,1,0), edge_norm));\n\tfloat zdot = abs(dot(vec3(0,0,1), edge_norm));\n\tvec3 xory = xdot < ydot ? vec3(1,0,0) : vec3(0,1,0);\n\tvec3 axis = xdot > zdot && ydot > zdot ? vec3(0,0,1) : xory;\n\t// these are two perpendicular vectors to the edge_vector\n\t// together all three of them are the basis vectors\n\tvec3 one = cross(axis, edge_norm);\n\tvec3 two = cross(one, edge_norm);\n\t// displace the point along a vector from its original spot\n\tvec3 displace = normalize(\n\t\tone * vertex_vector.x +\n\t\ttwo * vertex_vector.y) * u_strokeWidth;\n\t// gl_Position = u_matrix * vec4(vec3(side, 0) + v_position, 1);\n\tgl_Position = u_matrix * vec4(v_position + displace, 1);\n\t// gl_Position = u_matrix * vec4(v_position, 1);\n\tblend_color = v_color;\n}\n","#version 100\n\nprecision mediump float;\nvarying vec3 blend_color;\n\nvoid main () {\n\tgl_FragColor = vec4(blend_color.rgb, 1);\n}\n"):createProgram(e,"#version 300 es\n\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\n\nin vec3 v_position;\nin vec3 v_color;\nin vec3 edge_vector;\nin vec2 vertex_vector;\nout vec3 blend_color;\n\nvoid main () {\n\tvec3 edge_norm = normalize(edge_vector);\n\t// find an axis with which to compute the cross product\n\t// we want the axis which is most unlike the edge_vector\n\tfloat xdot = abs(dot(vec3(1,0,0), edge_norm));\n\tfloat ydot = abs(dot(vec3(0,1,0), edge_norm));\n\tfloat zdot = abs(dot(vec3(0,0,1), edge_norm));\n\tvec3 xory = xdot < ydot ? vec3(1,0,0) : vec3(0,1,0);\n\tvec3 axis = xdot > zdot && ydot > zdot ? vec3(0,0,1) : xory;\n\t// these are two perpendicular vectors to the edge_vector\n\t// together all three of them are the basis vectors\n\tvec3 one = cross(axis, edge_norm);\n\tvec3 two = cross(one, edge_norm);\n\t// displace the point along a vector from its original spot\n\tvec3 displace = normalize(\n\t\tone * vertex_vector.x +\n\t\ttwo * vertex_vector.y) * u_strokeWidth;\n\t// gl_Position = u_matrix * vec4(vec3(side, 0) + v_position, 1);\n\tgl_Position = u_matrix * vec4(v_position + displace, 1);\n\t// gl_Position = u_matrix * vec4(v_position, 1);\n\tblend_color = v_color;\n}\n","#version 300 es\n\nprecision mediump float;\nin vec3 blend_color;\nout vec4 outColor;\n \nvoid main() {\n\toutColor = vec4(blend_color.rgb, 1);\n}\n");return{program:o,vertexArrays:makeThickEdgesVertexArrays(e,o,r,n),elementArrays:makeThickEdgesElementArrays(e,t,r),flags:[e.DEPTH_TEST],makeUniforms:makeUniforms$1}},foldedFormFacesOutlined=(e,t=1,r={},n={})=>{const o=makeExplodedGraph(r,n.layerNudge),s=1===t?createProgram(e,"#version 100\n\nattribute vec3 v_position;\nattribute vec3 v_normal;\nattribute vec3 v_barycentric;\n\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nvarying vec3 normal_color;\nvarying vec3 barycentric;\nvarying vec3 front_color;\nvarying vec3 back_color;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tbarycentric = v_barycentric;\n\n\tnormal_color = vec3(\n\t\tdot(v_normal, normalize(u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 1, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 0, 1, 0)).xyz)\n\t);\n\t// normal_color = vec3(\n\t// \tdot(v_normal, vec4(1, 0, 0, 0).xyz),\n\t// \tdot(v_normal, vec4(0, 1, 0, 0).xyz),\n\t// \tdot(v_normal, vec4(0, 0, 1, 0).xyz)\n\t// );\n\n\tfloat grayX = abs(normal_color.x);\n\tfloat grayY = abs(normal_color.y);\n\tfloat grayZ = abs(normal_color.z);\n\tfloat gray = 0.25 + clamp(grayY, 1.0, 0.25) * 0.5 + grayX * 0.25 + grayZ * 0.25;\n\tfloat c = clamp(gray, 0.0, 1.0);\n\tfront_color = u_frontColor * c;\n\tback_color = u_backColor * c;\n}\n","#version 100\n\nprecision mediump float;\nuniform float u_opacity;\nvarying vec3 barycentric;\nvarying vec3 front_color;\nvarying vec3 back_color;\n\n// float edgeFactor(vec3 barycenter) {\n// \tvec3 d = fwidth(barycenter);\n// \tvec3 a3 = smoothstep(vec3(0.0), d*3.5, barycenter);\n// \treturn min(min(a3.x, a3.y), a3.z);\n// }\n\nvoid main () {\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\t// gl_FragColor = vec4(blend_color.rgb, u_opacity);\n\t// gl_FragDepth = 0.5;\n\n\t// barycentric #1\n\tgl_FragColor = any(lessThan(barycentric, vec3(0.02)))\n\t\t? vec4(0.0, 0.0, 0.0, 1.0)\n\t\t: vec4(color, u_opacity);\n\t// barycentric #2\n\t// gl_FragColor = vec4(mix(vec3(0.0), color, edgeFactor(barycentric)), u_opacity);\n}\n"):createProgram(e,"#version 300 es\n\n// uniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\n\nin vec3 v_position;\nin vec3 v_normal;\nin vec3 v_barycentric;\nin float v_rawEdge;\n// in uint8_t \nout vec3 front_color;\nout vec3 back_color;\nout vec3 barycentric;\n// flat out int rawEdge;\nflat out int provokedVertex;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tprovokedVertex = gl_VertexID;\n\tbarycentric = v_barycentric;\n\t// rawEdge = int(v_rawEdge);\n\n\tvec3 normal_color = vec3(\n\t\tdot(v_normal, normalize(u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 1, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 0, 1, 0)).xyz)\n\t);\n\t// normal_color = vec3(\n\t// \tdot(v_normal, vec4(1, 0, 0, 0).xyz),\n\t// \tdot(v_normal, vec4(0, 1, 0, 0).xyz),\n\t// \tdot(v_normal, vec4(0, 0, 1, 0).xyz)\n\t// );\n\n\tfloat grayX = abs(normal_color.x);\n\tfloat grayY = abs(normal_color.y);\n\tfloat grayZ = abs(normal_color.z);\n\tfloat gray = 0.25 + clamp(grayY, 1.0, 0.25) * 0.5 + grayX * 0.25 + grayZ * 0.25;\n\tfloat c = clamp(gray, 0.0, 1.0);\n\tfront_color = u_frontColor * c;\n\tback_color = u_backColor * c;\n}\n","#version 300 es\n// precision mediump float;\nprecision highp float;\n\nuniform float u_opacity;\n\nuniform vec2 u_touch;\nuniform vec2 u_resolution;\n\n// in int gl_PrimitiveID;\n// in highp vec4 gl_FragCoord;\n// in mediump vec2 gl_PointCoord; // 0.0 to 1.0, location on the screen\n// in bool gl_FrontFacing;\n// out highp float gl_FragDepth;\n\nflat in int provokedVertex;\n\nin vec3 front_color;\nin vec3 back_color;\nin vec3 barycentric;\n// flat in int rawEdge;\nout vec4 outColor;\n\nfloat hue2rgb (float p, float q, float t) {\n\twhile (t < 0.0) t += 1.0;\n\twhile (t > 1.0) t -= 1.0;\n\tif (t < 1.0 / 6.0) return p + (q - p) * 6.0 * t;\n\tif (t < 1.0 / 2.0) return q;\n\tif (t < 2.0 / 3.0) return p + (q - p) * (2.0 / 3.0 - t) * 6.0;\n\treturn p;\n}\nvec3 hslToRgb (float h, float s, float l) {\n\tif (s == 0.0) { return vec3(l, l, l); }\n\tfloat q = l < 0.5 ? l * (1.0 + s) : l + s - l * s;\n\tfloat p = 2.0 * l - q;\n\tfloat r = hue2rgb(p, q, h + 1.0 / 3.0);\n\tfloat g = hue2rgb(p, q, h);\n\tfloat b = hue2rgb(p, q, h - 1.0 / 3.0);\n\treturn vec3(r, g, b);\n}\n\nfloat edgeFactor(vec3 barycenter) {\n\tvec3 d = fwidth(barycenter);\n\tvec3 a3 = smoothstep(vec3(0.0), d*3.5, barycenter);\n\treturn min(min(a3.x, a3.y), a3.z);\n}\n\nvoid main () {\n\tgl_FragDepth = gl_FragCoord.z;\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\t// vec3 color = hslToRgb(float(gl_PrimitiveID) / 57.0, 0.5, 0.8);\n\t// vec3 color = hslToRgb(float(provokedVertex) * 1.618, 1.0, 0.45);\n\n\t// original output\n\t// outColor = vec4(color, u_opacity);\n\n\t// barycentric #1\n\t// outColor = any(lessThan(barycentric, vec3(0.02)))\n\t// \t? vec4(0.0, 0.0, 0.0, 1.0)\n\t// \t: vec4(color, u_opacity);\n\n\t// barycentric #2\n\toutColor = vec4(mix(vec3(0.0), color, edgeFactor(barycentric)), u_opacity);\n\t// barycentric #2, transparent faces (kindof. bug)\n\t// outColor = vec4(1.0, 1.0, 1.0, (1.0-edgeFactor(barycentric))*0.95);\n\n\t// // barycentric #3 with raw edge\n\t// bool side2 = bool(rawEdge & 1);\n\t// bool side0 = bool(rawEdge & 2);\n\t// bool side1 = bool(rawEdge & 4);\n\t// if ((barycentric.x < 0.02 && side0)\n\t// \t|| (barycentric.y < 0.02 && side1)\n\t// \t|| (barycentric.z < 0.02 && side2)) {\n\t// \toutColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t// }\n\t// else {\n\t// \toutColor = vec4(color, u_opacity);\n\t// }\n\n\t\n\t// if (provokedVertex == 8) {\n\t// \toutColor = vec4(1, 1, 0, 1);\n\t// }\n\n\t// vec2 fragScale = vec2(gl_FragCoord.x / u_resolution.x, gl_FragCoord.y / u_resolution.y);\n\t// vec2 touchScale = vec2(u_touch.x / u_resolution.x, u_touch.y / u_resolution.y);\n\t// // fix. invert.\n\t// touchScale.y = 1.0 - touchScale.y;\n\t// float dist = distance(touchScale, fragScale);\n\t// if (dist < 0.1) {\n\t// \tfloat t = dist / 0.1;\n\t// \toutColor.r = outColor.r * t + 1.0 * (1.0 - t);\n\t// }\n}\n");return{program:s,vertexArrays:makeFoldedVertexArrays(e,s,o,n),elementArrays:makeFoldedElementArrays(e,t,o),flags:[e.DEPTH_TEST],makeUniforms:makeUniforms$1}};var Fo=Object.freeze({__proto__:null,foldedFormFaces:foldedFormFaces,foldedFormEdges:foldedFormEdges,foldedFormFacesOutlined:foldedFormFacesOutlined});const Lo={B:[.3,.3,.3],b:[.3,.3,.3],V:[.2,.4,.6],v:[.2,.4,.6],M:[.75,.25,.15],m:[.75,.25,.15],F:[.2,.2,.2],f:[.2,.2,.2],U:[.2,.2,.2],u:[.2,.2,.2]},make2D$1=e=>e.map((e=>[0,1].map((t=>e[t]||0)))),makeCPEdgesVertexData=(e,t=Lo)=>{if(!e||!e.vertices_coords||!e.edges_vertices)return[];const r=make2D$1(e.edges_vertices.flatMap((t=>t.map((t=>e.vertices_coords[t])))).flatMap((e=>[e,e]))),n=make2D$1(makeEdgesVector(e));return{vertices_coords:r,vertices_color:e.edges_assignment?e.edges_assignment.flatMap((e=>[t[e],t[e],t[e],t[e]])):e.edges_vertices.flatMap((()=>[t.U,t.U,t.U,t.U])),verticesEdgesVector:n.flatMap((e=>[e,e,e,e])),vertices_vector:e.edges_vertices.flatMap((()=>[[1,0],[-1,0],[-1,0],[1,0]]))}};var No=Object.freeze({__proto__:null,makeCPEdgesVertexData:makeCPEdgesVertexData});const makeCPEdgesVertexArrays=(e,t,r)=>{if(!r||!r.vertices_coords||!r.edges_vertices)return[];const{vertices_coords:n,vertices_color:o,verticesEdgesVector:s,vertices_vector:a}=makeCPEdgesVertexData(r);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:2,data:new Float32Array(n.flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:o[0].length,data:new Float32Array(o.flat())},{location:e.getAttribLocation(t,"edge_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:s[0].length,data:new Float32Array(s.flat())},{location:e.getAttribLocation(t,"vertex_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:a[0].length,data:new Float32Array(a.flat())}].filter((e=>-1!==e.location))},makeCPEdgesElementArrays=(e,t=1,r={})=>{if(!r||!r.edges_vertices)return[];const n=r.edges_vertices.map(((e,t)=>4*t)).flatMap((e=>[e+0,e+1,e+2,e+2,e+3,e+0]));return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:2===t?new Uint32Array(n):new Uint16Array(n)}]},makeCPFacesVertexArrays=(e,t,r)=>{if(!r||!r.vertices_coords)return[];const n=r.vertices_coords.map((()=>[.11,.11,.11]));return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:2,data:new Float32Array((o=r.vertices_coords,o.map((e=>[0,1].map((t=>e[t]||0))))).flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:n[0].length,data:new Float32Array(n.flat())}].filter((e=>-1!==e.location));var o},makeCPFacesElementArrays=(e,t=1,r={})=>r&&r.vertices_coords&&r.faces_vertices?[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:2===t?new Uint32Array(triangulateConvexFacesVertices(r).flat()):new Uint16Array(triangulateConvexFacesVertices(r).flat())}]:[];var $o=Object.freeze({__proto__:null,makeCPEdgesVertexArrays:makeCPEdgesVertexArrays,makeCPEdgesElementArrays:makeCPEdgesElementArrays,makeCPFacesVertexArrays:makeCPFacesVertexArrays,makeCPFacesElementArrays:makeCPFacesElementArrays});const makeUniforms=(e,{projectionMatrix:t,viewMatrix:r,modelMatrix:n,strokeWidth:o})=>({u_matrix:{func:"uniformMatrix4fv",value:Je.multiplyMatrices4(Je.multiplyMatrices4(t,r),n)},u_projection:{func:"uniformMatrix4fv",value:t},u_modelView:{func:"uniformMatrix4fv",value:Je.multiplyMatrices4(r,n)},u_strokeWidth:{func:"uniform1f",value:o/2}});var Vo="#version 100\n\nprecision mediump float;\nvarying vec3 blend_color;\n\nvoid main () {\n\tgl_FragColor = vec4(blend_color.rgb, 1);\n}\n",Io="#version 300 es\nprecision mediump float;\n// precision highp float;\n\n// flat in vec4 blend_color;\nin vec3 blend_color;\nout vec4 outColor;\n \nvoid main() {\n\toutColor = vec4(blend_color.rgb, 1);\n}\n";const cpFacesV1=(e,t=1,r={})=>{const n=createProgram(e,"#version 100\n\nuniform mat4 u_matrix;\n\nattribute vec2 v_position;\nattribute vec3 v_color;\nvarying vec3 blend_color;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 0, 1);\n\tblend_color = v_color;\n}\n",Vo);return{program:n,vertexArrays:makeCPFacesVertexArrays(e,n,r),elementArrays:makeCPFacesElementArrays(e,t,r),flags:[],makeUniforms:makeUniforms}},cpEdgesV1=(e,t=1,r={})=>{const n=createProgram(e,"#version 100\n\nattribute vec2 v_position;\nattribute vec3 v_color;\nattribute vec2 edge_vector;\nattribute vec2 vertex_vector;\n\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\nvarying vec3 blend_color;\n\nvoid main () {\n\t// dot(normal, (u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t// this one works\n\tfloat sign = vertex_vector[0];\n\tvec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * u_strokeWidth;\n\tgl_Position = u_matrix * vec4(side + v_position, 0, 1);\n\n\t// vec3 forward = (u_modelView * vec4(0, 0, 1, 0)).xyz;\n\t// float sign = vertex_vector[0];\n\t// vec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign));\n\t// vec3 side3d = (u_modelView * vec4(side, 0, 1)).xyz;\n\t// vec3 c = normalize(cross(side3d, forward)) * u_strokeWidth;\n\t// // gl_Position = u_matrix * vec4(v_position.x + c.x, v_position.y + c.y, c.z, 1);\n\t// gl_Position = u_matrix * vec4(v_position, 0, 1) + u_projection * vec4(c, 1);\n\t\n\t// vec3 forward = (u_modelView * vec4(0, 0, 1, 0)).xyz;\n\t// vec3 edgeVec3d = (u_modelView * vec4(edge_vector, 0, 0)).xyz;\n\t// vec3 thick = normalize(cross(edgeVec3d, forward)) * sign * u_strokeWidth;\n\t// vec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * u_strokeWidth;\n\t// vec4 projected_vector = u_matrix * vec4(normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)), 0, 1);\n\t// gl_Position = u_matrix * vec4(v_position, 0, 1) + vec4(thick.xyz, 0);\n\t// gl_Position = u_matrix * vec4(v_position, 0, 1) + vec4(0, u_strokeWidth * sign, 0, 0);\n\tblend_color = v_color;\n}\n",Vo);return{program:n,vertexArrays:makeCPEdgesVertexArrays(e,n,r),elementArrays:makeCPEdgesElementArrays(e,t,r),flags:[],makeUniforms:makeUniforms}},cpFacesV2=(e,t=2,r={})=>{const n=createProgram(e,"#version 300 es\n\nuniform mat4 u_matrix;\n\nin vec2 v_position;\nin vec3 v_color;\nout vec3 blend_color;\n// flat out vec3 blend_color;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 0, 1);\n\tblend_color = v_color;\n}\n",Io);return{program:n,vertexArrays:makeCPFacesVertexArrays(e,n,r),elementArrays:makeCPFacesElementArrays(e,t,r),flags:[],makeUniforms:makeUniforms}},cpEdgesV2=(e,t=2,r={})=>{const n=createProgram(e,"#version 300 es\n\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\n\nin vec2 v_position;\nin vec3 v_color;\nin vec2 edge_vector;\nin vec2 vertex_vector;\nout vec3 blend_color;\n\nvoid main () {\n\t// dot(normal, (u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t// this one works\n\tfloat sign = vertex_vector[0];\n\tvec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * u_strokeWidth;\n\tgl_Position = u_matrix * vec4(side + v_position, 0, 1);\n\tblend_color = v_color;\n}\n",Io);return{program:n,vertexArrays:makeCPEdgesVertexArrays(e,n,r),elementArrays:makeCPEdgesElementArrays(e,t,r),flags:[],makeUniforms:makeUniforms}};var To=Object.freeze({__proto__:null,cpFacesV1:cpFacesV1,cpEdgesV1:cpEdgesV1,cpFacesV2:cpFacesV2,cpEdgesV2:cpEdgesV2});var Bo=Object.assign(Object.create(null),{createProgram:createProgram,initialize:(e,t)=>{const r=[null,"webgl","webgl2"],n=window.devicePixelRatio||1;if(e.width=e.clientWidth*n,e.height=e.clientHeight*n,t)return{gl:e.getContext(r[t]),version:t};const o=e.getContext(r[2]);if(o)return{gl:o,version:2};const s=e.getContext(r[1]);if(s)return{gl:s,version:1};throw new Error(z)},foldedForm:(e,t=1,r={},n={})=>{const o=[];return!1!==n.faces&&(!1===n.outlines?o.push(foldedFormFaces(e,t,r,n)):o.push(foldedFormFacesOutlined(e,t,r,n))),!0===n.edges&&o.push(foldedFormEdges(e,t,r,n)),o},creasePattern:(e,t=1,r={})=>1===t?[cpFacesV1(e,t,r),cpEdgesV1(e,t,r)]:[cpFacesV2(e,t,r),cpEdgesV2(e,t,r)]},jo,Po,zo,Co,Fo,$o,No,To);const qo=Object.assign(V,Kt,{math:Je,axiom:axiom,diagram:cr,layer:zr,singleVertex:Lr,text:Nr,convert:Ur,webgl:Bo});return Object.defineProperty(qo,"use",{enumerable:!1,value:function(e){null!=e&&"function"==typeof e.linker&&e.linker(this)}.bind(qo)}),k||(qo.use(FOLDtoSVG),qo.use(SVG)),Object.defineProperty(qo,"window",{enumerable:!1,set:e=>{var t;(t=e).document||(t.document=(e=>(new e.DOMParser).parseFromString("<!DOCTYPE html><title>.</title>","text/html"))(t)),$.window=t,$.window,SVG.window=e}}),qo}));
