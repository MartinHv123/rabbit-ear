/* Rabbit Ear 0.9.33 alpha 2022-07-29 (c) Kraft, MIT License */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).ear=t()}(this,(function(){"use strict";const e="undefined",t="number",r="object",o="index",n="vertices",s="edges",c="faces",a="boundaries",i="vertices_coords",l="edges_vertices",d="faces_edges",u="edges_assignment",m="edges_foldAngle",g="faces_layer",p="boundary",h="front",v="back",_="foldedForm",y="black",b="white",E="none",x=typeof window!==e&&typeof window.document!==e;typeof process!==e&&null!=process.versions&&process.versions.node;const k=typeof self===r&&self.constructor&&"DedicatedWorkerGlobalScope"===self.constructor.name,A=[];A[10]='"error 010: window" not set. if using node/deno, include package @xmldom/xmldom, set to the main export ( ear.window = xmldom; )';const O={window:void 0};x&&(O.window=window);const RabbitEarWindow=()=>{if(void 0===O.window)throw A[10];return O.window};var M=Object.create(null);const typeOf=function(e){switch(e.constructor.name){case"vector":case"matrix":case"segment":case"ray":case"line":case"circle":case"ellipse":case"rect":case"polygon":return e.constructor.name}if("object"==typeof e){if(null!=e.radius)return"circle";if(null!=e.width)return"rect";if(null!=e.x||"number"==typeof e[0])return"vector";if(null!=e[0]&&e[0].length&&("number"==typeof e[0].x||"number"==typeof e[0][0]))return"segment";if(null!=e.vector&&null!=e.origin)return"line"}},resize=(e,t)=>t.length===e?t:Array(e).fill(0).map(((e,r)=>t[r]?t[r]:e)),resizeUp=(e,t)=>{const r=e.length>t.length?e.length:t.length;return[e,t].map((e=>resize(r,e)))},countPlaces=function(e){const t=`${e}`.match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);return t?Math.max(0,(t[1]?t[1].length:0)-(t[2]?+t[2]:0)):0},cleanNumber=function(e,t=15){if("number"!=typeof e)return e;const r=parseFloat(e.toFixed(t));return countPlaces(r)===Math.min(t,countPlaces(e))?e:r},isIterable=e=>null!=e&&"function"==typeof e[Symbol.iterator],semiFlattenArrays=function(){switch(arguments.length){case void 0:case 0:return Array.from(arguments);case 1:return isIterable(arguments[0])&&"string"!=typeof arguments[0]?semiFlattenArrays(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>isIterable(e)?[...semiFlattenArrays(e)]:e))}},flattenArrays=function(){switch(arguments.length){case void 0:case 0:return Array.from(arguments);case 1:return isIterable(arguments[0])&&"string"!=typeof arguments[0]?flattenArrays(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>isIterable(e)?[...flattenArrays(e)]:e)).reduce(((e,t)=>e.concat(t)),[])}};var w=Object.freeze({__proto__:null,resize:resize,resizeUp:resizeUp,resizeDown:(e,t)=>{const r=e.length>t.length?t.length:e.length;return[e,t].map((e=>resize(r,e)))},cleanNumber:cleanNumber,semiFlattenArrays:semiFlattenArrays,flattenArrays:flattenArrays}),j=Object.create(null);const P=1e-6,S=180/Math.PI,C=Math.PI/180,z=2*Math.PI;var F=Object.freeze({__proto__:null,EPSILON:P,R2D:S,D2R:C,TWO_PI:z});const fnTrue=()=>!0,fnSquare=e=>e*e,fnAdd=(e,t)=>e+(t||0),fnNotUndefined=e=>void 0!==e,fnVec2Angle=e=>Math.atan2(e[1],e[0]),fnToVec2=e=>[Math.cos(e),Math.sin(e)],fnEpsilonEqual=(e,t,r=P)=>Math.abs(e-t)<r,fnEpsilonSort=(e,t,r=P)=>fnEpsilonEqual(e,t,r)?0:Math.sign(t-e),fnEpsilonEqualVectors=(e,t,r=P)=>{for(let o=0;o<Math.max(e.length,t.length);o+=1)if(!fnEpsilonEqual(e[o]||0,t[o]||0,r))return!1;return!0},include=(e,t=P)=>e>-t,exclude=(e,t=P)=>e>t,L=fnTrue,N=fnTrue,$=include,V=exclude,includeS=(e,t=P)=>e>-t&&e<1+t,excludeS=(e,t=P)=>e>t&&e<1-t,rayLimiter=e=>e<-P?0:e,segmentLimiter=e=>e<-P?0:e>1.000001?1:e;var I=Object.freeze({__proto__:null,fnTrue:fnTrue,fnSquare:fnSquare,fnAdd:fnAdd,fnNotUndefined:fnNotUndefined,fnAnd:(e,t)=>e&&t,fnCat:(e,t)=>e.concat(t),fnVec2Angle:fnVec2Angle,fnToVec2:fnToVec2,fnEqual:(e,t)=>e===t,fnEpsilonEqual:fnEpsilonEqual,fnEpsilonSort:fnEpsilonSort,fnEpsilonEqualVectors:fnEpsilonEqualVectors,include:include,exclude:exclude,includeL:L,excludeL:N,includeR:$,excludeR:V,includeS:includeS,excludeS:excludeS,lineLimiter:e=>e,rayLimiter:rayLimiter,segmentLimiter:segmentLimiter});const magnitude=e=>Math.sqrt(e.map(fnSquare).reduce(fnAdd,0)),magnitude2=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]),magnitude3=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]),magSquared=e=>e.map(fnSquare).reduce(fnAdd,0),normalize=e=>{const t=magnitude(e);return 0===t?e:e.map((e=>e/t))},normalize2=e=>{const t=magnitude2(e);return 0===t?e:[e[0]/t,e[1]/t]},normalize3=e=>{const t=magnitude3(e);return 0===t?e:[e[0]/t,e[1]/t,e[2]/t]},scale=(e,t)=>e.map((e=>e*t)),scale2=(e,t)=>[e[0]*t,e[1]*t],add=(e,t)=>e.map(((e,r)=>e+(t[r]||0))),add2$1=(e,t)=>[e[0]+t[0],e[1]+t[1]],subtract=(e,t)=>e.map(((e,r)=>e-(t[r]||0))),subtract2=(e,t)=>[e[0]-t[0],e[1]-t[1]],subtract3=(e,t)=>[e[0]-t[0],e[1]-t[1],e[2]-t[2]],dot=(e,t)=>e.map(((r,o)=>e[o]*t[o])).reduce(fnAdd,0),dot2=(e,t)=>e[0]*t[0]+e[1]*t[1],midpoint=(e,t)=>e.map(((e,r)=>(e+t[r])/2)),average=function(){if(0===arguments.length)return[];const e=arguments[0].length>0?arguments[0].length:0,t=Array(e).fill(0);return Array.from(arguments).forEach((e=>t.forEach(((r,o)=>{t[o]+=e[o]||0})))),t.map((e=>e/arguments.length))},lerp=(e,t,r)=>{const o=1-r;return e.map(((e,n)=>e*o+(t[n]||0)*r))},cross2=(e,t)=>e[0]*t[1]-e[1]*t[0],cross3=(e,t)=>[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]],distance=(e,t)=>Math.sqrt(e.map(((r,o)=>(e[o]-t[o])**2)).reduce(fnAdd,0)),distance2=(e,t)=>{const r=e[0]-t[0],o=e[1]-t[1];return Math.sqrt(r*r+o*o)},flip=e=>e.map((e=>-e)),rotate90=e=>[-e[1],e[0]],rotate270=e=>[e[1],-e[0]],degenerate=(e,t=P)=>e.map((e=>Math.abs(e))).reduce(fnAdd,0)<t,parallel=(e,t,r=P)=>1-Math.abs(dot(normalize(e),normalize(t)))<r;var T=Object.freeze({__proto__:null,magnitude:magnitude,magnitude2:magnitude2,magnitude3:magnitude3,magSquared:magSquared,normalize:normalize,normalize2:normalize2,normalize3:normalize3,scale:scale,scale2:scale2,add:add,add2:add2$1,add3:(e,t)=>[e[0]+t[0],e[1]+t[1],e[2]+t[2]],subtract:subtract,subtract2:subtract2,subtract3:subtract3,dot:dot,dot2:dot2,midpoint:midpoint,midpoint2:(e,t)=>scale2(add2$1(e,t),.5),average:average,lerp:lerp,cross2:cross2,cross3:cross3,distance:distance,distance2:distance2,distance3:(e,t)=>{const r=e[0]-t[0],o=e[1]-t[1],n=e[2]-t[2];return Math.sqrt(r*r+o*o+n*n)},flip:flip,rotate90:rotate90,rotate270:rotate270,degenerate:degenerate,parallel:parallel,parallel2:(e,t,r=P)=>Math.abs(cross2(e,t))<r});const B=Object.freeze([1,0,0,0,1,0,0,0,1]),q=Object.freeze(B.concat(0,0,0)),isIdentity3x4=e=>q.map(((t,r)=>Math.abs(t-e[r])<P)).reduce(((e,t)=>e&&t),!0),multiplyMatrix3Vector3=(e,t)=>[e[0]*t[0]+e[3]*t[1]+e[6]*t[2]+e[9],e[1]*t[0]+e[4]*t[1]+e[7]*t[2]+e[10],e[2]*t[0]+e[5]*t[1]+e[8]*t[2]+e[11]],multiplyMatrix3Line3=(e,t,r)=>({vector:[e[0]*t[0]+e[3]*t[1]+e[6]*t[2],e[1]*t[0]+e[4]*t[1]+e[7]*t[2],e[2]*t[0]+e[5]*t[1]+e[8]*t[2]],origin:[e[0]*r[0]+e[3]*r[1]+e[6]*r[2]+e[9],e[1]*r[0]+e[4]*r[1]+e[7]*r[2]+e[10],e[2]*r[0]+e[5]*r[1]+e[8]*r[2]+e[11]]}),multiplyMatrices3=(e,t)=>[e[0]*t[0]+e[3]*t[1]+e[6]*t[2],e[1]*t[0]+e[4]*t[1]+e[7]*t[2],e[2]*t[0]+e[5]*t[1]+e[8]*t[2],e[0]*t[3]+e[3]*t[4]+e[6]*t[5],e[1]*t[3]+e[4]*t[4]+e[7]*t[5],e[2]*t[3]+e[5]*t[4]+e[8]*t[5],e[0]*t[6]+e[3]*t[7]+e[6]*t[8],e[1]*t[6]+e[4]*t[7]+e[7]*t[8],e[2]*t[6]+e[5]*t[7]+e[8]*t[8],e[0]*t[9]+e[3]*t[10]+e[6]*t[11]+e[9],e[1]*t[9]+e[4]*t[10]+e[7]*t[11]+e[10],e[2]*t[9]+e[5]*t[10]+e[8]*t[11]+e[11]],determinant3=e=>e[0]*e[4]*e[8]-e[0]*e[7]*e[5]-e[3]*e[1]*e[8]+e[3]*e[7]*e[2]+e[6]*e[1]*e[5]-e[6]*e[4]*e[2],invertMatrix3=e=>{const t=determinant3(e);if(Math.abs(t)<1e-6||Number.isNaN(t)||!Number.isFinite(e[9])||!Number.isFinite(e[10])||!Number.isFinite(e[11]))return;const r=[e[4]*e[8]-e[7]*e[5],-e[1]*e[8]+e[7]*e[2],e[1]*e[5]-e[4]*e[2],-e[3]*e[8]+e[6]*e[5],e[0]*e[8]-e[6]*e[2],-e[0]*e[5]+e[3]*e[2],e[3]*e[7]-e[6]*e[4],-e[0]*e[7]+e[6]*e[1],e[0]*e[4]-e[3]*e[1],-e[3]*e[7]*e[11]+e[3]*e[8]*e[10]+e[6]*e[4]*e[11]-e[6]*e[5]*e[10]-e[9]*e[4]*e[8]+e[9]*e[5]*e[7],e[0]*e[7]*e[11]-e[0]*e[8]*e[10]-e[6]*e[1]*e[11]+e[6]*e[2]*e[10]+e[9]*e[1]*e[8]-e[9]*e[2]*e[7],-e[0]*e[4]*e[11]+e[0]*e[5]*e[10]+e[3]*e[1]*e[11]-e[3]*e[2]*e[10]-e[9]*e[1]*e[5]+e[9]*e[2]*e[4]],o=1/t;return r.map((e=>e*o))},makeMatrix3Translate=(e=0,t=0,r=0)=>B.concat(e,t,r),singleAxisRotate=(e,t,r,o,n)=>{const s=B.concat([0,1,2].map((e=>t[e]||0))),c=Math.cos(e),a=Math.sin(e);return s[3*r+r]=c,s[3*r+o]=(n?1:-1)*a,s[3*o+r]=(n?-1:1)*a,s[3*o+o]=c,s},makeMatrix3RotateX=(e,t=[0,0,0])=>singleAxisRotate(e,t,1,2,!0),makeMatrix3RotateY=(e,t=[0,0,0])=>singleAxisRotate(e,t,0,2,!1),makeMatrix3RotateZ=(e,t=[0,0,0])=>singleAxisRotate(e,t,0,1,!0),makeMatrix3Rotate=(e,t=[0,0,1],r=[0,0,0])=>{const o=[0,1,2].map((e=>r[e]||0)),[n,s,c]=resize(3,normalize(t)),a=Math.cos(e),i=Math.sin(e),l=1-a,d=B.concat(-o[0],-o[1],-o[2]),u=B.concat(o[0],o[1],o[2]);return multiplyMatrices3(u,multiplyMatrices3([l*n*n+a,l*s*n+c*i,l*c*n-s*i,l*n*s-c*i,l*s*s+a,l*c*s+n*i,l*n*c+s*i,l*s*c-n*i,l*c*c+a,0,0,0],d))},makeMatrix3Scale=(e=[1,1,1],t=[0,0,0])=>[e[0],0,0,0,e[1],0,0,0,e[2],e[0]*-t[0]+t[0],e[1]*-t[1]+t[1],e[2]*-t[2]+t[2]],makeMatrix3ReflectZ=(e,t=[0,0])=>{const r=Math.atan2(e[1],e[0]),o=Math.cos(r),n=Math.sin(r),s=Math.cos(-r),c=Math.sin(-r),a=o*s+n*c,i=o*-c+n*s,l=n*s+-o*c,d=n*-c+-o*s;return[a,i,0,l,d,0,0,0,1,t[0]+a*-t[0]+-t[1]*l,t[1]+i*-t[0]+-t[1]*d,0]};var R=Object.freeze({__proto__:null,identity3x3:B,identity3x4:q,isIdentity3x4:isIdentity3x4,multiplyMatrix3Vector3:multiplyMatrix3Vector3,multiplyMatrix3Line3:multiplyMatrix3Line3,multiplyMatrices3:multiplyMatrices3,determinant3:determinant3,invertMatrix3:invertMatrix3,makeMatrix3Translate:makeMatrix3Translate,makeMatrix3RotateX:makeMatrix3RotateX,makeMatrix3RotateY:makeMatrix3RotateY,makeMatrix3RotateZ:makeMatrix3RotateZ,makeMatrix3Rotate:makeMatrix3Rotate,makeMatrix3Scale:makeMatrix3Scale,makeMatrix3ReflectZ:makeMatrix3ReflectZ});const vectorOriginForm=(e,t)=>({vector:e||[],origin:t||[]}),getVector=function(){if(arguments[0]instanceof j.vector)return arguments[0];let e=flattenArrays(arguments);return e.length>0&&"object"==typeof e[0]&&null!==e[0]&&!Number.isNaN(e[0].x)&&(e=["x","y","z"].map((t=>e[0][t])).filter(fnNotUndefined)),e.filter((e=>"number"==typeof e))},getVectorOfVectors=function(){return semiFlattenArrays(arguments).map((e=>getVector(e)))},getSegment=function(){if(arguments[0]instanceof j.segment)return arguments[0];const e=semiFlattenArrays(arguments);return 4===e.length?[[e[0],e[1]],[e[2],e[3]]]:e.map((e=>getVector(e)))},getLine$1=function(){const e=semiFlattenArrays(arguments);return 0===e.length?vectorOriginForm([],[]):e[0]instanceof j.line||e[0]instanceof j.ray||e[0]instanceof j.segment?e[0]:e[0].constructor===Object&&void 0!==e[0].vector?vectorOriginForm(e[0].vector||[],e[0].origin||[]):"number"==typeof e[0]?vectorOriginForm(getVector(e)):vectorOriginForm(...e.map((e=>getVector(e))))},U=getLine$1,getRectParams=(e=0,t=0,r=0,o=0)=>({x:e,y:t,width:r,height:o}),getRect=function(){if(arguments[0]instanceof j.rect)return arguments[0];const e=flattenArrays(arguments);if(e.length>0&&"object"==typeof e[0]&&null!==e[0]&&!Number.isNaN(e[0].width))return getRectParams(...["x","y","width","height"].map((t=>e[0][t])).filter(fnNotUndefined));const t=e.filter((e=>"number"==typeof e)),r=t.length<4?[,,...t]:t;return getRectParams(...r)},getCircleParams=(e=1,...t)=>({radius:e,origin:[...t]}),getCircle=function(){if(arguments[0]instanceof j.circle)return arguments[0];const e=getVectorOfVectors(arguments),t=flattenArrays(arguments).filter((e=>"number"==typeof e));if(2===arguments.length){if(1===e[1].length)return getCircleParams(e[1][0],...e[0]);if(1===e[0].length)return getCircleParams(e[0][0],...e[1]);if(e[0].length>1&&e[1].length>1)return getCircleParams(distance2(...e),...e[0])}else switch(t.length){case 0:return getCircleParams(1,0,0,0);case 1:return getCircleParams(t[0],0,0,0);default:return getCircleParams(t.pop(),...t)}return getCircleParams(1,0,0,0)},D=[[0,1,3,4,9,10],[0,1,2,3,4,5,6,7,8,9,10,11],[0,1,2,void 0,3,4,5,void 0,6,7,8,void 0,9,10,11]];[11,7,3].forEach((e=>delete D[2][e]));const matrixMap3x4=e=>{let t;return t=e<8?0:e<13?1:2,D[t]},getMatrix3x4=function(){const e=flattenArrays(arguments),t=[...q];return matrixMap3x4(e.length).forEach(((r,o)=>{null!=e[o]&&(t[r]=e[o])})),t};var G=Object.freeze({__proto__:null,getVector:getVector,getVectorOfVectors:getVectorOfVectors,getSegment:getSegment,getLine:getLine$1,getRay:U,getRectParams:getRectParams,getRect:getRect,getCircle:getCircle,getMatrix3x4:getMatrix3x4});const rayLineToUniqueLine=({vector:e,origin:t})=>{const r=magnitude(e),o=rotate90(e),n=dot(t,o)/r;return{normal:scale(o,1/r),distance:n}},uniqueLineToRayLine=({normal:e,distance:t})=>({vector:rotate270(e),origin:scale(e,t)});var W=Object.freeze({__proto__:null,rayLineToUniqueLine:rayLineToUniqueLine,uniqueLineToRayLine:uniqueLineToRayLine});const smallestComparisonSearch=(e,t,r)=>{const o=t.map(((t,o)=>({o:t,i:o,d:r(e,t)})));let n,s=1/0;for(let e=0;e<o.length;e+=1)o[e].d<s&&(n=e,s=o[e].d);return n},minimum2DPointIndex=(e,t=P)=>{const r=((e,t=fnEpsilonSort,r=P)=>{let o=[0];for(let n=1;n<e.length;n+=1)switch(t(e[n][0],e[o[0]][0],r)){case 0:o.push(n);break;case 1:o=[n]}return o})(e,fnEpsilonSort,t);let o=0;for(let t=1;t<r.length;t+=1)e[r[t]][1]<e[r[o]][1]&&(o=t);return r[o]},nearestPointOnLine=(e,t,r,o,n=P)=>{t=resize(e.length,t),r=resize(e.length,r);const s=magSquared(e),c=subtract(r,t),a=o(dot(e,c)/s,n);return add(t,scale(e,a))},nearestPointOnPolygon=(e,t)=>{const r=e.map(((e,t,r)=>subtract(r[(t+1)%r.length],e)));return e.map(((e,o)=>nearestPointOnLine(r[o],e,t,segmentLimiter))).map(((e,r)=>({point:e,i:r,distance:distance(e,t)}))).sort(((e,t)=>e.distance-t.distance)).shift()},nearestPointOnCircle=(e,t,r)=>add(t,scale(normalize(subtract(r,t)),e));var Z=Object.freeze({__proto__:null,smallestComparisonSearch:smallestComparisonSearch,minimum2DPointIndex:minimum2DPointIndex,nearestPoint2:(e,t)=>{const r=smallestComparisonSearch(e,t,distance2);return void 0===r?void 0:t[r]},nearestPoint:(e,t)=>{const r=smallestComparisonSearch(e,t,distance);return void 0===r?void 0:t[r]},nearestPointOnLine:nearestPointOnLine,nearestPointOnPolygon:nearestPointOnPolygon,nearestPointOnCircle:nearestPointOnCircle});const clusterIndicesOfSortedNumbers=(e,t=P)=>{const r=[[0]];let o=0;for(let n=1;n<e.length;n+=1)fnEpsilonEqual(e[n],e[n-1],t)?r[o].push(n):(o=r.length,r.push([n]));return r},radialSortPointIndices=(e=[],t=P)=>{const r=minimum2DPointIndex(e,t),o=e.map((t=>subtract2(t,e[r]))).map((e=>normalize2(e))).map((e=>dot2([0,1],e))),n=o.map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).map((e=>e.i)).filter((e=>e!==r));return[[r]].concat(clusterIndicesOfSortedNumbers(n.map((e=>o[e])),t).map((e=>e.map((e=>n[e])))).map((t=>1===t.length?t:t.map((t=>({i:t,len:distance2(e[t],e[r])}))).sort(((e,t)=>e.len-t.len)).map((e=>e.i)))))};var Y=Object.freeze({__proto__:null,sortPointsAlongVector2:(e,t)=>e.map((e=>({point:e,d:e[0]*t[0]+e[1]*t[1]}))).sort(((e,t)=>e.d-t.d)).map((e=>e.point)),clusterIndicesOfSortedNumbers:clusterIndicesOfSortedNumbers,radialSortPointIndices:radialSortPointIndices});const H=[1,0,0,1],J=H.concat(0,0),determinant2=e=>e[0]*e[3]-e[1]*e[2],makeMatrix2Rotate=(e,t=[0,0])=>{const r=Math.cos(e),o=Math.sin(e);return[r,o,-o,r,t[0],t[1]]};var X=Object.freeze({__proto__:null,identity2x2:H,identity2x3:J,multiplyMatrix2Vector2:(e,t)=>[e[0]*t[0]+e[2]*t[1]+e[4],e[1]*t[0]+e[3]*t[1]+e[5]],multiplyMatrix2Line2:(e,t,r)=>({vector:[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1]],origin:[e[0]*r[0]+e[2]*r[1]+e[4],e[1]*r[0]+e[3]*r[1]+e[5]]}),multiplyMatrices2:(e,t)=>[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1],e[0]*t[2]+e[2]*t[3],e[1]*t[2]+e[3]*t[3],e[0]*t[4]+e[2]*t[5]+e[4],e[1]*t[4]+e[3]*t[5]+e[5]],determinant2:determinant2,invertMatrix2:e=>{const t=determinant2(e);if(!(Math.abs(t)<1e-6||Number.isNaN(t))&&Number.isFinite(e[4])&&Number.isFinite(e[5]))return[e[3]/t,-e[1]/t,-e[2]/t,e[0]/t,(e[2]*e[5]-e[3]*e[4])/t,(e[1]*e[4]-e[0]*e[5])/t]},makeMatrix2Translate:(e=0,t=0)=>H.concat(e,t),makeMatrix2Scale:(e=[1,1],t=[0,0])=>[e[0],0,0,e[1],e[0]*-t[0]+t[0],e[1]*-t[1]+t[1]],makeMatrix2Rotate:makeMatrix2Rotate,makeMatrix2Reflect:(e,t=[0,0])=>{const r=Math.atan2(e[1],e[0]),o=Math.cos(r),n=Math.sin(r),s=Math.cos(-r),c=Math.sin(-r),a=o*s+n*c,i=o*-c+n*s,l=n*s+-o*c,d=n*-c+-o*s;return[a,i,l,d,t[0]+a*-t[0]+-t[1]*l,t[1]+i*-t[0]+-t[1]*d]}});const K=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),multiplyMatrices4=(e,t)=>[e[0]*t[0]+e[4]*t[1]+e[8]*t[2]+e[12]*t[3],e[1]*t[0]+e[5]*t[1]+e[9]*t[2]+e[13]*t[3],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]+e[14]*t[3],e[3]*t[0]+e[7]*t[1]+e[11]*t[2]+e[15]*t[3],e[0]*t[4]+e[4]*t[5]+e[8]*t[6]+e[12]*t[7],e[1]*t[4]+e[5]*t[5]+e[9]*t[6]+e[13]*t[7],e[2]*t[4]+e[6]*t[5]+e[10]*t[6]+e[14]*t[7],e[3]*t[4]+e[7]*t[5]+e[11]*t[6]+e[15]*t[7],e[0]*t[8]+e[4]*t[9]+e[8]*t[10]+e[12]*t[11],e[1]*t[8]+e[5]*t[9]+e[9]*t[10]+e[13]*t[11],e[2]*t[8]+e[6]*t[9]+e[10]*t[10]+e[14]*t[11],e[3]*t[8]+e[7]*t[9]+e[11]*t[10]+e[15]*t[11],e[0]*t[12]+e[4]*t[13]+e[8]*t[14]+e[12]*t[15],e[1]*t[12]+e[5]*t[13]+e[9]*t[14]+e[13]*t[15],e[2]*t[12]+e[6]*t[13]+e[10]*t[14]+e[14]*t[15],e[3]*t[12]+e[7]*t[13]+e[11]*t[14]+e[15]*t[15]],determinant4=e=>{const t=e[10]*e[15]-e[11]*e[14],r=e[9]*e[15]-e[11]*e[13],o=e[9]*e[14]-e[10]*e[13],n=e[8]*e[15]-e[11]*e[12],s=e[8]*e[14]-e[10]*e[12],c=e[8]*e[13]-e[9]*e[12];return e[0]*(e[5]*t-e[6]*r+e[7]*o)-e[1]*(e[4]*t-e[6]*n+e[7]*s)+e[2]*(e[4]*r-e[5]*n+e[7]*c)-e[3]*(e[4]*o-e[5]*s+e[6]*c)},Q=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0]),makeMatrix4Translate=(e=0,t=0,r=0)=>[...Q,e,t,r,1],singleAxisRotate4=(e,t,r,o,n)=>{const s=makeMatrix4Translate(...t),c=Math.cos(e),a=Math.sin(e);return s[4*r+r]=c,s[4*r+o]=(n?1:-1)*a,s[4*o+r]=(n?-1:1)*a,s[4*o+o]=c,s};var ee=Object.freeze({__proto__:null,identity4x4:K,isIdentity4x4:e=>K.map(((t,r)=>Math.abs(t-e[r])<P)).reduce(((e,t)=>e&&t),!0),multiplyMatrix4Vector3:(e,t)=>[e[0]*t[0]+e[4]*t[1]+e[8]*t[2]+e[12],e[1]*t[0]+e[5]*t[1]+e[9]*t[2]+e[13],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]+e[14]],multiplyMatrix4Line3:(e,t,r)=>({vector:[e[0]*t[0]+e[4]*t[1]+e[8]*t[2],e[1]*t[0]+e[5]*t[1]+e[9]*t[2],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]],origin:[e[0]*r[0]+e[4]*r[1]+e[8]*r[2]+e[12],e[1]*r[0]+e[5]*r[1]+e[9]*r[2]+e[13],e[2]*r[0]+e[6]*r[1]+e[10]*r[2]+e[14]]}),multiplyMatrices4:multiplyMatrices4,determinant4:determinant4,invertMatrix4:e=>{const t=determinant4(e);if(Math.abs(t)<1e-6||Number.isNaN(t)||!Number.isFinite(e[12])||!Number.isFinite(e[13])||!Number.isFinite(e[14]))return;const r=e[10]*e[15]-e[11]*e[14],o=e[9]*e[15]-e[11]*e[13],n=e[9]*e[14]-e[10]*e[13],s=e[8]*e[15]-e[11]*e[12],c=e[8]*e[14]-e[10]*e[12],a=e[8]*e[13]-e[9]*e[12],i=e[6]*e[15]-e[7]*e[14],l=e[5]*e[15]-e[7]*e[13],d=e[5]*e[14]-e[6]*e[13],u=e[6]*e[11]-e[7]*e[10],m=e[5]*e[11]-e[7]*e[9],g=e[5]*e[10]-e[6]*e[9],p=e[4]*e[15]-e[7]*e[12],h=e[4]*e[14]-e[6]*e[12],v=e[4]*e[11]-e[7]*e[8],_=e[4]*e[10]-e[6]*e[8],y=e[4]*e[13]-e[5]*e[12],b=e[4]*e[9]-e[5]*e[8],E=[+(e[5]*r-e[6]*o+e[7]*n),-(e[1]*r-e[2]*o+e[3]*n),+(e[1]*i-e[2]*l+e[3]*d),-(e[1]*u-e[2]*m+e[3]*g),-(e[4]*r-e[6]*s+e[7]*c),+(e[0]*r-e[2]*s+e[3]*c),-(e[0]*i-e[2]*p+e[3]*h),+(e[0]*u-e[2]*v+e[3]*_),+(e[4]*o-e[5]*s+e[7]*a),-(e[0]*o-e[1]*s+e[3]*a),+(e[0]*l-e[1]*p+e[3]*y),-(e[0]*m-e[1]*v+e[3]*b),-(e[4]*n-e[5]*c+e[6]*a),+(e[0]*n-e[1]*c+e[2]*a),-(e[0]*d-e[1]*h+e[2]*y),+(e[0]*g-e[1]*_+e[2]*b)],x=1/t;return E.map((e=>e*x))},makeMatrix4Translate:makeMatrix4Translate,makeMatrix4RotateX:(e,t=[0,0,0])=>singleAxisRotate4(e,t,1,2,!0),makeMatrix4RotateY:(e,t=[0,0,0])=>singleAxisRotate4(e,t,0,2,!1),makeMatrix4RotateZ:(e,t=[0,0,0])=>singleAxisRotate4(e,t,0,1,!0),makeMatrix4Rotate:(e,t=[0,0,1],r=[0,0,0])=>{const o=[0,1,2].map((e=>r[e]||0)),[n,s,c]=resize(3,normalize(t)),a=Math.cos(e),i=Math.sin(e),l=1-a,d=makeMatrix4Translate(-o[0],-o[1],-o[2]),u=makeMatrix4Translate(o[0],o[1],o[2]);return multiplyMatrices4(u,multiplyMatrices4([l*n*n+a,l*s*n+c*i,l*c*n-s*i,0,l*n*s-c*i,l*s*s+a,l*c*s+n*i,0,l*n*c+s*i,l*s*c-n*i,l*c*c+a,0,0,0,0,1],d))},makeMatrix4Scale:(e=[1,1,1],t=[0,0,0])=>[e[0],0,0,0,0,e[1],0,0,0,0,e[2],0,e[0]*-t[0]+t[0],e[1]*-t[1]+t[1],e[2]*-t[2]+t[2],1],makeMatrix4ReflectZ:(e,t=[0,0])=>{const r=Math.atan2(e[1],e[0]),o=Math.cos(r),n=Math.sin(r),s=Math.cos(-r),c=Math.sin(-r),a=o*s+n*c,i=o*-c+n*s,l=n*s+-o*c,d=n*-c+-o*s;return[a,i,0,0,l,d,0,0,0,0,1,0,t[0]+a*-t[0]+-t[1]*l,t[1]+i*-t[0]+-t[1]*d,0,1]},makePerspectiveMatrix4:(e,t,r,o)=>{const n=Math.tan(.5*Math.PI-.5*e),s=1/(r-o);return[n/t,0,0,0,0,n,0,0,0,0,(r+o)*s,-1,0,0,r*o*s*2,0]},makeOrthographicMatrix4:(e,t,r,o,n,s)=>[2/(t-o),0,0,0,0,2/(e-r),0,0,0,0,2/(n-s),0,(o+t)/(o-t),(r+e)/(r-e),(n+s)/(n-s),1],makeLookAtMatrix4:(e,t,r)=>{const o=normalize3(subtract3(e,t)),n=normalize3(cross3(r,o)),s=normalize3(cross3(o,n));return[n[0],n[1],n[2],0,s[0],s[1],s[2],0,o[0],o[1],o[2],0,e[0],e[1],e[2],1]}});var te=Object.freeze({__proto__:null,quaternionFromTwoVectors:(e,t)=>{const r=cross3(e,t),o=[r[0],r[1],r[2],dot(e,t)];return o[3]+=magnitude(o),normalize(o)},matrix4FromQuaternion:e=>multiplyMatrices4([e[3],e[2],-e[1],e[0],-e[2],e[3],e[0],e[1],e[1],-e[0],e[3],e[2],-e[0],-e[1],-e[2],e[3]],[e[3],e[2],-e[1],-e[0],-e[2],e[3],e[0],-e[1],e[1],-e[0],e[3],-e[2],e[0],e[1],e[2],e[3]])});const overlapConvexPolygonPoint=(e,t,r=exclude,o=P)=>e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>cross2(normalize(subtract(e[1],e[0])),subtract(t,e[0])))).map((e=>r(e,o))).map(((e,t,r)=>e===r[0])).reduce(((e,t)=>e&&t),!0),linePointFromParameter=(e,t,r)=>add(t,scale(e,r)),getIntersectParameters=(e,t,r,o,n)=>e.map(((e,t,r)=>[subtract(r[(t+1)%r.length],e),e])).map((e=>((e,t,r,o,n=includeS,s=P)=>{const c=cross2(normalize(e),normalize(r));if(Math.abs(c)<s)return;const a=cross2(e,r),i=-a,l=subtract(o,t),d=flip(l),u=cross2(l,r)/a;return n(cross2(d,e)/i,s/magnitude(r))?u:void 0})(t,r,e[0],e[1],o,n))).filter(fnNotUndefined).sort(((e,t)=>e-t)),clipLineConvexPolygon=(e,t,r,o=include,n=L,s=P)=>{const c=getIntersectParameters(e,t,r,includeS,s);if(c.length<2)return;const a=((e,t,r)=>{let o=0,n=e.length-1;for(;o<n&&!t(e[o+1]-e[o],r);)o+=1;for(;n>o&&!t(e[n]-e[n-1],r);)n-=1;if(!(o>=n))return[e[o],e[n]]})(c,o,2*s/magnitude(t));if(void 0===a)return;const i=a.map((e=>n(e)?e:e<.5?0:1));if(Math.abs(i[0]-i[1])<2*s/magnitude(t))return;const l=linePointFromParameter(t,r,(i[0]+i[1])/2);return overlapConvexPolygonPoint(e,l,o,s)?i.map((e=>linePointFromParameter(t,r,e))):void 0},clockwiseAngleRadians=(e,t)=>{for(;e<0;)e+=z;for(;t<0;)t+=z;for(;e>z;)e-=z;for(;t>z;)t-=z;const r=e-t;return r>=0?r:z-(t-e)},counterClockwiseAngleRadians=(e,t)=>{for(;e<0;)e+=z;for(;t<0;)t+=z;for(;e>z;)e-=z;for(;t>z;)t-=z;const r=t-e;return r>=0?r:z-(e-t)},clockwiseAngle2=(e,t)=>{const r=t[0]*e[0]+t[1]*e[1],o=t[0]*e[1]-t[1]*e[0];let n=Math.atan2(o,r);return n<0&&(n+=z),n},counterClockwiseAngle2=(e,t)=>{const r=e[0]*t[0]+e[1]*t[1],o=e[0]*t[1]-e[1]*t[0];let n=Math.atan2(o,r);return n<0&&(n+=z),n},clockwiseBisect2=(e,t)=>fnToVec2(fnVec2Angle(e)-clockwiseAngle2(e,t)/2),counterClockwiseBisect2=(e,t)=>fnToVec2(fnVec2Angle(e)+counterClockwiseAngle2(e,t)/2),clockwiseSubsectRadians=(e,t,r)=>{const o=clockwiseAngleRadians(t,r)/e;return Array.from(Array(e-1)).map(((e,r)=>t+o*(r+1)))},counterClockwiseSubsectRadians=(e,t,r)=>{const o=counterClockwiseAngleRadians(t,r)/e;return Array.from(Array(e-1)).map(((e,r)=>t+o*(r+1)))},clockwiseSubsect2=(e,t,r)=>{const o=Math.atan2(t[1],t[0]),n=Math.atan2(r[1],r[0]);return clockwiseSubsectRadians(e,o,n).map(fnToVec2)},counterClockwiseSubsect2=(e,t,r)=>{const o=Math.atan2(t[1],t[0]),n=Math.atan2(r[1],r[0]);return counterClockwiseSubsectRadians(e,o,n).map(fnToVec2)},bisectLines2=(e,t,r,o,n=P)=>{const s=cross2(e,r),c=dot(e,r),a=s>-n?[counterClockwiseBisect2(e,r)]:[clockwiseBisect2(e,r)];a[1]=s>-n?rotate90(a[0]):rotate270(a[0]);const i=((o[0]-t[0])*r[1]-r[0]*(o[1]-t[1]))/s,l=[e,r].map((e=>normalize(e))),d=Math.abs(cross2(...l))<n,u=d?midpoint(t,o):[t[0]+e[0]*i,t[1]+e[1]*i],m=a.map((e=>({vector:e,origin:u})));return d&&delete m[c>-n?1:0],m},counterClockwiseOrderRadians=function(){const e=Array.from(arguments).flat(),t=e.map(((e,t)=>t)).sort(((t,r)=>e[t]-e[r]));return t.slice(t.indexOf(0),t.length).concat(t.slice(0,t.indexOf(0)))},counterClockwiseSectorsRadians=function(){const e=Array.from(arguments).flat(),t=counterClockwiseOrderRadians(e).map((t=>e[t]));return t.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>counterClockwiseAngleRadians(e[0],e[1])))},threePointTurnDirection=(e,t,r,o=P)=>{const n=normalize2(subtract2(t,e)),s=normalize2(subtract2(r,e)),c=cross2(n,s);return fnEpsilonEqual(c,0,o)?fnEpsilonEqual(distance2(e,t)+distance2(t,r),distance2(e,r))?0:void 0:Math.sign(c)};var re=Object.freeze({__proto__:null,isCounterClockwiseBetween:(e,t,r)=>{for(;r<t;)r+=z;for(;e>t;)e-=z;for(;e<t;)e+=z;return e<r},clockwiseAngleRadians:clockwiseAngleRadians,counterClockwiseAngleRadians:counterClockwiseAngleRadians,clockwiseAngle2:clockwiseAngle2,counterClockwiseAngle2:counterClockwiseAngle2,clockwiseBisect2:clockwiseBisect2,counterClockwiseBisect2:counterClockwiseBisect2,clockwiseSubsectRadians:clockwiseSubsectRadians,counterClockwiseSubsectRadians:counterClockwiseSubsectRadians,clockwiseSubsect2:clockwiseSubsect2,counterClockwiseSubsect2:counterClockwiseSubsect2,bisectLines2:bisectLines2,counterClockwiseOrderRadians:counterClockwiseOrderRadians,counterClockwiseOrder2:function(){return counterClockwiseOrderRadians(semiFlattenArrays(arguments).map(fnVec2Angle))},counterClockwiseSectorsRadians:counterClockwiseSectorsRadians,counterClockwiseSectors2:function(){return counterClockwiseSectorsRadians(getVectorOfVectors(arguments).map(fnVec2Angle))},threePointTurnDirection:threePointTurnDirection});const convexHullIndices=(e=[],t=!1,r=P)=>{if(e.length<2)return[];const o=radialSortPointIndices(e,r).map((e=>1===e.length?e:(e=>e.concat(e.slice(0,-1).reverse()))(e))).flat();o.push(o[0]);const n=[o[0]];let s=1;const c={"-1":()=>n.pop(),1:e=>{n.push(e),s+=1},undefined:()=>{s+=1}};for(c[0]=t?c[1]:c[-1];s<o.length;){if(n.length<2){n.push(o[s]),s+=1;continue}const t=n[n.length-2],a=n[n.length-1],i=o[s];c[threePointTurnDirection(...[t,a,i].map((t=>e[t])),r)](i)}return n.pop(),n},convexHull=(e=[],t=!1,r=P)=>convexHullIndices(e,t,r).map((t=>e[t]));var oe=Object.freeze({__proto__:null,convexHullIndices:convexHullIndices,convexHull:convexHull});const intersectLineLine=(e,t,r,o,n=L,s=L,c=P)=>{const a=cross2(normalize(e),normalize(r));if(Math.abs(a)<c)return;const i=cross2(e,r),l=-i,d=[o[0]-t[0],o[1]-t[1]],u=[-d[0],-d[1]],m=cross2(d,r)/i,g=cross2(u,e)/l;return n(m,c/magnitude(e))&&s(g,c/magnitude(r))?add(t,scale(e,m)):void 0};var ne=Object.freeze({__proto__:null,pleat:(e,t,r)=>{const o=getLine$1(t),n=getLine$1(r);return parallel(o.vector,n.vector)?((e,t,r)=>{const o=Array.from(Array(e-1)).map(((t,r)=>(r+1)/e)).map((e=>lerp(t.origin,r.origin,e))),n=[...t.vector];return o.map((e=>({origin:e,vector:n})))})(e,o,n):((e,t,r)=>{const o=intersectLineLine(t.vector,t.origin,r.vector,r.origin);return(clockwiseAngle2(t.vector,r.vector)<counterClockwiseAngle2(t.vector,r.vector)?clockwiseSubsect2(e,t.vector,r.vector):counterClockwiseSubsect2(e,t.vector,r.vector)).map((e=>({origin:o,vector:e})))})(e,o,n)}});const angleArray=e=>Array.from(Array(Math.floor(e))).map(((t,r)=>z*(r/e))),anglesToVecs=(e,t)=>e.map((e=>[t*Math.cos(e),t*Math.sin(e)])).map((e=>e.map((e=>cleanNumber(e,14))))),makePolygonCircumradius=(e=3,t=1)=>anglesToVecs(angleArray(e),t),makePolygonCircumradiusSide=(e=3,t=1)=>{const r=Math.PI/e,o=angleArray(e).map((e=>e+r));return anglesToVecs(o,t)},circumcircle=function(e,t,r){const o=t[0]-e[0],n=t[1]-e[1],s=r[0]-e[0],c=r[1]-e[1],a=o*(e[0]+t[0])+n*(e[1]+t[1]),i=s*(e[0]+r[0])+c*(e[1]+r[1]),l=2*(o*(r[1]-t[1])-n*(r[0]-t[0]));if(Math.abs(l)<P){const o=Math.min(e[0],t[0],r[0]),n=Math.min(e[1],t[1],r[1]),s=.5*(Math.max(e[0],t[0],r[0])-o),c=.5*(Math.max(e[1],t[1],r[1])-n);return{origin:[o+s,n+c],radius:Math.sqrt(s*s+c*c)}}const d=[(c*a-n*i)/l,(o*i-s*a)/l],u=d[0]-e[0],m=d[1]-e[1];return{origin:d,radius:Math.sqrt(u*u+m*m)}},signedArea=e=>.5*e.map(((e,t,r)=>{const o=r[(t+1)%r.length];return e[0]*o[1]-o[0]*e[1]})).reduce(fnAdd,0),centroid=e=>{const t=1/(6*signedArea(e));return e.map(((e,t,r)=>{const o=r[(t+1)%r.length],n=e[0]*o[1]-o[0]*e[1];return[(e[0]+o[0])*n,(e[1]+o[1])*n]})).reduce(((e,t)=>[e[0]+t[0],e[1]+t[1]]),[0,0]).map((e=>e*t))},boundingBox=(e,t=0)=>{if(!e||!e.length)return;const r=Array(e[0].length).fill(1/0),o=Array(e[0].length).fill(-1/0);e.forEach((e=>e.forEach(((e,n)=>{e<r[n]&&(r[n]=e-t),e>o[n]&&(o[n]=e+t)}))));const n=o.map(((e,t)=>e-r[t]));return{min:r,max:o,span:n}};var se=Object.freeze({__proto__:null,makePolygonCircumradius:makePolygonCircumradius,makePolygonCircumradiusSide:makePolygonCircumradiusSide,makePolygonInradius:(e=3,t=1)=>makePolygonCircumradius(e,t/Math.cos(Math.PI/e)),makePolygonInradiusSide:(e=3,t=1)=>makePolygonCircumradiusSide(e,t/Math.cos(Math.PI/e)),makePolygonSideLength:(e=3,t=1)=>makePolygonCircumradius(e,t/2/Math.sin(Math.PI/e)),makePolygonSideLengthSide:(e=3,t=1)=>makePolygonCircumradiusSide(e,t/2/Math.sin(Math.PI/e)),makePolygonNonCollinear:(e,t=P)=>{const r=e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>subtract(e[1],e[0]))).map(((e,t,r)=>[e,r[(t+r.length-1)%r.length]])).map((e=>!parallel(e[1],e[0],t)));return e.filter(((e,t)=>r[t]))},circumcircle:circumcircle,signedArea:signedArea,centroid:centroid,boundingBox:boundingBox});const overlapLinePoint=(e,t,r,o=N,n=P)=>{const s=subtract(r,t),c=magSquared(e),a=Math.sqrt(c);if(a<n)return!1;const i=cross2(s,e.map((e=>e/a))),l=dot(s,e)/c;return Math.abs(i)<n&&o(l,n/a)},splitConvexPolygon=(e,t,r)=>{const o=e.map(((e,o)=>({point:overlapLinePoint(t,r,e,L)?e:null,at_index:o}))).filter((e=>null!=e.point)),n=e.map(((e,o,n)=>({point:intersectLineLine(t,r,subtract(e,n[(o+1)%n.length]),n[(o+1)%n.length],N,excludeS),at_index:o}))).filter((e=>null!=e.point));if(2===n.length){const t=n.slice().sort(((e,t)=>e.at_index-t.at_index)),r=e.slice(t[1].at_index+1).concat(e.slice(0,t[0].at_index+1));r.push(t[0].point),r.push(t[1].point);const o=e.slice(t[0].at_index+1,t[1].at_index+1);return o.push(t[1].point),o.push(t[0].point),[r,o]}if(1===n.length&&1===o.length){o[0].type="v",n[0].type="e";const t=o.concat(n).sort(((e,t)=>e.at_index-t.at_index)),r=e.slice(t[1].at_index+1).concat(e.slice(0,t[0].at_index+1));"e"===t[0].type&&r.push(t[0].point),r.push(t[1].point);const s=e.slice(t[0].at_index+1,t[1].at_index+1);return"e"===t[1].type&&s.push(t[1].point),s.push(t[0].point),[r,s]}if(2===o.length){const t=o.slice().sort(((e,t)=>e.at_index-t.at_index));return[e.slice(t[1].at_index).concat(e.slice(0,t[0].at_index+1)),e.slice(t[0].at_index,t[1].at_index+1)]}return[e.slice()]},recurseSkeleton=(e,t,r)=>{const o=e.map(((e,t)=>({vector:r[t],origin:e}))).map(((e,t,r)=>intersectLineLine(e.vector,e.origin,r[(t+1)%r.length].vector,r[(t+1)%r.length].origin,V,V))),n=t.map(((e,t)=>nearestPointOnLine(e.vector,e.origin,o[t],(e=>e))));if(3===e.length)return e.map((e=>({type:"skeleton",points:[e,o[0]]}))).concat([{type:"perpendicular",points:[n[0],o[0]]}]);const s=o.map(((e,t)=>distance(e,n[t])));let c=0;s.forEach(((e,t)=>{e<s[c]&&(c=t)}));const a=[{type:"skeleton",points:[e[c],o[c]]},{type:"skeleton",points:[e[(c+1)%e.length],o[c]]},{type:"perpendicular",points:[n[c],o[c]]}],i=clockwiseBisect2(flip(t[(c+t.length-1)%t.length].vector),t[(c+1)%t.length].vector),l=c===e.length-1;return e.splice(c,2,o[c]),t.splice(c,1),r.splice(c,2,i),l&&(e.splice(0,1),r.splice(0,1),t.push(t.shift())),a.concat(recurseSkeleton(e,t,r))},straightSkeleton=e=>{const t=e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>({vector:subtract(e[1],e[0]),origin:e[0]}))),r=e.map(((e,t,r)=>[(t-1+r.length)%r.length,t,(t+1)%r.length].map((e=>r[e])))).map((e=>[subtract(e[0],e[1]),subtract(e[2],e[1])])).map((e=>clockwiseBisect2(...e)));return recurseSkeleton([...e],t,r)};var ce=Object.freeze({__proto__:null,collinearBetween:(e,t,r,o=!1,n=P)=>{if([e,r].map((e=>fnEpsilonEqualVectors(t,e))).reduce(((e,t)=>e||t),!1))return o;const s=[[e,t],[t,r]].map((e=>subtract(e[1],e[0]))).map((e=>normalize(e)));return fnEpsilonEqual(1,dot(...s),n)}});var ae=Object.freeze({__proto__:null,enclosingBoundingBoxes:(e,t)=>{const r=Math.min(e.min.length,t.min.length);for(let o=0;o<r;o+=1)if(t.min[o]<e.min[o]||t.max[o]>e.max[o])return!1;return!0},enclosingPolygonPolygon:(e,t,r=include)=>{const o=e.map((e=>overlapConvexPolygonPoint(t,e,r))).reduce(((e,t)=>e||t),!1),n=t.map((e=>overlapConvexPolygonPoint(t,e,r))).reduce(((e,t)=>e&&t),!0);return!o&&n}});const rotateVector2=(e,t,r)=>{const o=t[0]-e[0],n=t[1]-e[1],s=o*Math.cos(r)+n*Math.sin(r),c=n*Math.cos(r)-o*Math.sin(r);return[e[0]+s,e[1]+c]},intersectCircleCircle=(e,t,r,o,n=P)=>{const s=e<r?e:r,c=e<r?r:e,a=e<r?t:o,i=e<r?o:t,l=[a[0]-i[0],a[1]-i[1]],d=Math.sqrt(l[0]**2+l[1]**2);if(d<n)return;const u=l.map(((e,t)=>e/d*c+i[t]));if(Math.abs(c+s-d)<n||Math.abs(c-(s+d))<n)return[u];if(d+s<c||c+s<d)return;const m=(g=(s*s-d*d-c*c)/(-2*d*c))>=1?0:g<=-1?Math.PI:Math.acos(g);var g;return[rotateVector2(i,u,+m),rotateVector2(i,u,-m)]},intersectCircleLine=(e,t,r,o,n=L,s=P)=>{const c=r[0]**2+r[1]**2,a=Math.sqrt(c),i=0===a?r:r.map((e=>e/a)),l=rotate90(i),d=subtract(o,t),u=cross2(d,i);if(Math.abs(u)>e+s)return;const m=Math.sqrt(e**2-u**2),f=(e,r)=>t[r]-l[r]*u+i[r]*e,g=Math.abs(e-Math.abs(u))<s?[m].map((e=>[e,e].map(f))):[-m,m].map((e=>[e,e].map(f))),p=g.map((e=>e.map(((e,t)=>e-o[t])))).map((e=>e[0]*r[0]+r[1]*e[1])).map((e=>e/c));return g.filter(((e,t)=>n(p[t],s)))},getUniquePair=e=>{for(let t=1;t<e.length;t+=1)if(!fnEpsilonEqualVectors(e[0],e[t]))return[e[0],e[t]]},intersectConvexPolygonLineInclusive=(e,t,r,o=includeS,n=L,s=P)=>{const c=e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>intersectLineLine(subtract(e[1],e[0]),e[0],t,r,o,n,s))).filter((e=>void 0!==e));switch(c.length){case 0:return;case 1:return[c];default:return getUniquePair(c)||[c[0]]}},intersectConvexPolygonLine=(e,t,r,o=includeS,n=N,s=P)=>{const c=intersectConvexPolygonLineInclusive(e,t,r,o,n,s);let a;switch(n){case V:a=$;break;case excludeS:a=includeS;break;default:return c}const i=intersectConvexPolygonLineInclusive(e,t,r,includeS,a,s);if(void 0===i)return;const l=getUniquePair(i);if(void 0===l)switch(n){case V:return overlapConvexPolygonPoint(e,r,exclude,s)?i:void 0;case excludeS:return overlapConvexPolygonPoint(e,add(r,t),exclude,s)||overlapConvexPolygonPoint(e,r,exclude,s)?i:void 0;default:return}return overlapConvexPolygonPoint(e,midpoint(...l),exclude,s)?l:c},ie={polygon:e=>[e],rect:e=>[e],circle:e=>[e.radius,e.origin],line:e=>[e.vector,e.origin],ray:e=>[e.vector,e.origin],segment:e=>[e.vector,e.origin]},le={polygon:{line:(e,t,r,o,n)=>intersectConvexPolygonLine(...e,...t,includeS,o,n),ray:(e,t,r,o,n)=>intersectConvexPolygonLine(...e,...t,includeS,o,n),segment:(e,t,r,o,n)=>intersectConvexPolygonLine(...e,...t,includeS,o,n)},circle:{circle:(e,t,r,o,n)=>intersectCircleCircle(...e,...t,n),line:(e,t,r,o,n)=>intersectCircleLine(...e,...t,o,n),ray:(e,t,r,o,n)=>intersectCircleLine(...e,...t,o,n),segment:(e,t,r,o,n)=>intersectCircleLine(...e,...t,o,n)},line:{polygon:(e,t,r,o,n)=>intersectConvexPolygonLine(...t,...e,includeS,r,n),circle:(e,t,r,o,n)=>intersectCircleLine(...t,...e,r,n),line:(e,t,r,o,n)=>intersectLineLine(...e,...t,r,o,n),ray:(e,t,r,o,n)=>intersectLineLine(...e,...t,r,o,n),segment:(e,t,r,o,n)=>intersectLineLine(...e,...t,r,o,n)},ray:{polygon:(e,t,r,o,n)=>intersectConvexPolygonLine(...t,...e,includeS,r,n),circle:(e,t,r,o,n)=>intersectCircleLine(...t,...e,r,n),line:(e,t,r,o,n)=>intersectLineLine(...t,...e,o,r,n),ray:(e,t,r,o,n)=>intersectLineLine(...e,...t,r,o,n),segment:(e,t,r,o,n)=>intersectLineLine(...e,...t,r,o,n)},segment:{polygon:(e,t,r,o,n)=>intersectConvexPolygonLine(...t,...e,includeS,r,n),circle:(e,t,r,o,n)=>intersectCircleLine(...t,...e,r,n),line:(e,t,r,o,n)=>intersectLineLine(...t,...e,o,r,n),ray:(e,t,r,o,n)=>intersectLineLine(...t,...e,o,r,n),segment:(e,t,r,o,n)=>intersectLineLine(...e,...t,r,o,n)}},fe={polygon:"polygon",rect:"polygon",circle:"circle",line:"line",ray:"ray",segment:"segment"},de={polygon:exclude,rect:exclude,circle:exclude,line:N,ray:V,segment:excludeS},intersect$1=function(e,t,r){const o=typeOf(e),n=typeOf(t),s=fe[o],c=fe[n],a=ie[o](e),i=ie[n](t),l=e.domain_function||de[o],d=t.domain_function||de[n];return le[s][c](a,i,l,d,r)},overlapConvexPolygons=(e,t,r=P)=>{for(let o=0;o<2;o+=1){const n=0===o?e:t,s=0===o?t:e;for(let e=0;e<n.length;e+=1){const t=n[e],o=rotate90(subtract(n[(e+1)%n.length],n[e])),c=s.map((e=>subtract(e,t))).map((e=>dot(o,e))),a=n[(e+2)%n.length],i=dot(o,subtract(a,t))>0;if(c.map((e=>i?e<r:e>-r)).reduce(((e,t)=>e&&t),!0))return!1}}return!0},overlapCirclePoint=(e,t,r,o=exclude,n=P)=>o(e-distance2(t,r),n),overlapLineLine=(e,t,r,o,n=N,s=N,c=P)=>{const a=cross2(e,r),i=-a,l=[o[0]-t[0],o[1]-t[1]];if(Math.abs(a)<c){if(Math.abs(cross2(l,e))>c)return!1;const t=l,o=add(t,r),n=dot(e,e),s=dot(t,e)/n,a=dot(o,e)/n;return!((s<a?s:a)>1-c)&&!((s<a?a:s)<c)}const d=[-l[0],-l[1]],u=cross2(l,r)/a,m=cross2(d,e)/i;return n(u,c/magnitude(e))&&s(m,c/magnitude(r))},ue={polygon:e=>[e],rect:e=>[e],circle:e=>[e.radius,e.origin],line:e=>[e.vector,e.origin],ray:e=>[e.vector,e.origin],segment:e=>[e.vector,e.origin],vector:e=>[e]},me={polygon:{polygon:(e,t,r,o,n)=>overlapConvexPolygons(...e,...t,n),vector:(e,t,r,o,n)=>overlapConvexPolygonPoint(...e,...t,r,n)},circle:{vector:(e,t,r,o,n)=>overlapCirclePoint(...e,...t,exclude,n)},line:{line:(e,t,r,o,n)=>overlapLineLine(...e,...t,r,o,n),ray:(e,t,r,o,n)=>overlapLineLine(...e,...t,r,o,n),segment:(e,t,r,o,n)=>overlapLineLine(...e,...t,r,o,n),vector:(e,t,r,o,n)=>overlapLinePoint(...e,...t,r,n)},ray:{line:(e,t,r,o,n)=>overlapLineLine(...t,...e,o,r,n),ray:(e,t,r,o,n)=>overlapLineLine(...e,...t,r,o,n),segment:(e,t,r,o,n)=>overlapLineLine(...e,...t,r,o,n),vector:(e,t,r,o,n)=>overlapLinePoint(...e,...t,r,n)},segment:{line:(e,t,r,o,n)=>overlapLineLine(...t,...e,o,r,n),ray:(e,t,r,o,n)=>overlapLineLine(...t,...e,o,r,n),segment:(e,t,r,o,n)=>overlapLineLine(...e,...t,r,o,n),vector:(e,t,r,o,n)=>overlapLinePoint(...e,...t,r,n)},vector:{polygon:(e,t,r,o,n)=>overlapConvexPolygonPoint(...t,...e,o,n),circle:(e,t,r,o,n)=>overlapCirclePoint(...t,...e,exclude,n),line:(e,t,r,o,n)=>overlapLinePoint(...t,...e,o,n),ray:(e,t,r,o,n)=>overlapLinePoint(...t,...e,o,n),segment:(e,t,r,o,n)=>overlapLinePoint(...t,...e,o,n),vector:(e,t,r,o,n)=>fnEpsilonEqualVectors(...e,...t,n)}},ge={polygon:"polygon",rect:"polygon",circle:"circle",line:"line",ray:"ray",segment:"segment",vector:"vector"},pe={polygon:exclude,rect:exclude,circle:exclude,line:N,ray:V,segment:excludeS,vector:N},overlap$1=function(e,t,r){const o=typeOf(e),n=typeOf(t),s=ge[o],c=ge[n],a=ue[o](e),i=ue[n](t),l=e.domain_function||pe[o],d=t.domain_function||pe[n];return me[s][c](a,i,l,d,r)},he={preserve:{magnitude:function(){return magnitude(this)},isEquivalent:function(){return fnEpsilonEqualVectors(this,getVector(arguments))},isParallel:function(){return parallel(...resizeUp(this,getVector(arguments)))},isCollinear:function(e){return overlap$1(this,e)},dot:function(){return dot(...resizeUp(this,getVector(arguments)))},distanceTo:function(){return distance(...resizeUp(this,getVector(arguments)))},overlap:function(e){return overlap$1(this,e)}},vector:{copy:function(){return[...this]},normalize:function(){return normalize(this)},scale:function(){return scale(this,arguments[0])},flip:function(){return flip(this)},rotate90:function(){return rotate90(this)},rotate270:function(){return rotate270(this)},cross:function(){return cross3(resize(3,this),resize(3,getVector(arguments)))},transform:function(){return multiplyMatrix3Vector3(getMatrix3x4(arguments),resize(3,this))},add:function(){return add(this,resize(this.length,getVector(arguments)))},subtract:function(){return subtract(this,resize(this.length,getVector(arguments)))},rotateZ:function(e,t){return multiplyMatrix3Vector3(getMatrix3x4(makeMatrix2Rotate(e,t)),resize(3,this))},lerp:function(e,t){return lerp(this,resize(this.length,getVector(e)),t)},midpoint:function(){return midpoint(...resizeUp(this,getVector(arguments)))},bisect:function(){return counterClockwiseBisect2(this,getVector(arguments))}}},ve={};Object.keys(he.preserve).forEach((e=>{ve[e]=he.preserve[e]})),Object.keys(he.vector).forEach((e=>{ve[e]=function(){return j.vector(...he.vector[e].apply(this,arguments))}}));const _e={fromAngle:function(e){return j.vector(Math.cos(e),Math.sin(e))},fromAngleDegrees:function(e){return j.vector.fromAngle(e*C)}};var ye={vector:{P:Array.prototype,A:function(){this.push(...getVector(arguments))},G:{x:function(){return this[0]},y:function(){return this[1]},z:function(){return this[2]}},M:ve,S:_e}},be={fromPoints:function(){const e=getVectorOfVectors(arguments);return this.constructor({vector:subtract(e[1],e[0]),origin:e[0]})},fromAngle:function(){const e=arguments[0]||0;return this.constructor({vector:[Math.cos(e),Math.sin(e)],origin:[0,0]})},perpendicularBisector:function(){const e=getVectorOfVectors(arguments);return this.constructor({vector:rotate90(subtract(e[1],e[0])),origin:average(e[0],e[1])})}};const Ee={isParallel:function(){const e=resizeUp(this.vector,getLine$1(arguments).vector);return parallel(...e)},isCollinear:function(){const e=getLine$1(arguments);return overlapLinePoint(this.vector,this.origin,e.origin)&&parallel(...resizeUp(this.vector,e.vector))},isDegenerate:function(e=P){return degenerate(this.vector,e)},reflectionMatrix:function(){return j.matrix(makeMatrix3ReflectZ(this.vector,this.origin))},nearestPoint:function(){const e=getVector(arguments);return j.vector(nearestPointOnLine(this.vector,this.origin,e,this.clip_function))},transform:function(){const e=this.dimension,t=multiplyMatrix3Line3(getMatrix3x4(arguments),resize(3,this.vector),resize(3,this.origin));return this.constructor(resize(e,t.vector),resize(e,t.origin))},translate:function(){const e=add(...resizeUp(this.origin,getVector(arguments)));return this.constructor(this.vector,e)},intersect:function(){return intersect$1(this,...arguments)},overlap:function(){return overlap$1(this,...arguments)},bisect:function(e,t){const r=getLine$1(e);return bisectLines2(this.vector,this.origin,r.vector,r.origin,t).map((e=>this.constructor(e)))}};var xe={line:{P:Object.prototype,A:function(){const e=getLine$1(...arguments);this.vector=j.vector(e.vector),this.origin=j.vector(resize(this.vector.length,e.origin));const t=rayLineToUniqueLine({vector:this.vector,origin:this.origin});this.normal=t.normal,this.distance=t.distance,Object.defineProperty(this,"domain_function",{writable:!0,value:L})},G:{dimension:function(){return[this.vector,this.origin].map((e=>e.length)).reduce(((e,t)=>Math.max(e,t)),0)}},M:Object.assign({},Ee,{inclusive:function(){return this.domain_function=L,this},exclusive:function(){return this.domain_function=N,this},clip_function:e=>e,svgPath:function(e=2e4){const t=add(this.origin,scale(this.vector,-e/2)),r=scale(this.vector,e);return`M${t[0]} ${t[1]}l${r[0]} ${r[1]}`}}),S:Object.assign({fromNormalDistance:function(){return this.constructor(uniqueLineToRayLine(arguments[0]))}},be)}},ke={ray:{P:Object.prototype,A:function(){const e=getLine$1(...arguments);this.vector=j.vector(e.vector),this.origin=j.vector(resize(this.vector.length,e.origin)),Object.defineProperty(this,"domain_function",{writable:!0,value:$})},G:{dimension:function(){return[this.vector,this.origin].map((e=>e.length)).reduce(((e,t)=>Math.max(e,t)),0)}},M:Object.assign({},Ee,{inclusive:function(){return this.domain_function=$,this},exclusive:function(){return this.domain_function=V,this},flip:function(){return j.ray(flip(this.vector),this.origin)},scale:function(e){return j.ray(this.vector.scale(e),this.origin)},normalize:function(){return j.ray(this.vector.normalize(),this.origin)},clip_function:rayLimiter,svgPath:function(e=1e4){const t=this.vector.scale(e);return`M${this.origin[0]} ${this.origin[1]}l${t[0]} ${t[1]}`}}),S:be}},Ae={segment:{P:Array.prototype,A:function(){const e=getSegment(...arguments);this.push(...[e[0],e[1]].map((e=>j.vector(e)))),this.vector=j.vector(subtract(this[1],this[0])),this.origin=this[0],Object.defineProperty(this,"domain_function",{writable:!0,value:includeS})},G:{points:function(){return this},magnitude:function(){return magnitude(this.vector)},dimension:function(){return[this.vector,this.origin].map((e=>e.length)).reduce(((e,t)=>Math.max(e,t)),0)}},M:Object.assign({},Ee,{inclusive:function(){return this.domain_function=includeS,this},exclusive:function(){return this.domain_function=excludeS,this},clip_function:segmentLimiter,transform:function(...e){const t=this.points[0].length,r=getMatrix3x4(e),o=this.points.map((e=>resize(3,e))).map((e=>multiplyMatrix3Vector3(r,e))).map((e=>resize(t,e)));return j.segment(o)},translate:function(){const e=getVector(arguments),t=this.points.map((t=>add(...resizeUp(t,e))));return j.segment(t)},midpoint:function(){return j.vector(average(this.points[0],this.points[1]))},svgPath:function(){const e=this.points.map((e=>`${e[0]} ${e[1]}`));return["M","L"].map(((t,r)=>`${t}${e[r]}`)).join("")}}),S:{fromPoints:function(){return this.constructor(...arguments)}}}};const pointOnEllipse=function(e,t,r,o,n,s){const c=Math.cos(n),a=Math.sin(n),i=Math.cos(s),l=Math.sin(s);return[e+c*r*i+-a*o*l,t+a*r*i+c*o*l]},pathInfo=function(e,t,r,o,n,s,c){let a=s;if(a<0&&!Number.isNaN(a))for(;a<0;)a+=2*Math.PI;const i=c>2*Math.PI?2*Math.PI:c,l=pointOnEllipse(e,t,r,o,n,a),d=pointOnEllipse(e,t,r,o,n,a+i/2),u=pointOnEllipse(e,t,r,o,n,a+i),m=i/2>Math.PI?1:0,g=i/2>0?1:0;return{x1:l[0],y1:l[1],x2:d[0],y2:d[1],x3:u[0],y3:u[1],fa:m,fs:g}},cln=e=>cleanNumber(e,4),ellipticalArcTo=(e,t,r,o,n,s,c)=>`A${cln(e)} ${cln(t)} ${cln(r)} ${cln(o)} ${cln(n)} ${cln(s)} ${cln(c)}`,Oe={nearestPoint:function(){return j.vector(nearestPointOnCircle(this.radius,this.origin,getVector(arguments)))},intersect:function(e){return intersect$1(this,e)},overlap:function(e){return overlap$1(this,e)},svgPath:function(e=0,t=2*Math.PI){const r=pathInfo(this.origin[0],this.origin[1],this.radius,this.radius,0,e,t),o=ellipticalArcTo(this.radius,this.radius,0,r.fa,r.fs,r.x2,r.y2),n=ellipticalArcTo(this.radius,this.radius,0,r.fa,r.fs,r.x3,r.y3);return`M${r.x1} ${r.y1}${o}${n}`},points:function(e=128){return Array.from(Array(e)).map(((t,r)=>2*Math.PI/e*r)).map((e=>[this.origin[0]+this.radius*Math.cos(e),this.origin[1]+this.radius*Math.sin(e)]))},polygon:function(){return j.polygon(this.points(arguments[0]))},segments:function(){const e=this.points(arguments[0]);return e.map(((t,r)=>{const o=(r+1)%e.length;return[t,e[o]]}))}},Me={fromPoints:function(){if(3===arguments.length){const e=circumcircle(...arguments);return this.constructor(e.radius,e.origin)}return this.constructor(...arguments)},fromThreePoints:function(){const e=circumcircle(...arguments);return this.constructor(e.radius,e.origin)}};var we={circle:{A:function(){const e=getCircle(...arguments);this.radius=e.radius,this.origin=j.vector(...e.origin)},G:{x:function(){return this.origin[0]},y:function(){return this.origin[1]},z:function(){return this.origin[2]}},M:Oe,S:Me}};const getFoci=function(e,t,r,o){const n=t>r,s=n?t**2-r**2:r**2-t**2,c=Math.sqrt(s),a=n?Math.cos(o):Math.sin(o),i=n?Math.sin(o):Math.cos(o);return[j.vector(e[0]+c*a,e[1]+c*i),j.vector(e[0]-c*a,e[1]-c*i)]};var je={ellipse:{A:function(){const e=flattenArrays(arguments).filter((e=>!Number.isNaN(e))),t=resize(5,e);this.rx=t[0],this.ry=t[1],this.origin=j.vector(t[2],t[3]),this.spin=t[4],this.foci=getFoci(this.origin,this.rx,this.ry,this.spin)},G:{x:function(){return this.origin[0]},y:function(){return this.origin[1]}},M:{svgPath:function(e=0,t=2*Math.PI){const r=pathInfo(this.origin[0],this.origin[1],this.rx,this.ry,this.spin,e,t),o=ellipticalArcTo(this.rx,this.ry,this.spin/Math.PI*180,r.fa,r.fs,r.x2,r.y2),n=ellipticalArcTo(this.rx,this.ry,this.spin/Math.PI*180,r.fa,r.fs,r.x3,r.y3);return`M${r.x1} ${r.y1}${o}${n}`},points:function(e=128){return Array.from(Array(e)).map(((t,r)=>2*Math.PI/e*r)).map((e=>pointOnEllipse(this.origin.x,this.origin.y,this.rx,this.ry,this.spin,e)))},polygon:function(){return j.polygon(this.points(arguments[0]))},segments:function(){const e=this.points(arguments[0]);return e.map(((t,r)=>{const o=(r+1)%e.length;return[t,e[o]]}))}},S:{}}};const Pe={area:function(){return signedArea(this)},centroid:function(){return j.vector(centroid(this))},boundingBox:function(){return boundingBox(this)},straightSkeleton:function(){return straightSkeleton(this)},scale:function(e,t=centroid(this)){const r=this.map((e=>[0,1].map(((r,o)=>e[o]-t[o])))).map((r=>r.map(((o,n)=>t[n]+r[n]*e))));return this.constructor.fromPoints(r)},rotate:function(e,t=centroid(this)){const r=this.map((r=>{const o=[r[0]-t[0],r[1]-t[1]],n=Math.sqrt(o[0]**2+o[1]**2),s=Math.atan2(o[1],o[0]);return[t[0]+Math.cos(s+e)*n,t[1]+Math.sin(s+e)*n]}));return j.polygon(r)},translate:function(){const e=getVector(...arguments),t=this.map((t=>t.map(((t,r)=>t+e[r]))));return this.constructor.fromPoints(t)},transform:function(){const e=getMatrix3x4(...arguments),t=this.map((t=>multiplyMatrix3Vector3(e,resize(3,t))));return j.polygon(t)},nearest:function(){const e=getVector(...arguments),t=nearestPointOnPolygon(this,e);return void 0===t?void 0:Object.assign(t,{edge:this.sides[t.i]})},split:function(){const e=getLine$1(...arguments),t=splitConvexPolygon;return t(this,e.vector,e.origin).map((e=>j.polygon(e)))},overlap:function(){return overlap$1(this,...arguments)},intersect:function(){return intersect$1(this,...arguments)},clip:function(e,t){const r=e.domain_function?e.domain_function:L,o=clipLineConvexPolygon(this,e.vector,e.origin,this.domain_function,r,t);return o?j.segment(o):void 0},svgPath:function(){const e=Array(this.length).fill("L");return e[0]="M",`${this.map(((t,r)=>`${e[r]}${t[0]} ${t[1]}`)).join("")}z`}},rectToPoints=e=>[[e.x,e.y],[e.x+e.width,e.y],[e.x+e.width,e.y+e.height],[e.x,e.y+e.height]];var Se={rect:{P:Array.prototype,A:function(){const e=getRect(...arguments);this.width=e.width,this.height=e.height,this.origin=j.vector(e.x,e.y),this.push(...rectToPoints(this)),Object.defineProperty(this,"domain_function",{writable:!0,value:include})},G:{x:function(){return this.origin[0]},y:function(){return this.origin[1]},center:function(){return j.vector(this.origin[0]+this.width/2,this.origin[1]+this.height/2)}},M:Object.assign({},Pe,{inclusive:function(){return this.domain_function=include,this},exclusive:function(){return this.domain_function=exclude,this},area:function(){return this.width*this.height},segments:function(){return[[[(e=this).x,e.y],[e.x+e.width,e.y]],[[e.x+e.width,e.y],[e.x+e.width,e.y+e.height]],[[e.x+e.width,e.y+e.height],[e.x,e.y+e.height]],[[e.x,e.y+e.height],[e.x,e.y]]];var e},svgPath:function(){return`M${this.origin.join(" ")}h${this.width}v${this.height}h${-this.width}Z`}}),S:{fromPoints:function(){const e=boundingBox(getVectorOfVectors(arguments));return j.rect(e.min[0],e.min[1],e.span[0],e.span[1])}}}},Ce={polygon:{P:Array.prototype,A:function(){this.push(...semiFlattenArrays(arguments)),this.sides=this.map(((e,t,r)=>[e,r[(t+1)%r.length]])),this.vectors=this.sides.map((e=>subtract(e[1],e[0]))),Object.defineProperty(this,"domain_function",{writable:!0,value:include})},G:{isConvex:function(){},points:function(){return this}},M:Object.assign({},Pe,{inclusive:function(){return this.domain_function=include,this},exclusive:function(){return this.domain_function=exclude,this},segments:function(){return this.sides}}),S:{fromPoints:function(){return this.constructor(...arguments)},regularPolygon:function(){return this.constructor(makePolygonCircumradius(...arguments))},convexHull:function(){return this.constructor(convexHull(...arguments))}}}},ze={polyline:{P:Array.prototype,A:function(){this.push(...semiFlattenArrays(arguments))},G:{points:function(){return this}},M:{svgPath:function(){const e=Array(this.length).fill("L");return e[0]="M",`${this.map(((t,r)=>`${e[r]}${t[0]} ${t[1]}`)).join("")}`}},S:{fromPoints:function(){return this.constructor(...arguments)}}}};const array_assign=(e,t)=>{for(let r=0;r<12;r+=1)e[r]=t[r];return e};var Fe={matrix:{P:Array.prototype,A:function(){getMatrix3x4(arguments).forEach((e=>this.push(e)))},G:{},M:{copy:function(){return j.matrix(...Array.from(this))},set:function(){return array_assign(this,getMatrix3x4(arguments))},isIdentity:function(){return isIdentity3x4(this)},multiply:function(e){return array_assign(this,multiplyMatrices3(this,e))},determinant:function(){return determinant3(this)},inverse:function(){return array_assign(this,invertMatrix3(this))},translate:function(e,t,r){return array_assign(this,multiplyMatrices3(this,makeMatrix3Translate(e,t,r)))},rotateX:function(e){return array_assign(this,multiplyMatrices3(this,makeMatrix3RotateX(e)))},rotateY:function(e){return array_assign(this,multiplyMatrices3(this,makeMatrix3RotateY(e)))},rotateZ:function(e){return array_assign(this,multiplyMatrices3(this,makeMatrix3RotateZ(e)))},rotate:function(e,t,r){const o=makeMatrix3Rotate(e,t,r);return array_assign(this,multiplyMatrices3(this,o))},scale:function(...e){return array_assign(this,multiplyMatrices3(this,makeMatrix3Scale(...e)))},reflectZ:function(e,t){const r=makeMatrix3ReflectZ(e,t);return array_assign(this,multiplyMatrices3(this,r))},transform:function(...e){return j.vector(multiplyMatrix3Vector3(this,resize(3,getVector(e))))},transformVector:function(e){return j.vector(multiplyMatrix3Vector3(this,resize(3,getVector(e))))},transformLine:function(...e){const t=getLine$1(e);return j.line(multiplyMatrix3Line3(this,t.vector,t.origin))}},S:{}}};const Le=Object.assign({},ye,xe,ke,Ae,we,je,Se,Ce,ze,Fe),create=function(e,t){const r=Object.create(Le[e].proto);return Le[e].A.apply(r,t),r};Object.assign(j,{vector:function(){return create("vector",arguments)},line:function(){return create("line",arguments)},ray:function(){return create("ray",arguments)},segment:function(){return create("segment",arguments)},circle:function(){return create("circle",arguments)},ellipse:function(){return create("ellipse",arguments)},rect:function(){return create("rect",arguments)},polygon:function(){return create("polygon",arguments)},polyline:function(){return create("polyline",arguments)},matrix:function(){return create("matrix",arguments)}}),Object.keys(Le).forEach((e=>{const t={};t.prototype=null!=Le[e].P?Object.create(Le[e].P):Object.create(Object.prototype),t.prototype.constructor=t,j[e].prototype=t.prototype,j[e].prototype.constructor=j[e],Object.keys(Le[e].G).forEach((r=>Object.defineProperty(t.prototype,r,{get:Le[e].G[r]}))),Object.keys(Le[e].M).forEach((r=>Object.defineProperty(t.prototype,r,{value:Le[e].M[r]}))),Object.keys(Le[e].S).forEach((t=>Object.defineProperty(j[e],t,{value:Le[e].S[t].bind(j[e].prototype)}))),Le[e].proto=t.prototype}));const Ne=j;Ne.core=Object.assign(Object.create(null),F,w,G,I,T,Y,re,oe,ne,se,re,X,R,ee,te,Z,W,ce,ae,{intersectConvexPolygonLine:intersectConvexPolygonLine,intersectCircleCircle:intersectCircleCircle,intersectCircleLine:intersectCircleLine,intersectLineLine:intersectLineLine,overlapConvexPolygons:overlapConvexPolygons,overlapConvexPolygonPoint:overlapConvexPolygonPoint,overlapBoundingBoxes:(e,t)=>{const r=Math.min(e.min.length,t.min.length);for(let o=0;o<r;o+=1)if(e.min[o]>t.max[o]||e.max[o]<t.min[o])return!1;return!0},overlapLineLine:overlapLineLine,overlapLinePoint:overlapLinePoint,clipLineConvexPolygon:clipLineConvexPolygon,clipPolygonPolygon:(e,t,r=P)=>{let o,n,s,c;const inside=e=>(n[0]-o[0])*(e[1]-o[1])>(n[1]-o[1])*(e[0]-o[0])+r,intersection=()=>{const e=[o[0]-n[0],o[1]-n[1]],t=[s[0]-c[0],s[1]-c[1]],r=o[0]*n[1]-o[1]*n[0],a=s[0]*c[1]-s[1]*c[0],i=1/(e[0]*t[1]-e[1]*t[0]);return[(r*t[0]-a*e[0])*i,(r*t[1]-a*e[1])*i]};let a=e;o=t[t.length-1];for(let e in t){n=t[e];const r=a;a=[],s=r[r.length-1];for(let e in r)c=r[e],inside(c)?(inside(s)||a.push(intersection()),a.push(c)):inside(s)&&a.push(intersection()),s=c;o=n}return 0===a.length?void 0:a},splitConvexPolygon:splitConvexPolygon,straightSkeleton:straightSkeleton}),Ne.typeof=typeOf,Ne.intersect=intersect$1,Ne.overlap=overlap$1;const vertex_degree=function(e,t){const r=this;Object.defineProperty(e,"degree",{get:()=>r.vertices_vertices&&r.vertices_vertices[t]?r.vertices_vertices[t].length:null})},edge_coords=function(e,t){const r=this;Object.defineProperty(e,"coords",{get:()=>{if(r.edges_vertices&&r.edges_vertices[t]&&r.vertices_coords)return r.edges_vertices[t].map((e=>r.vertices_coords[e]))}})},face_simple=function(e,t){const r=this;Object.defineProperty(e,"simple",{get:()=>{if(!r.faces_vertices||!r.faces_vertices[t])return null;for(let o=0;o<e.length-1;o+=1)for(let n=o+1;n<e.length;n+=1)if(r.faces_vertices[t][o]===r.faces_vertices[t][n])return!1;return!0}})},face_coords=function(e,t){const r=this;Object.defineProperty(e,"coords",{get:()=>{if(r.faces_vertices&&r.faces_vertices[t]&&r.vertices_coords)return r.faces_vertices[t].map((e=>r.vertices_coords[e]))}})};var $e={vertices:function(e,t){return vertex_degree.call(this,e,t),e},edges:function(e,t){return edge_coords.call(this,e,t),e},faces:function(e,t){return face_simple.call(this,e,t),face_coords.call(this,e,t),e}};const Ve=1.1,Ie="Rabbit Ear",Te={file:["file_spec","file_creator","file_author","file_title","file_description","file_classes","file_frames"],frame:["frame_author","frame_title","frame_description","frame_attributes","frame_classes","frame_unit","frame_parent","frame_inherit"],graph:["vertices_coords","vertices_vertices","vertices_faces","edges_vertices","edges_faces","edges_assignment","edges_foldAngle","edges_length","faces_vertices","faces_edges","vertices_edges","edges_edges","faces_faces"],orders:["edgeOrders","faceOrders"]},Be=Object.freeze([].concat(Te.file).concat(Te.frame).concat(Te.graph).concat(Te.orders)),qe=Object.freeze(["edges_vector","vertices_sectors","faces_sectors","faces_matrix"]),Re=Array.from("MmVvBbFfUu"),Ue={vertices:"vertex",edges:"edge",faces:"face"},De={b:"boundary",m:"mountain",v:"valley",f:"flat",u:"unassigned"};Re.forEach((e=>{De[e.toUpperCase()]=De[e]}));const Ge={M:-180,m:-180,V:180,v:180,B:0,b:0,F:0,f:0,U:0,u:0},edgeAssignmentToFoldAngle=e=>Ge[e]||0,edgeFoldAngleToAssignment=e=>e>Ne.core.EPSILON?"V":e<-Ne.core.EPSILON?"M":"U",edgeFoldAngleIsFlat=e=>Ne.core.fnEpsilonEqual(0,e)||Ne.core.fnEpsilonEqual(-180,e)||Ne.core.fnEpsilonEqual(180,e),edgesFoldAngleAreAllFlat=({edges_foldAngle:e})=>{if(!e)return!0;for(let t=0;t<e.length;t+=1)if(!edgeFoldAngleIsFlat(e[t]))return!1;return!0},filterKeysWithSuffix=(e,t)=>Object.keys(e).map((e=>e.substring(e.length-t.length,e.length)===t?e:void 0)).filter((e=>void 0!==e)),filterKeysWithPrefix=(e,t)=>Object.keys(e).map((e=>e.substring(0,t.length)===t?e:void 0)).filter((e=>void 0!==e)),getGraphKeysWithPrefix=(e,t)=>filterKeysWithPrefix(e,`${t}_`),getGraphKeysWithSuffix=(e,t)=>filterKeysWithSuffix(e,`_${t}`),transposeGraphArrays=(e,t)=>{const r=getGraphKeysWithPrefix(e,t);if(0===r.length)return[];const o=Math.max(...r.map((t=>e[t].length))),n=Array.from(Array(o)).map((()=>({})));return r.forEach((t=>n.forEach(((r,o)=>{n[o][t]=e[t][o]})))),n},isFoldObject=(e={})=>0===Object.keys(e).length?0:[].concat(Be,qe).filter((t=>e[t])).length/Object.keys(e).length;var We=Object.freeze({__proto__:null,singularize:Ue,pluralize:{vertex:"vertices",edge:"edges",face:"faces"},edgesAssignmentNames:De,edgesAssignmentDegrees:Ge,edgeAssignmentToFoldAngle:edgeAssignmentToFoldAngle,edgeFoldAngleToAssignment:edgeFoldAngleToAssignment,edgeFoldAngleIsFlat:edgeFoldAngleIsFlat,edgesFoldAngleAreAllFlat:edgesFoldAngleAreAllFlat,filterKeysWithSuffix:filterKeysWithSuffix,filterKeysWithPrefix:filterKeysWithPrefix,getGraphKeysWithPrefix:getGraphKeysWithPrefix,getGraphKeysWithSuffix:getGraphKeysWithSuffix,transposeGraphArrays:transposeGraphArrays,transposeGraphArrayAtIndex:function(e,t,r){const o=getGraphKeysWithPrefix(e,t);if(0===o.length)return;const n={};return o.forEach((t=>{n[t]=e[t][r]})),n},isFoldObject:isFoldObject});const are_vertices_equivalent=(e,t,r=Ne.core.EPSILON)=>{const o=e.length;for(let n=0;n<o;n+=1)if(Math.abs(e[n]-t[n])>r)return!1;return!0},getVerticesClusters=({vertices_coords:e},t=Ne.core.EPSILON)=>{if(!e)return[];const r=e.map((()=>[]));for(let o=0;o<e.length-1;o+=1)for(let n=o+1;n<e.length;n+=1)r[o][n]=are_vertices_equivalent(e[o],e[n],t);const o=r.map((e=>e.map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)))),n=[],s=Array(e.length).fill(!1);let c=0;const recurse=(t,r)=>{if(!s[r]&&c!==e.length)for(s[r]=!0,c+=1,n[t]||(n[t]=[]),n[t].push(r);o[r].length>0;)recurse(t,o[r][0]),o[r].splice(0,1)};for(let t=0;t<e.length&&(recurse(t,t),c!==e.length);t+=1);return n.filter((e=>e.length))},max_arrays_length=(...e)=>Math.max(0,...e.filter((e=>void 0!==e)).map((e=>e.length))),count=(e,t)=>max_arrays_length(...getGraphKeysWithPrefix(e,t).map((t=>e[t])));count.vertices=({vertices_coords:e,vertices_faces:t,vertices_vertices:r})=>max_arrays_length(e,t,r),count.edges=({edges_vertices:e,edges_edges:t,edges_faces:r})=>max_arrays_length(e,t,r),count.faces=({faces_vertices:e,faces_edges:t,faces_faces:r})=>max_arrays_length(e,t,r);const uniqueElements=e=>Array.from(new Set(e)),nonUniqueElements=e=>{const t={};return e.forEach((e=>{void 0===t[e]&&(t[e]=0),t[e]+=1})),e.filter((e=>t[e]>1))},uniqueSortedNumbers=e=>uniqueElements(e).sort(((e,t)=>e-t)),splitCircularArray=(e,t)=>(t.sort(((e,t)=>e-t)),[e.slice(t[1]).concat(e.slice(0,t[0]+1)),e.slice(t[0],t[1]+1)]),booleanMatrixToIndexedArray=e=>e.map((e=>e.map(((e,t)=>!0===e?t:void 0)).filter((e=>void 0!==e)))),booleanMatrixToUniqueIndexPairs=e=>{const t=[];for(let r=0;r<e.length-1;r+=1)for(let o=r+1;o<e.length;o+=1)e[r][o]&&t.push([r,o]);return t},selfRelationalUniqueIndexPairs=e=>{const t=[],r=[];return e.forEach(((e,o)=>e.forEach((e=>{o<e&&r.push([o,e]),o!==e||t[o]||(t[o]=!0,r.push([o,e]))})))),r},clusterArrayValues=(e,t=Ne.core.EPSILON)=>{const r=e.map(((e,t)=>({v:e,i:t}))).sort(((e,t)=>e.v-t.v)).map((e=>e.i)),o=[[r[0]]];for(let n=1;n<r.length;n+=1){const s=r[n],c=o.length-1,a=o[c][o[c].length-1];Math.abs(e[a]-e[s])<t?o[c].push(s):o.push([s])}return o},makeTrianglePairs=e=>{const t=Array(e.length*(e.length-1)/2);let r=0;for(let o=0;o<e.length-1;o+=1)for(let n=o+1;n<e.length;n+=1,r+=1)t[r]=[e[o],e[n]];return t};var Ze=Object.freeze({__proto__:null,uniqueElements:uniqueElements,nonUniqueElements:nonUniqueElements,uniqueSortedNumbers:uniqueSortedNumbers,splitCircularArray:splitCircularArray,getLongestArray:e=>{if(1===e.length)return e[0];const t=e.map((e=>e.length));let r=0;for(let o=0;o<e.length;o+=1)t[o]>t[r]&&(r=o);return e[r]},booleanMatrixToIndexedArray:booleanMatrixToIndexedArray,booleanMatrixToUniqueIndexPairs:booleanMatrixToUniqueIndexPairs,selfRelationalUniqueIndexPairs:selfRelationalUniqueIndexPairs,clusterArrayValues:clusterArrayValues,makeTrianglePairs:makeTrianglePairs});const removeGeometryIndices=(e,t,r)=>{const o=count(e,t),n=uniqueSortedNumbers(r),s=[];let c,a,i;for(c=0,a=0,i=0;c<o;c+=1,a+=1){for(;c===n[i];)s[c]=void 0,c+=1,i+=1;c<o&&(s[c]=a)}return getGraphKeysWithSuffix(e,t).forEach((t=>e[t].forEach(((r,o)=>e[t][o].forEach(((r,n)=>{e[t][o][n]=s[r]})))))),n.reverse(),getGraphKeysWithPrefix(e,t).forEach((t=>n.forEach((r=>e[t].splice(r,1))))),s},replaceGeometryIndices=(e,t,r)=>{const o=count(e,t),n=Object.keys(r).map((e=>parseInt(e,10))),s=uniqueSortedNumbers(n),c=[];let a,i,l;for(a=0,i=0,l=0;a<o;a+=1,i+=1){for(;a===s[l];)c[a]=c[r[s[l]]],void 0===c[a]&&console.log("replace() found an undefined",c),a+=1,l+=1;a<o&&(c[a]=i)}return getGraphKeysWithSuffix(e,t).forEach((t=>e[t].forEach(((r,o)=>e[t][o].forEach(((r,n)=>{e[t][o][n]=c[r]})))))),s.reverse(),getGraphKeysWithPrefix(e,t).forEach((t=>s.forEach((r=>e[t].splice(r,1))))),c},getDuplicateVertices=(e,t)=>getVerticesClusters(e,t).filter((e=>e.length>1)),getIsolatedVertices=({vertices_coords:e,edges_vertices:t,faces_vertices:r})=>{if(!e)return[];let o=e.length;const n=Array(o).fill(!1);return t&&t.forEach((e=>{e.filter((e=>!n[e])).forEach((e=>{n[e]=!0,o-=1}))})),r&&r.forEach((e=>{e.filter((e=>!n[e])).forEach((e=>{n[e]=!0,o-=1}))})),n.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))},removeIsolatedVertices=(e,t)=>(t||(t=getIsolatedVertices(e)),{map:removeGeometryIndices(e,n,t),remove:t}),removeDuplicateVertices=(e,t=Ne.core.EPSILON)=>{const r=[],o=[],s=getVerticesClusters(e,t).filter((e=>e.length>1));return s.forEach((e=>{for(let t=1;t<e.length;t+=1)r[e[t]]=e[0],o.push(e[t])})),s.map((t=>t.map((t=>e.vertices_coords[t])))).map((e=>Ne.core.average(...e))).forEach(((t,r)=>{e.vertices_coords[s[r][0]]=t})),{map:replaceGeometryIndices(e,n,r),remove:o}};var Ye=Object.freeze({__proto__:null,getDuplicateVertices:getDuplicateVertices,getEdgeIsolatedVertices:({vertices_coords:e,edges_vertices:t})=>{if(!e||!t)return[];let r=e.length;const o=Array(r).fill(!1);return t.forEach((e=>{e.filter((e=>!o[e])).forEach((e=>{o[e]=!0,r-=1}))})),o.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))},getFaceIsolatedVertices:({vertices_coords:e,faces_vertices:t})=>{if(!e||!t)return[];let r=e.length;const o=Array(r).fill(!1);return t.forEach((e=>{e.filter((e=>!o[e])).forEach((e=>{o[e]=!0,r-=1}))})),o.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))},getIsolatedVertices:getIsolatedVertices,removeIsolatedVertices:removeIsolatedVertices,removeDuplicateVertices:removeDuplicateVertices});const He={edges:"edgeOrders",faces:"faceOrders"},countImplied=(e,t)=>Math.max((e=>{let t=-1;return e.filter((e=>void 0!==e)).forEach((e=>e.forEach((e=>e.forEach((e=>{e>t&&(t=e)})))))),t})(getGraphKeysWithSuffix(e,t).map((t=>e[t]))),e[He[t]]?(e=>{let t=-1;return e.forEach((e=>{e[0]>t&&(t=e[0]),e[1]>t&&(t=e[1])})),t})(e[He[t]]):-1)+1;countImplied.vertices=e=>countImplied(e,n),countImplied.edges=e=>countImplied(e,s),countImplied.faces=e=>countImplied(e,c);const counterClockwiseWalk=({vertices_vertices:e,vertices_sectors:t},r,o,n={})=>{const s={},c={vertices:[r],edges:[],angles:[]};let a=r,i=o;for(;;){const r=e[i],o=(r.indexOf(a)+r.length-1)%r.length,l=r[o],d=`${i} ${l}`;if(s[d])return Object.assign(n,s),c.vertices.pop(),c;if(s[d]=!0,n[d])return;c.vertices.push(i),c.edges.push(d),t&&c.angles.push(t[i][o]),a=i,i=l}},planarVertexWalk=({vertices_vertices:e,vertices_sectors:t})=>{const r={vertices_vertices:e,vertices_sectors:t},o={};return e.map(((e,t)=>e.map((e=>counterClockwiseWalk(r,t,e,o))).filter((e=>void 0!==e)))).flat()},filterWalkedBoundaryFace=e=>e.filter((e=>e.angles.map((e=>Math.PI-e)).reduce(((e,t)=>e+t),0)>0));var Je=Object.freeze({__proto__:null,counterClockwiseWalk:counterClockwiseWalk,planarVertexWalk:planarVertexWalk,filterWalkedBoundaryFace:filterWalkedBoundaryFace});const sortVerticesCounterClockwise=({vertices_coords:e},t,r)=>t.map((t=>e[t])).map((t=>Ne.core.subtract(t,e[r]))).map((e=>Math.atan2(e[1],e[0]))).map((e=>e>-Ne.core.EPSILON?e:e+2*Math.PI)).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).map((e=>e.i)).map((e=>t[e])),sortVerticesAlongVector=({vertices_coords:e},t,r)=>t.map((t=>({i:t,d:Ne.core.dot(e[t],r)}))).sort(((e,t)=>e.d-t.d)).map((e=>e.i));var Xe=Object.freeze({__proto__:null,sortVerticesCounterClockwise:sortVerticesCounterClockwise,sortVerticesAlongVector:sortVerticesAlongVector});const makeFacesNormal=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))).map((e=>{const t=Ne.core.resize(3,Ne.core.subtract(e[1],e[0])),r=Ne.core.resize(3,Ne.core.subtract(e[2],e[0]));return Ne.core.normalize3(Ne.core.cross3(t,r))})),makeVerticesNormal=({vertices_coords:e,faces_vertices:t,faces_normal:r})=>{r||(r=makeFacesNormal({vertices_coords:e,faces_vertices:t}));const o=e.map((()=>[0,0,0]));return t.forEach(((e,t)=>e.forEach((e=>{return n=o[e],s=r[t],n[0]+=s[0],n[1]+=s[1],void(n[2]+=s[2]);var n,s})))),o.map((e=>Ne.core.normalize3(e)))};var Ke=Object.freeze({__proto__:null,makeFacesNormal:makeFacesNormal,makeVerticesNormal:makeVerticesNormal});const makeVerticesEdgesUnsorted=({edges_vertices:e})=>{const t=[];return e.forEach(((e,r)=>e.forEach((e=>{void 0===t[e]&&(t[e]=[]),t[e].push(r)})))),t},makeVerticesEdges=({edges_vertices:e,vertices_vertices:t})=>{const r=makeVerticesToEdgeBidirectional({edges_vertices:e});return t.map(((e,t)=>e.map((e=>r[`${t} ${e}`]))))},makeVerticesVertices=({vertices_coords:e,vertices_edges:t,edges_vertices:r})=>{t||(t=makeVerticesEdgesUnsorted({edges_vertices:r}));const o=t.map(((e,t)=>e.map((e=>r[e].filter((e=>e!==t)))).reduce(((e,t)=>e.concat(t)),[])));return void 0===e?o:o.map(((t,r)=>sortVerticesCounterClockwise({vertices_coords:e},t,r)))},makeVerticesVerticesUnsorted=({vertices_edges:e,edges_vertices:t})=>(e||(e=makeVerticesEdgesUnsorted({edges_vertices:t})),e.map(((e,r)=>e.flatMap((e=>t[e].filter((e=>e!==r))))))),makeVerticesFacesUnsorted=({vertices_coords:e,faces_vertices:t})=>{if(!t)return e.map((()=>[]));const r=void 0!==e?e.map((()=>[])):Array.from(Array(countImplied.vertices({faces_vertices:t}))).map((()=>[]));return t.forEach(((e,t)=>{const o=[];e.forEach((e=>{o[e]=t})),o.forEach(((e,t)=>r[t].push(e)))})),r},makeVerticesFaces=({vertices_coords:e,vertices_vertices:t,faces_vertices:r})=>{if(!r)return e.map((()=>[]));if(!t)return makeVerticesFacesUnsorted({vertices_coords:e,faces_vertices:r});const o=makeVerticesToFace({faces_vertices:r});return t.map(((e,t)=>e.map(((e,r,o)=>[o[(r+1)%o.length],t,e].join(" "))))).map((e=>e.map((e=>o[e]))))},makeVerticesToEdgeBidirectional=({edges_vertices:e})=>{const t={};return e.map((e=>e.join(" "))).forEach(((e,r)=>{t[e]=r})),e.map((e=>`${e[1]} ${e[0]}`)).forEach(((e,r)=>{t[e]=r})),t},makeVerticesToEdge=({edges_vertices:e})=>{const t={};return e.map((e=>e.join(" "))).forEach(((e,r)=>{t[e]=r})),t},makeVerticesToFace=({faces_vertices:e})=>{const t={};return e.forEach(((e,r)=>e.map(((t,r)=>[0,1,2].map((t=>(r+t)%e.length)).map((t=>e[t])).join(" "))).forEach((e=>{t[e]=r})))),t},makeVerticesVerticesVector=({vertices_coords:e,vertices_vertices:t,edges_vertices:r,edges_vector:o})=>{o||(o=makeEdgesVector({vertices_coords:e,edges_vertices:r}));const n=makeVerticesToEdge({edges_vertices:r});return t.map(((e,r)=>t[r].map((e=>{const t=n[`${r} ${e}`],s=n[`${e} ${r}`];return void 0!==t?o[t]:void 0!==s?Ne.core.flip(o[s]):void 0}))))},makeVerticesSectors=({vertices_coords:e,vertices_vertices:t,edges_vertices:r,edges_vector:o})=>makeVerticesVerticesVector({vertices_coords:e,vertices_vertices:t,edges_vertices:r,edges_vector:o}).map((e=>1===e.length?[Ne.core.TWO_PI]:Ne.core.counterClockwiseSectors2(e))),makeEdgesFacesUnsorted=({edges_vertices:e,faces_edges:t})=>{const r=void 0!==e?e.map((()=>[])):Array.from(Array(countImplied.edges({faces_edges:t}))).map((()=>[]));return t.forEach(((e,t)=>{const o=[];e.forEach((e=>{o[e]=t})),o.forEach(((e,t)=>r[t].push(e)))})),r},makeEdgesFaces=({vertices_coords:e,edges_vertices:t,edges_vector:r,faces_vertices:o,faces_edges:n,faces_center:s})=>{if(!t)return makeEdgesFacesUnsorted({faces_edges:n});r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const c=t.map((t=>e[t[0]]));s||(s=makeFacesConvexCenter({vertices_coords:e,faces_vertices:o}));const a=t.map((()=>[]));return n.forEach(((e,t)=>{const r=[];e.forEach((e=>{r[e]=t})),r.forEach(((e,t)=>a[t].push(e)))})),a.forEach(((e,t)=>{const o=e.map((e=>s[e])).map((e=>Ne.core.subtract2(e,c[t]))).map((e=>Ne.core.cross2(e,r[t])));e.sort(((e,t)=>o[e]-o[t]))})),a},Qe={M:-180,m:-180,V:180,v:180},makeEdgesAssignment=({edges_vertices:e,edges_foldAngle:t,edges_faces:r,faces_vertices:o,faces_edges:n})=>(r||(n||(n=makeFacesEdgesFromVertices({edges_vertices:e,faces_vertices:o})),r=makeEdgesFacesUnsorted({edges_vertices:e,faces_edges:n})),t.map(((e,t)=>r[t].length<2?"B":0===e?"F":e<0?"M":"V"))),makeEdgesFoldAngle=({edges_assignment:e})=>e.map((e=>Qe[e]||0)),makeEdgesFoldAngleFromFaces=({vertices_coords:e,edges_vertices:t,edges_faces:r,edges_assignment:o,faces_vertices:n,faces_edges:s,faces_normal:c,faces_center:a})=>(r||(s||(s=makeFacesEdgesFromVertices({edges_vertices:t,faces_vertices:n})),r=makeEdgesFacesUnsorted({edges_vertices:t,faces_edges:s})),c||(c=makeFacesNormal({vertices_coords:e,faces_vertices:n})),a||(a=makeFacesConvexCenter({vertices_coords:e,faces_vertices:n})),r.map(((e,t)=>{if(e.length>2&&console.warn("makeEdgesFoldAngleFromFaces non manifold"),e.length<2)return 0;const r=c[e[0]],n=c[e[1]],s=Ne.core.normalize(Ne.core.subtract(a[e[1]],a[e[0]]));let i=Math.sign(Ne.core.dot(r,s));return 0===i&&(o&&o[t]?("F"!==o[t]&&"F"!==o[t]||(i=0),"M"!==o[t]&&"m"!==o[t]||(i=-1),"V"!==o[t]&&"v"!==o[t]||(i=1)):console.warn("makeEdgesFoldAngleFromFaces cannot determine flat folded faces")),Math.acos(Ne.core.dot(r,n))*(180/Math.PI)*i}))),makeEdgesCoords=({vertices_coords:e,edges_vertices:t})=>t.map((t=>t.map((t=>e[t])))),makeEdgesVector=({vertices_coords:e,edges_vertices:t})=>makeEdgesCoords({vertices_coords:e,edges_vertices:t}).map((e=>Ne.core.subtract(e[1],e[0]))),makeEdgesLength=({vertices_coords:e,edges_vertices:t})=>makeEdgesVector({vertices_coords:e,edges_vertices:t}).map((e=>Ne.core.magnitude(e))),makeEdgesBoundingBox=({vertices_coords:e,edges_vertices:t,edges_coords:r},o=0)=>(r||(r=makeEdgesCoords({vertices_coords:e,edges_vertices:t})),r.map((e=>Ne.core.boundingBox(e,o)))),makePlanarFaces=({vertices_coords:e,vertices_vertices:t,vertices_edges:r,vertices_sectors:o,edges_vertices:n,edges_vector:s})=>{t||(t=makeVerticesVertices({vertices_coords:e,edges_vertices:n,vertices_edges:r})),o||(o=makeVerticesSectors({vertices_coords:e,vertices_vertices:t,edges_vertices:n,edges_vector:s}));const c=makeVerticesToEdgeBidirectional({edges_vertices:n});return filterWalkedBoundaryFace(planarVertexWalk({vertices_vertices:t,vertices_sectors:o})).map((e=>({...e,edges:e.edges.map((e=>c[e]))})))},makeFacesVerticesFromEdges=e=>e.faces_edges.map((t=>t.map((t=>e.edges_vertices[t])).map(((e,t,r)=>{const o=r[(t+1)%r.length];return e[0]===o[0]||e[0]===o[1]?e[1]:e[0]})))),makeFacesEdgesFromVertices=e=>{const t=makeVerticesToEdgeBidirectional(e);return e.faces_vertices.map((e=>e.map(((e,t,r)=>[e,r[(t+1)%r.length]].join(" "))))).map((e=>e.map((e=>t[e]))))},makeFacesFaces=({faces_vertices:e})=>{const t=e.map((()=>[])),r={};return e.map(((e,t)=>e.map(((o,n,s)=>{let c=s[(n+1)%e.length];c<o&&([o,c]=[c,o]);const a=`${o} ${c}`;void 0===r[a]&&(r[a]={}),r[a][t]=!0})))),Object.values(r).map((e=>Object.keys(e))).filter((e=>e.length>1)).forEach((e=>{t[e[0]].push(parseInt(e[1],10)),t[e[1]].push(parseInt(e[0],10))})),t},makeFacesPolygon=({vertices_coords:e,faces_vertices:t},r)=>t.map((t=>t.map((t=>e[t])))).map((e=>Ne.core.makePolygonNonCollinear(e,r))),makeFacesConvexCenter=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])).reduce(((e,t)=>Ne.core.add(e,t)),Array(e[0].length).fill(0)).map((e=>e/t.length))));var et=Object.freeze({__proto__:null,makeVerticesEdgesUnsorted:makeVerticesEdgesUnsorted,makeVerticesEdges:makeVerticesEdges,makeVerticesVertices:makeVerticesVertices,makeVerticesVerticesUnsorted:makeVerticesVerticesUnsorted,makeVerticesFacesUnsorted:makeVerticesFacesUnsorted,makeVerticesFaces:makeVerticesFaces,makeVerticesToEdgeBidirectional:makeVerticesToEdgeBidirectional,makeVerticesToEdge:makeVerticesToEdge,makeVerticesToFace:makeVerticesToFace,makeVerticesVerticesVector:makeVerticesVerticesVector,makeVerticesSectors:makeVerticesSectors,makeEdgesEdges:({edges_vertices:e,vertices_edges:t})=>e.map(((e,r)=>{const o=t[e[0]].filter((e=>e!==r)),n=t[e[1]].filter((e=>e!==r));return o.concat(n)})),makeEdgesFacesUnsorted:makeEdgesFacesUnsorted,makeEdgesFaces:makeEdgesFaces,makeEdgesAssignmentSimple:({edges_foldAngle:e})=>e.map((e=>0===e?"F":e<0?"M":"V")),makeEdgesAssignment:makeEdgesAssignment,makeEdgesFoldAngle:makeEdgesFoldAngle,makeEdgesFoldAngleFromFaces:makeEdgesFoldAngleFromFaces,makeEdgesCoords:makeEdgesCoords,makeEdgesVector:makeEdgesVector,makeEdgesLength:makeEdgesLength,makeEdgesBoundingBox:makeEdgesBoundingBox,makePlanarFaces:makePlanarFaces,makeFacesVerticesFromEdges:makeFacesVerticesFromEdges,makeFacesEdgesFromVertices:makeFacesEdgesFromVertices,makeFacesFaces:makeFacesFaces,makeFacesPolygon:makeFacesPolygon,makeFacesPolygonQuick:({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))),makeFacesCenter2D:({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))).map((e=>Ne.core.centroid(e))),makeFacesConvexCenter:makeFacesConvexCenter});const getCircularEdges=({edges_vertices:e})=>{if(!e)return[];const t=[];for(let r=0;r<e.length;r+=1)e[r][0]===e[r][1]&&t.push(r);return t},getDuplicateEdges=({edges_vertices:e})=>{if(!e)return[];const t=[],r={};for(let o=0;o<e.length;o+=1){const n=`${e[o][0]} ${e[o][1]}`,s=`${e[o][1]} ${e[o][0]}`;void 0!==r[n]?t[o]=r[n]:(r[n]=o,r[s]=o)}return t},removeCircularEdges=(e,t)=>(t||(t=getCircularEdges(e)),t.length&&((e,t,r)=>{const o={};r.forEach((e=>{o[e]=!0})),getGraphKeysWithSuffix(e,t).forEach((t=>e[t].forEach(((r,n)=>{for(let s=r.length-1;s>=0;s-=1)!0===o[r[s]]&&e[t][n].splice(s,1)}))))})(e,s,t),{map:removeGeometryIndices(e,s,t),remove:t}),removeDuplicateEdges=(e,t)=>{t||(t=getDuplicateEdges(e));const r=Object.keys(t).map((e=>parseInt(e,10))),o=replaceGeometryIndices(e,s,t);return r.length&&(e.vertices_edges||e.vertices_vertices||e.vertices_faces)&&(e.vertices_edges=makeVerticesEdgesUnsorted(e),e.vertices_vertices=makeVerticesVertices(e),e.vertices_edges=makeVerticesEdges(e),e.vertices_faces=makeVerticesFaces(e)),{map:o,remove:r}};var tt=Object.freeze({__proto__:null,getCircularEdges:getCircularEdges,getDuplicateEdges:getDuplicateEdges,removeCircularEdges:removeCircularEdges,removeDuplicateEdges:removeDuplicateEdges});const mergeSimpleNextmaps=(...e)=>{if(0===e.length)return[];const t=e[0].map(((e,t)=>t));return e.forEach((e=>t.forEach(((r,o)=>{t[o]=e[r]})))),t},mergeNextmaps=(...e)=>{if(0===e.length)return[];const t=e[0].map(((e,t)=>[t]));return e.forEach((e=>{t.forEach(((r,o)=>r.forEach(((r,n)=>{t[o][n]=e[r]})))),t.forEach(((e,r)=>{t[r]=e.reduce(((e,t)=>e.concat(t)),[]).filter((e=>void 0!==e))}))})),t},mergeBackmaps=(...e)=>{if(0===e.length)return[];let r=e[0].reduce(((e,t)=>e.concat(t)),[]).map(((e,t)=>[t]));return e.forEach((e=>{const o=[];e.forEach(((e,n)=>{o[n]=typeof e===t?r[e]:e.map((e=>r[e])).reduce(((e,t)=>e.concat(t)),[])})),r=o})),r},invertMap=e=>{const r=[],setIndexValue=(e,o)=>{void 0!==r[e]?typeof r[e]===t?r[e]=[r[e],o]:r[e].push(o):r[e]=o};return e.forEach(((e,r)=>{null!=e&&(typeof e===t&&setIndexValue(e,r),e.constructor===Array&&e.forEach((e=>setIndexValue(e,r))))})),r},invertSimpleMap=e=>{const t=[];return e.forEach(((e,r)=>{t[e]=r})),t};var rt=Object.freeze({__proto__:null,mergeSimpleNextmaps:mergeSimpleNextmaps,mergeNextmaps:mergeNextmaps,mergeSimpleBackmaps:(...e)=>{if(0===e.length)return[];let t=e[0].map(((e,t)=>t));return e.forEach((e=>{const r=e.map((e=>t[e]));t=r})),t},mergeBackmaps:mergeBackmaps,invertMap:invertMap,invertSimpleMap:invertSimpleMap});const clean=(e,t)=>{const r=removeDuplicateVertices(e,t),o=removeCircularEdges(e),n=removeDuplicateEdges(e),s=removeIsolatedVertices(e),c=invertSimpleMap(r.map),a=s.remove.map((e=>c[e])),i=invertSimpleMap(o.map),l=n.remove.map((e=>i[e]));return{vertices:{map:mergeSimpleNextmaps(r.map,s.map),remove:r.remove.concat(a)},edges:{map:mergeSimpleNextmaps(o.map,n.map),remove:o.remove.concat(l)}}},validate$1=(e,t)=>{const r=getDuplicateEdges(e),o=getCircularEdges(e),n=getIsolatedVertices(e),s=getDuplicateVertices(e,t),c=(e=>{const t=count.vertices(e),r=count.edges(e),o=count.faces(e);return{vertices:t>=countImplied.vertices(e),edges:r>=countImplied.edges(e),faces:o>=countImplied.faces(e)}})(e);return{summary:0===r.length&&0===o.length&&0===n.length&&c.vertices&&c.edges&&c.faces?"valid":"problematic",vertices:{isolated:n,duplicate:s,references:c.vertices},edges:{circular:o,duplicate:r,references:c.edges},faces:{references:c.faces}}},populate=(e,t)=>"object"!=typeof e?e:e.edges_vertices?(e.vertices_edges=makeVerticesEdgesUnsorted(e),e.vertices_vertices=makeVerticesVertices(e),e.vertices_edges=makeVerticesEdges(e),(e=>{const t=e.edges_vertices.length;if(e.edges_assignment||(e.edges_assignment=[]),e.edges_foldAngle||(e.edges_foldAngle=[]),e.edges_assignment.length>e.edges_foldAngle.length)for(let t=e.edges_foldAngle.length;t<e.edges_assignment.length;t+=1)e.edges_foldAngle[t]=edgeAssignmentToFoldAngle(e.edges_assignment[t]);if(e.edges_foldAngle.length>e.edges_assignment.length)for(let t=e.edges_assignment.length;t<e.edges_foldAngle.length;t+=1)e.edges_assignment[t]=edgeFoldAngleToAssignment(e.edges_foldAngle[t]);for(let r=e.edges_assignment.length;r<t;r+=1)e.edges_assignment[r]="U",e.edges_foldAngle[r]=0})(e),((e,t)=>{if(void 0!==t||e.faces_vertices||e.faces_edges||(t=!0),t&&e.vertices_coords){const t=makePlanarFaces(e);return e.faces_vertices=t.map((e=>e.vertices)),void(e.faces_edges=t.map((e=>e.edges)))}e.faces_vertices&&e.faces_edges||(e.faces_vertices&&!e.faces_edges?e.faces_edges=makeFacesEdgesFromVertices(e):e.faces_edges&&!e.faces_vertices?e.faces_vertices=makeFacesVerticesFromEdges(e):(e.faces_vertices=[],e.faces_edges=[]))})(e,t),e.vertices_faces=makeVerticesFaces(e),e.edges_faces=makeEdgesFacesUnsorted(e),e.faces_faces=makeFacesFaces(e),e):e,getEdgesVerticesOverlappingSpan=(e,t=Ne.core.EPSILON)=>makeEdgesBoundingBox(e,t).map((t=>e.vertices_coords.map((e=>e[0]>t.min[0]&&e[1]>t.min[1]&&e[0]<t.max[0]&&e[1]<t.max[1])))),getEdgesEdgesOverlapingSpans=({vertices_coords:e,edges_vertices:t,edges_coords:r},o=Ne.core.EPSILON)=>{const n=makeEdgesBoundingBox({vertices_coords:e,edges_vertices:t,edges_coords:r},o),s=t.map((()=>[]));for(let e=0;e<t.length-1;e+=1)for(let r=e+1;r<t.length;r+=1){const t=(n[e].max[0]<n[r].min[0]||n[r].max[0]<n[e].min[0])&&(n[e].max[1]<n[r].min[1]||n[r].max[1]<n[e].min[1]);s[e][r]=!t,s[r][e]=!t}for(let e=0;e<t.length;e+=1)s[e][e]=!0;return s};var ot=Object.freeze({__proto__:null,getEdgesVerticesOverlappingSpan:getEdgesVerticesOverlappingSpan,getEdgesEdgesOverlapingSpans:getEdgesEdgesOverlapingSpans});const isVertexCollinear=({vertices_coords:e,vertices_edges:t,edges_vertices:r},o,n=Ne.core.EPSILON)=>{if(!e||!r)return!1;t||(t=makeVerticesEdgesUnsorted({edges_vertices:r}));const s=t[o];if(void 0===s||2!==s.length)return!1;const c=(({edges_vertices:e},t,r)=>(r.forEach((r=>{e[r][0]===t&&e[r][1]===t&&console.warn("removePlanarVertex circular edge")})),r.map((r=>e[r][0]===t?e[r][1]:e[r][0]))))({edges_vertices:r},o,s),a=[c[0],o,c[1]].map((t=>e[t]));return Ne.core.collinearBetween(...a,!1,n)},getVerticesEdgesOverlap=({vertices_coords:e,edges_vertices:t,edges_coords:r},o=Ne.core.EPSILON)=>{r||(r=t.map((t=>t.map((t=>e[t])))));const n=getEdgesVerticesOverlappingSpan({vertices_coords:e,edges_vertices:t,edges_coords:r},o);for(let t=0;t<r.length;t+=1)for(let s=0;s<e.length;s+=1)n[t][s]&&(n[t][s]=Ne.core.overlapLinePoint(Ne.core.subtract(r[t][1],r[t][0]),r[t][0],e[s],Ne.core.excludeS,o));return n.map((e=>e.map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e))))};var nt=Object.freeze({__proto__:null,isVertexCollinear:isVertexCollinear,getVerticesEdgesOverlap:getVerticesEdgesOverlap});const makeEdgesLineParallelOverlap=({vertices_coords:e,edges_vertices:t},r,o,n=Ne.core.EPSILON)=>{const s=Ne.core.normalize2(r),c=t.map((t=>e[t[0]])),a=t.map((t=>t.map((t=>e[t])))).map((e=>Ne.core.subtract2(e[1],e[0]))).map((e=>Ne.core.parallel2(e,r,n)));for(let e=0;e<t.length;e+=1){if(!a[e])continue;if(Ne.core.fnEpsilonEqualVectors(c[e],o)){a[e]=!0;continue}const t=Ne.core.normalize2(Ne.core.subtract2(c[e],o)),r=Math.abs(Ne.core.dot2(t,s));a[e]=Math.abs(1-r)<n}return a},makeEdgesSegmentIntersection=({vertices_coords:e,edges_vertices:t,edges_coords:r},o,n,s=Ne.core.EPSILON)=>{r||(r=makeEdgesCoords({vertices_coords:e,edges_vertices:t}));const c=Ne.core.boundingBox([o,n],s),a=Ne.core.subtract2(n,o);return makeEdgesBoundingBox({vertices_coords:e,edges_vertices:t,edges_coords:r},s).map((e=>Ne.core.overlapBoundingBoxes(c,e))).map(((e,t)=>e?Ne.core.intersectLineLine(a,o,Ne.core.subtract2(r[t][1],r[t][0]),r[t][0],Ne.core.includeS,Ne.core.includeS,s):void 0))},makeEdgesEdgesIntersection=function({vertices_coords:e,edges_vertices:t,edges_vector:r,edges_origin:o},n=Ne.core.EPSILON){r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t})),o||(o=t.map((t=>e[t[0]])));const s=r.map((()=>[])),c=getEdgesEdgesOverlapingSpans({vertices_coords:e,edges_vertices:t},n);for(let e=0;e<r.length-1;e+=1)for(let t=e+1;t<r.length;t+=1)!0===c[e][t]?(s[e][t]=Ne.core.intersectLineLine(r[e],o[e],r[t],o[t],Ne.core.excludeS,Ne.core.excludeS,n),s[t][e]=s[e][t]):s[e][t]=void 0;return s},intersectConvexFaceLine=({vertices_coords:e,edges_vertices:t,faces_vertices:r,faces_edges:o},n,s,c,a=Ne.core.EPSILON)=>{const i=r[n].map((t=>e[t])).map((e=>Ne.core.overlapLinePoint(s,c,e,(()=>!0),a))).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)),l=i.map((e=>r[n][e]));if(i.concat(i.map((e=>e+r[n].length))).map(((e,t,r)=>r[t+1]-e==1)).reduce(((e,t)=>e||t),!1))return;if(l.length>1)return{vertices:l,edges:[]};const d=o[n].map((r=>t[r].map((t=>e[t])))).map((e=>Ne.core.intersectLineLine(s,c,Ne.core.subtract(e[1],e[0]),e[0],Ne.core.includeL,Ne.core.excludeS,a))).map(((e,t)=>({coords:e,edge:o[n][t]}))).filter((e=>void 0!==e.coords)).filter((e=>!l.map((r=>t[e.edge].includes(r))).reduce(((e,t)=>e||t),!1)));return d.length+l.length===2?{vertices:l,edges:d}:void 0};var st=Object.freeze({__proto__:null,makeEdgesLineParallelOverlap:makeEdgesLineParallelOverlap,makeEdgesSegmentIntersection:makeEdgesSegmentIntersection,makeEdgesEdgesIntersection:makeEdgesEdgesIntersection,intersectConvexFaceLine:intersectConvexFaceLine});const fragment_graph=(e,t=Ne.core.EPSILON)=>{const r=e.edges_vertices.map((t=>t.map((t=>e.vertices_coords[t])))),o=r.map((e=>Ne.core.subtract(e[1],e[0]))),n=r.map((e=>e[0])),s=makeEdgesEdgesIntersection({vertices_coords:e.vertices_coords,edges_vertices:e.edges_vertices,edges_vector:o,edges_origin:n},1e-6),c=getVerticesEdgesOverlap({vertices_coords:e.vertices_coords,edges_vertices:e.edges_vertices,edges_coords:r},t);if(0===s.flat().filter((e=>void 0!==e)).length&&0===c.flat().filter((e=>void 0!==e)).length)return;const a=e.vertices_coords.length;s.forEach((t=>t.filter((e=>void 0!==e)).filter((e=>2===e.length)).forEach((t=>{const r=e.vertices_coords.length;e.vertices_coords.push([...t]),t.splice(0,2),t.push(r)})))),s.forEach(((e,t)=>{e.forEach(((e,r)=>{e&&(s[t][r]=e[0])}))}));const i=s.map((e=>e.filter((e=>void 0!==e))));e.edges_vertices.forEach(((e,t)=>e.push(...i[t],...c[t]))),e.edges_vertices.forEach(((t,r)=>{e.edges_vertices[r]=sortVerticesAlongVector({vertices_coords:e.vertices_coords},t,o[r])}));const l=e.edges_vertices.map(((e,t)=>Array(e.length-1).fill(t))).flat();if(e.edges_vertices=e.edges_vertices.map((e=>Array.from(Array(e.length-1)).map(((t,r,o)=>[e[r],e[r+1]])))).flat(),e.edges_assignment&&e.edges_foldAngle&&e.edges_foldAngle.length>e.edges_assignment.length)for(let t=e.edges_assignment.length;t<e.edges_foldAngle.length;t+=1)e.edges_assignment[t]=edgeFoldAngleToAssignment(e.edges_foldAngle[t]);return e.edges_assignment&&(e.edges_assignment=l.map((t=>e.edges_assignment[t]||"U"))),e.edges_foldAngle&&(e.edges_foldAngle=l.map((t=>e.edges_foldAngle[t])).map(((t,r)=>void 0===t?edgeAssignmentToFoldAngle(e.edges_assignment[r]):t))),{vertices:{new:Array.from(Array(e.vertices_coords.length-a)).map(((e,t)=>a+t))},edges:{backmap:l}}},ct=[i,l,u,m],fragment=(e,t=Ne.core.EPSILON)=>{e.vertices_coords=e.vertices_coords.map((e=>e.slice(0,2))),[n,s,c].map((t=>getGraphKeysWithPrefix(e,t))).flat().filter((e=>!ct.includes(e))).forEach((t=>delete e[t]));const r={vertices:{},edges:{}};let o;for(o=0;o<20;o+=1){const o=removeDuplicateVertices(e,t/2),n=removeDuplicateEdges(e),s=removeCircularEdges(e),c=fragment_graph(e,t);if(void 0===c){r.vertices.map=void 0===r.vertices.map?o.map:mergeNextmaps(r.vertices.map,o.map),r.edges.map=void 0===r.edges.map?mergeNextmaps(n.map,s.map):mergeNextmaps(r.edges.map,n.map,s.map);break}const a=invertMap(c.edges.backmap),i=mergeNextmaps(n.map,s.map,a);r.vertices.map=void 0===r.vertices.map?o.map:mergeNextmaps(r.vertices.map,o.map),r.edges.map=void 0===r.edges.map?i:mergeNextmaps(r.edges.map,i)}return 20===o&&console.warn("fragment reached max iterations"),r},getBoundingBox=({vertices_coords:e},t)=>Ne.core.boundingBox(e,t),getBoundaryVertices=({edges_vertices:e,edges_assignment:t})=>uniqueElements(e.filter(((e,r)=>"B"===t[r]||"b"===t[r])).flat()),getBoundary=({vertices_edges:e,edges_vertices:t,edges_assignment:r})=>{if(void 0===r)return{vertices:[],edges:[]};e||(e=makeVerticesEdgesUnsorted({edges_vertices:t}));const o=r.map((e=>"B"===e||"b"===e)),n=[],s=[];let c=-1;for(let e=0;e<o.length;e+=1)if(o[e]){c=e;break}if(-1===c)return{vertices:[],edges:[]};o[c]=!1,n.push(c),s.push(t[c][0]);let a=t[c][1];for(;s[0]!==a;){if(s.push(a),c=e[a].filter((e=>o[e])).shift(),void 0===c)return{vertices:[],edges:[]};t[c][0]===a?[,a]=t[c]:[a]=t[c],o[c]=!1,n.push(c)}return{vertices:s,edges:n}},getPlanarBoundary=({vertices_coords:e,vertices_edges:t,vertices_vertices:r,edges_vertices:o})=>{r||(r=makeVerticesVertices({vertices_coords:e,vertices_edges:t,edges_vertices:o}));const n=makeVerticesToEdgeBidirectional({edges_vertices:o}),s=[],c=[],a={vertices:c,edges:s};let i=-1/0,l=-1;if(e.forEach(((e,t)=>{e[0]>i&&(i=e[0],l=t)})),-1===l)return a;c.push(l);const d=e[l],u=r[l],m=u.map((t=>e[t])).map((e=>[e[0]-d[0],e[1]-d[1]])).map((e=>Math.atan2(e[1],e[0]))).map((e=>e<0?e+2*Math.PI:e)).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).shift().i,g=u[m],p=n[l<g?`${l} ${g}`:`${g} ${l}`];s.push(p);let h=l,v=g,_=0;for(;_<1e4;){const e=r[v],t=e.indexOf(h),o=e[(t+1)%e.length],i=n[v<o?`${v} ${o}`:`${o} ${v}`];if(i===s[0])return a;c.push(v),s.push(i),h=v,v=o,_+=1}return console.warn("calculate boundary potentially entered infinite loop"),a};var at=Object.freeze({__proto__:null,getBoundingBox:getBoundingBox,getBoundaryVertices:getBoundaryVertices,getBoundary:getBoundary,getPlanarBoundary:getPlanarBoundary});const apply_matrix_to_graph=function(e,t){return filterKeysWithSuffix(e,"coords").forEach((r=>{e[r]=e[r].map((e=>Ne.core.resize(3,e))).map((e=>Ne.core.multiplyMatrix3Vector3(t,e)))})),filterKeysWithSuffix(e,"matrix").forEach((r=>{e[r]=e[r].map((e=>Ne.core.multiplyMatrices3(e,t)))})),e};var it={scale:(e,...t)=>{const r=1===t.length?[t[0],t[0],t[0]]:[1,1,1].map(((e,r)=>void 0===t[r]?e:t[r])),o=Ne.core.makeMatrix3Scale(r);return apply_matrix_to_graph(e,o)},translate:(e,...t)=>{const r=Ne.core.getVector(...t),o=Ne.core.resize(3,r),n=Ne.core.makeMatrix3Translate(...o);return apply_matrix_to_graph(e,n)},rotateZ:(e,t,...r)=>{const o=Ne.core.getVector(...r),n=Ne.core.resize(3,o),s=Ne.core.makeMatrix3RotateZ(t,...n);return apply_matrix_to_graph(e,s)},transform:apply_matrix_to_graph};const getFaceFaceSharedVertices=(e,t)=>{const r={};t.forEach((e=>{r[e]=!0}));const o=e.map((e=>!!r[e])),n=[],s=o.indexOf(!1),c={};for(let t=s+1;t<o.length;t+=1)o[t]&&!c[e[t]]&&(n.push(e[t]),c[e[t]]=!0);for(let t=0;t<s;t+=1)o[t]&&!c[e[t]]&&(n.push(e[t]),c[e[t]]=!0);return n},makeFaceSpanningTree=({faces_vertices:e,faces_faces:t},r=0)=>{if(t||(t=makeFacesFaces({faces_vertices:e})),0===t.length)return[];const o=[[{face:r}]],n={};n[r]=!0;do{const r=o[o.length-1].map((e=>t[e.face].map((t=>({face:t,parent:e.face}))))).reduce(((e,t)=>e.concat(t)),[]),s={};r.forEach(((e,t)=>{n[e.face]&&(s[t]=!0),n[e.face]=!0}));const c=r.filter(((e,t)=>!s[t]));c.map((t=>getFaceFaceSharedVertices(e[t.face],e[t.parent]))).forEach(((e,t)=>{const r=e.slice(0,2);c[t].edge_vertices=r})),o[o.length]=c}while(o[o.length-1].length>0);return o.length>0&&0===o[o.length-1].length&&o.pop(),o};var lt=Object.freeze({__proto__:null,getFaceFaceSharedVertices:getFaceFaceSharedVertices,makeFaceSpanningTree:makeFaceSpanningTree});const multiplyVerticesFacesMatrix2=({vertices_coords:e,vertices_faces:t,faces_vertices:r},o)=>{t||(t=makeVerticesFaces({faces_vertices:r}));const n=t.map((e=>e.filter((e=>null!=e)).shift())).map((e=>void 0===e?Ne.core.identity2x3:o[e]));return e.map(((e,t)=>Ne.core.multiplyMatrix2Vector2(n[t],e)))},ft={U:!0,u:!0},makeFacesMatrix=({vertices_coords:e,edges_vertices:t,edges_foldAngle:r,edges_assignment:o,faces_vertices:n,faces_faces:s},c=0)=>{!o&&r&&(o=makeEdgesAssignment({edges_foldAngle:r})),r||(r=o?makeEdgesFoldAngle({edges_assignment:o}):Array(t.length).fill(0));const a=makeVerticesToEdgeBidirectional({edges_vertices:t}),i=n.map((()=>Ne.core.identity3x4));return makeFaceSpanningTree({faces_vertices:n,faces_faces:s},c).slice(1).forEach((t=>t.forEach((t=>{const n=t.edge_vertices.map((t=>e[t])),s=t.edge_vertices.join(" "),c=a[s],l=ft[o[c]]?Math.PI:r[c]*Math.PI/180,d=Ne.core.makeMatrix3Rotate(l,Ne.core.subtract(...Ne.core.resizeUp(n[1],n[0])),n[0]);i[t.face]=Ne.core.multiplyMatrices3(i[t.parent],d)})))),i},dt={M:!0,m:!0,V:!0,v:!0,U:!0,u:!0,F:!1,f:!1,B:!1,b:!1},makeEdgesIsFolded=({edges_vertices:e,edges_foldAngle:t,edges_assignment:r})=>void 0===r?void 0===t?e.map((()=>!0)):t.map((e=>e<-Ne.core.EPSILON||e>Ne.core.EPSILON)):r.map((e=>dt[e])),makeFacesMatrix2=({vertices_coords:e,edges_vertices:t,edges_foldAngle:r,edges_assignment:o,faces_vertices:n,faces_faces:s},c=0)=>{r||(r=o?makeEdgesFoldAngle({edges_assignment:o}):Array(t.length).fill(0));const a=makeEdgesIsFolded({edges_vertices:t,edges_foldAngle:r,edges_assignment:o}),i=makeVerticesToEdgeBidirectional({edges_vertices:t}),l=n.map((()=>Ne.core.identity2x3));return makeFaceSpanningTree({faces_vertices:n,faces_faces:s},c).slice(1).forEach((t=>t.forEach((t=>{const r=t.edge_vertices.map((t=>e[t])),o=t.edge_vertices.join(" "),n=i[o],s=Ne.core.subtract2(r[1],r[0]),c=r[0],d=a[n]?Ne.core.makeMatrix2Reflect(s,c):Ne.core.identity2x3;l[t.face]=Ne.core.multiplyMatrices2(l[t.parent],d)})))),l};var ut=Object.freeze({__proto__:null,multiplyVerticesFacesMatrix2:multiplyVerticesFacesMatrix2,makeFacesMatrix:makeFacesMatrix,makeEdgesIsFolded:makeEdgesIsFolded,makeFacesMatrix2:makeFacesMatrix2});const makeVerticesCoordsFolded=({vertices_coords:e,vertices_faces:t,edges_vertices:r,edges_foldAngle:o,edges_assignment:n,faces_vertices:s,faces_faces:c,faces_matrix:a},i)=>{a=makeFacesMatrix({vertices_coords:e,edges_vertices:r,edges_foldAngle:o,edges_assignment:n,faces_vertices:s,faces_faces:c},i),t||(t=makeVerticesFaces({faces_vertices:s}));const l=t.map((e=>e.filter((e=>null!=e)).shift())).map((e=>void 0===e?Ne.core.identity3x4:a[e]));return e.map((e=>Ne.core.resize(3,e))).map(((e,t)=>Ne.core.multiplyMatrix3Vector3(l[t],e)))},makeVerticesCoordsFlatFolded=({vertices_coords:e,edges_vertices:t,edges_foldAngle:r,edges_assignment:o,faces_vertices:n,faces_faces:s},c=0)=>{const a=makeEdgesIsFolded({edges_vertices:t,edges_foldAngle:r,edges_assignment:o}),i=[];n[c].forEach((t=>{i[t]=[...e[t]]}));const l=[];l[c]=!1;const d=makeVerticesToEdgeBidirectional({edges_vertices:t});return makeFaceSpanningTree({faces_vertices:n,faces_faces:s},c).slice(1).forEach((r=>r.forEach((r=>{const o=r.edge_vertices.join(" "),s=d[o],c=t[s].map((e=>i[e]));if(void 0===c[0]||void 0===c[1])return;const u=t[s].map((t=>e[t])),m=u[0],g=Ne.core.normalize2(Ne.core.subtract2(u[1],u[0])),p=Ne.core.rotate90(g);l[r.face]=a[s]?!l[r.parent]:l[r.parent];const h=Ne.core.normalize2(Ne.core.subtract2(c[1],c[0])),v=c[0],_=l[r.face]?Ne.core.rotate270(h):Ne.core.rotate90(h);n[r.face].filter((e=>void 0===i[e])).forEach((t=>{const r=Ne.core.subtract2(e[t],m),o=Ne.core.dot(r,p),n=Ne.core.dot(r,g),s=Ne.core.scale2(h,n),c=Ne.core.scale2(_,o),a=Ne.core.add2(Ne.core.add2(v,s),c);i[t]=a}))})))),i};var mt=Object.freeze({__proto__:null,makeVerticesCoordsFolded:makeVerticesCoordsFolded,makeVerticesCoordsFlatFolded:makeVerticesCoordsFlatFolded});const clone=function(e){let t,o;if(typeof e!==r)return e;if(!e)return e;if("[object Array]"===Object.prototype.toString.apply(e)){for(t=[],o=0;o<e.length;o+=1)t[o]=clone(e[o]);return t}for(o in t={},e)e.hasOwnProperty(o)&&(t[o]=clone(e[o]));return t},makeFacesWindingFromMatrix2=e=>e.map((e=>e[0]*e[3]-e[1]*e[2])).map((e=>e>=0)),makeFacesWinding=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])).map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>(e[1][0]-e[0][0])*(e[1][1]+e[0][1]))).reduce(((e,t)=>e+t),0))).map((e=>e<0));var gt=Object.freeze({__proto__:null,makeFacesWindingFromMatrix:e=>e.map((e=>e[0]*e[4]-e[1]*e[3])).map((e=>e>=0)),makeFacesWindingFromMatrix2:makeFacesWindingFromMatrix2,makeFacesWinding:makeFacesWinding});const explode=e=>{if(!e.faces_vertices)return{};const t=e.faces_edges?e.faces_edges:makeFacesEdgesFromVertices(e),r=e.faces_vertices.flatMap((e=>e)),o=t.flatMap((e=>e));let n=0,s=0,c=0;return e.faces_vertices=e.faces_vertices.map((e=>e.map((()=>n++)))),e.faces_edges=e.faces_edges.map((e=>e.map((()=>s++)))),e.edges_vertices=e.faces_edges.flatMap((e=>e.map(((e,t,r)=>{const o=t===r.length-1?[c,c+1-r.length]:[c,c+1];return c+=1,o})))),e.vertices_coords&&(e.vertices_coords=clone(r.map((t=>e.vertices_coords[t])))),e.edges_assignment&&(e.edges_assignment=clone(o.map((t=>e.edges_assignment[t])))),e.edges_foldAngle&&(e.edges_foldAngle=clone(o.map((t=>e.edges_foldAngle[t])))),e.vertices_vertices&&delete e.vertices_vertices,e.vertices_edges&&delete e.vertices_edges,e.vertices_faces&&delete e.vertices_faces,e.edges_edges&&delete e.edges_edges,e.edges_faces&&delete e.edges_faces,e.faces_faces&&delete e.faces_faces,{vertices:{map:r},edges:{map:o}}},explodeFaces=e=>{const t=e.faces_vertices.flatMap((t=>t.map((t=>e.vertices_coords[t]))));let r=0;const o=e.faces_vertices.map((e=>e.map((()=>r++))));return{vertices_coords:JSON.parse(JSON.stringify(t)),faces_vertices:o}},explodeShrinkFaces=({vertices_coords:e,faces_vertices:t},r=.333)=>{const o=explodeFaces({vertices_coords:e,faces_vertices:t}),n=makeFacesWinding(o),s=o.faces_vertices.map((e=>e.map((e=>o.vertices_coords[e])))).map((e=>e.map(((e,t,r)=>Ne.core.subtract2(e,r[(t+1)%r.length]))))),c=makeFacesConvexCenter({vertices_coords:e,faces_vertices:t}),a=t.map((t=>t.map((t=>e[t])))).map(((e,t)=>e.map((e=>Ne.core.distance2(e,c[t]))))),i=s.map(((e,t)=>e.map(((e,t,r)=>[e,Ne.core.flip(r[(t-1+r.length)%r.length])])).map((e=>n[t]?Ne.core.counterClockwiseBisect2(...e):Ne.core.clockwiseBisect2(...e))))).map(((e,t)=>e.map(((e,r)=>Ne.core.scale(e,a[t][r])))));return o.faces_vertices.forEach(((e,t)=>e.forEach(((e,n)=>{o.vertices_coords[e]=Ne.core.add2(o.vertices_coords[e],Ne.core.scale2(i[t][n],-r))})))),o};var pt=Object.freeze({__proto__:null,explode:explode,explodeFaces:explodeFaces,explodeShrinkFaces:explodeShrinkFaces});const nearestVertex=({vertices_coords:e},t)=>{if(!e)return;const r=Ne.core.resize(e[0].length,t),o=e.map(((e,t)=>({d:Ne.core.distance(r,e),i:t}))).sort(((e,t)=>e.d-t.d)).shift();return o?o.i:void 0},nearestEdge=({vertices_coords:e,edges_vertices:t},r)=>{if(!e||!t)return;const o=t.map((t=>t.map((t=>e[t])))).map((e=>Ne.core.nearestPointOnLine(Ne.core.subtract(e[1],e[0]),e[0],r,Ne.core.segmentLimiter)));return Ne.core.smallestComparisonSearch(r,o,Ne.core.distance)},faceContainingPoint=({vertices_coords:e,faces_vertices:t},r)=>{if(!e||!t)return;const o=t.map(((t,r)=>({face:t.map((t=>e[t])),i:r}))).filter((e=>Ne.core.overlapConvexPolygonPoint(e.face,r))).shift();return void 0===o?void 0:o.i},nearestFace=(e,t)=>{const r=faceContainingPoint(e,t);if(void 0!==r)return r;if(e.edges_faces){const r=nearestEdge(e,t),o=e.edges_faces[r];if(1===o.length)return o[0];if(o.length>1){const r=makeFacesConvexCenter({vertices_coords:e.vertices_coords,faces_vertices:o.map((t=>e.faces_vertices[t]))}).map((e=>Ne.core.distance(e,t)));let n=0;for(let e=0;e<r.length;e+=1)r[e]<r[n]&&(n=e);return o[n]}}};var ht=Object.freeze({__proto__:null,nearestVertex:nearestVertex,nearestEdge:nearestEdge,faceContainingPoint:faceContainingPoint,nearestFace:nearestFace,nearest:(e,...t)=>{const r={vertices:nearestVertex,edges:nearestEdge,faces:nearestFace},o=Ne.core.getVector(...t),n=Object.create(null);return["vertices","edges","faces"].forEach((t=>{Object.defineProperty(n,Ue[t],{enumerable:!0,get:()=>r[t](e,o)}),filterKeysWithPrefix(e,t).forEach((r=>Object.defineProperty(n,r,{enumerable:!0,get:()=>e[r][n[Ue[t]]]})))})),n}});const addVertices=(e,t,r=Ne.core.EPSILON)=>{e.vertices_coords||(e.vertices_coords=[]),"number"==typeof t[0]&&(t=[t]);const o=t.map((t=>e.vertices_coords.map((e=>Ne.core.distance(e,t)<r)).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).shift()));let n=e.vertices_coords.length;const s=t.filter(((e,t)=>void 0===o[t]));return e.vertices_coords.push(...s),o.map((e=>void 0===e?n++:e))},splitEdge=(e,t,r,o=Ne.core.EPSILON)=>{if(e.edges_vertices.length<t)return{};const n=e.edges_vertices[t];r||(r=Ne.core.midpoint(...n));const c=n.map((t=>e.vertices_coords[t])).map((e=>Ne.core.distance(e,r)<o));if(c[0])return{vertex:n[0],edges:{}};if(c[1])return{vertex:n[1],edges:{}};const a=e.vertices_coords.length;e.vertices_coords[a]=r;const i=[0,1].map((t=>t+e.edges_vertices.length));((e,t,r)=>{const o=e.edges_vertices[t],n=[{edges_vertices:[o[0],r]},{edges_vertices:[r,o[1]]}];if(n.forEach((r=>[u,m].filter((r=>e[r]&&void 0!==e[r][t])).forEach((o=>{r[o]=e[o][t]})))),e.vertices_coords&&(e.edges_length||e.edges_vector)){const t=n.map((t=>t.edges_vertices.map((t=>e.vertices_coords[t]))));e.edges_vector&&n.forEach(((e,r)=>{e.edges_vector=Ne.core.subtract(t[r][1],t[r][0])})),e.edges_length&&n.forEach(((e,r)=>{e.edges_length=Ne.core.distance2(...t[r])}))}return n})(e,t,a).forEach(((t,r)=>Object.keys(t).forEach((o=>{e[o][i[r]]=t[o]})))),(({vertices_vertices:e},t,r)=>{e&&(e[t]=[...r],r.forEach(((r,o,n)=>{const s=n[(o+1)%n.length],c=e[r].indexOf(s);e[r][c]=t})))})(e,a,n),(({vertices_coords:e,vertices_vertices:t,vertices_sectors:r},o)=>{r&&(r[o]=1===t[o].length?[Ne.core.TWO_PI]:Ne.core.counterClockwiseSectors2(t[o].map((t=>Ne.core.subtract2(e[t],e[o])))))})(e,a),(({vertices_edges:e},t,r,o,n)=>{e&&(e[r]=[...n],o.map((r=>e[r].indexOf(t))).forEach(((t,r)=>{e[o[r]][t]=n[r]})))})(e,t,a,n,i);const l=(({vertices_faces:e,edges_vertices:t,edges_faces:r,faces_edges:o,faces_vertices:n},s)=>{if(r&&r[s])return r[s];const c=t[s];if(void 0!==e){const t=[];for(let r=0;r<e[c[0]].length;r+=1)for(let o=0;o<e[c[1]].length;o+=1)if(e[c[0]][r]===e[c[1]][o]){if(void 0===e[c[0]][r])continue;t.push(e[c[0]][r])}return t}if(o){const e=[];for(let t=0;t<o.length;t+=1)for(let r=0;r<o[t].length;r+=1)o[t][r]===s&&e.push(t);return e}n&&console.warn("todo: findAdjacentFacesToEdge")})(e,t);l&&((({vertices_faces:e},t,r)=>{e&&(e[t]=[...r])})(e,a,l),(({edges_faces:e},t,r)=>{e&&t.forEach((t=>{e[t]=[...r]}))})(e,i,l),(({faces_vertices:e},t,r,o)=>{e&&o.map((t=>e[t])).forEach((e=>e.map(((e,t,o)=>{const n=(t+1)%o.length;return e===r[0]&&o[n]===r[1]||e===r[1]&&o[n]===r[0]?n:void 0})).filter((e=>void 0!==e)).sort(((e,t)=>t-e)).forEach((r=>e.splice(r,0,t)))))})(e,a,n,l),(({edges_vertices:e,faces_vertices:t,faces_edges:r},o)=>{const n=makeVerticesToEdgeBidirectional({edges_vertices:e});o.map((e=>t[e].map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>n[e.join(" ")])))).forEach(((e,t)=>{r[o[t]]=e}))})(e,l));const d=removeGeometryIndices(e,s,[t]);return i.forEach(((e,t)=>{i[t]=d[i[t]]})),d.splice(-2),d[t]=i,{vertex:a,edges:{map:d,new:i,remove:t}}},rebuild_edge=(e,t,r)=>{const o=e.edges_vertices.length,n=(({vertices_coords:e},t,r)=>{const o=t.map((t=>e[t])).reverse();return{edges_vertices:[...t],edges_foldAngle:0,edges_assignment:"U",edges_length:Ne.core.distance2(...o),edges_vector:Ne.core.subtract(...o),edges_faces:[r,r]}})(e,r,t);return Object.keys(n).filter((t=>void 0!==e[t])).forEach((t=>{e[t][o]=n[t]})),o},build_faces=(e,t,r)=>{const o=[0,1].map((t=>e.faces_vertices.length+t));return(({edges_vertices:e,faces_vertices:t,faces_edges:r},o,n)=>{const s=n.map((e=>t[o].indexOf(e))),c=splitCircularArray(t[o],s).map((e=>({faces_vertices:e})));if(r){const t=makeVerticesToEdgeBidirectional({edges_vertices:e});c.map((e=>e.faces_vertices.map(((e,t,r)=>`${e} ${r[(t+1)%r.length]}`)).map((e=>t[e])))).forEach(((e,t)=>{c[t].faces_edges=e}))}return c})(e,t,r).forEach(((t,r)=>Object.keys(t).forEach((n=>{e[n][o[r]]=t[n]})))),o},vt="splitFace potentially given a non-convex face",splitFace=(e,t,r,o,n)=>{const s=intersectConvexFaceLine(e,t,r,o,n);if(void 0===s)return;const a=((e,{vertices:t,edges:r})=>{let o;const n=r.map((t=>{const r=splitEdge(e,o?o[t.edge]:t.edge,t.coords);return o=o?mergeNextmaps(o,r.edges.map):r.edges.map,r}));let s;return t.push(...n.map((e=>e.vertex))),n.forEach((e=>{e.edges.remove=s?s[e.edges.remove]:e.edges.remove;const t=invertSimpleMap(e.edges.map);s=s?mergeBackmaps(s,t):t})),{vertices:t,edges:{map:o,remove:n.map((e=>e.edges.remove))}}})(e,s);a.edges.new=rebuild_edge(e,t,a.vertices),(({vertices_coords:e,vertices_vertices:t,edges_vertices:r},o)=>{const n=r[o][0],s=r[o][1];t[n]=sortVerticesCounterClockwise({vertices_coords:e},t[n].concat(s),n),t[s]=sortVerticesCounterClockwise({vertices_coords:e},t[s].concat(n),s)})(e,a.edges.new),(({edges_vertices:e,vertices_edges:t,vertices_vertices:r},o)=>{if(!t||!r)return;const n=e[o];n.map((e=>r[e])).map(((e,t)=>e.indexOf(n[(t+1)%n.length]))).forEach(((e,r)=>t[n[r]].splice(e,0,o)))})(e,a.edges.new);const i=build_faces(e,t,a.vertices);((e,t,r)=>{const o={};r.forEach((t=>e.faces_vertices[t].forEach((e=>{o[e]||(o[e]=[]),o[e].push(t)})))),e.faces_vertices[t].forEach((r=>{const n=e.vertices_faces[r].indexOf(t),s=o[r];-1!==n&&s?e.vertices_faces[r].splice(n,1,...s):console.warn(vt)}))})(e,t,i),((e,t,r,o)=>{const n={};o.forEach((t=>e.faces_edges[t].forEach((e=>{n[e]||(n[e]=[]),n[e].push(t)})))),[...e.faces_edges[t],r].forEach((r=>{const o=n[r],s=[];for(let o=0;o<e.edges_faces[r].length;o+=1)e.edges_faces[r][o]===t&&s.push(o);if(0===s.length||!o)return void console.warn(vt);s.reverse().forEach((t=>e.edges_faces[r].splice(t,1)));const c=s[s.length-1];e.edges_faces[r].splice(c,0,...o)}))})(e,t,a.edges.new,i),(({faces_vertices:e,faces_faces:t},r,o)=>{const n=t[r],s=o.map((t=>e[t])),c=n.map((t=>{const r=e[t],n=[0,0];for(let e=0;e<s.length;e+=1){let t=0;for(let o=0;o<r.length;o+=1)-1!==s[e].indexOf(r[o])&&(t+=1);n[e]=t}return n[0]>=2?o[0]:n[1]>=2?o[1]:void 0}));o.forEach(((e,r,n)=>{t[e]=[n[(r+1)%o.length]]})),n.forEach(((e,o)=>{for(let n=0;n<t[e].length;n+=1)t[e][n]===r&&(t[e][n]=c[o],t[c[o]].push(e))}))})(e,t,i);const l=removeGeometryIndices(e,c,[t]);return i.forEach(((e,t)=>{i[t]=l[i[t]]})),l.splice(-2),l[t]=i,a.faces={map:l,new:i,remove:t},a},_t={};_t.prototype=Object.create(Object.prototype),_t.prototype.constructor=_t;const yt=Object.assign({clean:clean,validate:validate$1,populate:populate,fragment:fragment,addVertices:addVertices,splitEdge:splitEdge,faceSpanningTree:makeFaceSpanningTree,explodeFaces:explodeFaces,explodeShrinkFaces:explodeShrinkFaces},it);Object.keys(yt).forEach((e=>{_t.prototype[e]=function(){return yt[e](this,...arguments)}})),_t.prototype.splitFace=function(e,...t){const r=Ne.core.getLine(...t);return splitFace(this,e,r.vector,r.origin)},_t.prototype.copy=function(){return Object.assign(Object.create(Object.getPrototypeOf(this)),clone(this))},_t.prototype.clear=function(){return Te.graph.forEach((e=>delete this[e])),Te.orders.forEach((e=>delete this[e])),delete this.file_frames,this},_t.prototype.boundingBox=function(){return Ne.rect.fromPoints(this.vertices_coords)},_t.prototype.unitize=function(){if(!this.vertices_coords)return this;const e=Ne.core.bounding_box(this.vertices_coords),t=Math.max(...e.span),r=0===t?1:1/t,o=e.min;return this.vertices_coords=this.vertices_coords.map((e=>Ne.core.subtract(e,o))).map((e=>e.map((e=>e*r)))),this},_t.prototype.folded=function(){const e=this.faces_matrix2?multiplyVerticesFacesMatrix2(this,this.faces_matrix2):makeVerticesCoordsFolded(this,...arguments);return Object.assign(Object.create(Object.getPrototypeOf(this)),Object.assign(clone(this),{vertices_coords:e,frame_classes:[_]}))},_t.prototype.flatFolded=function(){const e=this.faces_matrix2?multiplyVerticesFacesMatrix2(this,this.faces_matrix2):makeVerticesCoordsFlatFolded(this,...arguments);return Object.assign(Object.create(Object.getPrototypeOf(this)),Object.assign(clone(this),{vertices_coords:e,frame_classes:[_]}))};const shortenKeys=function(e){const t=Object.create(null);return Object.keys(e).forEach((r=>{t[r.substring(this.length+1)]=e[r]})),t},getComponent=function(e){return transposeGraphArrays(this,e).map(shortenKeys.bind(e)).map($e[e].bind(this))};[n,s,c].forEach((e=>Object.defineProperty(_t.prototype,e,{enumerable:!0,get:function(){return getComponent.call(this,e)}}))),Object.defineProperty(_t.prototype,p,{enumerable:!0,get:function(){const e=getBoundary(this),t=e.vertices.map((e=>this.vertices_coords[e]));return Object.keys(e).forEach((r=>{t[r]=e[r]})),Object.assign(t,e)}});const bt={vertices:nearestVertex,edges:nearestEdge,faces:nearestFace};_t.prototype.nearest=function(){const e=Ne.core.getVector(arguments),t=Object.create(null),r={};return[n,s,c].forEach((o=>{Object.defineProperty(t,Ue[o],{enumerable:!0,get:()=>(void 0!==r[o]||(r[o]=bt[o](this,e)),r[o])}),filterKeysWithPrefix(this,o).forEach((e=>Object.defineProperty(t,e,{enumerable:!0,get:()=>this[e][t[Ue[o]]]})))})),t};var Et=_t.prototype;const clip=function(e,t){const r=getBoundary(e).vertices.map((t=>e.vertices_coords[t])),o=t.vector?t.vector:Ne.core.subtract2(t[1],t[0]),n=t.origin?t.origin:t[0],s=t.domain_function?t.domain_function:Ne.core.includeL;return Ne.core.clipLineConvexPolygon(r,o,n,Ne.core.include,s)},addEdges=(e,t)=>{e.edges_vertices||(e.edges_vertices=[]),"number"==typeof t[0]&&(t=[t]);const r=t.map(((t,r)=>e.edges_vertices.length+r));e.edges_vertices.push(...t);const o=removeDuplicateEdges(e).map;return r.map((e=>o[e]))},addPlanarSegment=(e,t,r,o=Ne.core.EPSILON)=>{e.vertices_sectors||(e.vertices_sectors=makeVerticesSectors(e));const n=[t,r].map((e=>[e[0],e[1]])),s=Ne.core.subtract2(n[1],n[0]),c=makeEdgesSegmentIntersection(e,n[0],n[1],o),a=c.map(((e,t)=>void 0===e?void 0:t)).filter((e=>void 0!==e)).sort(((e,t)=>e-t)),i={};a.forEach((t=>e.edges_faces[t].forEach((e=>{i[e]=!0}))));const l=Object.keys(i).map((e=>parseInt(e,10))).sort(((e,t)=>e-t)),d=a.reverse().map((t=>splitEdge(e,t,c[t],o))).map((e=>e.vertex)),u=addVertices(e,n,o),m={};d.forEach((e=>{m[e]=!0})),u.forEach((e=>{m[e]=!0}));const g=Object.keys(m).map((e=>parseInt(e,10))),p=sortVerticesAlongVector(e,g,s),h=makeVerticesToEdgeBidirectional(e),v=((e,t,r)=>{const o=Array.from(Array(t.length-1)).map(((e,r)=>[t[r],t[r+1]])),n=o.map((e=>e.join(" "))).map((e=>void 0===r[e])),s=o.filter(((e,t)=>n[t])),c=Array.from(Array(s.length)).map(((t,r)=>e.edges_vertices.length+r));c.forEach(((t,r)=>{e.edges_vertices[t]=s[r]})),e.edges_assignment&&c.forEach((t=>{e.edges_assignment[t]="U"})),e.edges_foldAngle&&c.forEach((t=>{e.edges_foldAngle[t]=0}));for(let r=0;r<t.length;r+=1){const o=t[r],s=[n[r-1]?t[r-1]:void 0,n[r]?t[r+1]:void 0].filter((e=>void 0!==e)),c=(e.vertices_vertices[o]?e.vertices_vertices[o]:[]).concat(s);e.vertices_vertices[o]=sortVerticesCounterClockwise(e,c,t[r])}const a=makeVerticesToEdgeBidirectional(e);for(let r=0;r<t.length;r+=1){const o=t[r];e.vertices_edges[o]=e.vertices_vertices[o].map((e=>a[`${o} ${e}`]))}return t.map((t=>1===e.vertices_vertices[t].length?[Ne.core.TWO_PI]:Ne.core.counterClockwiseSectors2(e.vertices_vertices[t].map((r=>Ne.core.subtract2(e.vertices_coords[r],e.vertices_coords[t])))))).forEach(((r,o)=>{e.vertices_sectors[t[o]]=r})),c})(e,p,h);v.forEach((t=>{const r=e.edges_vertices[t];h[`${r[0]} ${r[1]}`]=t,h[`${r[1]} ${r[0]}`]=t}));const _=p.map((t=>e.vertices_vertices[t].map((e=>[[e,t],[t,e]])))).reduce(((e,t)=>e.concat(t)),[]).reduce(((e,t)=>e.concat(t)),[]),y={},b=_.map((t=>counterClockwiseWalk(e,t[0],t[1],y))).filter((e=>void 0!==e)),E=filterWalkedBoundaryFace(b);removeGeometryIndices(e,"faces",l);const x=E.map(((t,r)=>e.faces_vertices.length+r));return e.faces_vertices&&x.forEach(((t,r)=>{e.faces_vertices[t]=E[r].vertices})),e.faces_edges&&x.forEach(((t,r)=>{e.faces_edges[t]=E[r].edges.map((e=>h[e]))})),e.faces_angles&&x.forEach(((t,r)=>{e.faces_angles[t]=E[r].faces_angles})),e.vertices_faces&&(e.vertices_faces=makeVerticesFaces(e)),e.edges_faces&&(e.edges_faces=makeEdgesFacesUnsorted(e)),e.faces_faces&&(e.faces_faces=makeFacesFaces(e)),e.vertices_coords.length===e.vertices_vertices.length&&e.vertices_coords.length===e.vertices_edges.length&&e.vertices_coords.length===e.vertices_faces.length||console.warn("vertices mismatch",JSON.parse(JSON.stringify(e))),e.edges_vertices.length===e.edges_faces.length&&e.edges_vertices.length===e.edges_assignment.length||console.warn("edges mismatch",JSON.parse(JSON.stringify(e))),e.faces_vertices.length===e.faces_edges.length&&e.faces_vertices.length===e.faces_faces.length||console.warn("faces mismatch",JSON.parse(JSON.stringify(e))),v},removePlanarEdge=(e,t)=>{const r=[...e.edges_vertices[t]].sort(((e,t)=>t-e)),o=[...e.edges_faces[t]];(({vertices_vertices:e},t)=>{const r=[t[1],t[0]];t.map(((t,o)=>e[t].indexOf(r[o]))).forEach(((r,o)=>e[t[o]].splice(r,1)))})(e,r),(({vertices_edges:e},t,r)=>{r.map(((r,o)=>e[r].indexOf(t))).forEach(((t,o)=>e[r[o]].splice(t,1)))})(e,t,r);const n=r.map((t=>0===e.vertices_vertices[t].length)),s=r.filter(((e,t)=>n[t]));if(2===o.length&&o[0]!==o[1]){const n=e.faces_vertices.length,s=((e,t,r,o)=>{const n=t.map((t=>e.faces_edges[t].indexOf(r))),s=[];t.forEach(((t,r)=>e.faces_vertices[t].forEach(((e,t,n)=>{const c=n[(t+1)%n.length];(e===o[0]&&c===o[1]||e===o[1]&&c===o[0])&&(s[r]=t)})))),void 0!==s[0]&&void 0!==s[1]||console.warn("removePlanarEdge error joining faces");const c=t.map((t=>e.faces_edges[t].length)),a=t.map((t=>e.faces_vertices[t].length)),i=c.map((e=>e-1)),l=a.map((e=>e-1)),d=n.map(((e,t)=>(e+1)%c[t])),u=s.map(((e,t)=>(e+1)%a[t])),m=t.map(((t,r)=>Array.from(Array(i[r])).map(((e,t)=>(d[r]+t)%c[r])).map((r=>e.faces_edges[t][r])))),g=t.map(((t,r)=>Array.from(Array(l[r])).map(((e,t)=>(u[r]+t)%a[r])).map((r=>e.faces_vertices[t][r])))),p=t.map((t=>e.faces_faces[t])).reduce(((e,t)=>e.concat(t)),[]).filter((e=>e!==t[0]&&e!==t[1]));return{vertices:g[0].concat(g[1]),edges:m[0].concat(m[1]),faces:p}})(e,o,t,r);e.faces_vertices.push(s.vertices),e.faces_edges.push(s.edges),e.faces_faces.push(s.faces),e.vertices_faces.forEach(((t,r)=>{let s=!1;t.forEach(((c,a)=>{if(c===o[0]||c===o[1]){e.vertices_faces[r][a]=n;const o=s?[r,1]:[r,1,n];t.splice(...o),s=!0}}))})),e.edges_faces.forEach(((t,r)=>t.forEach(((t,s)=>{t!==o[0]&&t!==o[1]||(e.edges_faces[r][s]=n)})))),e.faces_faces.forEach(((t,r)=>t.forEach(((t,s)=>{t!==o[0]&&t!==o[1]||(e.faces_faces[r][s]=n)})))),e.faces_vertices.forEach((t=>t.forEach((t=>{void 0===t&&console.log("FOUND ONE before remove",e.faces_vertices)})))),removeGeometryIndices(e,"faces",o)}if(2===o.length&&o[0]===o[1]&&s.length){const r=o[0];e.faces_vertices[r]=e.faces_vertices[r].filter((e=>!s.includes(e))).filter(((e,t,r)=>e!==r[(t+1)%r.length])),e.faces_edges[r]=e.faces_edges[r].filter((e=>e!==t))}removeGeometryIndices(e,"edges",[t]),removeGeometryIndices(e,"vertices",s)},removePlanarVertex=(e,t)=>{const r=e.vertices_edges[t],o=uniqueSortedNumbers(e.vertices_faces[t].filter((e=>null!=e)));if(2!==r.length||o.length>2)return void console.warn("cannot remove non 2-degree vertex yet (e,f)",r,o);const n=((e,t,r)=>(r.forEach((r=>{e.edges_vertices[r][0]===t&&e.edges_vertices[r][1]===t&&console.warn("removePlanarVertex circular edge")})),r.map((r=>e.edges_vertices[r][0]===t?e.edges_vertices[r][1]:e.edges_vertices[r][0]))))(e,t,r),s=n.slice().reverse();r.sort(((e,t)=>e-t)),n.forEach((t=>{const o=e.vertices_edges[t].indexOf(r[1]);-1!==o&&(e.vertices_edges[t][o]=r[0])})),n.forEach(((r,o)=>{const n=e.vertices_vertices[r].indexOf(t);-1!==n?e.vertices_vertices[r][n]=s[o]:console.warn("removePlanarVertex unknown vertex issue")})),e.edges_vertices[r[0]]=[...n],o.forEach((r=>{const o=e.faces_vertices[r].indexOf(t);-1!==o?e.faces_vertices[r].splice(o,1):console.warn("removePlanarVertex unknown face_vertex issue")})),o.forEach((t=>{const o=e.faces_edges[t].indexOf(r[1]);-1!==o?e.faces_edges[t].splice(o,1):console.warn("removePlanarVertex unknown face_edge issue")})),removeGeometryIndices(e,"vertices",[t]),removeGeometryIndices(e,"edges",[r[1]])},alternatingSum=e=>[0,1].map((t=>e.filter(((e,r)=>r%2===t)).reduce(((e,t)=>e+t),0))),kawasakiSolutionsRadians=e=>e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>Ne.core.counterClockwiseAngleRadians(...e))).map(((e,t,r)=>r.slice(t+1,r.length).concat(r.slice(0,t)))).map((e=>alternatingSum(e).map((e=>Math.PI-e)))).map(((t,r)=>e[r]+t[0])).map(((t,r)=>Ne.core.isCounterClockwiseBetween(t,e[r],e[(r+1)%e.length])?t:void 0)),kawasakiSolutionsVectors=e=>{const t=e.map((e=>Math.atan2(e[1],e[0])));return kawasakiSolutionsRadians(t).map((e=>void 0===e?void 0:[Math.cos(e),Math.sin(e)]))};var xt=Object.freeze({__proto__:null,alternatingSum:alternatingSum,alternatingSumDifference:e=>{const t=e.reduce(((e,t)=>e+t),0)/2;return alternatingSum(e).map((e=>e-t))},kawasakiSolutionsRadians:kawasakiSolutionsRadians,kawasakiSolutionsVectors:kawasakiSolutionsVectors});const kt={B:!0,b:!0,F:!0,f:!0,U:!0,u:!0},vertices_flat=({vertices_edges:e,edges_assignment:t})=>e.map((e=>e.map((e=>kt[t[e]])).reduce(((e,t)=>e&&t),!0))).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)),At={M:!0,m:!0,V:!0,v:!0},Ot={M:-1,m:-1,V:1,v:1},validateMaekawa=({edges_vertices:e,vertices_edges:t,edges_assignment:r})=>{t||(t=makeVerticesEdgesUnsorted({edges_vertices:e}));const o=t.map((e=>e.map((e=>Ot[r[e]])).filter((e=>void 0!==e)).reduce(((e,t)=>e+t),0))).map((e=>2===e||-2===e));return getBoundaryVertices({edges_vertices:e,edges_assignment:r}).forEach((e=>{o[e]=!0})),vertices_flat({vertices_edges:t,edges_assignment:r}).forEach((e=>{o[e]=!0})),o.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))},validateKawasaki=({vertices_coords:e,vertices_vertices:t,vertices_edges:r,edges_vertices:o,edges_assignment:n,edges_vector:s},c=Ne.core.EPSILON)=>{t||(t=makeVerticesVertices({vertices_coords:e,vertices_edges:r,edges_vertices:o}));const a=makeVerticesVerticesVector({vertices_coords:e,vertices_vertices:t,edges_vertices:o,edges_vector:s}).map(((e,t)=>e.filter(((e,o)=>At[n[r[t][o]]])))).map((e=>e.length>1?Ne.core.counterClockwiseSectors2(e):[0,0])).map((e=>alternatingSum(e))).map((e=>Math.abs(e[0]-e[1])<c));return getBoundaryVertices({edges_vertices:o,edges_assignment:n}).forEach((e=>{a[e]=!0})),vertices_flat({vertices_edges:r,edges_assignment:n}).forEach((e=>{a[e]=!0})),a.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))};var Mt=Object.freeze({__proto__:null,validateMaekawa:validateMaekawa,validateKawasaki:validateKawasaki});const wt={};wt.prototype=Object.create(Et),wt.prototype.constructor=wt;const make_edges_array=function(e){return e.mountain=(t=-180)=>(e.forEach((e=>{this.edges_assignment[e]="M",this.edges_foldAngle[e]=t})),e),e.valley=(t=180)=>(e.forEach((e=>{this.edges_assignment[e]="V",this.edges_foldAngle[e]=t})),e),e.flat=()=>(e.forEach((e=>{this.edges_assignment[e]="F",this.edges_foldAngle[e]=0})),e),e};["line","ray","segment"].forEach((e=>{wt.prototype[e]=function(){const t=Ne[e](...arguments);if(!t)return;const r=clip(this,t);if(!r)return;const o=addPlanarSegment(this,r[0],r[1]);return make_edges_array.call(this,o)}})),["circle","ellipse","rect","polygon"].forEach((e=>{wt.prototype[e]=function(){const t=Ne[e](...arguments);if(!t)return;const r=t.segments(96).map((e=>Ne.segment(e))).map((e=>clip(this,e))).filter((e=>void 0!==e));if(!r)return;const o=[],n=[];r.forEach((e=>{const t=addVertices(this,e);o.push(...t),n.push(...addEdges(this,t))}));const{map:s}=fragment(this).edges;return populate(this),make_edges_array.call(this,n.map((e=>s[e])).reduce(((e,t)=>e.concat(t)),[]))}})),wt.prototype.removeEdge=function(e){const t=this.edges_vertices[e];return removePlanarEdge(this,e),t.map((e=>isVertexCollinear(this,e))).map(((e,r)=>e?t[r]:void 0)).filter((e=>void 0!==e)).sort(((e,t)=>t-e)).forEach((e=>removePlanarVertex(this,e))),!0},wt.prototype.validate=function(e){const t=validate$1(this,e);return t.vertices.kawasaki=validateKawasaki(this,e),t.vertices.maekawa=validateMaekawa(this),this.edges_foldAngle&&(t.edges.not_flat=this.edges_foldAngle.map(((e,t)=>edgeFoldAngleIsFlat(e)?void 0:t)).filter((e=>void 0!==e))),"valid"===t.summary&&(t.vertices.kawasaki.length||t.vertices.maekawa.length?t.summary="invalid":t.edges.not_flat.length&&(t.summary="not flat")),t};var jt=wt.prototype;const make_face_side=(e,t,r,o)=>{const n=Ne.core.subtract2(r,t),s=Ne.core.cross2(e,n);return o?s>0:s<0},make_face_center=(e,t)=>e.faces_vertices[t]?e.faces_vertices[t].map((t=>e.vertices_coords[t])).reduce(((e,t)=>[e[0]+t[0],e[1]+t[1]]),[0,0]).map((r=>r/e.faces_vertices[t].length)):[0,0],Pt={F:!0,f:!0,U:!0,u:!0},St={M:"V",m:"V",V:"M",v:"M"},face_snapshot=(e,t)=>({center:e.faces_center[t],matrix:e.faces_matrix2[t],winding:e.faces_winding[t],crease:e.faces_crease[t],side:e.faces_side[t],layer:e.faces_layer[t]}),flatFold=(e,t,r,o="V",n=Ne.core.EPSILON)=>{const s=St[c=o]||c;var c;populate(e),e.faces_layer||(e.faces_layer=Array(e.faces_vertices.length).fill(0)),e.faces_center=e.faces_vertices.map(((t,r)=>make_face_center(e,r))),e.faces_matrix2||(e.faces_matrix2=makeFacesMatrix2(e,0)),e.faces_winding=makeFacesWindingFromMatrix2(e.faces_matrix2),e.faces_crease=e.faces_matrix2.map(Ne.core.invertMatrix2).map((e=>Ne.core.multiplyMatrix2Line2(e,t,r))),e.faces_side=e.faces_vertices.map(((t,r)=>make_face_side(e.faces_crease[r].vector,e.faces_crease[r].origin,e.faces_center[r],e.faces_winding[r])));const a=multiplyVerticesFacesMatrix2(e,e.faces_matrix2),i=makeEdgesLineParallelOverlap({vertices_coords:a,edges_vertices:e.edges_vertices},t,r,n).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).filter((t=>Pt[e.edges_assignment[t]]));i.map((t=>e.edges_faces[t].find((e=>null!=e)))).map((t=>e.faces_winding[t])).map((e=>e?o:s)).forEach(((t,r)=>{e.edges_assignment[i[r]]=t,e.edges_foldAngle[i[r]]=edgeAssignmentToFoldAngle(t)}));const l=face_snapshot(e,0),d=e.faces_vertices.map(((e,t)=>t)).reverse().map((t=>{const r=face_snapshot(e,t),c=splitFace(e,t,r.crease.vector,r.crease.origin,n);if(void 0===c)return;e.edges_assignment[c.edges.new]=r.winding?o:s,e.edges_foldAngle[c.edges.new]=edgeAssignmentToFoldAngle(e.edges_assignment[c.edges.new]);return c.faces.map[c.faces.remove].forEach((t=>{e.faces_center[t]=make_face_center(e,t),e.faces_side[t]=make_face_side(r.crease.vector,r.crease.origin,e.faces_center[t],r.winding),e.faces_layer[t]=r.layer})),c})).filter((e=>void 0!==e)),u=mergeNextmaps(...d.map((e=>e.faces.map))),m=mergeNextmaps(...d.map((e=>e.edges.map)).filter((e=>void 0!==e))),g=d.map((e=>e.faces.remove)).reverse();e.faces_layer=((e,t)=>{const r=[],o=e.map(((e,t)=>t)),n=o.filter((e=>t[e])),s=o.filter((e=>!t[e]));return s.sort(((t,r)=>e[t]-e[r])).forEach(((e,t)=>{r[e]=t})),n.sort(((t,r)=>e[r]-e[t])).forEach(((e,t)=>{r[e]=s.length+t})),r})(e.faces_layer,e.faces_side);const p=u&&u[0]&&2===u[0].length,h=p?u[0].filter((t=>e.faces_side[t])).shift():0;let v=l.matrix;return o!==s&&(v=p||e.faces_side[0]?Ne.core.multiplyMatrices2(l.matrix,Ne.core.makeMatrix2Reflect(l.crease.vector,l.crease.origin)):l.matrix),e.faces_matrix2=makeFacesMatrix2(e,h).map((e=>Ne.core.multiplyMatrices2(v,e))),delete e.faces_center,delete e.faces_winding,delete e.faces_crease,delete e.faces_side,{faces:{map:u,remove:g},edges:{map:m}}},Ct={};Ct.prototype=Object.create(Et),Ct.prototype.constructor=Ct,Ct.prototype.flatFold=function(){const e=Ne.core.getLine(arguments);return flatFold(this,e.vector,e.origin),this};var zt=Ct.prototype;const isFoldedForm=e=>e.frame_classes&&e.frame_classes.includes("foldedForm")||e.file_classes&&e.file_classes.includes("foldedForm");var Ft=Object.freeze({__proto__:null,isFoldedForm:isFoldedForm});const getDisjointedVertices=({edges_vertices:e,vertices_edges:t,vertices_vertices:r})=>{t||(t=makeVerticesEdgesUnsorted({edges_vertices:e})),r||(r=makeVerticesVerticesUnsorted({vertices_edges:t,edges_vertices:e}));const o={};e.forEach((e=>{o[e[0]]=!0,o[e[1]]=!0}));const n=Object.keys(o).map((e=>parseInt(e,10)));let s=0;const c=[];for(;s<n.length;){if(!o[n[s]]){s+=1;continue}const e=[],t=[n[s]],a={[n[s]]:!0};do{const n=t.shift();delete o[n],e.push(n);const s=r[n]?r[n].filter((e=>o[e]&&!a[e])):[];t.push(...s),s.forEach((e=>{a[e]=!0}))}while(t.length);s+=1,c.push(e)}return c};var Lt=Object.freeze({__proto__:null,getDisjointedVertices:getDisjointedVertices});const connectedComponentsArray=e=>{const t=[],recurse=(r,o)=>void 0!==t[r]?0:(t[r]=o,e[r].forEach((e=>recurse(e,o))),1);for(let t=0,r=0;t<e.length;t+=1)t in e&&(r+=recurse(t,r));return t};var Nt=Object.freeze({__proto__:null,connectedComponentsArray:connectedComponentsArray});const parallelNormalized=(e,t,r=Ne.core.EPSILON)=>1-Math.abs(Ne.core.dot(e,t))<r,getCoplanarFacesGroups=({vertices_coords:e,faces_vertices:t},r=Ne.core.EPSILON)=>{const o=makeFacesNormal({vertices_coords:e,faces_vertices:t}),n=t.map((()=>[]));for(let e=0;e<t.length-1;e+=1)for(let s=e+1;s<t.length;s+=1)e!==s&&parallelNormalized(o[e],o[s],r)&&(n[e].push(s),n[s].push(e));const s=connectedComponentsArray(n),c=invertMap(s).map((e=>"number"==typeof e?[e]:e)),a=c.map((e=>o[e[0]])),i=[];c.forEach(((e,t)=>e.forEach((e=>{i[e]=Ne.core.dot(o[e],a[t])>0}))));const l=t.map((t=>e[t[0]])),d=c.map(((e,t)=>e.map((e=>Ne.core.dot(l[e],a[t]))))).map(((e,t)=>clusterArrayValues(e).map((e=>e.map((e=>c[t][e])))))),u=d.flatMap(((e,t)=>e.map((()=>[...a[t]]))));return d.flat().map(((e,t)=>({normal:u[t],faces:e,facesAligned:e.map((e=>i[e]))})))},getOverlappingFacesGroups=({vertices_coords:e,faces_vertices:t},r=Ne.core.EPSILON)=>{const o=getCoplanarFacesGroups({vertices_coords:e,faces_vertices:t},r),n=[];o.forEach(((e,t)=>e.faces.forEach((e=>{n[e]=t}))));const s=[];o.forEach((e=>e.facesAligned.forEach(((t,r)=>{s[e.faces[r]]=t}))));const c=[0,0,1],a=o.map((e=>Ne.core.resize(3,e.normal))).map((e=>{const t=Ne.core.dot(e,c);return Math.abs(t+1)<10*r?Ne.core.makeMatrix4Rotate(Math.PI,[1,0,0]):Ne.core.matrix4FromQuaternion(Ne.core.quaternionFromTwoVectors(e,c))})),i=e.map((e=>Ne.core.resize(3,e))),l=o.map((e=>e.faces.map(((r,o)=>e.facesAligned[o]?t[r]:t[r].slice().reverse())).map((e=>e.map((e=>i[e])))))).map(((e,t)=>e.map((e=>e.map((e=>Ne.core.multiplyMatrix4Vector3(a[t],e))).map((e=>[e[0],e[1]])))))),d=t.map((()=>[]));l.forEach(((e,t)=>{for(let r=0;r<e.length-1;r+=1)for(let n=r+1;n<e.length;n+=1){if(void 0!==Ne.core.clipPolygonPolygon(e[r],e[n])){const e=[o[t].faces[r],o[t].faces[n]];d[e[0]].push(e[1]),d[e[1]].push(e[0])}}}));const u=connectedComponentsArray(d),m=invertMap(u).map((e=>"number"==typeof e?[e]:e));return{groups_plane:m.map((e=>({normal:o[n[e[0]]].normal,origin:i[t[e[0]][0]]}))),groups_transformXY:m.map((e=>a[n[e[0]]])),faces_group:u,faces_winding:s,faces_facesOverlap:d}},makeEdgesFacesOverlap=({vertices_coords:e,edges_vertices:t,edges_vector:r,edges_faces:o,faces_vertices:n},s)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const c=makeFacesWinding({vertices_coords:e,faces_vertices:n}),a=t.map((t=>e[t[0]])),i=t.map((t=>t.map((t=>e[t])))),l=n.map((t=>t.map((t=>e[t]))));c.forEach(((e,t)=>{e||l[t].reverse()}));const d=t.map((()=>n.map((()=>{}))));o.forEach(((e,t)=>e.forEach((e=>{d[t][e]=!1}))));const u=makeEdgesBoundingBox({edges_coords:i}),m=l.map((e=>Ne.core.boundingBox(e)));return u.forEach(((e,t)=>m.forEach(((r,o)=>{!1!==d[t][o]&&(Ne.core.overlapBoundingBoxes(r,e)||(d[t][o]=!1))})))),i.forEach(((e,t)=>l.forEach(((e,o)=>{if(void 0!==d[t][o])return;if(i[t].map((e=>Ne.core.overlapConvexPolygonPoint(l[o],e,Ne.core.exclude,s))).reduce(((e,t)=>e||t),!1))return void(d[t][o]=!0);Ne.core.intersectConvexPolygonLine(l[o],r[t],a[t],Ne.core.excludeS,Ne.core.excludeS,s)?d[t][o]=!0:d[t][o]=!1})))),d},getFacesFaces2DOverlap=({vertices_coords:e,faces_vertices:t},r=Ne.core.EPSILON)=>{const o=Array.from(Array(t.length)).map((()=>Array.from(Array(t.length)))),n=t.map((t=>t.map((t=>e[t])))),s=n.map((e=>Ne.core.boundingBox(e)));for(let e=0;e<s.length-1;e+=1)for(let t=e+1;t<s.length;t+=1)Ne.core.overlapBoundingBoxes(s[e],s[t])||(o[e][t]=!1,o[t][e]=!1);const c=n.map((e=>Ne.core.makePolygonNonCollinear(e,r)));for(let e=0;e<t.length-1;e+=1)for(let n=e+1;n<t.length;n+=1){if(!1===o[e][n])continue;const t=Ne.core.overlapConvexPolygons(c[e],c[n],r);o[e][n]=t,o[n][e]=t}return o};var $t=Object.freeze({__proto__:null,getCoplanarFacesGroups:getCoplanarFacesGroups,getOverlappingFacesGroups:getOverlappingFacesGroups,makeEdgesFacesOverlap:makeEdgesFacesOverlap,getFacesFaces2DOverlap:getFacesFaces2DOverlap});const triangulateConvexFacesVertices=({faces_vertices:e})=>e.flatMap((e=>{return e.length<4?[e]:(t=e,Array.from(Array(t.length-2)).map(((e,r)=>[t[0],t[r+1],t[r+2]])));var t})),triangulate=(e,t)=>{if(!e.faces_vertices)return{};const r=makeVerticesToEdgeBidirectional(e),o=(({faces_vertices:e})=>{let t=0;return e.flatMap((e=>{if(e.length<4)return[t++];const r=Array.from(Array(e.length-2)).map((()=>t));return t+=1,r}))})(e);e.faces_vertices=triangulateConvexFacesVertices(e);let n=e.edges_vertices.length;const s=[];e.faces_edges=e.faces_vertices.map((e=>e.map(((e,t,o)=>{const c=[e,o[(t+1)%o.length]],a=c.join(" ");return a in r?r[a]:(s.push(c),n++)}))));const c=s.length;return e.edges_vertices.push(...s),e.edges_assignment&&e.edges_assignment.push(...Array(c).fill("J")),e.edges_foldAngle&&e.edges_foldAngle.push(...Array(c).fill(0)),e.vertices_vertices&&delete e.vertices_vertices,e.vertices_edges&&delete e.vertices_edges,e.vertices_faces&&delete e.vertices_faces,e.edges_faces&&delete e.edges_faces,e.faces_faces&&delete e.faces_faces,e.faceOrders&&delete e.faceOrders,{faces:{map:o}}};var Vt=Object.freeze({__proto__:null,triangulateConvexFacesVertices:triangulateConvexFacesVertices,triangulate:triangulate});const makeEdgesEdgesParallel=({vertices_coords:e,edges_vertices:t,edges_vector:r},o=Ne.core.EPSILON)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const n=r.map((e=>Ne.core.normalize(e)));return n.map(((e,t)=>n.map(((e,r)=>t===r?void 0:1-Math.abs(Ne.core.dot(n[t],n[r]))<o)).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e))))},overwriteEdgesOverlaps=(e,t,r,o,n)=>{const s=e.map((()=>[]));return e.forEach(((e,c)=>e.forEach((e=>{c>=e||Ne.core.overlapLineLine(t[c],r[c],t[e],r[e],o,o,n)&&(s[c].push(e),s[e].push(c))})))),s},makeEdgesEdgesParallelOverlap=({vertices_coords:e,edges_vertices:t,edges_vector:r},o)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const n=t.map((t=>e[t[0]])),s=makeEdgesEdgesParallel({vertices_coords:e,edges_vertices:t,edges_vector:r},o);return overwriteEdgesOverlaps(s,r,n,Ne.core.excludeS,o)};var It=Object.freeze({__proto__:null,makeEdgesEdgesSimilar:({vertices_coords:e,edges_vertices:t,edges_coords:r},o=Ne.core.EPSILON)=>{r||(r=makeEdgesCoords({vertices_coords:e,edges_vertices:t}));const n=makeEdgesBoundingBox({vertices_coords:e,edges_vertices:t,edges_coords:r}),s=Array.from(Array(r.length)).map((()=>[])),c=n.length?n[0].min.length:0;for(let e=0;e<r.length-1;e+=1)for(let t=e+1;t<r.length;t+=1){let r=!0;for(let s=0;s<c;s+=1)Ne.core.fnEpsilonEqual(n[e].min[s],n[t].min[s],o)&&Ne.core.fnEpsilonEqual(n[e].max[s],n[t].max[s],o)||(r=!1);s[e][t]=r,s[t][e]=r}for(let e=0;e<r.length-1;e+=1)for(let t=e+1;t<r.length;t+=1){if(!s[e][t])continue;const n=Ne.core.fnEpsilonEqualVectors(r[e][0],r[t][0],o)&&Ne.core.fnEpsilonEqualVectors(r[e][1],r[t][1],o),c=Ne.core.fnEpsilonEqualVectors(r[e][0],r[t][1],o)&&Ne.core.fnEpsilonEqualVectors(r[e][1],r[t][0],o),a=n||c;s[e][t]=a,s[t][e]=a}return booleanMatrixToIndexedArray(s)},makeEdgesEdgesParallel:makeEdgesEdgesParallel,makeEdgesEdges2DParallel:({vertices_coords:e,edges_vertices:t,edges_vector:r},o=Ne.core.EPSILON)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const n=r.map((e=>Math.atan2(e[1],e[0]))).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a));n.forEach(((e,t)=>{}));const s=n.slice(-1).concat(n.slice(0,-1)).filter((e=>e));console.log("shifted",s)},makeEdgesEdgesCrossing:({vertices_coords:e,edges_vertices:t,edges_vector:r},o)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const n=t.map((t=>e[t[0]])),s=(({vertices_coords:e,edges_vertices:t,edges_vector:r},o=Ne.core.EPSILON)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const n=r.map((e=>Ne.core.normalize(e)));return n.map(((e,t)=>n.map(((e,r)=>t===r?void 0:1-Math.abs(Ne.core.dot(n[t],n[r]))<o)).map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))))})({vertices_coords:e,edges_vertices:t,edges_vector:r},o);return overwriteEdgesOverlaps(s,r,n,Ne.core.excludeS,o)},makeEdgesEdgesParallelOverlap:makeEdgesEdgesParallelOverlap});var Tt=Object.assign(Object.create(null),{count:count,countImplied:countImplied,validate:validate$1,clean:clean,populate:populate,remove:removeGeometryIndices,replace:replaceGeometryIndices,removePlanarVertex:removePlanarVertex,removePlanarEdge:removePlanarEdge,addVertices:addVertices,addEdges:addEdges,splitEdge:splitEdge,splitFace:splitFace,flatFold:flatFold,addPlanarSegment:addPlanarSegment,subgraph:(e,t)=>{const r={},o={};[c,s,n].forEach((n=>{r[n]=Array.from(Array(count[n](e))).map(((e,t)=>t)),o[n]=uniqueSortedNumbers(t[n]||[]).reverse()})),Object.keys(o).forEach((e=>o[e].forEach((t=>r[e].splice(t,1)))));const a=JSON.parse(JSON.stringify(e));return Object.keys(r).forEach((e=>removeGeometryIndices(a,e,r[e]))),a},clip:clip,fragment:fragment,getVerticesClusters:getVerticesClusters,clone:clone,flattenFrame:(e,t=1)=>{if(!e.file_frames||e.file_frames.length<t)return e;const r=["frame_parent","frame_inherit"],o={visited_frames:[]},n={};filterKeysWithPrefix(e,"file_").filter((e=>"file_frames"!==e)).forEach((t=>{n[t]=e[t]}));const recurse=(e,t,r)=>{if(-1!==o.visited_frames.indexOf(t))throw new Error("flatten cycle detected");return o.visited_frames.push(t),r=[t].concat(r),0===t?r:e.file_frames[t-1].frame_inherit&&null!=e.file_frames[t-1].frame_parent?recurse(e,e.file_frames[t-1].frame_parent,r):r};return recurse(e,t,[]).map((t=>{if(0===t){const t=e.file_frames;e.file_frames=null;const o=clone(e);return e.file_frames=t,delete o.file_frames,r.forEach((e=>delete o[e])),o}const o=clone(e.file_frames[t-1]);return r.forEach((e=>delete o[e])),o})).reduce(((e,t)=>Object.assign(e,t)),n)},foldKeys:Be,foldFileClasses:["singleModel","multiModel","animation","diagrams"],foldFrameClasses:["creasePattern","foldedForm","graph","linkage"],foldFrameAttributes:["2D","3D","abstract","manifold","nonManifold","orientable","nonOrientable","selfTouching","nonSelfTouching","selfIntersecting","nonSelfIntersecting"]},et,at,Je,ht,We,Xe,ot,rt,Ft,Lt,st,$t,Vt,Ke,it,Ye,tt,nt,Nt,It,mt,lt,ut,gt,pt,Ze);const Bt={},make_rect_vertices_coords=(e,t)=>[[0,0],[e,0],[e,t],[0,t]],make_closed_polygon=e=>populate({vertices_coords:e,edges_vertices:e.map(((e,t,r)=>[t,(t+1)%r.length])),edges_assignment:Array(e.length).fill("B")});Bt.square=(e=1)=>make_closed_polygon(make_rect_vertices_coords(e,e)),Bt.rectangle=(e=1,t=1)=>make_closed_polygon(make_rect_vertices_coords(e,t)),Bt.polygon=(e=3,t=1)=>make_closed_polygon(Ne.core.makePolygonCircumradius(e,t)),Bt.kite=()=>populate({vertices_coords:[[0,0],[1,0],[1,Math.sqrt(2)-1],[1,1],[Math.sqrt(2)-1,1],[0,1]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,2],[0,4],[0,3]],edges_assignment:Array.from("BBBBBBVVF")});const qt=Object.create(null),Rt={graph:Et,cp:jt,origami:zt},Ut={graph:()=>{},cp:Bt.square,origami:Bt.square},Dt={graph:()=>({file_spec:Ve,file_creator:Ie}),cp:()=>({file_spec:Ve,file_creator:Ie,frame_classes:["creasePattern"]}),origami:()=>({file_spec:Ve,file_creator:Ie,frame_classes:["foldedForm"]})};Object.keys(Rt).forEach((e=>{qt[e]=function(){const t=Array.from(arguments).filter((e=>isFoldObject(e))).map((e=>JSON.parse(JSON.stringify(e))));return populate(Object.assign(Object.create(Rt[e]),t.length?{}:Ut[e](),...t,Dt[e]()))},qt[e].prototype=Rt[e],qt[e].prototype.constructor=qt[e],Object.keys(Bt).forEach((t=>{qt[e][t]=function(){return qt[e](Bt[t](...arguments))}}))})),Object.assign(qt.graph,Tt);const cubrt=e=>e<0?-Math.pow(-e,1/3):Math.pow(e,1/3),normalAxiom6=(e,t,r,o)=>{if(Math.abs(1-Ne.core.dot2(e.normal,r)/e.distance)<.02)return[];const n=Ne.core.rotate90(e.normal),s=Ne.core.subtract2(Ne.core.add2(r,Ne.core.scale2(e.normal,e.distance)),Ne.core.scale2(o,2)),c=Ne.core.subtract2(Ne.core.scale2(e.normal,e.distance),r),a=Ne.core.dot2(o,t.normal)-t.distance,i=2*Ne.core.dot2(c,n),l=Ne.core.dot2(c,c),d=Ne.core.dot2(Ne.core.add2(s,c),n),u=Ne.core.dot2(s,c),m=Ne.core.dot2(n,t.normal),g=Ne.core.dot2(c,t.normal),p=m,h=a+d*m+g,v=a*i+u*m+d*g,_=a*l+u*g;let y=0;return Math.abs(v)>Ne.core.EPSILON&&(y=1),Math.abs(h)>Ne.core.EPSILON&&(y=2),Math.abs(p)>Ne.core.EPSILON&&(y=3),((e,t,r,o,n)=>{switch(e){case 1:return[-n/o];case 2:{const e=Math.pow(o,2)-4*r*n;if(e<-Ne.core.EPSILON)return[];const t=-o/(2*r);if(e<Ne.core.EPSILON)return[t];const s=Math.sqrt(e)/(2*r);return[t+s,t-s]}case 3:{const e=r/t,s=o/t,c=n/t,a=(3*s-Math.pow(e,2))/9,i=(9*e*s-27*c-2*Math.pow(e,3))/54,l=Math.pow(a,3)+Math.pow(i,2),d=-e/3;if(l>0){const e=Math.sqrt(l);return[d+cubrt(i+e)+cubrt(i-e)]}if(Math.abs(l)<Ne.core.EPSILON){const e=Math.pow(i,1/3);return i<0?[]:[d+2*e,d-e]}const u=Math.sqrt(-l),m=Math.atan2(u,i)/3,g=Math.pow(Math.pow(i,2)-l,1/6),p=g*Math.cos(m),h=g*Math.sin(m);return[d+2*p,d-p-Math.sqrt(3)*h,d-p+Math.sqrt(3)*h]}default:return[]}})(y,p,h,v,_).map((t=>Ne.core.add2(Ne.core.scale2(e.normal,e.distance),Ne.core.scale2(n,t)))).map((e=>({p:e,normal:Ne.core.normalize2(Ne.core.subtract2(e,r))}))).map((e=>({normal:e.normal,distance:Ne.core.dot2(e.normal,Ne.core.midpoint2(e.p,r))})))};var Gt=Object.freeze({__proto__:null,normalAxiom1:(e,t)=>{const r=Ne.core.normalize2(Ne.core.rotate90(Ne.core.subtract2(t,e)));return{normal:r,distance:Ne.core.dot2(Ne.core.add2(e,t),r)/2}},normalAxiom2:(e,t)=>{const r=Ne.core.normalize2(Ne.core.subtract2(t,e));return{normal:r,distance:Ne.core.dot2(Ne.core.add2(e,t),r)/2}},normalAxiom3:(e,t)=>{const r=((e,t)=>{const r=Ne.core.cross2(e.normal,t.normal);if(Math.abs(r)<Ne.core.EPSILON)return;return[(e.distance*t.normal[1]-t.distance*e.normal[1])/r,(t.distance*e.normal[0]-e.distance*t.normal[0])/r]})(e,t);return void 0===r?[{normal:e.normal,distance:(e.distance+t.distance*Ne.core.dot2(e.normal,t.normal))/2}]:[Ne.core.add2,Ne.core.subtract2].map((r=>Ne.core.normalize2(r(e.normal,t.normal)))).map((e=>({normal:e,distance:Ne.core.dot2(r,e)})))},normalAxiom4:(e,t)=>{const r=Ne.core.rotate90(e.normal);return{normal:r,distance:Ne.core.dot2(t,r)}},normalAxiom5:(e,t,r)=>{const o=Ne.core.dot2(t,e.normal),n=e.distance-o,s=Ne.core.distance2(t,r);if(n>s)return[];const c=Math.sqrt(s*s-n*n),a=Ne.core.scale2(e.normal,n),i=Ne.core.add2(t,a),l=Ne.core.scale2(Ne.core.rotate90(e.normal),c);return(c<Ne.core.EPSILON?[i]:[Ne.core.add2(i,l),Ne.core.subtract2(i,l)]).map((e=>Ne.core.normalize2(Ne.core.subtract2(r,e)))).map((e=>({normal:e,distance:Ne.core.dot2(t,e)})))},normalAxiom6:normalAxiom6,normalAxiom7:(e,t,r)=>{const o=Ne.core.rotate90(e.normal),n=Ne.core.dot2(o,t.normal);if(Math.abs(n)<Ne.core.EPSILON)return;const s=Ne.core.dot2(r,o),c=Ne.core.dot2(r,t.normal);return{normal:o,distance:(t.distance+2*s*n-c)/(2*n)}}});var Wt=Object.freeze({__proto__:null,axiom1:(e,t)=>({vector:Ne.core.normalize2(Ne.core.subtract2(...Ne.core.resizeUp(t,e))),origin:e}),axiom2:(e,t)=>({vector:Ne.core.normalize2(Ne.core.rotate90(Ne.core.subtract2(...Ne.core.resizeUp(t,e)))),origin:Ne.core.midpoint2(e,t)}),axiom3:(e,t)=>Ne.core.bisectLines2(e.vector,e.origin,t.vector,t.origin),axiom4:(e,t)=>({vector:Ne.core.rotate90(Ne.core.normalize2(e.vector)),origin:t}),axiom5:(e,t,r)=>(Ne.core.intersectCircleLine(Ne.core.distance2(t,r),t,e.vector,e.origin,Ne.core.include_l)||[]).map((e=>({vector:Ne.core.normalize2(Ne.core.rotate90(Ne.core.subtract2(...Ne.core.resizeUp(e,r)))),origin:Ne.core.midpoint2(r,e)}))),axiom6:(e,t,r,o)=>normalAxiom6(Ne.core.rayLineToUniqueLine(e),Ne.core.rayLineToUniqueLine(t),r,o).map(Ne.core.uniqueLineToRayLine),axiom7:(e,t,r)=>{const o=Ne.core.intersectLineLine(e.vector,e.origin,t.vector,r,Ne.core.include_l,Ne.core.include_l);return void 0===o?void 0:{vector:Ne.core.normalize2(Ne.core.rotate90(Ne.core.subtract2(...Ne.core.resizeUp(o,r)))),origin:Ne.core.midpoint2(r,o)}}});const arrayify=(e,t)=>{switch(e){case 3:case"3":case 5:case"5":case 6:case"6":return t;case 7:case"7":return void 0===t?[]:[t];default:return[t]}},reflectPoint=(e,t)=>{const r=Ne.core.makeMatrix2Reflect(e.vector,e.origin);return Ne.core.multiplyMatrix2Vector2(r,t)},validateAxiom1=(e,t)=>e.points.map((e=>Ne.core.overlapConvexPolygonPoint(t,e,Ne.core.include))).reduce(((e,t)=>e&&t),!0),Zt=validateAxiom1,validateAxiom3=(e,t,r)=>{const o=e.lines.map((e=>Ne.core.clipLineConvexPolygon(t,e.vector,e.origin,Ne.core.include,Ne.core.includeL)));if(void 0===o[0]||void 0===o[1])return[!1,!1];const n=r.map((e=>void 0===e?void 0:Ne.core.clipLineConvexPolygon(t,e.vector,e.origin,Ne.core.include,Ne.core.includeL))),s=[0,1].map((e=>void 0!==n[e])),c=r.map((e=>void 0===e?void 0:[reflectPoint(e,o[0][0]),reflectPoint(e,o[0][1])])).map((e=>void 0!==e&&(Ne.core.overlapLinePoint(Ne.core.subtract(o[1][1],o[1][0]),o[1][0],e[0],Ne.core.includeS)||Ne.core.overlapLinePoint(Ne.core.subtract(o[1][1],o[1][0]),o[1][0],e[1],Ne.core.includeS)||Ne.core.overlapLinePoint(Ne.core.subtract(e[1],e[0]),e[0],o[1][0],Ne.core.includeS)||Ne.core.overlapLinePoint(Ne.core.subtract(e[1],e[0]),e[0],o[1][1],Ne.core.includeS))));return[0,1].map((e=>!0===c[e]&&!0===s[e]))},validateAxiom4=(e,t)=>{const r=Ne.core.intersectLineLine(e.lines[0].vector,e.lines[0].origin,Ne.core.rotate90(e.lines[0].vector),e.points[0],Ne.core.includeL,Ne.core.includeL);return[e.points[0],r].filter((e=>void 0!==e)).map((e=>Ne.core.overlapConvexPolygonPoint(t,e,Ne.core.include))).reduce(((e,t)=>e&&t),!0)},validateAxiom5=(e,t,r)=>{if(0===r.length)return[];const o=e.points.map((e=>Ne.core.overlapConvexPolygonPoint(t,e,Ne.core.include))).reduce(((e,t)=>e&&t),!0);return r.map((t=>reflectPoint(t,e.points[1]))).map((e=>Ne.core.overlapConvexPolygonPoint(t,e,Ne.core.include))).map((e=>e&&o))},validateAxiom6=function(e,t,r){if(0===r.length)return[];if(!e.points.map((e=>Ne.core.overlapConvexPolygonPoint(t,e,Ne.core.include))).reduce(((e,t)=>e&&t),!0))return r.map((()=>!1));const o=r.map((t=>reflectPoint(t,e.points[0]))).map((e=>Ne.core.overlapConvexPolygonPoint(t,e,Ne.core.include))),n=r.map((t=>reflectPoint(t,e.points[1]))).map((e=>Ne.core.overlapConvexPolygonPoint(t,e,Ne.core.include)));return r.map(((e,t)=>o[t]&&n[t]))},validateAxiom7=(e,t,r)=>{const o=Ne.core.overlapConvexPolygonPoint(t,e.points[0],Ne.core.include);if(void 0===r)return[!1];const n=reflectPoint(r,e.points[0]),s=Ne.core.overlapConvexPolygonPoint(t,n,Ne.core.include),c=void 0!==Ne.core.intersectConvexPolygonLine(t,e.lines[1].vector,e.lines[1].origin,Ne.core.includeS,Ne.core.includeL),a=Ne.core.intersectLineLine(e.lines[1].vector,e.lines[1].origin,r.vector,r.origin,Ne.core.includeL,Ne.core.includeL),i=!!a&&Ne.core.overlapConvexPolygonPoint(t,a,Ne.core.include);return o&&s&&c&&i};var Yt=Object.freeze({__proto__:null,validateAxiom1:validateAxiom1,validateAxiom2:Zt,validateAxiom3:validateAxiom3,validateAxiom4:validateAxiom4,validateAxiom5:validateAxiom5,validateAxiom6:validateAxiom6,validateAxiom7:validateAxiom7,validate:(e,t,r,o)=>arrayify(e,[null,validateAxiom1,Zt,validateAxiom3,validateAxiom4,validateAxiom5,validateAxiom6,validateAxiom7][e](t,r,((e,t)=>{switch(e){case 3:case"3":case 5:case"5":case 6:case"6":return t;default:return t?t[0]:void 0}})(e,o)))});const spreadParams=e=>[...e.lines?e.lines:[],...e.points?e.points:[]],axiomInBoundary=(e,t={},r)=>{const o=arrayify(e,Wt[`axiom${e}`](...spreadParams(t))).map((e=>Ne.line(e)));return r&&arrayify(e,Yt[`validateAxiom${e}`](t,r,o)).forEach(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).forEach((e=>delete o[e])),o};var Ht=Object.freeze({__proto__:null,axiomInBoundary:axiomInBoundary,normalAxiomInBoundary:(e,t={},r)=>{const o=arrayify(e,Gt[`normalAxiom${e}`](...spreadParams(t))).map((e=>Ne.line.fromNormalDistance(e)));return r&&arrayify(e,Yt[`validateAxiom${e}`]((e=>({points:e.points,lines:e.lines.map(Ne.core.uniqueLineToRayLine)}))(t),r,o)).forEach(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).forEach((e=>delete o[e])),o}});const axiom=(e,t={},r)=>axiomInBoundary(e,t,r);Object.keys(Wt).forEach((e=>{axiom[e]=Wt[e]})),Object.keys(Gt).forEach((e=>{axiom[e]=Gt[e]})),Object.keys(Ht).forEach((e=>{axiom[e]=Ht[e]})),Object.keys(Yt).forEach((e=>{axiom[e]=Yt[e]}));const line_line_for_arrows=(e,t)=>Ne.core.intersectLineLine(e.vector,e.origin,t.vector,t.origin,Ne.core.includeL,Ne.core.includeL),diagram_reflect_point=(e,t)=>{const r=Ne.core.makeMatrix2Reflect(e.vector,e.origin);return Ne.core.multiplyMatrix2Vector2(r,t)},boundary_for_arrows$1=({vertices_coords:e})=>Ne.core.convexHull(e),widest_perp=(e,t,r)=>{const o=boundary_for_arrows$1(e);if(void 0===r){const e=Ne.core.clipLineConvexPolygon(o,t.vector,t.origin,Ne.core.exclude,Ne.core.includeL);r=Ne.core.midpoint(...e)}const n=Ne.core.rotate270(t.vector),s=Ne.core.clipLineConvexPolygon(o,n,r,Ne.core.exclude,Ne.core.includeL).map((e=>Ne.core.distance(r,e))).sort(((e,t)=>e-t)).shift(),c=Ne.core.scale(Ne.core.normalize(n),s);return Ne.segment(Ne.core.add(r,Ne.core.flip(c)),Ne.core.add(r,c))},between_2_segments=(e,t,r)=>{const o=t.map((e=>Ne.core.midpoint(e[0],e[1]))),n=Ne.line.fromPoints(...o),s=Ne.intersect(r,n),c=Ne.line(r.vector.rotate90(),s);return Ne.segment(e.lines.map((e=>Ne.intersect(e,c))))},Jt=[null,(e,t)=>axiom(1,e).map((e=>[widest_perp(t,e)])),e=>[[Ne.segment(e.points)]],(e,t)=>{const r=boundary_for_arrows$1(t),o=e.lines.map((e=>Ne.core.clipLineConvexPolygon(r,e.vector,e.origin,Ne.core.exclude,Ne.core.includeL))),n=o.map((e=>Ne.core.subtract(e[1],e[0]))),s=Ne.core.intersectLineLine(n[0],o[0][0],n[1],o[1][0],Ne.core.excludeS,Ne.core.excludeS);return s?axiom(3,e).map((t=>((e,t,r,o)=>{const n=e.lines.map((e=>e.vector)),s=n.map(Ne.core.flip),c=n.concat(s).map((e=>Ne.ray(e,t))),a=c.filter((e=>Ne.core.dot(e.vector,r.vector)>0&&Ne.core.cross2(e.vector,r.vector)>0)).shift(),i=c.filter((e=>Ne.core.dot(e.vector,r.vector)>0&&Ne.core.cross2(e.vector,r.vector)<0)).shift(),l=c.filter((e=>Ne.core.dot(e.vector,r.vector)<0&&Ne.core.cross2(e.vector,r.vector)>0)).shift(),d=c.filter((e=>Ne.core.dot(e.vector,r.vector)<0&&Ne.core.cross2(e.vector,r.vector)<0)).shift(),u=[a,i,l,d].map((e=>Ne.core.intersectConvexPolygonLine(o,e.vector,e.origin,Ne.core.excludeS,Ne.core.excludeR).shift().shift())),m=u.map((e=>Ne.core.distance(e,t))),g=m[0]<m[1]?u[0]:u[1],p=m[0]<m[1]?Ne.core.add(i.origin,i.vector.normalize().scale(m[0])):Ne.core.add(a.origin,a.vector.normalize().scale(m[1])),h=m[2]<m[3]?u[2]:u[3],v=m[2]<m[3]?Ne.core.add(d.origin,d.vector.normalize().scale(m[2])):Ne.core.add(l.origin,l.vector.normalize().scale(m[3]));return[Ne.segment(g,p),Ne.segment(h,v)]})(e,s,t,r))):[between_2_segments(e,o,axiom(3,e).filter((e=>void 0!==e)).shift())]},(e,t)=>axiom(4,e).map((r=>[widest_perp(t,r,line_line_for_arrows(r,e.lines[0]))])),e=>axiom(5,e).map((t=>[Ne.segment(e.points[1],diagram_reflect_point(t,e.points[1]))])),e=>axiom(6,e).map((t=>e.points.map((e=>Ne.segment(e,diagram_reflect_point(t,e)))))),(e,t)=>axiom(7,e).map((r=>[Ne.segment(e.points[0],diagram_reflect_point(r,e.points[0])),widest_perp(t,r,line_line_for_arrows(r,e.lines[1]))]))];delete Jt[0];const axiomArrows=(e,t={},...r)=>{const o=t.points?t.points.map((e=>Ne.core.getVector(e))):void 0,n=t.lines?t.lines.map((e=>Ne.core.getLine(e))):void 0;return Jt[e]({points:o,lines:n},...r)};Object.keys(Jt).forEach((e=>{axiomArrows[e]=(...t)=>axiomArrows(e,...t)}));var Xt=Object.assign(Object.create(null),{axiom_arrows:axiomArrows,simple_arrow:(e,t)=>{const r=(({vertices_coords:e})=>Ne.core.convexHull(e))(e),o=Ne.core.boundingBox(r),n=((e,t,r)=>{if(void 0===r){const o=Ne.core.clipLineConvexPolygon(e,t.vector,t.origin,Ne.core.exclude,Ne.core.includeL);if(void 0===o)return;r=Ne.core.midpoint(...o)}const o=Ne.core.rotate90(t.vector),n=Ne.core.clipLineConvexPolygon(e,o,r,Ne.core.exclude,Ne.core.includeL).map((e=>Ne.core.distance(r,e))).sort(((e,t)=>e-t)).shift(),s=Ne.core.scale(Ne.core.normalize(o),n);return Ne.segment(Ne.core.add(r,Ne.core.flip(s)),Ne.core.add(r,s))})(r,t);if(void 0===n)return;const s=Ne.core.subtract(n[1],n[0]),c=Ne.core.magnitude(s),a=Ne.core.dot(s,[1,0]),i=o.span[0]<o.span[1]?o.span[0]:o.span[1];return n.head={width:.1*i,height:.15*i},n.bend=a>0?.3:-.3,n.padding=.05*c,n}});var Kt=Object.freeze({__proto__:null,flipFacesLayer:e=>invertMap(invertMap(e).reverse()),facesLayerToEdgesAssignments:(e,t)=>{const r=[],o=makeFacesWinding(e);return(e.edges_faces?e.edges_faces:makeEdgesFaces(e)).forEach(((e,n)=>{if(1===e.length&&(r[n]="B"),2===e.length){const s=e.map((e=>o[e]));if(s[0]===s[1])return void(r[n]="F");const c=e.map((e=>t[e])),a=c[0]<c[1],i=s[0]?a:!a;r[n]=i?"V":"M"}})),r},faceOrdersToMatrix:e=>{const t=[];e.forEach((e=>{t[e[0]]=void 0,t[e[1]]=void 0}));const r=t.map((()=>[]));return e.forEach((([e,t,o])=>{r[e][t]=o,r[t][e]=-o})),r}});const nudgeFacesWithFacesLayer=({faces_layer:e})=>{const t=[];return invertMap(e).forEach(((e,r)=>{t[e]={vector:[0,0,1],layer:r}})),t},nudgeFacesWithFaceOrders=({vertices_coords:e,faces_vertices:t,faceOrders:r})=>{const o=makeFacesNormal({vertices_coords:e,faces_vertices:t}),n=getDisjointedVertices({edges_vertices:r.map((e=>[e[0],e[1]]))}),s=n.map((e=>(({faceOrders:e,faces_normal:t},r)=>{if(!e)return[];const o={};r.forEach((e=>{o[e]=!0})),r[0];const n=[];r.map((e=>{n[e]=Ne.core.dot(t[e],t[r[0]])>0}));const s=[];r.forEach((e=>{s[e]=[]})),e.forEach((e=>{if(!o[e[0]])return;const t=-1===e[2]^!n[e[1]]?[e[1],e[0]]:[e[0],e[1]];s[t[0]].push(t[1])}));const c=[],a={},recurse=e=>{a[e]=!0,s[e].forEach((e=>{a[e]||recurse(e)})),c.push(e)};return r.forEach((e=>{a[e]||recurse(e)})),c})({faceOrders:r,faces_normal:o},e))),c=n.map((e=>o[e[0]])),a=[];return s.forEach(((e,t)=>e.forEach(((e,r)=>{a[e]={vector:c[t],layer:r}})))),a};var Qt=Object.freeze({__proto__:null,nudgeFacesWithFacesLayer:nudgeFacesWithFacesLayer,nudgeFacesWithFaceOrders:nudgeFacesWithFaceOrders});const between=(e,t,r)=>t<r?e.slice(t+1,r):e.slice(r+1,t),validateTacoTacoFacePairs=e=>{const t=nonUniqueElements(e),r={};let o=0;for(let e=0;e<t.length;e+=1)if(void 0===r[t[e]])o+=1,r[t[e]]=o;else if(void 0!==r[t[e]]){if(r[t[e]]!==o)return!1;o-=1,r[t[e]]=void 0}return!0},build_layers=(e,t)=>e.map((e=>t[e])).filter((e=>void 0!==e)),validateLayerSolver=(e,t,r,o,n)=>{const s=Ne.core.flattenArrays(t);if(!((e,t,r=!0,o=Ne.core.EPSILON)=>{const n=invertMap(t),s=e.map((e=>e?e[1]:void 0)),c=e.map((e=>e?Math.min(...e):void 0)).map((e=>e+o)),a=e.map((e=>e?Math.max(...e):void 0)).map((e=>e-o)),i=n.length+(r?0:-1);for(let e=0;e<i;e+=1){const r=(e+1)%n.length;if(n[e]===n[r])continue;const o=between(t,n[e],n[r]).flat(),i=o.map((t=>s[e]<c[t])).reduce(((e,t)=>e&&t),!0),l=o.map((t=>s[e]>a[t])).reduce(((e,t)=>e&&t),!0);if(!i&&!l)return!1}return!0})(e,t,o,n))return!1;for(let e=0;e<r.length;e+=1){const t=build_layers(s,r[e]);if(!validateTacoTacoFacePairs(t))return!1}return!0},er={V:!0,v:!0,M:!0,m:!0},tr={V:1,v:1,M:-1,m:-1},assignmentsToFacesVertical=e=>{let t=0;return e.slice(1).concat([e[0]]).map((e=>{const r=(o=e,t%2==0?tr[o]||0:-(tr[o]||0));var o;return t+=void 0===tr[e]?0:1,r}))},foldStripWithAssignments=(e,t)=>{const r=(e=>{let t=0;const r=e.slice(1);return[!1].concat(r.map((e=>er[e]?++t:t)).map((e=>e%2==1)))})(t).map(((t,r)=>e[r]*(t?-1:1))),o=e.map((()=>{}));o[0]=[0,r[0]];for(let n=1;n<e.length&&("B"!==t[n]&&"b"!==t[n]);n+=1){const t=o[(n-1+e.length)%e.length][1];o[n]=[t,t+r[n]]}return o},rr={B:!0,b:!0},singleVertexSolver=(e,t,r=Ne.core.EPSILON)=>{const o=foldStripWithAssignments(e,t),n=assignmentsToFacesVertical(t),s=t.map((e=>!rr[e])).reduce(((e,t)=>e&&t),!0);if(s){const e=o[0][0],t=o[o.length-1][1];if(Math.abs(e-t)>r)return[]}const c=((e,t,r)=>{const o=e.map((e=>e?(e[0]+e[1])/2:void 0)),n=[];return e.forEach(((s,c)=>{if(!s)return;if(!t&&c===e.length-1)return;const a=s[1],i=a-2*r,l=a+2*r,d=[c,(c+1)%e.length],u=d.map((e=>o[e])).map((e=>e>a)),m=1*(!u[0]&&!u[1])+2*(u[0]&&u[1]),g=n.filter((e=>e.min<a&&e.max>a)).shift(),p={faces:d,taco_type:m};g?g.pairs.push(p):n.push({min:i,max:l,pairs:[p]})})),n.map((e=>e.pairs)).filter((e=>e.length>1)).map((e=>({both:e.filter((e=>0===e.taco_type)).map((e=>e.faces)),left:e.filter((e=>1===e.taco_type)).map((e=>e.faces)),right:e.filter((e=>2===e.taco_type)).map((e=>e.faces))})))})(o,s,r).map((e=>[e.left,e.right].map(invertMap).filter((e=>e.length>1)))).reduce(((e,t)=>e.concat(t)),[]),recurse=(t=[0],a=0,i=0)=>{const l=a+1,d=n[a],u=a>=e.length-1,m=s&&u;if(!validateLayerSolver(o,t,c,m,r))return[];if(m){const e=invertMap(t),r=e[0],o=e[a];if(d>0&&o>r)return[];if(d<0&&o<r)return[]}if(u)return[t];if(0===d)return t[i]=[l].concat(t[i]),recurse(t,l,i);const g=1===d?Array.from(Array(t.length-i)).map(((e,t)=>i+t+1)):Array.from(Array(i+1)).map(((e,t)=>t)),p=g.map((()=>clone(t)));return p.forEach(((e,t)=>e.splice(g[t],0,l))),p.map(((e,t)=>recurse(e,l,g[t]))).reduce(((e,t)=>e.concat(t)),[])};return recurse().map(invertMap)},maekawaAssignments=e=>{const t=(r=e).map(((e,t)=>t)).filter((e=>"U"===r[e]||"u"===r[e]));var r;const o=Array.from(Array(2**t.length)).map(((e,t)=>t.toString(2))).map((e=>Array(t.length-e.length+1).join("0")+e)).map((e=>Array.from(e).map((e=>"0"===e?"V":"M")))).map((r=>{const o=e.slice();return t.forEach(((e,t)=>{o[e]=r[t]})),o}));if(e.includes("B")||e.includes("b"))return o;const n=o.map((e=>e.filter((e=>"M"===e||"m"===e)).length)),s=o.map((e=>e.filter((e=>"V"===e||"v"===e)).length));return o.filter(((e,t)=>2===Math.abs(n[t]-s[t])))},make_lookup$1=e=>{const t=e[0].length,r=Array.from(Array(t+1)).map((()=>({})));Array.from(Array(Math.pow(2,t))).map(((e,t)=>t.toString(2))).map((e=>Array.from(e).map((e=>parseInt(e,10)+1)).join(""))).map((e=>`11111${e}`.slice(-t))).forEach((e=>{r[0][e]=!1})),e.forEach((e=>{r[0][e]=!0})),Array.from(Array(t)).map(((e,t)=>t+1)).map((e=>Array.from(Array(Math.pow(3,t))).map(((e,t)=>t.toString(3))).map((e=>`000000${e}`.slice(-t))).forEach((t=>((e,t,r)=>{const o=Array.from(r).map((e=>parseInt(e,10)));if(o.filter((e=>0===e)).length!==t)return;e[t][r]=!1;let n=!1;for(let r=0;r<o.length;r+=1){const s=[];if(0===o[r]){for(let n=1;n<=2;n+=1)o[r]=n,!1!==e[t-1][o.join("")]&&s.push([r,n]);o[r]=0,s.length>0&&!1===n&&(n=[]),1===s.length&&n.push(s[0])}}!1!==n&&0===n.length&&(n=!0),e[t][r]=n})(r,e,t)))));let o=[];Array.from(Array(t+1)).map(((e,r)=>t-r)).forEach((e=>{const t=[];Object.keys(r[e]).forEach((o=>{let n=r[e][o];n.constructor===Array&&(n=n[0]),t.push([o,n])})),o=o.concat(t)})),o.sort(((e,t)=>parseInt(e[0],10)-parseInt(t[0],10)));const n={};return o.forEach((e=>{n[e[0]]=Object.freeze(e[1])})),Object.freeze(n)},or={taco_taco:make_lookup$1(["111112","111121","111222","112111","121112","121222","122111","122212","211121","211222","212111","212221","221222","222111","222212","222221"]),taco_tortilla:make_lookup$1(["112","121","212","221"]),tortilla_tortilla:make_lookup$1(["11","22"]),transitivity:make_lookup$1(["112","121","122","211","212","221"])},nr={taco_taco:e=>[[e[0],e[2]],[e[1],e[3]],[e[1],e[2]],[e[0],e[3]],[e[0],e[1]],[e[2],e[3]]],taco_tortilla:e=>[[e[0],e[2]],[e[0],e[1]],[e[1],e[2]]],tortilla_tortilla:e=>[[e[0],e[2]],[e[1],e[3]]],transitivity:e=>[[e[0],e[1]],[e[1],e[2]],[e[2],e[0]]]},pairArrayToSortedPairString$1=e=>e[0]<e[1]?`${e[0]} ${e[1]}`:`${e[1]} ${e[0]}`,sr={taco_taco:e=>[pairArrayToSortedPairString$1([e[0],e[2]]),pairArrayToSortedPairString$1([e[1],e[3]]),pairArrayToSortedPairString$1([e[1],e[2]]),pairArrayToSortedPairString$1([e[0],e[3]]),pairArrayToSortedPairString$1([e[0],e[1]]),pairArrayToSortedPairString$1([e[2],e[3]])],taco_tortilla:e=>[pairArrayToSortedPairString$1([e[0],e[2]]),pairArrayToSortedPairString$1([e[0],e[1]]),pairArrayToSortedPairString$1([e[1],e[2]])],tortilla_tortilla:e=>[pairArrayToSortedPairString$1([e[0],e[2]]),pairArrayToSortedPairString$1([e[1],e[3]])],transitivity:e=>[pairArrayToSortedPairString$1([e[0],e[1]]),pairArrayToSortedPairString$1([e[1],e[2]]),pairArrayToSortedPairString$1([e[2],e[0]])]},cr={0:0,1:1,2:-1},keysToFaceOrders$1=(e,t)=>{const r=Object.keys(e),o=r.map((e=>e.split(" ").map((e=>parseInt(e,10)))));return o.forEach(((o,n)=>{const s=-2*(1===cr[e[r[n]]]^t[o[1]])+1;o.push(s)})),o},reformatSolution=(e,t)=>(e.orders&&(e.orders=e.orders.flatMap((e=>keysToFaceOrders$1(e,t)))),e.leaves&&(e.leaves=e.leaves.map((e=>keysToFaceOrders$1(e,t)))),e.partitions&&e.partitions.forEach((e=>reformatSolution(e,t))),e.node&&e.node.forEach((e=>reformatSolution(e,t))),e),ar=Object.freeze(Object.keys(or)),ir={0:0,1:2,2:1},buildRuleAndLookup$1=(e,t,...r)=>{const o=nr[e](t),n=o.map((e=>e[1]<e[0])),s=o.map(((e,t)=>n[t]?`${e[1]} ${e[0]}`:`${e[0]} ${e[1]}`)),c=s.map(((e,t)=>{for(let o=0;o<r.length;o+=1)if(r[o][e])return n[t]?ir[r[o][e]]:r[o][e];return 0})).join("");if(!0===or[e][c])return!0;if(!1===or[e][c])return!1;const a=or[e][c];return[s[a[0]],n[a[0]]?ir[a[1]]:a[1]]},getConstraintIndicesFromFacePairs$1=(e,t,r)=>{const o={};return ar.forEach((n=>{const s=r.flatMap((e=>t[n][e]));o[n]=uniqueElements(s).filter((t=>e[n][t]))})),o},propagate$1=(e,t,r,...o)=>{let n=r;const s={};do{const r=getConstraintIndicesFromFacePairs$1(e,t,n),c={};for(let t=0;t<ar.length;t+=1){const n=ar[t],a=r[n];for(let t=0;t<a.length;t+=1){const r=buildRuleAndLookup$1(n,e[n][a[t]],...o,s);if(!0!==r){if(!1===r)return console.warn("invalid state found",n,e[n][a[t]]),!1;if(s[r[0]]){if(s[r[0]]!==r[1])return console.warn("order conflict",n,e[n][a[t]]),!1}else{const[e,t]=r;c[e]=!0,s[r[0]]=t}}}}n=Object.keys(c)}while(n.length);return s},getNeighborsArray=(e,t,r)=>{const o={};return Object.keys(t).forEach((n=>{const s=r[n][e];s&&s.map((e=>t[n][e])).map((e=>sr[n](e).forEach((e=>{o[e]=!0}))))})),Object.keys(o)},makeTortillaTortillaFacesCrossing$1=(e,t,r)=>{const o=((e,t,r)=>{const o=makeFacesWinding(e),n=makeFacesPolygon(e,r);o.forEach(((e,t)=>{e||n[t].reverse()}));const s=t.map((e=>2===e.length&&e[0]!==e[1])).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)),c=s.map((t=>e.edges_vertices[t])).map((t=>t.map((t=>e.vertices_coords[t])))),a=c.map((e=>Ne.core.subtract2(e[1],e[0]))),i=[];return s.forEach((e=>{i[e]=[]})),s.map(((e,t)=>n.map((e=>Ne.core.clipLineConvexPolygon(e,a[t],c[t][0],Ne.core.exclude,Ne.core.excludeS,r))).map((e=>void 0!==e)))).forEach(((e,t)=>e.forEach(((e,r)=>{e&&i[s[t]].push(r)})))),i})(e,t,r);return o.map(((t,r)=>t.map((t=>[e.edges_faces[r],[t,t]])))).reduce(((e,t)=>e.concat(t)),[])},classify_faces_pair$1=e=>1===e[0]&&-1===e[1]||-1===e[0]&&1===e[1]?"both":1===e[0]&&1===e[1]?"right":-1===e[0]&&-1===e[1]?"left":void 0,makeTacosTortillas$1=(e,t=Ne.core.EPSILON)=>{const r=(e=>{const t=e.edges_vertices.map((t=>e.vertices_coords[t[0]])),r=e.edges_vertices.map((t=>Ne.core.subtract2(e.vertices_coords[t[1]],e.vertices_coords[t[0]])));return e.edges_faces.map(((o,n)=>o.map((o=>Ne.core.cross2(Ne.core.subtract2(e.faces_center[o],t[n]),r[n]))).map((e=>Math.sign(e)))))})(e),o=makeEdgesEdgesParallelOverlap(e,t),n=selfRelationalUniqueIndexPairs(o).filter((t=>t.map((t=>e.edges_faces[t].length>1)).reduce(((e,t)=>e&&t),!0))),s=n.map((t=>t.map((t=>e.edges_faces[t])))),c=((e,t,r)=>{const o=t.map((t=>e.edges_vertices[t[0]].map((t=>e.vertices_coords[t])))),n=o.map((e=>e[0])),s=o.map((e=>Ne.core.subtract2(e[1],e[0])));return r.map((t=>t.map((t=>t.map((t=>e.faces_center[t])))))).map(((e,t)=>e.map((e=>e.map((e=>Ne.core.cross2(Ne.core.subtract2(e,n[t]),s[t]))).map((e=>Math.sign(e)))))))})(e,n,s),a=c.map((e=>e.map(classify_faces_pair$1))),i=a.map(((e,t)=>{return(r=e)[0]===r[1]&&"both"!==r[0]?s[t]:void 0;var r})).filter((e=>void 0!==e)),l=a.map(((e,t)=>{return(r=e)[0]===r[1]&&"both"===r[0]?s[t]:void 0;var r})).map(((e,t)=>((e,t)=>{if(void 0!==e)return t[0][0]===t[1][0]?e:[e[0],[e[1][1],e[1][0]]]})(e,c[t]))).filter((e=>void 0!==e)),d=makeTortillaTortillaFacesCrossing$1(e,r,t),u=l.concat(d),m=a.map(((e,t)=>{return(r=e)[0]===r[1]||"both"!==r[0]&&"both"!==r[1]?void 0:((e,t,r)=>{const o="left"===t[0]||"left"===t[1]?-1:1,n="both"===t[0]?[...e[1]]:[...e[0]],s="both"===t[0]?0:1;return{taco:n,tortilla:r[s][0]===o?e[s][0]:e[s][1]}})(s[t],a[t],c[t]);var r})).filter((e=>void 0!==e)),g=makeEdgesFacesOverlap(e,t),p=booleanMatrixToIndexedArray(g).map(((e,t)=>r[t].length>1&&r[t][0]===r[t][1]?e:[])).map(((t,r)=>({taco:e.edges_faces[r],tortillas:t}))).filter((e=>e.tortillas.length)).flatMap((e=>e.tortillas.map((t=>({taco:[...e.taco],tortilla:t})))));return{taco_taco:i,tortilla_tortilla:u,taco_tortilla:m.concat(p)}},lr={0:0,1:2,2:1},fr={M:1,m:1,V:2,v:2},doEdgesOverlap=(e,t,r,o=1e-6)=>{const n=((e,t,r=1e-6)=>{const o=e[0]<e[1]?e:[e[1],e[0]],n=t[0]<t[1]?t:[t[1],t[0]];return Math.min(o[1],n[1])-Math.max(o[0],n[0])>r})(...t.map((t=>e.edges_vertices[t].map((t=>e.vertices_coords[t])))).map((e=>e.map((e=>Ne.core.dot(e,r))))),o);return n},prepare$1=(e,t=1e-6)=>{const r={...e};r.faces_edges||(r.faces_edges=makeFacesEdgesFromVertices(r));const o=getOverlappingFacesGroups(r,t),n=invertMap(o.faces_group).map((e=>e.constructor===Array?e:[e])),s=((e,t,r)=>{const o=t.groups_transformXY.map((()=>({...e})));filterKeysWithPrefix(e,"vertices").forEach((e=>o.forEach((t=>delete t[e])))),o.forEach((e=>delete e.edges_edges)),o.forEach((e=>delete e.edges_faces));const n=filterKeysWithPrefix(e,"faces");o.forEach(((t,o)=>n.forEach((n=>{t[n]=[],r[o].forEach((r=>{t[n][r]=e[n][r]}))}))));const s=e.vertices_coords.map((e=>Ne.core.resize(3,e))),c=r.map((()=>({})));r.forEach(((t,r)=>t.forEach((t=>e.faces_vertices[t].forEach((e=>{c[r][e]=!0}))))));const a=c.map((e=>Object.keys(e).map((e=>parseInt(e,10)))));o.forEach((e=>{e.vertices_coords=[]})),t.groups_transformXY.forEach(((e,t)=>a[t].forEach((r=>{const n=Ne.core.multiplyMatrix4Vector3(e,s[r]);o[t].vertices_coords[r]=[n[0],n[1]]}))));const i=r.map((()=>({})));r.forEach(((t,r)=>t.forEach((t=>e.faces_edges[t].forEach((e=>{i[r][e]=!0}))))));const l=i.map((e=>Object.keys(e).map((e=>parseInt(e,10))))),d=filterKeysWithPrefix(e,"edges");return o.forEach(((t,r)=>d.forEach((o=>{t[o]=[],l[r].forEach((r=>{t[o][r]=e[o][r]}))})))),o.forEach((e=>{e.edges_faces=makeEdgesFacesUnsorted(e)})),o})(r,o,n),c=[];n.map(((e,t)=>e.map((e=>r.faces_vertices[e])).map((e=>e.map((e=>s[t].vertices_coords[e])))).forEach(((t,r)=>{c[e[r]]=t}))));const a=c.map((e=>e.reduce(((e,t)=>Ne.core.add(e,t)),[0,0]).map((t=>t/e.length))));s.forEach((e=>{e.faces_center=e.faces_vertices.map(((e,t)=>a[t]))}));const i=s.map((e=>makeTacosTortillas$1(e,t))),l=s.map((e=>((e,t,r,o=Ne.core.EPSILON)=>{const n=makeFacesPolygon(e,o);n.forEach(((e,t)=>{r[t]||e.reverse()}));const s=e.faces_vertices.map((()=>[]));n.forEach(((e,r)=>t[r].forEach((e=>{if(e<=r)return;const t=Ne.core.clipPolygonPolygon(n[r],n[e],o);t&&(s[r][e]=t)}))));const c=[];return s.forEach(((e,t)=>e.forEach(((e,r)=>{r<=t||!s[t][r]||s.forEach(((s,a)=>{a<=t||a<=r||Ne.core.clipPolygonPolygon(e,n[a],o)&&c.push([t,r,a].sort(((e,t)=>e-t)))}))})))),c})(e,o.faces_facesOverlap,o.faces_winding,t))),d=l.map(((e,t)=>((e,t)=>{const r={};return t.taco_taco.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]].sort(((e,t)=>e-t)))).forEach((e=>[`${e[0]} ${e[1]} ${e[2]}`,`${e[0]} ${e[1]} ${e[3]}`,`${e[0]} ${e[2]} ${e[3]}`,`${e[1]} ${e[2]} ${e[3]}`].forEach((e=>{r[e]=!0})))),t.taco_tortilla.map((e=>[e.taco[0],e.taco[1],e.tortilla].sort(((e,t)=>e-t)).join(" "))).forEach((e=>{r[e]=!0})),e.filter((e=>void 0===r[e.join(" ")]))})(e,i[t]))),u=i.map(((e,t)=>((e,t)=>{const r={};return r.taco_taco=e.taco_taco.map((e=>[e[0][0],e[1][0],e[0][1],e[1][1]])),r.taco_tortilla=e.taco_tortilla.map((e=>[e.taco[0],e.tortilla,e.taco[1]])),r.tortilla_tortilla=e.tortilla_tortilla.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]])),r.transitivity=t.map((e=>[e[0],e[1],e[2]])),r})(e,d[t]))),m=u.map((e=>(e=>{const t={};return Object.keys(e).forEach((e=>{t[e]={}})),Object.keys(e).forEach((r=>{e[r].forEach(((e,o)=>sr[r](e).forEach((e=>{void 0===t[r][e]&&(t[r][e]=[]),t[r][e].push(o)}))))})),t})(e))),g=selfRelationalUniqueIndexPairs(o.faces_facesOverlap),p=g.map((e=>e.join(" "))),h=s.map((e=>((e,t,r)=>{const o={};t.forEach((e=>{o[e]=!0}));const n={};return e.edges_faces.forEach(((t,s)=>{const c=e.edges_assignment[s],a=fr[c];if(t.length<2||void 0===a)return;const i=r[t[0]]?a:lr[a],l=`${t[0]} ${t[1]}`,d=`${t[1]} ${t[0]}`;l in o&&(n[l]=i),d in o&&(n[d]=lr[i])})),n})(e,p,o.faces_winding))),v=g.map((e=>o.faces_group[e[0]])),_=invertMap(v).map((e=>e.constructor===Array?e:[e])).map((e=>e.map((e=>p[e])))),y=u.map(((e,t)=>_[t]?_[t]:[])),b=((e,t,r=1e-6)=>{const o=e.edges_vertices.map((()=>({})));t.faces_group.forEach(((t,r)=>e.faces_edges[r].forEach((e=>{o[e][t]=!0}))));const n=o.map((e=>Object.keys(e).map((e=>parseInt(e,10)))));n.forEach(((e,t)=>{2!==e.length&&delete n[t]})),n.forEach(((e,t)=>{e[0]>e[1]&&n[t].reverse()}));const s=n.map((e=>e.join(" "))),c={};s.forEach(((e,t)=>{void 0===c[e]&&(c[e]=[]),c[e].push(t)})),Object.keys(c).filter((e=>c[e].length<2)).forEach((e=>delete c[e]));const a={};Object.keys(c).forEach((e=>{a[e]=makeTrianglePairs(c[e])}));const i={};Object.keys(a).forEach((t=>{const o=a[t][0][0],n=e.edges_vertices[o].map((t=>e.vertices_coords[t])),s=Ne.core.normalize(Ne.core.subtract(n[1],n[0]));i[t]=a[t].map((t=>doEdgesOverlap(e,t,s,r)))}));const l={};Object.keys(a).forEach((e=>{l[e]=a[e].filter(((t,r)=>i[e][r]))})),console.log("edges_groups",n),console.log("intersectingGroups_edges",c),console.log("intersectingGroups_pairsAll",a),console.log("intersectingGroups_pairsValid",i),console.log("intersectingGroups_pairs",l);const d=Object.keys(l).flatMap((e=>l[e]));console.log("result",d)})(r,o,t);return console.log("prepare",o),console.log("tacoEdges3D",b),{groups_constraints:u,groups_constraintsLookup:m,groups_facePairs:y,groups_edgeAdjacentOrders:h,faces_winding:o.faces_winding}},allSolutions=(e,...t)=>{const r=e.orders?[...t,e.orders]:[...t];if(e.partitions){const t=e.partitions.map((e=>allSolutions(e)));return(e=>{const t=e.map((e=>e.length)),r=t.slice();for(let e=r.length-2;e>=0;e-=1)r[e]*=r[e+1];r[0]>2**28&&console.warn("allSolutions() might fail: too many");const o=r.slice();return o.push(1),o.shift(),Array.from(Array(r[0])).map(((e,t)=>t)).map((e=>o.map(((r,o)=>Math.floor(e/r)%t[o]))))})(t).map((e=>e.flatMap(((e,r)=>t[r][e])))).map((e=>[...r,...e]))}const o=[];if(e.leaves&&e.leaves.forEach((e=>o.push([...r,e]))),e.node){const t=e.node.flatMap((e=>allSolutions(e,...r)));o.push(...t)}return e.leaves||e.node||o.push([...r]),o},anySolution=e=>{const t=e.orders?e.orders:[];return e.partitions?[...t,...e.partitions.flatMap((e=>anySolution(e)))]:e.leaves?[...t,...e.leaves[0]]:e.node?[...t,...anySolution(e.node[0])]:t},dr={anySolution:function(){return this.groups.flatMap((e=>anySolution(e)))},allSolutions:function(){return this.allSolutionsMemo||(this.allSolutionsMemo=this.groups.map((e=>allSolutions(e)))),this.allSolutionsMemo},count:function(){return this.allSolutions().map((e=>e.length))},solution:function(e=[]){const t=this.allSolutions(),r=Array(t.length).fill(0).map(((t,r)=>null!=e[r]?e[r]:t));return t.flatMap(((e,t)=>e[r[t]].flat()))}},solveNonBranchingNode=(e,t,r,o,...n)=>{if(!r.length)return{};const s=r[0],c=[],a=[];[1,2].forEach((i=>{const l=propagate$1(e,t,[s],...o,...n,{[s]:i});if(!1===l)return;l[s]=i;(Object.keys(l).length===r.length?c:a).push(l)}));const i={leaves:c,node:a.map((s=>solveNode(e,t,r.filter((e=>!(e in s))),[...o,...n],s)))};return 0===i.leaves.length&&delete i.leaves,0===i.node.length&&delete i.node,i},solveNode=(e,t,r,o,...n)=>{if(!r.length)return{orders:n};const s=((e,t,r,o={})=>{const n={};e.forEach((e=>{n[e]=!0}));let s=0;const c=[];for(;s<e.length;){if(!n[e[s]]){s+=1;continue}const a=[],i=[e[s]],l={[e[s]]:!0};do{const e=i.shift();delete n[e],a.push(e);const s=o[e]?o[e]:getNeighborsArray(e,t,r);o[e]=s;const c=s.filter((e=>n[e]&&!l[e]));i.push(...c),c.forEach((e=>{l[e]=!0}))}while(i.length);s+=1,c.push(a)}return c})(r,e,t);return s.length>1?{orders:n,partitions:s.map((r=>solveNonBranchingNode(e,t,r,o,...n)))}:{orders:n,...solveNonBranchingNode(e,t,s[0],o,...n)}},make_lookup=e=>{const t=e[0].length,r=Array.from(Array(t+1)).map((()=>({})));Array.from(Array(Math.pow(2,t))).map(((e,t)=>t.toString(2))).map((e=>Array.from(e).map((e=>parseInt(e,10)+1)).join(""))).map((e=>`11111${e}`.slice(-t))).forEach((e=>{r[0][e]=!1})),e.forEach((e=>{r[0][e]=!0})),Array.from(Array(t)).map(((e,t)=>t+1)).map((e=>Array.from(Array(Math.pow(3,t))).map(((e,t)=>t.toString(3))).map((e=>`000000${e}`.slice(-t))).forEach((t=>((e,t,r)=>{const o=Array.from(r).map((e=>parseInt(e,10)));if(o.filter((e=>0===e)).length!==t)return;e[t][r]=!1;let n=!1;for(let r=0;r<o.length;r+=1){const s=[];if(0===o[r]){for(let n=1;n<=2;n+=1)o[r]=n,!1!==e[t-1][o.join("")]&&s.push([r,n]);o[r]=0,s.length>0&&!1===n&&(n=[]),1===s.length&&n.push(s[0])}}!1!==n&&0===n.length&&(n=!0),e[t][r]=n})(r,e,t)))));let o=[];Array.from(Array(t+1)).map(((e,r)=>t-r)).forEach((e=>{const t=[];Object.keys(r[e]).forEach((o=>{let n=r[e][o];n.constructor===Array&&(n=n[0]),t.push([o,n])})),o=o.concat(t)})),o.sort(((e,t)=>parseInt(e[0],10)-parseInt(t[0],10)));const n={};return o.forEach((e=>{n[e[0]]=Object.freeze(e[1])})),Object.freeze(n)},ur={taco_taco:make_lookup(["111112","111121","111222","112111","121112","121222","122111","122212","211121","211222","212111","212221","221222","222111","222212","222221"]),taco_tortilla:make_lookup(["112","121","212","221"]),tortilla_tortilla:make_lookup(["11","22"]),transitivity:make_lookup(["112","121","122","211","212","221"])},mr={taco_taco:e=>[[e[0],e[2]],[e[1],e[3]],[e[1],e[2]],[e[0],e[3]],[e[0],e[1]],[e[2],e[3]]],taco_tortilla:e=>[[e[0],e[2]],[e[0],e[1]],[e[1],e[2]]],tortilla_tortilla:e=>[[e[0],e[2]],[e[1],e[3]]],transitivity:e=>[[e[0],e[1]],[e[1],e[2]],[e[2],e[0]]]},pairArrayToSortedPairString=e=>e[0]<e[1]?`${e[0]} ${e[1]}`:`${e[1]} ${e[0]}`,gr={taco_taco:e=>[pairArrayToSortedPairString([e[0],e[2]]),pairArrayToSortedPairString([e[1],e[3]]),pairArrayToSortedPairString([e[1],e[2]]),pairArrayToSortedPairString([e[0],e[3]]),pairArrayToSortedPairString([e[0],e[1]]),pairArrayToSortedPairString([e[2],e[3]])],taco_tortilla:e=>[pairArrayToSortedPairString([e[0],e[2]]),pairArrayToSortedPairString([e[0],e[1]]),pairArrayToSortedPairString([e[1],e[2]])],tortilla_tortilla:e=>[pairArrayToSortedPairString([e[0],e[2]]),pairArrayToSortedPairString([e[1],e[3]])],transitivity:e=>[pairArrayToSortedPairString([e[0],e[1]]),pairArrayToSortedPairString([e[1],e[2]]),pairArrayToSortedPairString([e[2],e[0]])]},pr={0:0,1:1,2:-1},hr=Object.freeze(Object.keys(ur)),vr={0:0,1:2,2:1},buildRuleAndLookup=(e,t,...r)=>{const o=mr[e](t),n=o.map((e=>e[1]<e[0])),s=o.map(((e,t)=>n[t]?`${e[1]} ${e[0]}`:`${e[0]} ${e[1]}`)),c=s.map(((e,t)=>{for(let o=0;o<r.length;o+=1)if(r[o][e])return n[t]?vr[r[o][e]]:r[o][e];return 0})).join("");if(!0===ur[e][c])return!0;if(!1===ur[e][c])return!1;const a=ur[e][c];return[s[a[0]],n[a[0]]?vr[a[1]]:a[1]]},getConstraintIndicesFromFacePairs=(e,t,r)=>{const o={};return hr.forEach((n=>{const s=r.flatMap((e=>t[n][e]));o[n]=uniqueElements(s).filter((t=>e[n][t]))})),o},propagate=(e,t,r,...o)=>{let n=r;const s={};do{const r=getConstraintIndicesFromFacePairs(e,t,n),c={};for(let t=0;t<hr.length;t+=1){const n=hr[t],a=r[n];for(let t=0;t<a.length;t+=1){const r=buildRuleAndLookup(n,e[n][a[t]],...o,s);if(!0!==r){if(!1===r)return console.warn("invalid state found",n,e[n][a[t]]),!1;if(s[r[0]]){if(s[r[0]]!==r[1])return console.warn("order conflict",n,e[n][a[t]]),!1}else{const[e,t]=r;c[e]=!0,s[r[0]]=t}}}}n=Object.keys(c)}while(n.length);return s},getBranches=(e,t,r,o={})=>{const n=Object.keys(t),s={};e.forEach((e=>{s[e]=!0}));let c=0;const a=[];for(;c<e.length;){if(!s[e[c]]){c+=1;continue}const i=[],l=[e[c]],d={[e[c]]:!0};do{const e=l.shift();let c;if(delete s[e],i.push(e),o[e])c=o[e];else{const s={};n.forEach((o=>{const n=r[o][e];n&&n.map((e=>t[o][e])).map((e=>gr[o](e).forEach((e=>{s[e]=!0}))))})),c=Object.keys(s),o[e]=c}const a=c.filter((e=>s[e])).filter((e=>!d[e]));l.push(...a),a.forEach((e=>{d[e]=!0}))}while(l.length);c+=1,a.push(i)}return a},makeTortillaTortillaFacesCrossing=(e,t,r)=>{const o=((e,t,r)=>{const o=makeFacesWinding(e),n=makeFacesPolygon(e,r);for(let e=0;e<n.length;e+=1)o[e]||n[e].reverse();const s=t.map((e=>2===e.length&&e[0]!==e[1])).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)),c=s.map((t=>e.edges_vertices[t])).map((t=>t.map((t=>e.vertices_coords[t])))),a=c.map((e=>Ne.core.subtract2(e[1],e[0]))),i=[];return s.forEach((e=>{i[e]=[]})),s.map(((e,t)=>n.map((e=>Ne.core.clipLineConvexPolygon(e,a[t],c[t][0],Ne.core.exclude,Ne.core.excludeS,r))).map((e=>void 0!==e)))).forEach(((e,t)=>e.forEach(((e,r)=>{e&&i[s[t]].push(r)})))),i})(e,t,r);return o.map(((t,r)=>t.map((t=>[e.edges_faces[r],[t,t]])))).reduce(((e,t)=>e.concat(t)),[])},classify_faces_pair=e=>1===e[0]&&-1===e[1]||-1===e[0]&&1===e[1]?"both":1===e[0]&&1===e[1]?"right":-1===e[0]&&-1===e[1]?"left":void 0,makeTacosTortillas=(e,t=Ne.core.EPSILON)=>{const r=makeFacesConvexCenter(e),o=((e,t)=>{const r=e.edges_vertices.map((t=>e.vertices_coords[t[0]])),o=e.edges_vertices.map((t=>Ne.core.subtract2(e.vertices_coords[t[1]],e.vertices_coords[t[0]])));return e.edges_faces.map(((e,n)=>e.map((e=>Ne.core.cross2(Ne.core.subtract2(t[e],r[n]),o[n]))).map((e=>Math.sign(e)))))})(e,r),n=(e=>{const t=Array.from(Array(e.length)).map((()=>Array(e.length).fill(!1)));return e.forEach(((e,r)=>e.forEach((e=>{t[r][e]=!0})))),t})(makeEdgesEdgesParallelOverlap(e,t)),s=booleanMatrixToUniqueIndexPairs(n).filter((t=>t.map((t=>e.edges_faces[t].length>1)).reduce(((e,t)=>e&&t),!0))),c=s.map((t=>t.map((t=>e.edges_faces[t])))),a=((e,t,r,o)=>{const n=r.map((t=>e.edges_vertices[t[0]].map((t=>e.vertices_coords[t])))),s=n.map((e=>e[0])),c=n.map((e=>Ne.core.subtract2(e[1],e[0])));return o.map((e=>e.map((e=>e.map((e=>t[e])))))).map(((e,t)=>e.map((e=>e.map((e=>Ne.core.cross2(Ne.core.subtract2(e,s[t]),c[t]))).map((e=>Math.sign(e)))))))})(e,r,s,c),i=a.map((e=>e.map(classify_faces_pair))),l=i.map(((e,t)=>{return(r=e)[0]===r[1]&&"both"!==r[0]?c[t]:void 0;var r})).filter((e=>void 0!==e)),d=i.map(((e,t)=>{return(r=e)[0]===r[1]&&"both"===r[0]?c[t]:void 0;var r})).map(((e,t)=>((e,t)=>{if(void 0!==e)return t[0][0]===t[1][0]?e:[e[0],[e[1][1],e[1][0]]]})(e,a[t]))).filter((e=>void 0!==e)),u=makeTortillaTortillaFacesCrossing(e,o,t),m=d.concat(u),g=i.map(((e,t)=>{return(r=e)[0]===r[1]||"both"!==r[0]&&"both"!==r[1]?void 0:((e,t,r)=>{const o="left"===t[0]||"left"===t[1]?-1:1,n="both"===t[0]?[...e[1]]:[...e[0]],s="both"===t[0]?0:1;return{taco:n,tortilla:r[s][0]===o?e[s][0]:e[s][1]}})(c[t],i[t],a[t]);var r})).filter((e=>void 0!==e)),p=makeEdgesFacesOverlap(e,t),h=booleanMatrixToIndexedArray(p).map(((e,t)=>o[t].length>1&&o[t][0]===o[t][1]?e:[])).map(((t,r)=>({taco:e.edges_faces[r],tortillas:t}))).filter((e=>e.tortillas.length)).flatMap((e=>e.tortillas.map((t=>({taco:[...e.taco],tortilla:t})))));return{taco_taco:l,tortilla_tortilla:m,taco_tortilla:g.concat(h)}},_r={0:0,1:2,2:1},yr={M:1,m:1,V:2,v:2},prepare=(e,t=1e-6)=>{const r=getFacesFaces2DOverlap(e,t),o=makeFacesWinding(e),n=makeTacosTortillas(e,t),s=((e,t,r,o=Ne.core.EPSILON)=>{t||(t=getFacesFaces2DOverlap(e,o)),r||(r=makeFacesWinding(e));const n=e.faces_vertices.map((t=>t.map((t=>e.vertices_coords[t]))));n.forEach(((e,t)=>{r[t]||e.reverse()}));const s=e.faces_vertices.map((()=>[]));for(let e=0;e<s.length-1;e+=1)for(let r=e+1;r<s.length;r+=1){if(!t[e][r])continue;const c=Ne.core.clipPolygonPolygon(n[e],n[r],o);c&&(s[e][r]=c)}const c=[];for(let e=0;e<s.length-1;e+=1)for(let r=e+1;r<s.length;r+=1)if(s[e][r])for(let a=r+1;a<s.length;a+=1)e!==a&&r!==a&&t[e][a]&&t[r][a]&&Ne.core.clipPolygonPolygon(s[e][r],n[a],o)&&c.push([e,r,a].sort(((e,t)=>e-t)));return c})(e,r,o,t),c=((e,t)=>{const r={};return t.taco_taco.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]].sort(((e,t)=>e-t)))).forEach((e=>[`${e[0]} ${e[1]} ${e[2]}`,`${e[0]} ${e[1]} ${e[3]}`,`${e[0]} ${e[2]} ${e[3]}`,`${e[1]} ${e[2]} ${e[3]}`].forEach((e=>{r[e]=!0})))),t.taco_tortilla.map((e=>[e.taco[0],e.taco[1],e.tortilla].sort(((e,t)=>e-t)).join(" "))).forEach((e=>{r[e]=!0})),e.filter((e=>void 0===r[e.join(" ")]))})(s,n),a=((e,t)=>{const r={};return r.taco_taco=e.taco_taco.map((e=>[e[0][0],e[1][0],e[0][1],e[1][1]])),r.taco_tortilla=e.taco_tortilla.map((e=>[e.taco[0],e.tortilla,e.taco[1]])),r.tortilla_tortilla=e.tortilla_tortilla.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]])),r.transitivity=t.map((e=>[e[0],e[1],e[2]])),r})(n,c),i=(e=>{const t={};return Object.keys(e).forEach((e=>{t[e]={}})),Object.keys(e).forEach((r=>{e[r].forEach(((e,o)=>gr[r](e).forEach((e=>{void 0===t[r][e]&&(t[r][e]=[]),t[r][e].push(o)}))))})),t})(a),l=((e,t)=>(t||(t=getFacesFaces2DOverlap(e)),booleanMatrixToUniqueIndexPairs(t).map((e=>e.join(" ")))))(e,r),d=((e,t,r)=>{r||(r=makeFacesWinding(e));const o={};t.forEach((e=>{o[e]=!0}));const n={};return e.edges_faces.forEach(((t,s)=>{const c=e.edges_assignment[s],a=yr[c];if(t.length<2||void 0===a)return;const i=r[t[0]]?a:_r[a],l=`${t[0]} ${t[1]}`,d=`${t[1]} ${t[0]}`;l in o&&(n[l]=i),d in o&&(n[d]=_r[i])})),n})(e,l,o);return{constraints:a,constraintsLookup:i,facePairs:l,edgeAdjacentOrders:d}},br={allSolutions:function(){return(e=>{const recurse=(e,t=[])=>{e.faceOrders&&t.push(e.faceOrders);const r=e.finished?e.finished.map((e=>[...t,e.faceOrders])):void 0;if(e.unfinished){const o=e.unfinished.map((e=>recurse(e,JSON.parse(JSON.stringify(t))))),n=o.length>1?((e,t)=>{const r=[];for(let o=0;o<e.length;o+=1)for(let n=0;n<t.length;n+=1)r.push([e[o],t[n]]);return r})(...o):o;n.forEach((e=>{e.branch=!0})),r.forEach((e=>e.push(...n)))}return r.finished=!0,r};return recurse(e)})(this)}},solveBranch=(e,t,r,o,n,...s)=>{if(!o.length)return[];const c=o[0],a=[],i=[];[1,2].forEach((r=>{const n=propagate(e,t,[c],...s,{[c]:r});!1!==n&&(n[c]=r,Object.keys(n).length===o.length?a.push(n):i.push(n))}));const l=i.map((e=>({faceOrders:e}))),d=i.map(((n,c)=>{const a=o.filter((e=>!(e in n)));return getBranches(a,e,t,r).map((o=>solveBranch(e,t,r,o,l[c],...s,n)))}));return a.length&&(n.finished=a.map((e=>({faceOrders:e})))),l.length&&(n.unfinished=l),l.length>1&&a.length&&console.log("HAPPENED"),a.map((e=>[...s,e])).concat(...d)};var Er=Object.assign(Object.create(null),{solver:(e,t=1e-6)=>{const{groups_constraints:r,groups_constraintsLookup:o,groups_facePairs:n,groups_edgeAdjacentOrders:s,faces_winding:c}=prepare$1(e,t),a=r.map(((e,t)=>((e,t,r,o,n)=>{const s=propagate$1(e,t,Object.keys(o),o);if(!s)return;const c=r.filter((e=>!(e in o))).filter((e=>!(e in s))),a=solveNode(e,t,c,[],o,s);return reformatSolution(a,n)})(e,o[t],n[t],s[t],c))).filter((e=>e&&e.orders.length));return Object.assign(Object.create(dr),{groups:a})},solver2d:(e,t=1e-6)=>{const r=new Date,{constraints:o,constraintsLookup:n,facePairs:s,edgeAdjacentOrders:c}=prepare(e,t),a=Date.now()-r,i=new Date,l=propagate(o,n,Object.keys(c),c);if(!l)return;console.log("2D initialResult",JSON.parse(JSON.stringify(l)));const d={},u=s.filter((e=>!(e in c))).filter((e=>!(e in l))),m={},g=getBranches(u,o,n,m),p=g.map((()=>({}))),h=g.map(((e,t)=>solveBranch(o,n,m,e,p[t],c,l)));p.length&&(d.unfinished=p),d.faceOrders={...c,...l},console.log("2D solution",JSON.parse(JSON.stringify(d.faceOrders)));const v=e.faces_normal?e.faces_normal:makeFacesNormal(e),_=[0,0,1],recurse=e=>{e.faceOrders&&(e.faceOrders=((e,t,r)=>{const o=t.map((e=>Ne.core.dot(e,r)>0)),n=Object.keys(e),s=n.map((e=>e.split(" ").map((e=>parseInt(e,10)))));return s.forEach(((t,r)=>{const s=pr[e[n[r]]],c=o[t[1]]?s:-s;t.push(c)})),s})(e.faceOrders,v,_)),e.finished&&e.finished.forEach((e=>recurse(e))),e.unfinished&&e.unfinished.forEach((e=>recurse(e)))};recurse(d),console.log("2D solution final",JSON.parse(JSON.stringify(d.faceOrders)));const y=Date.now()-i;return console.log(`prep ${a}ms solver ${y}ms`),console.log("solution",d),console.log("branches",h),Object.assign(Object.create(br),d)},topologicalOrder:(e,t)=>{if(!e)return[];const r=[];Object.keys(e).forEach((t=>{const o=t.split(" ").map((e=>parseInt(e,10)));-1===e[t]&&o.reverse(),void 0===r[o[0]]&&(r[o[0]]=[]),r[o[0]].push(o[1])})),t&&t.faces_vertices&&t.faces_vertices.forEach(((e,t)=>{void 0===r[t]&&(r[t]=[])}));const o=[],n=[];let s=0;for(let e=0;e<r.length;e+=1){if(n[e])continue;const t=[e];for(;t.length&&s<2*r.length;){const e=t[t.length-1];if(r[e]&&r[e].length){const o=r[e].pop();n[o]||t.push(o)}else o.push(e),n[e]=!0,t.pop(),s+=1}}return s>=2*r.length&&console.warn("fix protection in topological order"),o},singleVertexSolver:singleVertexSolver,singleVertexAssignmentSolver:(e,t,r)=>{null==t&&(t=e.map((()=>"U")));const o=maekawaAssignments(t),n=o.map((t=>singleVertexSolver(e,t,r)));return o.map(((e,t)=>t)).filter((e=>n[e].length>0)).map((e=>({assignment:o[e],layer:n[e]})))},foldStripWithAssignments:foldStripWithAssignments},Kt,Qt);var xr=Object.freeze({__proto__:null,kawasakiSolutions:({vertices_coords:e,vertices_edges:t,edges_vertices:r,edges_vectors:o},n)=>{o||(o=makeEdgesVector({vertices_coords:e,edges_vertices:r})),t||(t=makeVerticesEdgesUnsorted({edges_vertices:r}));const s=t[n].map((e=>o[e])),c=Ne.core.counterClockwiseOrder2(s).map((e=>s[e]));return kawasakiSolutionsVectors(c)}}),kr=Object.assign(Object.create(null),{maekawaAssignments:maekawaAssignments,foldAngles4:(e,t,r=0)=>{const o=(e=>{let t=0,r=0;for(let o=0;o<e.length;o+=1)"M"!==e[o]&&"m"!==e[o]||(t+=1),"V"!==e[o]&&"v"!==e[o]||(r+=1);for(let o=0;o<e.length;o+=1){if(t>r&&("V"===e[o]||"v"===e[o]))return o;if(r>t&&("M"===e[o]||"m"===e[o]))return o}})(t);if(void 0===o)return;const n=e[(o+1)%e.length],s=e[(o+2)%e.length],c=Math.PI*r,a=-Math.cos(n)*Math.cos(s)+Math.sin(n)*Math.sin(s)*Math.cos(Math.PI-c),i=Math.cos(Math.PI-c)-Math.sin(Math.PI-c)**2*Math.sin(n)*Math.sin(s)/(1-a),l=-Math.acos(i)+Math.PI;return o%2==0?[l,c,l,c].map(((e,t)=>o===t?-e:e)):[c,l,c,l].map(((e,t)=>o===t?-e:e))}},xt,xr,Mt),Ar={axioms:{ar:[null,"اصنع خطاً يمر بنقطتين","اصنع خطاً عن طريق طي نقطة واحدة إلى أخرى","اصنع خطاً عن طريق طي خط واحد على آخر","اصنع خطاً يمر عبر نقطة واحدة ويجعل خطاً واحداً فوق نفسه","اصنع خطاً يمر بالنقطة الأولى ويجعل النقطة الثانية على الخط","اصنع خطاً يجلب النقطة الأولى إلى الخط الأول والنقطة الثانية إلى الخط الثاني","اصنع خطاً يجلب نقطة إلى خط ويجعل خط ثاني فوق نفسه"],de:[null,"Falte eine Linie durch zwei Punkte","Falte zwei Punkte aufeinander","Falte zwei Linien aufeinander","Falte eine Linie auf sich selbst, falte dabei durch einen Punkt","Falte einen Punkt auf eine Linie, falte dabei durch einen anderen Punkt","Falte einen Punkt auf eine Linie und einen weiteren Punkt auf eine weitere Linie","Falte einen Punkt auf eine Linie und eine weitere Linie in sich selbst zusammen"],en:[null,"fold a line through two points","fold two points together","fold two lines together","fold a line on top of itself, creasing through a point","fold a point to a line, creasing through another point","fold a point to a line and another point to another line","fold a point to a line and another line onto itself"],es:[null,"dobla una línea entre dos puntos","dobla dos puntos juntos","dobla y une dos líneas","dobla una línea sobre sí misma, doblándola hacia un punto","dobla un punto hasta una línea, doblándola a través de otro punto","dobla un punto hacia una línea y otro punto hacia otra línea","dobla un punto hacia una línea y otra línea sobre sí misma"],fr:[null,"créez un pli passant par deux points","pliez pour superposer deux points","pliez pour superposer deux lignes","rabattez une ligne sur elle-même à l'aide d'un pli qui passe par un point","rabattez un point sur une ligne à l'aide d'un pli qui passe par un autre point","rabattez un point sur une ligne et un autre point sur une autre ligne","rabattez un point sur une ligne et une autre ligne sur elle-même"],hi:[null,"एक क्रीज़ बनाएँ जो दो स्थानों से गुजरता है","एक स्थान को दूसरे स्थान पर मोड़कर एक क्रीज़ बनाएँ","एक रेखा पर दूसरी रेखा को मोड़कर क्रीज़ बनाएँ","एक क्रीज़ बनाएँ जो एक स्थान से गुजरता है और एक रेखा को स्वयं के ऊपर ले आता है","एक क्रीज़ बनाएँ जो पहले स्थान से गुजरता है और दूसरे स्थान को रेखा पर ले आता है","एक क्रीज़ बनाएँ जो पहले स्थान को पहली रेखा पर और दूसरे स्थान को दूसरी रेखा पर ले आता है","एक क्रीज़ बनाएँ जो एक स्थान को एक रेखा पर ले आता है और दूसरी रेखा को स्वयं के ऊपर ले आता है"],jp:[null,"2点に沿って折り目を付けます","2点を合わせて折ります","2つの線を合わせて折ります","点を通過させ、既にある線に沿って折ります","点を線沿いに合わせ別の点を通過させ折ります","線に向かって点を折り、同時にもう一方の線に向かってもう一方の点を折ります","線に向かって点を折り、同時に別の線をその上に折ります"],ko:[null,"두 점을 통과하는 선으로 접으세요","두 점을 함께 접으세요","두 선을 함께 접으세요","그 위에 선을 접으면서 점을 통과하게 접으세요","점을 선으로 접으면서, 다른 점을 지나게 접으세요","점을 선으로 접고 다른 점을 다른 선으로 접으세요","점을 선으로 접고 다른 선을 그 위에 접으세요"],ms:[null,"lipat garisan melalui dua titik","lipat dua titik bersama","lipat dua garisan bersama","lipat satu garisan di atasnya sendiri, melipat melalui satu titik","lipat satu titik ke garisan, melipat melalui titik lain","lipat satu titik ke garisan dan satu lagi titik ke garisan lain","lipat satu titik ke garisan dan satu lagi garisan di atasnya sendiri"],pt:[null,"dobre uma linha entre dois pontos","dobre os dois pontos para uni-los","dobre as duas linhas para uni-las","dobre uma linha sobre si mesma, criando uma dobra ao longo de um ponto","dobre um ponto até uma linha, criando uma dobra ao longo de outro ponto","dobre um ponto até uma linha e outro ponto até outra linha","dobre um ponto até uma linha e outra linha sobre si mesma"],ru:[null,"сложите линию через две точки","сложите две точки вместе","сложите две линии вместе","сверните линию сверху себя, сгибая через точку","сложите точку в линию, сгибая через другую точку","сложите точку в линию и другую точку в другую линию","сложите точку в линию и другую линию на себя"],tr:[null,"iki noktadan geçen bir çizgi boyunca katla","iki noktayı birbirine katla","iki çizgiyi birbirine katla","bir noktadan kıvırarak kendi üzerindeki bir çizgi boyunca katla","başka bir noktadan kıvırarak bir noktayı bir çizgiye katla","bir noktayı bir çizgiye ve başka bir noktayı başka bir çizgiye katla","bir noktayı bir çizgiye ve başka bir çizgiyi kendi üzerine katla"],vi:[null,"tạo một nếp gấp đi qua hai điểm","tạo nếp gấp bằng cách gấp một điểm này sang điểm khác","tạo nếp gấp bằng cách gấp một đường lên một đường khác","tạo một nếp gấp đi qua một điểm và đưa một đường lên trên chính nó","tạo một nếp gấp đi qua điểm đầu tiên và đưa điểm thứ hai lên đường thẳng","tạo một nếp gấp mang điểm đầu tiên đến đường đầu tiên và điểm thứ hai cho đường thứ hai","tạo một nếp gấp mang lại một điểm cho một đường và đưa một đường thứ hai lên trên chính nó"],zh:[null,"通過兩點折一條線","將兩點折疊起來","將兩條線折疊在一起","通過一個點折疊一條線在自身上面","將一個點，通過另一個點折疊成一條線，","將一個點折疊為一條線，再將另一個點折疊到另一條線","將一個點折疊成一條線，另一條線折疊到它自身上"]},instructions:{fold:{es:"doblez"},"valley fold":{es:"doblez de valle",zh:"谷摺"},"mountain fold":{es:"doblez de montaña",zh:"山摺"},"inside reverse fold":{zh:"內中割摺"},"outside reverse fold":{zh:"外中割摺"},sink:{},"open sink":{zh:"開放式沉壓摺"},"closed sink":{zh:"封閉式沉壓摺"},"rabbit ear":{zh:"兔耳摺"},"double rabbit ear":{zh:"雙兔耳摺"},"petal fold":{zh:"花瓣摺"},blintz:{zh:"坐墊基"},squash:{zh:"壓摺"},"flip over":{es:"dale la vuelta a tu papel"}}};const pairify=e=>e.map(((e,t,r)=>[e,r[(t+1)%r.length]])),getContainingValue=(e,t)=>Array.from(e.children).filter((e=>e.attributes.length&&void 0!==Array.from(e.attributes).filter((e=>e.nodeValue===t)).shift())).shift(),Or={children:[{textContent:"0"}]},Mr=["F","B","M","V","U"],setMetadata=(e,t)=>{const r={file_description:"memo",file_author:"originalAuthorName",file_title:"title"};Object.keys(r).forEach((t=>{r[t]=((e,t)=>{const r=getContainingValue(e,t),o=r?Array.from(r.children).shift():null;return o?o.textContent:void 0})(e,r[t])})),Object.keys(r).filter((e=>r[e])).forEach((e=>{t[e]=r[e]})),t.file_classes=["singleModel"],t.frame_classes=["creasePattern"]},flattenDomTree=e=>null!=e.children&&e.children.length?Array.from(e.children).flatMap((e=>flattenDomTree(e))):[e],getAttributeValue=(e,t,r=[])=>{const o=t.style?t.style.match(new RegExp(`${e}[\\s]*:[^;]*;`)):null;return o?o[0].split(":")[1].replace(";",""):t[e]?t[e]:null};var wr={line:{x1:1,y1:1,x2:1,y2:1},rect:{x:1,y:1,width:1,height:1},circle:{cx:1,cy:1,r:1},ellipse:{cx:1,cy:1,rx:1,ry:1},polygon:{points:1},polyline:{points:1},path:{d:1}};const getAttributesFloatValue=(e,t)=>t.map((t=>e.getAttribute(t))).map((e=>null==e?"0":e)).map(parseFloat),PolygonToSegments=e=>(e=>{const t=e.split(/[\s,]+/).map((e=>parseFloat(e)));return Array.from(Array(Math.floor(t.length/2))).map(((e,r)=>[t[2*r+0],t[2*r+1]]))})(e.getAttribute("points")||"").map(((e,t,r)=>[r[t][0],r[t][1],r[(t+1)%r.length][0],r[(t+1)%r.length][1]])),jr={L:!0,V:!0,H:!0,Z:!0},Pr={line:e=>[getAttributesFloatValue(e,["x1","y1","x2","y2"])],rect:function(e){const[t,r,o,n]=getAttributesFloatValue(e,["x","y","width","height"]);return[[t,r,t+o,r],[t+o,r,t+o,r+n],[t+o,r+n,t,r+n],[t,r+n,t,r]]},polygon:PolygonToSegments,polyline:function(e){const t=PolygonToSegments(e);return t.pop(),t},path:e=>M.svg.core.parsePathCommandsEndpoints(e.getAttribute("d")||"").filter((e=>jr[e.command.toUpperCase()])).map((e=>[e.start,e.end])).filter((e=>!Ne.core.fnEpsilonEqualVectors(...e))).map((e=>e.flat()))};var Sr={black:"#000000",silver:"#c0c0c0",gray:"#808080",white:"#ffffff",maroon:"#800000",red:"#ff0000",purple:"#800080",fuchsia:"#ff00ff",green:"#008000",lime:"#00ff00",olive:"#808000",yellow:"#ffff00",navy:"#000080",blue:"#0000ff",teal:"#008080",aqua:"#00ffff",orange:"#ffa500",aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",blanchedalmond:"#ffebcd",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",oldlace:"#fdf5e6",olivedrab:"#6b8e23",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",whitesmoke:"#f5f5f5",yellowgreen:"#9acd32"};const hexToRGB$1=e=>{const t=e.replace(/#(?=\S)/g,""),r=Array.from(Array(6)).map(((e,r)=>t[r]||"0")),o=t.length<=4?[0,0,1,1,2,2].map((e=>r[e])).join(""):r.join(""),n=parseInt(o,16);return[n>>16&255,n>>8&255,255&n].map((e=>e/255))},parseCSSColor=e=>{if(Sr[e])return hexToRGB$1(Sr[e]);if("#"===e[0])return hexToRGB$1(e);if("rgba"===e.substring(0,4)||"rgb"===e.substring(0,3)){const t=(e=>{const t=e.match(/\(([^\)]+)\)/g);if(null!=t&&t.length)return t[0].substring(1,t[0].length-1).split(/[\s,]+/).map(parseFloat)})(e);return[0,1,2].forEach(((e,r)=>{t[r]/=255})),t}return[0,0,0]},Cr={M:[1,0,0],V:[0,0,1],F:[1,1,0],U:[1,0,1],C:[0,1,0]},parseCSSStyleSheet=e=>{if(!e.cssRules)return{};const t={};for(let r=0;r<e.cssRules.length;r+=1){const o=e.cssRules[r];if(1!==o.type)continue;const n=o.selectorText.split(/,/gm).filter(Boolean).map((e=>e.trim())),s={};Object.values(o.style).forEach((e=>{s[e]=o.style[e]})),n.forEach((e=>{t[e]=s}))}return t},parseStyleElement=e=>{if(e.sheet)return parseCSSStyleSheet(e.sheet);if(!((e=>{let t=e;for(;null!=t.parentNode;)t=t.parentNode;return t})(e).constructor===RabbitEarWindow().HTMLDocument)){const t=e.parentNode;null!=t&&t.removeChild(e);const r=null!=RabbitEarWindow().document.body?RabbitEarWindow().document.body:RabbitEarWindow().document.createElement("body");r.appendChild(e);const o=parseCSSStyleSheet(e.sheet);return r.removeChild(e),null!=t&&t.appendChild(e),o}return{}},objectifyAttributeList=function(e){const t={};return e.forEach((e=>{t[e.nodeName]=e.value})),t},svgToBasicGraph=e=>{const t="string"==typeof e?((e,t="text/xml")=>(new(RabbitEarWindow().DOMParser)).parseFromString(e,t).documentElement)(e,"image/svg+xml"):e,r=flattenDomTree(t),o=r.filter((e=>"style"===e.nodeName)).map(parseStyleElement),n=(e=>e.filter((e=>Pr[e.tagName])).flatMap((e=>Pr[e.tagName](e).map((t=>{return{segment:t,attributes:objectifyAttributeList((r=e,Array.from(r.attributes).filter((e=>!wr[r.nodeName][e.nodeName]))))};var r})))))(r),s=n.map((e=>getAttributeValue("stroke",e.attributes,o)||"black")).map((e=>(e=>{if(null==e||"string"!=typeof e)return"U";const t=parseCSSColor(e).slice(0,3),r=t.reduce(((e,t)=>e+t),0)/3,o=[r,r,r],n="F",s=Ne.core.distance3(t,o),c=Object.keys(Cr).map((e=>({key:e,distance:Ne.core.distance3(t,Cr[e])}))).sort(((e,t)=>e.distance-t.distance)).shift();return s<c.distance?n:c.key})(e))),c=n.map((e=>getAttributeValue("opacity",e.attributes,o)||"1")).map(((e,t)=>((e,t)=>{switch(t){case"M":case"m":return-180*e;case"V":case"v":return 180*e;default:return 0}})(e,s[t])));return{vertices_coords:n.map((e=>e.segment)).flatMap((e=>[[e[0],e[1]],[e[2],e[3]]])),edges_vertices:n.map(((e,t)=>[2*t,2*t+1])),edges_assignment:s,edges_foldAngle:c}};var zr={objToFold:e=>{const t=e.split("\n").map((e=>e.trim().split(/\s+/))),r={vertices_coords:[],faces_vertices:[]};for(let e=0;e<t.length;e+=1)switch(t[e][0].toLowerCase()){case"f":r.faces_vertices.push(t[e].slice(1).map((e=>parseInt(e,10)-1)));break;case"v":r.vertices_coords.push(t[e].slice(1).map((e=>parseFloat(e))))}return r.faces_normal=makeFacesNormal(r),r.faces_center=makeFacesConvexCenter(r),r.edges_vertices=(({faces_vertices:e})=>{const t={},r=[];return e.flatMap(pairify).forEach((e=>{const o=[e.join(" "),`${e[1]} ${e[0]}`];o[0]in t||o[1]in t||(r.push(e),t[o[0]]=!0)})),r})(r),r.faces_edges=makeFacesEdgesFromVertices(r),r.edges_faces=makeEdgesFacesUnsorted(r),r.edges_foldAngle=makeEdgesFoldAngleFromFaces(r),r.edges_assignment=makeEdgesAssignment(r),delete r.faces_normal,delete r.faces_center,delete r.edges_faces,(e=>{e.file_spec=Ve,e.file_creator=Ie;let t="creasePattern";for(let r=0;r<e.edges_foldAngle.length;r+=1)if(0!==e.edges_foldAngle[r]&&-180!==e.edges_foldAngle[r]&&180!==e.edges_foldAngle[r]){t="foldedForm";break}e.frame_classes=[t]})(r),r},opxToFold:(e,t)=>{try{const o=(new(RabbitEarWindow().DOMParser)).parseFromString(e,"text/xml"),n=Array.from(o.documentElement.children).filter((e=>Array.from(e.classList).includes("oripa.DataSet"))).shift(),s=((e,t)=>{const r={};if(r.vertices_coords=e.flatMap((e=>[[e[1],e[3]],[e[2],e[4]]])),r.edges_vertices=e.map(((e,t)=>[2*t,2*t+1])),r.edges_assignment=e.map((e=>Mr[e[0]])),r.edges_foldAngle=makeEdgesFoldAngle(r),void 0===t){const{span:e}=Ne.core.boundingBox(r.vertices_coords);t=1e-6*Math.min(...e)}removeDuplicateVertices(r,t),r.vertices_vertices=makeVerticesVertices(r);const o=makePlanarFaces(r);return r.faces_vertices=o.map((e=>e.vertices)),r.faces_edges=o.map((e=>e.edges)),r})((r=(e=>{const t=getContainingValue(e,"lines"),r=t?Array.from(t.children).filter((e=>"oripa.OriLineProxy"===e.className)).shift():void 0;return r?Array.from(r.children):[]})(n),r.map((e=>{const t=Array.from(e.children[0].children);return["type","x0","x1","y0","y1"].map((e=>parseFloat((t.filter((t=>t.attributes[0].nodeValue===e)).shift()||Or).children[0].textContent)))}))),t);return setMetadata(n,s),s}catch(e){console.error(e)}var r},svgToFold:e=>{const t=(e=>{const t={...e};removeDuplicateVertices(t),fragment(t),t.vertices_vertices=makeVerticesVertices(t);const r=makePlanarFaces(t);t.faces_vertices=r.map((e=>e.vertices)),t.faces_edges=r.map((e=>e.edges));const{edges:o}=getPlanarBoundary(t);return o.forEach((e=>{t.edges_assignment[e]="B"})),t})(svgToBasicGraph(e));return{file_spec:1.1,file_creator:"Rabbit Ear",frame_classes:["creasePattern"],...t}}};const addClassToClassList=(e,...t)=>{if(!e)return;const r={},o=e.getAttribute("class"),n=o?o.split(" "):[];n.push(...t),n.forEach((e=>{r[e]=!0}));const s=Object.keys(r).join(" ");e.setAttribute("class",s)},Fr={},Lr={stroke:y},Nr={},$r={M:{stroke:"red"},m:{stroke:"red"},V:{stroke:"blue"},v:{stroke:"blue"},F:{stroke:"lightgray"},f:{stroke:"lightgray"}},edgesPathData=e=>(({vertices_coords:e,edges_vertices:t})=>e&&t?t.map((t=>t.map((t=>e[t])))):[])(e).map((e=>{return`M${(t=e)[0][0]} ${t[0][1]}L${t[1][0]} ${t[1][1]}`;var t})).join(""),edgesPathDataAssign=({vertices_coords:e,edges_vertices:t,edges_assignment:r})=>{if(!e||!t)return{};if(!r)return{u:edgesPathData({vertices_coords:e,edges_vertices:t})};const o=(e=>{const t={u:[],f:[],v:[],m:[],b:[]},r=e[u].map((e=>e.toLowerCase()));return e[l].map(((e,t)=>r[t]||"u")).forEach(((e,r)=>t[e].push(r))),t})({vertices_coords:e,edges_vertices:t,edges_assignment:r});return Object.keys(o).forEach((r=>{o[r]=edgesPathData({vertices_coords:e,edges_vertices:o[r].map((e=>t[e]))})})),Object.keys(o).forEach((e=>{""===o[e]&&delete o[e]})),o},applyEdgesStyle=(e,t={})=>Object.keys(t).forEach((r=>e.setAttributeNS(null,r,t[r]))),edgesPaths=(e,t={})=>{const r=M.svg.g();if(!e)return r;const o=isFoldedForm(e),n=(({vertices_coords:e,edges_vertices:t,edges_assignment:r})=>{const o=edgesPathDataAssign({vertices_coords:e,edges_vertices:t,edges_assignment:r});return Object.keys(o).forEach((e=>{const t=M.svg.path(o[e]);addClassToClassList(t,De[e]),o[e]=t})),o})(e);return Object.keys(n).forEach((e=>{addClassToClassList(n[e],De[e]),applyEdgesStyle(n[e],o?Nr[e]:$r[e]),applyEdgesStyle(n[e],t[e]),applyEdgesStyle(n[e],t[De[e]]),r.appendChild(n[e]),Object.defineProperty(r,De[e],{get:()=>n[e]})})),applyEdgesStyle(r,o?Fr:Lr),applyEdgesStyle(r,t.stroke?{stroke:t.stroke}:{}),r},edgesLines=(e,t={})=>{const r=M.svg.g();if(!e)return r;const o=isFoldedForm(e),n=(e.edges_assignment?e.edges_assignment:makeEdgesAssignment(e)).map((e=>e.toLowerCase())),s={};["b","m","v","f","u"].forEach((e=>{const n=M.svg.g();r.appendChild(n),addClassToClassList(n,De[e]),applyEdgesStyle(n,o?Nr[e]:$r[e]),applyEdgesStyle(n,t[De[e]]),Object.defineProperty(r,De[e],{get:()=>n}),s[e]=n}));const c=e.edges_vertices.map((t=>t.map((t=>e.vertices_coords[t])))).map((e=>M.svg.line(e[0][0],e[0][1],e[1][0],e[1][1])));return e.edges_foldAngle&&c.forEach(((t,r)=>{const o=e.edges_foldAngle[r];var n;0!==o&&180!==o&&-180!==o&&t.setAttributeNS(null,"opacity",(n=o,Math.abs(n)/180))})),c.forEach(((e,t)=>s[n[t]].appendChild(e))),applyEdgesStyle(r,o?Fr:Lr),applyEdgesStyle(r,t.stroke?{stroke:t.stroke}:{}),r},Vr={back:{fill:b},front:{fill:"#ddd"}},Ir={back:{opacity:.1},front:{opacity:.1}},Tr={},Br={stroke:y,"stroke-linejoin":"bevel"},qr={stroke:E,fill:y,"stroke-linejoin":"bevel"},Rr={fill:E},applyFacesStyle=(e,t={})=>Object.keys(t).forEach((r=>e.setAttributeNS(null,r,t[r]))),finalize_faces=(e,t,r,o)=>{const n=isFoldedForm(e),s=null!=e[g],c=[[h],[v]],a=makeFacesWinding(e);a.map((e=>e?c[0]:c[1])).forEach(((e,r)=>{addClassToClassList(t[r],e),applyFacesStyle(t[r],n?s?Vr[e]:Ir[e]:Tr[e]),applyFacesStyle(t[r],o[e])}));const i=s?function(e,t){const r=t.faces_vertices.length||t.faces_edges.length;return Array.from(Array(r)).map(((e,t)=>t)).filter((t=>null==e[t])).concat(invertMap(e))}(e[g],e).map((e=>t[e])):t;return i.forEach((e=>r.appendChild(e))),Object.defineProperty(r,h,{get:()=>t.filter(((e,t)=>a[t]))}),Object.defineProperty(r,v,{get:()=>t.filter(((e,t)=>!a[t]))}),applyFacesStyle(r,n?s?Br:qr:Rr),r},Ur={fill:E},Dr={stroke:y,fill:b},Gr={vertices:(e,t={})=>{const r=M.svg.g();return e&&e.vertices_coords?(e.vertices_coords.map((e=>M.svg.circle(e[0],e[1],.01))).forEach((e=>r.appendChild(e))),r.setAttributeNS(null,"fill",E),Object.keys(t).forEach((e=>r.setAttributeNS(null,e,t[e]))),r):r},edges:(e,t)=>edgesFoldAngleAreAllFlat(e)?edgesPaths(e,t):edgesLines(e,t),faces:(e,t)=>e&&e.faces_vertices?((e,t={})=>{const r=M.svg.g();if(!e||!e.vertices_coords||!e.faces_vertices)return r;const n=e.faces_vertices.map((t=>t.map((t=>[0,1].map((r=>e.vertices_coords[t][r])))))).map((e=>M.svg.polygon(e)));return n.forEach(((e,t)=>e.setAttributeNS(null,o,t))),r.setAttributeNS(null,"fill",b),finalize_faces(e,n,r,t)})(e,t):e&&e[d]?function(e,t={}){const r=M.svg.g();if(!e||d in e==0||l in e==0||i in e==0)return r;const n=e[d].map((t=>t.map((t=>e[l][t])).map(((e,t,r)=>{const o=r[(t+1)%r.length];return e[1]===o[0]||e[1]===o[1]?e[0]:e[1]})).map((t=>[0,1].map((r=>e[i][t][r])))))).map((e=>M.svg.polygon(e)));return n.forEach(((e,t)=>e.setAttributeNS(null,o,t))),r.setAttributeNS(null,"fill","white"),finalize_faces(e,n,r,t)}(e,t):M.svg.g(),boundaries:(e,t={})=>{const r=M.svg.g();if(!(e&&e.vertices_coords&&e.edges_vertices&&e.edges_assignment))return r;const o=getBoundary(e).vertices.map((t=>[0,1].map((r=>e.vertices_coords[t][r]))));if(0===o.length)return r;const n=M.svg.polygon(o);return addClassToClassList(n,p),r.appendChild(n),((e,t={})=>{Object.keys(t).forEach((r=>e.setAttributeNS(null,r,t[r])))})(r,isFoldedForm(e)?Ur:Dr),Object.keys(t).forEach((e=>r.setAttributeNS(null,e,t[e]))),r}},drawGroup=(e,t,r)=>{const o=!1===r?M.svg.g():Gr[e](t,r);return addClassToClassList(o,e),o},DrawGroups=(e,t={})=>[a,c,s,n].map((r=>drawGroup(r,e,t[r])));[a,c,s,n].forEach((e=>{DrawGroups[e]=function(t,r={}){return drawGroup(e,t,r[e])}}));const getBoundingRect=({vertices_coords:e})=>{if(null==e||0===e.length)return;const t=Array(2).fill(1/0),r=Array(2).fill(-1/0);e.forEach((e=>{e[0]<t[0]&&(t[0]=e[0]),e[0]>r[0]&&(r[0]=e[0]),e[1]<t[1]&&(t[1]=e[1]),e[1]>r[1]&&(r[1]=e[1])}));return Number.isNaN(t[0])||Number.isNaN(t[1])||Number.isNaN(r[0])||Number.isNaN(r[1])?void 0:[t[0],t[1],r[0]-t[0],r[1]-t[1]]},findSVGInParents=e=>"SVG"===(e.nodeName||"").toUpperCase()?e:e.parentNode?findSVGInParents(e.parentNode):void 0,applyTopLevelOptions=(e,t,r,o)=>{const n=t[3]&&t[3].childNodes.length;if(!(o.strokeWidth||o.viewBox||n))return;const s=getBoundingRect(r),c=s?Math.max(s[2],s[3]):1,a=findSVGInParents(e);if(a&&o.viewBox){const e=s?s.join(" "):"0 0 1 1";a.setAttributeNS(null,"viewBox",e)}if(a&&o.padding){const e=a.getAttribute("viewBox");if(null!=e){const t=o.padding*c,r=e.split(" ").map((e=>parseFloat(e))),n=[-t,-t,2*t,2*t].map(((e,t)=>r[t]+e)).join(" ");a.setAttributeNS(null,"viewBox",n)}}if(o.strokeWidth||o["stroke-width"]){const t=o.strokeWidth?o.strokeWidth:o["stroke-width"],n=(({vertices_coords:e,edges_vertices:t,edges_length:r})=>{if(!e||!t)return;r||(r=makeEdgesLength({vertices_coords:e,edges_vertices:t}));const o=r.slice().sort(((e,t)=>e-t));return o[Math.floor(.1*o.length)]})(r);let s;s=n?"number"==typeof t?10*n*t:10*n*.01:"number"==typeof t?c*t:.01*c,e.setAttributeNS(null,"stroke-width",s)}if(n){const e=o.vertices&&null!=o.vertices.radius?o.vertices.radius:o.radius,r="string"==typeof e?parseFloat(e):e,n="number"!=typeof r||Number.isNaN(r)?.02*c:c*r;((e,t)=>{for(let r=0;r<e.childNodes.length;r+=1)e.childNodes[r].setAttributeNS(null,"r",t)})(t[3],n)}},drawInto=(e,t,r={})=>{const o=DrawGroups(t,r);return o.filter((e=>e.childNodes.length>0)).forEach((t=>e.appendChild(t))),applyTopLevelOptions(e,o,t,r),((e,t)=>{const r=[t.file_classes||[],t.frame_classes||[]].flat();r.length&&addClassToClassList(e,...r)})(e,t),Object.keys(DrawGroups).map(((e,t)=>({key:e,i:t}))).filter((t=>null==e[t.key])).forEach((t=>Object.defineProperty(e,t.key,{get:()=>o[t.i]}))),e},FOLDtoSVG=(e,t)=>drawInto(M.svg(),e,t);Object.keys(DrawGroups).forEach((e=>{FOLDtoSVG[e]=DrawGroups[e]})),FOLDtoSVG.drawInto=drawInto,FOLDtoSVG.getViewBox=e=>{const t=getBoundingRect(e);return void 0===t?"":t.join(" ")},Object.defineProperty(FOLDtoSVG,"linker",{enumerable:!1,value:function(e){e.graph.svg=this;const t={svg:this};Object.keys(t).forEach((r=>{e.graph.prototype[r]=function(){return t[r](this,...arguments)}}))}.bind(FOLDtoSVG)});const Wr={init:()=>{}};function SVG(){return Wr.init(...arguments)}const Zr="class",Yr="function",Hr="undefined",Jr="number",Xr="string",Kr="object",Qr="svg",eo="path",to="id",ro="style",oo="viewBox",no="transform",so="points",co="stroke",ao="none",io="arrow",lo="head",fo="tail",uo=typeof window!==Hr&&typeof window.document!==Hr,mo=typeof process!==Hr&&null!=process.versions&&null!=process.versions.node,go=[];go[10]='"error 010: window" not set. if using node/deno, include package @xmldom/xmldom, set to the main export ( ear.window = xmldom; )';const po={window:void 0};uo&&(po.window=window);const SVGWindow=()=>{if(void 0===po.window)throw go[10];return po.window};var ho="http://www.w3.org/2000/svg",vo={s:["svg"],d:["defs"],h:["desc","filter","metadata","style","script","title","view"],c:["cdata"],g:["g"],v:["circle","ellipse","line","path","polygon","polyline","rect"],t:["text"],i:["marker","symbol","clipPath","mask"],p:["linearGradient","radialGradient","pattern"],cT:["textPath","tspan"],cG:["stop"],cF:["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]};const svg_add2=(e,t)=>[e[0]+t[0],e[1]+t[1]],svg_sub2=(e,t)=>[e[0]-t[0],e[1]-t[1]],svg_scale2=(e,t)=>[e[0]*t,e[1]*t],svg_magnitudeSq2=e=>e[0]**2+e[1]**2,svg_magnitude2=e=>Math.sqrt(svg_magnitudeSq2(e)),svg_distanceSq2=(e,t)=>svg_magnitudeSq2(svg_sub2(e,t)),svg_distance2=(e,t)=>Math.sqrt(svg_distanceSq2(e,t)),svg_polar_to_cart=(e,t)=>[Math.cos(e)*t,Math.sin(e)*t];var _o=Object.freeze({__proto__:null,svg_add2:svg_add2,svg_sub2:svg_sub2,svg_scale2:svg_scale2,svg_magnitudeSq2:svg_magnitudeSq2,svg_magnitude2:svg_magnitude2,svg_distanceSq2:svg_distanceSq2,svg_distance2:svg_distance2,svg_polar_to_cart:svg_polar_to_cart});const arcPath=(e,t,r,o,n,s=!1)=>{if(null==n)return"";const c=svg_polar_to_cart(o,r),a=svg_polar_to_cart(n,r),i=[a[0]-c[0],a[1]-c[1]],l=c[0]*a[1]-c[1]*a[0],d=c[0]*a[0]+c[1]*a[1],u=Math.atan2(l,d)>0?0:1;let m=s?`M ${e},${t} l ${c[0]},${c[1]} `:`M ${e+c[0]},${t+c[1]} `;return m+=["a ",r,r,0,u,1,i[0],i[1]].join(" "),s&&(m+=" Z"),m},arcArguments=(e,t,r,o,n)=>[arcPath(e,t,r,o,n,!1)];var yo={arc:{nodeName:eo,attributes:["d"],args:arcArguments,methods:{setArc:(e,...t)=>e.setAttribute("d",arcArguments(...t))}}};const wedgeArguments=(e,t,r,o,n)=>[arcPath(e,t,r,o,n,!0)];var bo={wedge:{nodeName:eo,args:wedgeArguments,attributes:["d"],methods:{setArc:(e,...t)=>e.setAttribute("d",wedgeArguments(...t))}}};const parabolaArguments=(e=-1,t=0,r=2,o=1)=>Array.from(Array(129)).map(((e,t)=>(t-128)/128*2+1)).map((n=>[e+(n+1)*r*.5,t+n**2*o]));var Eo={parabola:{nodeName:"polyline",attributes:[so],args:(e,t,r,o)=>[parabolaArguments(e,t,r,o).map((e=>`${e[0]},${e[1]}`)).join(" ")]}};const regularPolygonArguments=(e,t,r,o)=>{const n=[t,r];return Array.from(Array(e)).map(((t,r)=>2*Math.PI*(r/e))).map((e=>[Math.cos(e),Math.sin(e)])).map((e=>n.map(((t,r)=>t+o*e[r]))))};var xo={regularPolygon:{nodeName:"polygon",attributes:[so],args:(e,t=0,r=0,o=1)=>[regularPolygonArguments(e,t,r,o).map((e=>`${e[0]},${e[1]}`)).join(" ")]}};var ko={roundRect:{nodeName:eo,attributes:["d"],args:(e,t,r,o,n=0)=>{n>r/2&&(n=r/2),n>o/2&&(n=o/2);const s=r-2*n,c=o-2*n,a=`A${n} ${n} 0 0 1`;return[[`M${e+(r-s)/2},${t}`,`h${s}`,a,`${e+r},${t+(o-c)/2}`,`v${c}`,a,`${e+r-n},${t+o}`,"h"+-s,a,`${e},${t+o-n}`,"v"+-c,a,`${e+n},${t}`].join(" ")]}}},Ao={toCamel:e=>e.replace(/([-_][a-z])/gi,(e=>e.toUpperCase().replace("-","").replace("_",""))),toKebab:e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z])([A-Z])(?=[a-z])/g,"$1-$2").toLowerCase(),capitalized:e=>e.charAt(0).toUpperCase()+e.slice(1)};const svg_is_iterable=e=>null!=e&&typeof e[Symbol.iterator]===Yr,svg_semi_flatten_arrays=function(){switch(arguments.length){case void 0:case 0:return Array.from(arguments);case 1:return svg_is_iterable(arguments[0])&&typeof arguments[0]!==Xr?svg_semi_flatten_arrays(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>svg_is_iterable(e)?[...svg_semi_flatten_arrays(e)]:e))}};var coordinates=(...e)=>e.filter((e=>typeof e===Jr)).concat(e.filter((e=>typeof e===Kr&&null!==e)).map((e=>typeof e.x===Jr?[e.x,e.y]:typeof e[0]===Jr?[e[0],e[1]]:void 0)).filter((e=>void 0!==e)).reduce(((e,t)=>e.concat(t)),[]));const Oo=[fo,lo],stringifyPoint=e=>e.join(","),pointsToPath=e=>"M"+e.map((e=>e.join(","))).join("L")+"Z",setArrowheadOptions=(e,t,r)=>{"boolean"==typeof t?e.options[r].visible=t:typeof t===Kr?(Object.assign(e.options[r],t),null==t.visible&&(e.options[r].visible=!0)):null==t&&(e.options[r].visible=!0)},setArrowStyle=(e,t={},r=lo)=>{const o=e.getElementsByClassName(`${io}-${r}`)[0];Object.keys(t).map((e=>({key:e,fn:o[Ao.toCamel(e)]}))).filter((e=>typeof e.fn===Yr&&"class"!==e.key)).forEach((e=>e.fn(t[e.key]))),Object.keys(t).filter((e=>"class"===e)).forEach((e=>o.classList.add(t[e])))},redraw=e=>{const t=function(e){let t=[[0,1],[2,3]].map((t=>t.map((t=>e.points[t]||0)))),r=svg_sub2(t[1],t[0]),o=svg_add2(t[0],svg_scale2(r,.5));const n=svg_magnitude2(r),s=Oo.map((t=>e[t].visible?(1+e[t].padding)*e[t].height*2.5:0)).reduce(((e,t)=>e+t),0);if(n<s){const e=0===n?[s,0]:svg_scale2(r,s/n);t=[svg_sub2,svg_add2].map((t=>t(o,svg_scale2(e,.5)))),r=svg_sub2(t[1],t[0])}let c=[r[1],-r[0]],a=svg_add2(o,svg_scale2(c,e.bend));const i=t.map((e=>svg_sub2(a,e))),l=i.map((e=>svg_magnitude2(e))),d=i.map(((e,t)=>0===l[t]?e:svg_scale2(e,1/l[t]))),u=d.map((e=>svg_scale2(e,-1))),m=u.map((e=>[e[1],-e[0]])),g=Oo.map(((t,r)=>e[t].padding?e[t].padding:e.padding?e.padding:0)),p=Oo.map(((t,r)=>e[t].height*(e[t].visible?1:0))).map(((e,t)=>e+g[t])),h=t.map(((e,t)=>svg_add2(e,svg_scale2(d[t],p[t]))));r=svg_sub2(h[1],h[0]),c=[r[1],-r[0]],o=svg_add2(h[0],svg_scale2(r,.5)),a=svg_add2(o,svg_scale2(c,e.bend));const v=h.map(((t,r)=>svg_add2(t,svg_scale2(svg_sub2(a,t),e.pinch)))),_=Oo.map(((t,r)=>[svg_add2(h[r],svg_scale2(u[r],e[t].height)),svg_add2(h[r],svg_scale2(m[r],e[t].width/2)),svg_add2(h[r],svg_scale2(m[r],-e[t].width/2))]));return{line:`M${stringifyPoint(h[0])}C${stringifyPoint(v[0])},${stringifyPoint(v[1])},${stringifyPoint(h[1])}`,tail:pointsToPath(_[0]),head:pointsToPath(_[1])}}(e.options);return Object.keys(t).map((t=>({path:t,element:e.getElementsByClassName(`${io}-${t}`)[0]}))).filter((e=>e.element)).map((e=>(e.element.setAttribute("d",t[e.path]),e))).filter((t=>e.options[t.path])).forEach((t=>t.element.setAttribute("visibility",e.options[t.path].visible?"visible":"hidden"))),e},setPoints$3=(e,...t)=>(e.options.points=coordinates(...svg_semi_flatten_arrays(...t)).slice(0,4),redraw(e));var Mo={setPoints:setPoints$3,points:setPoints$3,bend:(e,t)=>(e.options.bend=t,redraw(e)),pinch:(e,t)=>(e.options.pinch=t,redraw(e)),padding:(e,t)=>(e.options.padding=t,redraw(e)),head:(e,t)=>(setArrowheadOptions(e,t,lo),setArrowStyle(e,t,lo),redraw(e)),tail:(e,t)=>(setArrowheadOptions(e,t,fo),setArrowStyle(e,t,fo),redraw(e)),getLine:e=>e.getElementsByClassName(`${io}-line`)[0],getHead:e=>e.getElementsByClassName(`${io}-${lo}`)[0],getTail:e=>e.getElementsByClassName(`${io}-${fo}`)[0]};const wo=Object.keys({head:{visible:!1,width:8,height:10,padding:0},tail:{visible:!1,width:8,height:10,padding:0},bend:0,padding:0,pinch:.618,points:[]});var jo={arrow:{nodeName:"g",attributes:[],args:()=>[],methods:Mo,init:function(e,...t){e.classList.add(io);const r=["line",fo,lo].map((t=>SVG.path().addClass(`${io}-${t}`).appendTo(e)));r[0].setAttribute(ro,"fill:none;"),r[1].setAttribute(co,ao),r[2].setAttribute(co,ao),e.options={head:{visible:!1,width:8,height:10,padding:0},tail:{visible:!1,width:8,height:10,padding:0},bend:0,padding:0,pinch:.618,points:[]},Mo.setPoints(e,...t);const o=((...e)=>{for(let t=0;t<e.length;t+=1){if(typeof e[t]!==Kr)continue;const r=Object.keys(e[t]);for(let o=0;o<r.length;o+=1)if(wo.includes(r[o]))return e[t]}})(...t);return o&&Object.keys(o).filter((e=>Mo[e])).forEach((t=>Mo[t](e,o[t]))),e}}};const svg_flatten_arrays=function(){return svg_semi_flatten_arrays(arguments).reduce(((e,t)=>e.concat(t)),[])},makeCurvePath=(e=[],t=0,r=.5)=>{const o=[e[0]||0,e[1]||0],n=[e[2]||0,e[3]||0],s=svg_sub2(n,o),c=svg_add2(o,svg_scale2(s,.5)),a=[s[1],-s[0]],i=svg_add2(c,svg_scale2(a,t)),l=svg_add2(o,svg_scale2(svg_sub2(i,o),r)),d=svg_add2(n,svg_scale2(svg_sub2(i,n),r));return`M${o[0]},${o[1]}C${l[0]},${l[1]} ${d[0]},${d[1]} ${n[0]},${n[1]}`},getNumbersFromPathCommand=e=>e.slice(1).split(/[, ]+/).map((e=>parseFloat(e))),getCurveEndpoints=e=>{const t=(e=>e.match(/[Mm][(0-9), .-]+/).map((e=>getNumbersFromPathCommand(e))))(e).shift(),r=(e=>e.match(/[Cc][(0-9), .-]+/).map((e=>getNumbersFromPathCommand(e))))(e).shift();return[...t?[t[t.length-2],t[t.length-1]]:[0,0],...r?[r[r.length-2],r[r.length-1]]:[0,0]]},setPoints$2=(e,...t)=>{const r=coordinates(...svg_flatten_arrays(...t)).slice(0,4);return e.setAttribute("d",makeCurvePath(r,e._bend,e._pinch)),e};var Po={curve:{nodeName:eo,attributes:["d"],args:(...e)=>[makeCurvePath(coordinates(...svg_flatten_arrays(...e)))],methods:{setPoints:setPoints$2,bend:(e,t)=>(e._bend=t,setPoints$2(e,...getCurveEndpoints(e.getAttribute("d")))),pinch:(e,t)=>(e._pinch=t,setPoints$2(e,...getCurveEndpoints(e.getAttribute("d"))))}}};const So={};Object.assign(So,yo,bo,Eo,xo,ko,jo,Po);const Co=Object.keys(So),zo=[vo.h,vo.p,vo.i],Fo=[vo.g,vo.v,vo.t,Co],Lo={svg:[vo.s,vo.d].concat(zo).concat(Fo),g:Fo,text:[vo.cT],linearGradient:[vo.cG],radialGradient:[vo.cG],defs:zo,filter:[vo.cF],marker:Fo,symbol:Fo,clipPath:Fo,mask:Fo},No=Object.create(null);Object.keys(Lo).forEach((e=>{No[e]=Lo[e].reduce(((e,t)=>e.concat(t)),[])}));const viewBoxValue=function(e,t,r,o,n=0){const s=r/1-r;return[e-s-n,t-s-n,r+2*s+2*n,o+2*s+2*n].join(" ")};function viewBox$1(){const e=coordinates(...svg_flatten_arrays(arguments));return 2===e.length&&e.unshift(0,0),4===e.length?viewBoxValue(...e):void 0}const cdata=e=>(new(SVGWindow().DOMParser)).parseFromString("<root></root>","text/xml").createCDATASection(`${e}`),removeChildren=e=>{for(;e.lastChild;)e.removeChild(e.lastChild);return e},moveChildren=(e,t)=>{for(;t.childNodes.length>0;){const r=t.childNodes[0];t.removeChild(r),e.appendChild(r)}return e},assignSVG=(e,t)=>(Array.from(t.attributes).forEach((t=>e.setAttribute(t.name,t.value))),moveChildren(e,t));var $o={removeChildren:removeChildren,appendTo:(e,t)=>(null!=t&&t.appendChild(e),e),setAttributes:(e,t)=>Object.keys(t).forEach((r=>e.setAttribute(Ao.toKebab(r),t[r])))};const filterWhitespaceNodes=e=>{if(null===e)return e;for(let t=e.childNodes.length-1;t>=0;t-=1){const r=e.childNodes[t];3===r.nodeType&&r.data.match(/^\s*$/)&&e.removeChild(r),1===r.nodeType&&filterWhitespaceNodes(r)}return e},parse=e=>(new(SVGWindow().DOMParser)).parseFromString(e,"text/xml"),checkParseError=e=>{const t=e.getElementsByTagName("parsererror");if(t.length>0)throw new Error(t[0]);return filterWhitespaceNodes(e.documentElement)},sync=function(e){if(typeof e===Xr||e instanceof String)try{return checkParseError(parse(e))}catch(e){return e}if(null!=e.childNodes)return e},Load=e=>(e=>typeof e===Xr&&/^[\w,\s-]+\.[A-Za-z]{3}$/.test(e)&&e.length<1e4)(e)&&uo&&typeof SVGWindow().fetch===Yr?function(e){return new Promise(((t,r)=>{if(typeof e===Xr||e instanceof String)fetch(e).then((e=>e.text())).then((e=>checkParseError(parse(e)))).then((e=>e.nodeName===Qr?e:e.getElementsByTagName(Qr)[0])).then((e=>null==e?r(new Error("valid XML found, but no SVG element")):t(e))).catch((e=>r(e)));else if(e instanceof SVGWindow().Document)return asyncDone(e)}))}(e):sync(e);const save=function(e,t){if((t=Object.assign({download:!1,output:Xr,windowStyle:!1,filename:"image.svg"},t)).windowStyle){const t=SVGWindow().document.createElementNS(ho,ro);t.setAttribute("type","text/css"),t.innerHTML=function(){const e=[];if(SVGWindow().document.styleSheets)for(let t=0;t<SVGWindow().document.styleSheets.length;t+=1){const r=SVGWindow().document.styleSheets[t];try{const t="cssRules"in r?r.cssRules:r.rules;for(let r=0;r<t.length;r+=1){const o=t[r];"cssText"in o?e.push(o.cssText):e.push(`${o.selectorText} {\n${o.style.cssText}\n}\n`)}}catch(e){console.warn(e)}}return e.join("\n")}(),e.appendChild(t)}const r=function vkXML(e,t){const r=e.replace(/>\s{0,}</g,"><").replace(/</g,"~::~<").replace(/\s*xmlns\:/g,"~::~xmlns:").split("~::~"),o=r.length;let n=!1,s=0,c="";const a=null!=t&&"string"==typeof t?t:"\t",i=["\n"];for(let e=0;e<100;e+=1)i.push(i[e]+a);for(let e=0;e<o;e+=1)r[e].search(/<!/)>-1?(c+=i[s]+r[e],n=!0,(r[e].search(/-->/)>-1||r[e].search(/\]>/)>-1||r[e].search(/!DOCTYPE/)>-1)&&(n=!1)):r[e].search(/-->/)>-1||r[e].search(/\]>/)>-1?(c+=r[e],n=!1):/^<\w/.exec(r[e-1])&&/^<\/\w/.exec(r[e])&&/^<[\w:\-\.\,]+/.exec(r[e-1])==/^<\/[\w:\-\.\,]+/.exec(r[e])[0].replace("/","")?(c+=r[e],n||(s-=1)):r[e].search(/<\w/)>-1&&-1===r[e].search(/<\//)&&-1===r[e].search(/\/>/)?c=c+=n?r[e]:i[s++]+r[e]:r[e].search(/<\w/)>-1&&r[e].search(/<\//)>-1?c=c+=n?r[e]:i[s]+r[e]:r[e].search(/<\//)>-1?c=c+=n?r[e]:i[--s]+r[e]:r[e].search(/\/>/)>-1?c=c+=n?r[e]:i[s]+r[e]:r[e].search(/<\?/)>-1||r[e].search(/xmlns\:/)>-1||r[e].search(/xmlns\=/)>-1?c+=i[s]+r[e]:c+=r[e];return"\n"===c[0]?c.slice(1):c}((new(SVGWindow().XMLSerializer)).serializeToString(e));return t.download&&uo&&!mo&&function(e,t){const r=new(SVGWindow().Blob)([t],{type:"text/plain"}),o=SVGWindow().document.createElement("a");o.setAttribute("href",SVGWindow().URL.createObjectURL(r)),o.setAttribute("download",e),SVGWindow().document.body.appendChild(o),o.click(),SVGWindow().document.body.removeChild(o)}(t.filename,r),t.output===Qr?e:r},setViewBox=(e,...t)=>{const r=1===t.length&&typeof t[0]===Xr?t[0]:viewBox$1(...t);return r&&e.setAttribute(oo,r),e},getViewBox=function(e){const t=e.getAttribute(oo);return null==t?void 0:t.split(" ").map((e=>parseFloat(e)))},convertToViewBox=function(e,t,r){const o=e.createSVGPoint();o.x=t,o.y=r;const n=o.matrixTransform(e.getScreenCTM().inverse());return[n.x,n.y]};var Vo=Object.freeze({__proto__:null,setViewBox:setViewBox,getViewBox:getViewBox,convertToViewBox:convertToViewBox});const loadSVG=(e,t)=>{const r=Load(t);if(null!=r)return typeof r.then===Yr?r.then((t=>assignSVG(e,t))):assignSVG(e,r)},getFrame=function(e){const t=getViewBox(e);if(void 0!==t)return t;if(typeof e.getBoundingClientRect===Yr){const t=e.getBoundingClientRect();return[t.x,t.y,t.width,t.height]}return[]},Io="svg-background-rectangle",stylesheet=function(e,t){let r=function(e){const t=e.getElementsByTagName(ro);return 0===t.length?void 0:t[0]}(e);return null==r&&(r=this.Constructor(ro),e.insertBefore(r,e.firstChild)),r.textContent="",r.appendChild(cdata(t)),r};var To={clear:e=>(Array.from(e.attributes).filter((e=>"xmlns"!==e)).forEach((t=>e.removeAttribute(t.name))),removeChildren(e)),size:setViewBox,setViewBox:setViewBox,getViewBox:getViewBox,padding:function(e,t){const r=getViewBox(e);return void 0!==r&&setViewBox(e,...[-t,-t,2*t,2*t].map(((e,t)=>r[t]+e))),e},background:function(e,t){let r=Array.from(e.childNodes).filter((e=>e.getAttribute(Zr)===Io)).shift();return null==r&&(r=this.Constructor("rect",null,...getFrame(e)),r.setAttribute(Zr,Io),r.setAttribute(co,ao),e.insertBefore(r,e.firstChild)),r.setAttribute("fill",t),e},getWidth:e=>getFrame(e)[2],getHeight:e=>getFrame(e)[3],stylesheet:function(e,t){return stylesheet.call(this,e,t)},load:loadSVG,save:save};const Bo={math:{vector:(...e)=>[...e]}},qo={move:["mousemove","touchmove"],press:["mousedown","touchstart"],release:["mouseup","touchend"],leave:["mouseleave","touchcancel"]},Ro=Object.values(qo).reduce(((e,t)=>e.concat(t)),[]),defineGetter=(e,t,r)=>Object.defineProperty(e,t,{get:()=>r,enumerable:!0,configurable:!0}),assignPress=(e,t)=>{["pressX","pressY"].filter((t=>!Object.prototype.hasOwnProperty.call(e,t))).forEach(((r,o)=>defineGetter(e,r,t[o]))),Object.prototype.hasOwnProperty.call(e,"press")||defineGetter(e,"press",Bo.math.vector(...t))},TouchEvents=function(e){let t=[];const r=[];Object.keys(qo).forEach((e=>{qo[e].forEach((e=>{r[e]=[]}))}));const o={press:(e,r)=>{t=r,assignPress(e,t)},release:()=>{},leave:()=>{},move:(e,r)=>{e.buttons>0&&void 0===t[0]?t=r:0===e.buttons&&void 0!==t[0]&&(t=[]),assignPress(e,t)}};Object.keys(qo).forEach((t=>{const n=`on${Ao.capitalized(t)}`;Object.defineProperty(e,n,{set:n=>{null!=n?qo[t].forEach((s=>{const handlerFunc=r=>{const s=null!=r.touches?r.touches[0]:r;if(void 0!==s){const n=convertToViewBox(e,s.clientX,s.clientY).map((e=>Number.isNaN(e)?void 0:e));["x","y"].filter((e=>!Object.prototype.hasOwnProperty.call(r,e))).forEach(((e,t)=>defineGetter(r,e,n[t]))),Object.prototype.hasOwnProperty.call(r,"position")||defineGetter(r,"position",Bo.math.vector(...n)),o[t](r,n)}n(r)};e.addEventListener&&(r[s].push(handlerFunc),e.addEventListener(s,handlerFunc))})):(t=>{qo[t].forEach((t=>r[t].forEach((r=>e.removeEventListener(t,r)))))})(t)},enumerable:!0})})),Object.defineProperty(e,"off",{value:()=>((e,t)=>Ro.forEach((r=>{t[r].forEach((t=>e.removeEventListener(r,t))),t[r]=[]})))(e,r)})};var UUID=()=>Math.random().toString(36).replace(/[^a-z]+/g,"").concat("aaaaa").substr(0,5);const Uo=[["cx","cy"],["x","y"]],controlPoint=function(e,t={}){const r=[0,0],o={selected:!1,svg:void 0,updatePosition:e=>e},updateSVG=()=>{o.svg&&(o.svg.parentNode||e.appendChild(o.svg),Uo.filter((e=>null!=o.svg[e[0]])).forEach((e=>e.forEach(((e,t)=>{o.svg.setAttribute(e,r[t])})))))},n=new Proxy(r,{set:(e,t,r)=>(e[t]=r,updateSVG(),!0)}),setPosition=function(...e){coordinates(...svg_flatten_arrays(...e)).forEach(((e,t)=>{r[t]=e})),updateSVG(),typeof r.delegate===Yr&&r.delegate.apply(r.pointsContainer,[n,r.pointsContainer])};return r.delegate=void 0,r.setPosition=setPosition,r.onMouseMove=e=>o.selected?setPosition(o.updatePosition(e)):void 0,r.onMouseUp=()=>{o.selected=!1},r.distance=e=>Math.sqrt(svg_distanceSq2(e,r)),["x","y"].forEach(((e,t)=>Object.defineProperty(r,e,{get:()=>r[t],set:e=>{r[t]=e}}))),[Qr,"updatePosition","selected"].forEach((e=>Object.defineProperty(r,e,{get:()=>o[e],set:t=>{o[e]=t}}))),Object.defineProperty(r,"remove",{value:()=>{var e;(e=o.svg)&&e.parentNode&&e.parentNode.removeChild(e),r.delegate=void 0}}),n},controls=function(e,t,r){let o,n;const s=Array.from(Array(t)).map((()=>controlPoint(e,r))),protocol=e=>typeof n===Yr?n.call(s,e,o,s):void 0;s.forEach((e=>{e.delegate=protocol,e.pointsContainer=s}));e.onPress=function(e){s.length>0&&(o=s.map(((t,r)=>({i:r,d:svg_distanceSq2(t,[e.x,e.y])}))).sort(((e,t)=>e.d-t.d)).shift().i,s[o].selected=!0)},e.onMove=function(e){s.forEach((t=>t.onMouseMove(e)))},e.onRelease=function(){s.forEach((e=>e.onMouseUp())),o=void 0},Object.defineProperty(s,"selectedIndex",{get:()=>o}),Object.defineProperty(s,"selected",{get:()=>s[o]}),Object.defineProperty(s,"add",{value:t=>{s.push(controlPoint(e,t))}}),s.removeAll=()=>{for(;s.length>0;)s.pop().remove()};const c={onChange:(e,t)=>{if(n=e,!0===t){const t=s.length-1;e.call(s,s[t],t,s)}},position:e=>s.forEach(((t,r)=>t.setPosition(e.call(s,t,r,s)))),svg:e=>s.forEach(((t,r)=>{t.svg=e.call(s,t,r,s)}))};return Object.keys(c).forEach((e=>{s[e]=function(){return typeof arguments[0]===Yr&&c[e](...arguments),s}})),s.parent=function(e){return null!=e&&null!=e.appendChild&&s.forEach((t=>{e.appendChild(t.svg)})),s},s},applyControlsToSVG=e=>{e.controls=(...t)=>controls.call(e,e,...t)};var Do={svg:{args:(...e)=>[viewBox$1(coordinates(...e))].filter((e=>null!=e)),methods:To,init:(e,...t)=>{t.filter((e=>typeof e===Xr)).forEach((t=>loadSVG(e,t))),t.filter((e=>null!=e)).filter((e=>typeof e.appendChild===Yr)).forEach((t=>t.appendChild(e))),TouchEvents(e),function(e){let t;const r={};let o,n=0;const removeHandlers=()=>{SVGWindow().cancelAnimationFrame&&SVGWindow().cancelAnimationFrame(o),Object.keys(r).forEach((e=>delete r[e])),t=void 0,n=0};Object.defineProperty(e,"play",{set:e=>{if(removeHandlers(),null==e)return;const s=UUID();r[s]=c=>{t||(t=c,n=0),e({time:.001*(c-t),frame:n}),n+=1,r[s]&&(o=SVGWindow().requestAnimationFrame(r[s]))},SVGWindow().requestAnimationFrame&&(o=SVGWindow().requestAnimationFrame(r[s]))},enumerable:!0}),Object.defineProperty(e,"stop",{value:removeHandlers,enumerable:!0})}(e),applyControlsToSVG(e)}}};const loadGroup=(e,...t)=>{const r=t.map((e=>sync(e))).filter((e=>void 0!==e));return r.filter((e=>e.tagName===Qr)).forEach((t=>moveChildren(e,t))),r.filter((e=>e.tagName!==Qr)).forEach((t=>e.appendChild(t))),e};var Go={g:{init:loadGroup,methods:{load:loadGroup}}},Wo=Object.assign(Object.create(null),{svg:[oo],line:["x1","y1","x2","y2"],rect:["x","y","width","height"],circle:["cx","cy","r"],ellipse:["cx","cy","rx","ry"],polygon:[so],polyline:[so],path:["d"],text:["x","y"],mask:[to],symbol:[to],clipPath:[to,"clip-rule"],marker:[to,"markerHeight","markerUnits","markerWidth","orient","refX","refY"],linearGradient:["x1","x2","y1","y2"],radialGradient:["cx","cy","r","fr","fx","fy"],stop:["offset","stop-color","stop-opacity"],pattern:["patternContentUnits","patternTransform","patternUnits"]});const setRadius=(e,t)=>(e.setAttribute(Wo.circle[2],t),e),setOrigin=(e,t,r)=>([...coordinates(...svg_flatten_arrays(t,r)).slice(0,2)].forEach(((t,r)=>e.setAttribute(Wo.circle[r],t))),e);var Zo={circle:{args:(e,t,r,o)=>{const n=coordinates(...svg_flatten_arrays(e,t,r,o));switch(n.length){case 0:case 1:return[,,...n];case 2:case 3:return n;default:return((e,t,r,o)=>[e,t,svg_distance2([e,t],[r,o])])(...n)}},methods:{radius:setRadius,setRadius:setRadius,origin:setOrigin,setOrigin:setOrigin,center:setOrigin,setCenter:setOrigin,position:setOrigin,setPosition:setOrigin}}};const setRadii=(e,t,r)=>([,,t,r].forEach(((t,r)=>e.setAttribute(Wo.ellipse[r],t))),e),setCenter=(e,t,r)=>([...coordinates(...svg_flatten_arrays(t,r)).slice(0,2)].forEach(((t,r)=>e.setAttribute(Wo.ellipse[r],t))),e);var Yo={ellipse:{args:(e,t,r,o)=>{const n=coordinates(...svg_flatten_arrays(e,t,r,o)).slice(0,4);switch(n.length){case 0:case 1:case 2:return[,,...n];default:return n}},methods:{radius:setRadii,setRadius:setRadii,origin:setCenter,setOrigin:setCenter,center:setCenter,setCenter:setCenter,position:setCenter,setPosition:setCenter}}};const Args$1=(...e)=>coordinates(...svg_semi_flatten_arrays(...e)).slice(0,4);var Ho={line:{args:Args$1,methods:{setPoints:(e,...t)=>(Args$1(...t).forEach(((t,r)=>e.setAttribute(Wo.line[r],t))),e)}}};const Jo={m:"move",l:"line",v:"vertical",h:"horizontal",a:"ellipse",c:"curve",s:"smoothCurve",q:"quadCurve",t:"smoothQuadCurve",z:"close"},add2=(e,t)=>[e[0]+(t[0]||0),e[1]+(t[1]||0)];Object.keys(Jo).forEach((e=>{const t=Jo[e];Jo[e.toUpperCase()]=t.charAt(0).toUpperCase()+t.slice(1)}));const Xo=/[MmLlSsQqLlHhVvCcSsQqTtAaZz]/g,Ko=/-?[0-9]*\.?\d+/g,parsePathCommands=e=>{const t=[];let r;for(;null!==(r=Xo.exec(e));)t.push(r);return t.map(((t,r,o)=>[t[0],t.index,r===o.length-1?e.length-1:o[(r+1)%o.length].index-1])).map((t=>{const r=t[0],o=e.substring(t[1]+1,t[2]).match(Ko);return{command:r,values:o?o.map(parseFloat):[]}}))};var Qo=Object.freeze({__proto__:null,pathCommandNames:Jo,parsePathCommands:parsePathCommands,parsePathCommandsEndpoints:e=>{let t=[0,0];const r=parsePathCommands(e);if(!r.length)return r;r.forEach(((e,o)=>{r[o].end=((e,t,r=[0,0])=>{const o=e.toUpperCase(),n=e===o?[0,0]:r;switch(o){case"M":case"L":case"V":case"H":case"T":return add2(n,t);case"A":return add2(n,[t[5],t[6]]);case"C":return add2(n,[t[4],t[5]]);case"S":case"Q":return add2(n,[t[2],t[3]]);case"Z":return;default:return n}})(e.command,e.values,t),r[o].start=0===o?t:r[o-1].end,t=r[o].end}));const o=r[r.length-1],n=r.filter((e=>"M"!==e.command.toUpperCase()&&"Z"!==e.command.toUpperCase())).shift();return"Z"===o.command.toUpperCase()&&(o.end=[...n.start]),r}});const getD=e=>{const t=e.getAttribute("d");return null==t?"":t},appendPathCommand=(e,t,...r)=>(e.setAttribute("d",`${getD(e)}${t}${svg_flatten_arrays(...r).join(" ")}`),e),getCommands=e=>parsePathCommands(getD(e)),en={addCommand:appendPathCommand,appendCommand:appendPathCommand,clear:e=>(e.removeAttribute("d"),e),getCommands:getCommands,get:getCommands,getD:e=>e.getAttribute("d")};Object.keys(Jo).forEach((e=>{en[Jo[e]]=(t,...r)=>appendPathCommand(t,e,...r)}));var tn={path:{methods:en}};const setRectSize=(e,t,r)=>([,,t,r].forEach(((t,r)=>e.setAttribute(Wo.rect[r],t))),e),setRectOrigin=(e,t,r)=>([...coordinates(...svg_flatten_arrays(t,r)).slice(0,2)].forEach(((t,r)=>e.setAttribute(Wo.rect[r],t))),e),fixNegatives=function(e){return[0,1].forEach((t=>{e[2+t]<0&&(void 0===e[0+t]&&(e[0+t]=0),e[0+t]+=e[2+t],e[2+t]=-e[2+t])})),e};var rn={rect:{args:(e,t,r,o)=>{const n=coordinates(...svg_flatten_arrays(e,t,r,o)).slice(0,4);switch(n.length){case 0:case 1:case 2:case 3:return fixNegatives([,,...n]);default:return fixNegatives(n)}},methods:{origin:setRectOrigin,setOrigin:setRectOrigin,center:setRectOrigin,setCenter:setRectOrigin,size:setRectSize,setSize:setRectSize}}},on={style:{init:(e,t)=>{e.textContent="",e.appendChild(cdata(t))},methods:{setTextContent:(e,t)=>(e.textContent="",e.appendChild(cdata(t)),e)}}},nn={text:{args:(e,t,r)=>coordinates(...svg_flatten_arrays(e,t,r)).slice(0,2),init:(e,t,r,o,n)=>{const s=[t,r,o,n].filter((e=>typeof e===Xr)).shift();s&&e.appendChild(SVGWindow().document.createTextNode(s))}}};const makeIDString=function(){return Array.from(arguments).filter((e=>typeof e===Xr||e instanceof String)).shift()||UUID()},maskArgs=(...e)=>[makeIDString(...e)];var sn={mask:{args:maskArgs},clipPath:{args:maskArgs},symbol:{args:maskArgs},marker:{args:maskArgs,methods:{size:setViewBox,setViewBox:setViewBox}}};const getPoints=e=>{const t=e.getAttribute(so);return null==t?"":t},polyString=function(){return Array.from(Array(Math.floor(arguments.length/2))).map(((e,t)=>`${arguments[2*t+0]},${arguments[2*t+1]}`)).join(" ")},stringifyArgs=(...e)=>[polyString(...coordinates(...svg_semi_flatten_arrays(...e)))],setPoints=(e,...t)=>(e.setAttribute(so,stringifyArgs(...t)[0]),e),addPoint=(e,...t)=>(e.setAttribute(so,[getPoints(e),stringifyArgs(...t)[0]].filter((e=>""!==e)).join(" ")),e),Args=function(...e){return 1===e.length&&typeof e[0]===Xr?[e[0]]:stringifyArgs(...e)};var cn={polyline:{args:Args,methods:{setPoints:setPoints,addPoint:addPoint}},polygon:{args:Args,methods:{setPoints:setPoints,addPoint:addPoint}}},an=Object.assign({},Do,Go,Zo,Yo,Ho,tn,rn,on,nn,sn,cn),ln={presentation:["color","color-interpolation","cursor","direction","display","fill","fill-opacity","fill-rule","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","image-rendering","letter-spacing","opacity","overflow","paint-order","pointer-events","preserveAspectRatio","shape-rendering","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","tabindex","transform-origin","user-select","vector-effect","visibility"],animation:["accumulate","additive","attributeName","begin","by","calcMode","dur","end","from","keyPoints","keySplines","keyTimes","max","min","repeatCount","repeatDur","restart","to","values"],effects:["azimuth","baseFrequency","bias","color-interpolation-filters","diffuseConstant","divisor","edgeMode","elevation","exponent","filter","filterRes","filterUnits","flood-color","flood-opacity","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","lighting-color","limitingConeAngle","mode","numOctaves","operator","order","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","primitiveUnits","radius","result","seed","specularConstant","specularExponent","stdDeviation","stitchTiles","surfaceScale","targetX","targetY","type","xChannelSelector","yChannelSelector"],text:["dx","dy","alignment-baseline","baseline-shift","dominant-baseline","lengthAdjust","method","overline-position","overline-thickness","rotate","spacing","startOffset","strikethrough-position","strikethrough-thickness","text-anchor","text-decoration","text-rendering","textLength","underline-position","underline-thickness","word-spacing","writing-mode"],gradient:["gradientTransform","gradientUnits","spreadMethod"]};Object.values(vo).reduce(((e,t)=>e.concat(t)),[]).filter((e=>void 0===Wo[e])).forEach((e=>{Wo[e]=[]})),[[[Qr,"defs","g"].concat(vo.v,vo.t),ln.presentation],[["filter"],ln.effects],[vo.cT.concat("text"),ln.text],[vo.cF,ln.effects],[vo.cG,ln.gradient]].forEach((e=>e[0].forEach((t=>{Wo[t]=Wo[t].concat(e[1])}))));const getClassList=e=>{if(null==e)return[];const t=e.getAttribute(Zr);return null==t?[]:t.split(" ").filter((e=>""!==e))};var fn={addClass:(e,t)=>{const r=getClassList(e).filter((e=>e!==t));r.push(t),e.setAttributeNS(null,Zr,r.join(" "))},removeClass:(e,t)=>{const r=getClassList(e).filter((e=>e!==t));e.setAttributeNS(null,Zr,r.join(" "))},setClass:(e,t)=>{e.setAttributeNS(null,Zr,t)},setId:(e,t)=>{e.setAttributeNS(null,to,t)}};const getAttr=e=>{const t=e.getAttribute(no);return null==t||""===t?void 0:t},dn={clearTransform:e=>(e.removeAttribute(no),e)};["translate","rotate","scale","matrix"].forEach((e=>{dn[e]=(t,...r)=>t.setAttribute(no,[getAttr(t),`${e}(${r.join(" ")})`].filter((e=>void 0!==e)).join(" "))}));const un={};["clip-path","mask","symbol","marker-end","marker-mid","marker-start"].forEach((e=>{un[Ao.toCamel(e)]=(t,r)=>t.setAttribute(e,function(e){if(null==e)return"";if(typeof e===Xr)return"url"===e.slice(0,3)?e:`url(#${e})`;if(null!=e.getAttribute)return`url(#${e.getAttribute(to)})`;return""}(r))}));const mn={};vo.v.push(...Object.keys(So)),Object.keys(So).forEach((e=>{So[e].attributes=void 0===So[e].attributes?[...ln.presentation]:So[e].attributes.concat(ln.presentation)})),Object.assign(mn,an,So),Object.keys(vo).forEach((e=>vo[e].filter((e=>void 0===mn[e])).forEach((e=>{mn[e]={}}))));const passthrough=function(){return Array.from(arguments)};Object.keys(mn).forEach((e=>{mn[e].nodeName||(mn[e].nodeName=e),mn[e].init||(mn[e].init=passthrough),mn[e].args||(mn[e].args=passthrough),mn[e].methods||(mn[e].methods={}),mn[e].attributes||(mn[e].attributes=Wo[e]||[])}));const assignMethods=(e,t)=>{e.forEach((e=>Object.keys(t).forEach((r=>{mn[e].methods[r]=function(){return t[r](...arguments),arguments[0]}}))))};assignMethods(svg_flatten_arrays(vo.t,vo.v,vo.g,vo.s,vo.p,vo.i,vo.h,vo.d),fn),assignMethods(svg_flatten_arrays(vo.t,vo.v,vo.g,vo.s,vo.p,vo.i,vo.h,vo.d),$o),assignMethods(svg_flatten_arrays(vo.v,vo.g,vo.s),dn),assignMethods(svg_flatten_arrays(vo.t,vo.v,vo.g),un);const gn={svg:{version:"1.1",xmlns:ho},style:{type:"text/css"}},pn={},constructor=(e,t,...r)=>{const o=SVGWindow().document.createElementNS(ho,mn[e].nodeName);return t&&t.appendChild(o),((e,t)=>{gn[t]&&Object.keys(gn[t]).forEach((r=>e.setAttribute(r,gn[t][r])))})(o,e),mn[e].init(o,...r),mn[e].args(...r).forEach(((t,r)=>{null!=mn[e].attributes[r]&&o.setAttribute(mn[e].attributes[r],t)})),mn[e].attributes.forEach((e=>{Object.defineProperty(o,Ao.toCamel(e),{value:function(){return o.setAttribute(e,...arguments),o}})})),Object.keys(mn[e].methods).forEach((t=>Object.defineProperty(o,t,{value:function(){return mn[e].methods[t].call(pn,o,...arguments)}}))),No[e]&&No[e].forEach((e=>{const value=function(){return constructor(e,o,...arguments)};mn[e].static&&Object.keys(mn[e].static).forEach((t=>{value[t]=function(){return mn[e].static[t](o,...arguments)}})),Object.defineProperty(o,e,{value:value})})),o};pn.Constructor=constructor;const hn={};Object.keys(vo).forEach((e=>vo[e].forEach((e=>{hn[e]=(...t)=>constructor(e,null,...t)}))));const link_rabbitear_math=(e,t)=>{["segment","circle","ellipse","rect","polygon"].filter((e=>t[e]&&t[e].prototype)).forEach((r=>{t[r].prototype.svg=function(){return e.path(this.svgPath())}})),Bo.math.vector=t.vector},initialize=function(e,...t){t.filter((e=>typeof e===Yr)).forEach((t=>t.call(e,e)))};Wr.init=function(){const e=constructor(Qr,null,...arguments);return"loading"===SVGWindow().document.readyState?SVGWindow().document.addEventListener("DOMContentLoaded",(()=>initialize(e,...arguments))):initialize(e,...arguments),e},SVG.NS=ho,SVG.linker=function(e){e.graph&&e.origami&&(e.svg=this,link_rabbitear_math(this,e),((e,t)=>{const r="origami";mn[r]={nodeName:"g",init:function(e,...r){return t.graph.svg.drawInto(e,...r)},args:()=>[],methods:mn.g.methods,attributes:mn.g.attributes,static:{}},Object.keys(t.graph.svg).forEach((e=>{mn[r].static[e]=(r,...o)=>{const n=t.graph.svg[e](...o);return r.appendChild(n),n}})),No[r]=[...No.g],No.svg.push(r),No.g.push(r),e[r]=(...e)=>constructor(r,null,...e),Object.keys(t.graph.svg).forEach((o=>{e[r][o]=t.graph.svg[o]}))})(this,e))}.bind(SVG),Object.assign(SVG,hn),SVG.core=Object.assign(Object.create(null),{load:Load,save:save,coordinates:coordinates,flatten:svg_flatten_arrays,attributes:Wo,children:No,cdata:cdata},Ao,fn,$o,_o,Qo,dn,Vo),Object.defineProperty(SVG,"window",{enumerable:!1,set:e=>{var t;(t=e).document||(t.document=(e=>(new e.DOMParser).parseFromString("<!DOCTYPE html><title>.</title>","text/html"))(t)),po.window=t,po.window}});const compileShader=(e,t,r)=>{const o=e.createShader(r);if(e.shaderSource(o,t),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS))throw new Error(e.getShaderInfoLog(o));return o},createProgram=(e,t,r)=>((e,t,r)=>{const o=e.createProgram();if(e.attachShader(o,t),e.attachShader(o,r),e.linkProgram(o),!e.getProgramParameter(o,e.LINK_STATUS))throw new Error(e.getProgramInfoLog(o));return e.deleteShader(t),e.deleteShader(r),o})(e,compileShader(e,t,e.VERTEX_SHADER),compileShader(e,r,e.FRAGMENT_SHADER));var vn=Object.freeze({__proto__:null,rebuildViewport:(e,t)=>{if(!e)return;const r=window.devicePixelRatio||1,o=[t.clientWidth,t.clientHeight].map((e=>e*r));t.width===o[0]&&t.height===o[1]||(t.width=o[0],t.height=o[1]),e.viewport(0,0,e.canvas.width,e.canvas.height)},makeProjectionMatrix:(e,t="perspective",r=45)=>{if(!e)return Ne.core.identity4x4;const o=[e.clientWidth,e.clientHeight],n=Math.min(...o),s=[0,1].map((e=>(o[e]-n)/n/2)).map((e=>e+.5));return"orthographic"===t?Ne.core.makeOrthographicMatrix4(s[1],s[0],-s[1],-s[0],-100,100):Ne.core.makePerspectiveMatrix4(r*(Math.PI/180),o[0]/o[1],.1,3)},makeModelMatrix:e=>{if(!e)return Ne.core.identity4x4;const t=getBoundingBox(e);if(!t)return Ne.core.identity4x4;const r=Math.max(...t.span),o=[r,0,0,0,0,r,0,0,0,0,r,0,...Ne.core.resize(3,Ne.core.midpoint(t.min,t.max)),1];return Ne.core.invertMatrix4(o)}});const hexToRGB=e=>{const t=e.replace(/#(?=\S)/g,""),r=3===t.length?[0,0,1,1,2,2].map((e=>t[e])).join(""):t,o=parseInt(r,16);return[o>>16&255,o>>8&255,255&o].map((e=>e/255))},uniformFunc=(e,t,r,o)=>{if("uniformMatrix4fv"===r)e[r](t,!1,o);else e[r](t,o)};var _n=Object.freeze({__proto__:null,drawProgram:(e,t,r,o={})=>{e.useProgram(r.program),r.flags.forEach((t=>e.enable(t)));const n=e.getProgramParameter(r.program,e.ACTIVE_UNIFORMS);for(let t=0;t<n;t+=1){const n=e.getActiveUniform(r.program,t).name,s=o[n];if(s){const t=e.getUniformLocation(r.program,n);uniformFunc(e,t,s.func,s.value)}}r.vertexArrays.forEach((t=>{e.bindBuffer(e.ARRAY_BUFFER,t.buffer),e.bufferData(e.ARRAY_BUFFER,t.data,e.STATIC_DRAW),e.vertexAttribPointer(t.location,t.length,t.type,!1,0,0),e.enableVertexAttribArray(t.location)})),r.elementArrays.forEach((r=>{e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r.buffer),e.bufferData(e.ELEMENT_ARRAY_BUFFER,r.data,e.STATIC_DRAW),e.drawElements(r.mode,r.data.length,2===t?e.UNSIGNED_INT:e.UNSIGNED_SHORT,r.buffer)})),r.flags.forEach((t=>e.disable(t)))},deallocProgram:(e,t)=>{t.vertexArrays.forEach((t=>e.disableVertexAttribArray(t.location))),t.vertexArrays.forEach((t=>e.deleteBuffer(t.buffer))),t.elementArrays.forEach((t=>e.deleteBuffer(t.buffer))),e.deleteProgram(t.program)}});const makeFacesVertexData=(e,t={})=>{const r=e.vertices_coords.map((e=>[...e].concat(Array(3-e.length).fill(0)))),o=makeVerticesNormal(e),n=r.map(((e,t)=>t%3)).map((e=>[0===e?1:0,1===e?1:0,2===e?1:0])),s=e.faces_edges.map((t=>t.map((t=>e.edges_assignment[t])).map((e=>"J"===e||"j"===e))));if(!t.showTrianglulation)for(let e=0;e<s.length;e+=1)s[e][0]&&(n[3*e+0][2]=n[3*e+1][2]=100),s[e][1]&&(n[3*e+1][0]=n[3*e+2][0]=100),s[e][2]&&(n[3*e+0][1]=n[3*e+2][1]=100);return{vertices_coords:r,vertices_normal:o,vertices_barycentric:n}},yn={B:[.3,.3,.3],b:[.3,.3,.3],V:[.2,.4,.6],v:[.2,.4,.6],M:[.75,.25,.15],m:[.75,.25,.15],F:[.2,.2,.2],f:[.2,.2,.2],U:[.2,.2,.2],u:[.2,.2,.2]},makeThickEdgesVertexData=(e,t=yn)=>{if(!e||!e.vertices_coords||!e.edges_vertices)return[];const r=e.vertices_coords.map((e=>[...e].concat(Array(3-e.length).fill(0)))),o=e.edges_vertices.flatMap((e=>e.map((e=>r[e])))).flatMap((e=>[e,e,e,e])),n=makeEdgesVector(e);return{vertices_coords:o,vertices_color:e.edges_assignment?e.edges_assignment.flatMap((e=>Array(8).fill(t[e]))):e.edges_vertices.flatMap((()=>Array(8).fill(t.U))),verticesEdgesVector:n.flatMap((e=>[e,e,e,e,e,e,e,e])),vertices_vector:e.edges_vertices.flatMap((()=>[[1,0],[0,1],[-1,0],[0,-1],[1,0],[0,1],[-1,0],[0,-1]]))}};var bn=Object.freeze({__proto__:null,makeFacesVertexData:makeFacesVertexData,makeThickEdgesVertexData:makeThickEdgesVertexData});const makeFoldedVertexArrays=(e,t,r,o={})=>{if(!r||!r.vertices_coords||!r.faces_vertices)return[];const{vertices_coords:n,vertices_normal:s,vertices_barycentric:c}=makeFacesVertexData(r,o);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:n[0].length,data:new Float32Array(n.flat())},{location:e.getAttribLocation(t,"v_normal"),buffer:e.createBuffer(),type:e.FLOAT,length:s[0].length,data:new Float32Array(s.flat())},{location:e.getAttribLocation(t,"v_barycentric"),buffer:e.createBuffer(),type:e.FLOAT,length:3,data:new Float32Array(c.flat())}].filter((e=>-1!==e.location))},makeFoldedElementArrays=(e,t=1,r={})=>r&&r.vertices_coords&&r.faces_vertices?[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:2===t?new Uint32Array(r.faces_vertices.flat()):new Uint16Array(r.faces_vertices.flat())}]:[],makeThickEdgesVertexArrays=(e,t,r,o={})=>{if(!r||!r.vertices_coords||!r.edges_vertices)return[];const{vertices_coords:n,vertices_color:s,verticesEdgesVector:c,vertices_vector:a}=makeThickEdgesVertexData(r,o.assignment_color);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:n[0].length,data:new Float32Array(n.flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:s[0].length,data:new Float32Array(s.flat())},{location:e.getAttribLocation(t,"edge_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:c[0].length,data:new Float32Array(c.flat())},{location:e.getAttribLocation(t,"vertex_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:a[0].length,data:new Float32Array(a.flat())}].filter((e=>-1!==e.location))},makeThickEdgesElementArrays=(e,t=1,r={})=>{if(!r||!r.edges_vertices)return[];const o=r.edges_vertices.map(((e,t)=>8*t)).flatMap((e=>[e+0,e+1,e+4,e+4,e+1,e+5,e+1,e+2,e+5,e+5,e+2,e+6,e+2,e+3,e+6,e+6,e+3,e+7,e+3,e+0,e+7,e+7,e+0,e+4]));return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:2===t?new Uint32Array(o):new Uint16Array(o)}]};var En=Object.freeze({__proto__:null,makeFoldedVertexArrays:makeFoldedVertexArrays,makeFoldedElementArrays:makeFoldedElementArrays,makeThickEdgesVertexArrays:makeThickEdgesVertexArrays,makeThickEdgesElementArrays:makeThickEdgesElementArrays});const makeExplodedGraph=(e,t=1e-5)=>{const r=JSON.parse(JSON.stringify(e));if(!r.edges_assignment){const t=count.edges(e)||countImplied.edges(e);r.edges_assignment=Array(t).fill("U")}let o=[];r.faceOrders?o=nudgeFacesWithFaceOrders(r):r.faces_layer&&(o=nudgeFacesWithFacesLayer(r));const n=triangulate(r),s=explode(r);return Object.assign(n,s),n.faces&&n.faces.map.forEach(((e,n)=>{const s=o[e];s&&r.faces_vertices[n].forEach((e=>{const o=Ne.core.scale(s.vector,s.layer*t);r.vertices_coords[e]=Ne.core.add(Ne.core.resize(3,r.vertices_coords[e]),o)}))})),r},makeUniforms$1=(e,{projectionMatrix:t,viewMatrix:r,modelMatrix:o,canvas:n,opacity:s,touchPoint:c,frontColor:a,backColor:i,strokeWidth:l})=>({u_matrix:{func:"uniformMatrix4fv",value:Ne.core.multiplyMatrices4(Ne.core.multiplyMatrices4(t,r),o)},u_projection:{func:"uniformMatrix4fv",value:t},u_modelView:{func:"uniformMatrix4fv",value:Ne.core.multiplyMatrices4(r,o)},u_opacity:{func:"uniform1f",value:s},u_touch:{func:"uniform2fv",value:c},u_resolution:{func:"uniform2fv",value:[n.clientWidth,n.clientHeight].map((e=>e*window.devicePixelRatio||1))},u_frontColor:{func:"uniform3fv",value:hexToRGB(a)},u_backColor:{func:"uniform3fv",value:hexToRGB(i)},u_strokeWidth:{func:"uniform1f",value:l}});const foldedFormFaces=(e,t=1,r={},o={})=>{const n=makeExplodedGraph(r,o.layerNudge),s=1===t?createProgram(e,"#version 100\n\nattribute vec3 v_position;\nattribute vec3 v_normal;\n\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nvarying vec3 normal_color;\nvarying vec3 front_color;\nvarying vec3 back_color;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\n\tnormal_color = vec3(\n\t\tdot(v_normal, normalize(u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 1, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 0, 1, 0)).xyz)\n\t);\n\tfloat grayX = abs(normal_color.x);\n\tfloat grayY = abs(normal_color.y);\n\tfloat grayZ = abs(normal_color.z);\n\tfloat gray = 0.25 + clamp(grayY, 1.0, 0.25) * 0.5 + grayX * 0.25 + grayZ * 0.25;\n\tfloat c = clamp(gray, 0.0, 1.0);\n\tfront_color = u_frontColor * c;\n\tback_color = u_backColor * c;\n}\n","#version 100\n\nprecision mediump float;\nuniform float u_opacity;\nvarying vec3 front_color;\nvarying vec3 back_color;\n\nvoid main () {\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\tgl_FragColor = vec4(color, u_opacity)\n}\n"):createProgram(e,"#version 300 es\n\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\n\nin vec3 v_position;\nin vec3 v_normal;\nout vec3 front_color;\nout vec3 back_color;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tvec3 normal_color = vec3(\n\t\tdot(v_normal, normalize(u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 1, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 0, 1, 0)).xyz)\n\t);\n\tfloat grayX = abs(normal_color.x);\n\tfloat grayY = abs(normal_color.y);\n\tfloat grayZ = abs(normal_color.z);\n\tfloat gray = 0.25 + clamp(grayY, 1.0, 0.25) * 0.5 + grayX * 0.25 + grayZ * 0.25;\n\tfloat c = clamp(gray, 0.0, 1.0);\n\tfront_color = u_frontColor * c;\n\tback_color = u_backColor * c;\n}\n","#version 300 es\nprecision highp float;\n\nuniform float u_opacity;\nin vec3 front_color;\nin vec3 back_color;\nout vec4 outColor;\n\nvoid main () {\n\tgl_FragDepth = gl_FragCoord.z;\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\toutColor = vec4(color, u_opacity);\n}\n");return{program:s,vertexArrays:makeFoldedVertexArrays(e,s,n,o),elementArrays:makeFoldedElementArrays(e,t,n),flags:[e.DEPTH_TEST],makeUniforms:makeUniforms$1}},foldedFormEdges=(e,t=1,r={},o={})=>{const n=1===t?createProgram(e,"#version 100\n\nattribute vec3 v_position;\nattribute vec3 v_color;\nattribute vec3 edge_vector;\nattribute vec2 vertex_vector;\n\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\nvarying vec3 blend_color;\n\nvoid main () {\n\tvec3 edge_norm = normalize(edge_vector);\n\t// find an axis with which to compute the cross product\n\t// we want the axis which is most unlike the edge_vector\n\tfloat xdot = abs(dot(vec3(1,0,0), edge_norm));\n\tfloat ydot = abs(dot(vec3(0,1,0), edge_norm));\n\tfloat zdot = abs(dot(vec3(0,0,1), edge_norm));\n\tvec3 xory = xdot < ydot ? vec3(1,0,0) : vec3(0,1,0);\n\tvec3 axis = xdot > zdot && ydot > zdot ? vec3(0,0,1) : xory;\n\t// these are two perpendicular vectors to the edge_vector\n\t// together all three of them are the basis vectors\n\tvec3 one = cross(axis, edge_norm);\n\tvec3 two = cross(one, edge_norm);\n\t// displace the point along a vector from its original spot\n\tvec3 displace = normalize(\n\t\tone * vertex_vector.x +\n\t\ttwo * vertex_vector.y) * u_strokeWidth;\n\t// gl_Position = u_matrix * vec4(vec3(side, 0) + v_position, 1);\n\tgl_Position = u_matrix * vec4(v_position + displace, 1);\n\t// gl_Position = u_matrix * vec4(v_position, 1);\n\tblend_color = v_color;\n}\n","#version 100\n\nprecision mediump float;\nvarying vec3 blend_color;\n\nvoid main () {\n\tgl_FragColor = vec4(blend_color.rgb, 1);\n}\n"):createProgram(e,"#version 300 es\n\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\n\nin vec3 v_position;\nin vec3 v_color;\nin vec3 edge_vector;\nin vec2 vertex_vector;\nout vec3 blend_color;\n\nvoid main () {\n\tvec3 edge_norm = normalize(edge_vector);\n\t// find an axis with which to compute the cross product\n\t// we want the axis which is most unlike the edge_vector\n\tfloat xdot = abs(dot(vec3(1,0,0), edge_norm));\n\tfloat ydot = abs(dot(vec3(0,1,0), edge_norm));\n\tfloat zdot = abs(dot(vec3(0,0,1), edge_norm));\n\tvec3 xory = xdot < ydot ? vec3(1,0,0) : vec3(0,1,0);\n\tvec3 axis = xdot > zdot && ydot > zdot ? vec3(0,0,1) : xory;\n\t// these are two perpendicular vectors to the edge_vector\n\t// together all three of them are the basis vectors\n\tvec3 one = cross(axis, edge_norm);\n\tvec3 two = cross(one, edge_norm);\n\t// displace the point along a vector from its original spot\n\tvec3 displace = normalize(\n\t\tone * vertex_vector.x +\n\t\ttwo * vertex_vector.y) * u_strokeWidth;\n\t// gl_Position = u_matrix * vec4(vec3(side, 0) + v_position, 1);\n\tgl_Position = u_matrix * vec4(v_position + displace, 1);\n\t// gl_Position = u_matrix * vec4(v_position, 1);\n\tblend_color = v_color;\n}\n","#version 300 es\n\nprecision mediump float;\nin vec3 blend_color;\nout vec4 outColor;\n \nvoid main() {\n\toutColor = vec4(blend_color.rgb, 1);\n}\n");return{program:n,vertexArrays:makeThickEdgesVertexArrays(e,n,r,o),elementArrays:makeThickEdgesElementArrays(e,t,r),flags:[e.DEPTH_TEST],makeUniforms:makeUniforms$1}},foldedFormFacesOutlined=(e,t=1,r={},o={})=>{const n=makeExplodedGraph(r,o.layerNudge),s=1===t?createProgram(e,"#version 100\n\nattribute vec3 v_position;\nattribute vec3 v_normal;\nattribute vec3 v_barycentric;\n\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nvarying vec3 normal_color;\nvarying vec3 barycentric;\nvarying vec3 front_color;\nvarying vec3 back_color;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tbarycentric = v_barycentric;\n\n\tnormal_color = vec3(\n\t\tdot(v_normal, normalize(u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 1, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 0, 1, 0)).xyz)\n\t);\n\t// normal_color = vec3(\n\t// \tdot(v_normal, vec4(1, 0, 0, 0).xyz),\n\t// \tdot(v_normal, vec4(0, 1, 0, 0).xyz),\n\t// \tdot(v_normal, vec4(0, 0, 1, 0).xyz)\n\t// );\n\n\tfloat grayX = abs(normal_color.x);\n\tfloat grayY = abs(normal_color.y);\n\tfloat grayZ = abs(normal_color.z);\n\tfloat gray = 0.25 + clamp(grayY, 1.0, 0.25) * 0.5 + grayX * 0.25 + grayZ * 0.25;\n\tfloat c = clamp(gray, 0.0, 1.0);\n\tfront_color = u_frontColor * c;\n\tback_color = u_backColor * c;\n}\n","#version 100\n\nprecision mediump float;\nuniform float u_opacity;\nvarying vec3 barycentric;\nvarying vec3 front_color;\nvarying vec3 back_color;\n\n// float edgeFactor(vec3 barycenter) {\n// \tvec3 d = fwidth(barycenter);\n// \tvec3 a3 = smoothstep(vec3(0.0), d*3.5, barycenter);\n// \treturn min(min(a3.x, a3.y), a3.z);\n// }\n\nvoid main () {\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\t// gl_FragColor = vec4(blend_color.rgb, u_opacity);\n\t// gl_FragDepth = 0.5;\n\n\t// barycentric #1\n\tgl_FragColor = any(lessThan(barycentric, vec3(0.02)))\n\t\t? vec4(0.0, 0.0, 0.0, 1.0)\n\t\t: vec4(color, u_opacity);\n\t// barycentric #2\n\t// gl_FragColor = vec4(mix(vec3(0.0), color, edgeFactor(barycentric)), u_opacity);\n}\n"):createProgram(e,"#version 300 es\n\n// uniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\n\nin vec3 v_position;\nin vec3 v_normal;\nin vec3 v_barycentric;\nin float v_rawEdge;\n// in uint8_t \nout vec3 front_color;\nout vec3 back_color;\nout vec3 barycentric;\n// flat out int rawEdge;\nflat out int provokedVertex;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tprovokedVertex = gl_VertexID;\n\tbarycentric = v_barycentric;\n\t// rawEdge = int(v_rawEdge);\n\n\tvec3 normal_color = vec3(\n\t\tdot(v_normal, normalize(u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 1, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 0, 1, 0)).xyz)\n\t);\n\t// normal_color = vec3(\n\t// \tdot(v_normal, vec4(1, 0, 0, 0).xyz),\n\t// \tdot(v_normal, vec4(0, 1, 0, 0).xyz),\n\t// \tdot(v_normal, vec4(0, 0, 1, 0).xyz)\n\t// );\n\n\tfloat grayX = abs(normal_color.x);\n\tfloat grayY = abs(normal_color.y);\n\tfloat grayZ = abs(normal_color.z);\n\tfloat gray = 0.25 + clamp(grayY, 1.0, 0.25) * 0.5 + grayX * 0.25 + grayZ * 0.25;\n\tfloat c = clamp(gray, 0.0, 1.0);\n\tfront_color = u_frontColor * c;\n\tback_color = u_backColor * c;\n}\n","#version 300 es\n// precision mediump float;\nprecision highp float;\n\nuniform float u_opacity;\n\nuniform vec2 u_touch;\nuniform vec2 u_resolution;\n\n// in int gl_PrimitiveID;\n// in highp vec4 gl_FragCoord;\n// in mediump vec2 gl_PointCoord; // 0.0 to 1.0, location on the screen\n// in bool gl_FrontFacing;\n// out highp float gl_FragDepth;\n\nflat in int provokedVertex;\n\nin vec3 front_color;\nin vec3 back_color;\nin vec3 barycentric;\n// flat in int rawEdge;\nout vec4 outColor;\n\nfloat hue2rgb (float p, float q, float t) {\n\twhile (t < 0.0) t += 1.0;\n\twhile (t > 1.0) t -= 1.0;\n\tif (t < 1.0 / 6.0) return p + (q - p) * 6.0 * t;\n\tif (t < 1.0 / 2.0) return q;\n\tif (t < 2.0 / 3.0) return p + (q - p) * (2.0 / 3.0 - t) * 6.0;\n\treturn p;\n}\nvec3 hslToRgb (float h, float s, float l) {\n\tif (s == 0.0) { return vec3(l, l, l); }\n\tfloat q = l < 0.5 ? l * (1.0 + s) : l + s - l * s;\n\tfloat p = 2.0 * l - q;\n\tfloat r = hue2rgb(p, q, h + 1.0 / 3.0);\n\tfloat g = hue2rgb(p, q, h);\n\tfloat b = hue2rgb(p, q, h - 1.0 / 3.0);\n\treturn vec3(r, g, b);\n}\n\nfloat edgeFactor(vec3 barycenter) {\n\tvec3 d = fwidth(barycenter);\n\tvec3 a3 = smoothstep(vec3(0.0), d*3.5, barycenter);\n\treturn min(min(a3.x, a3.y), a3.z);\n}\n\nvoid main () {\n\tgl_FragDepth = gl_FragCoord.z;\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\t// vec3 color = hslToRgb(float(gl_PrimitiveID) / 57.0, 0.5, 0.8);\n\t// vec3 color = hslToRgb(float(provokedVertex) * 1.618, 1.0, 0.45);\n\n\t// original output\n\t// outColor = vec4(color, u_opacity);\n\n\t// barycentric #1\n\t// outColor = any(lessThan(barycentric, vec3(0.02)))\n\t// \t? vec4(0.0, 0.0, 0.0, 1.0)\n\t// \t: vec4(color, u_opacity);\n\n\t// barycentric #2\n\toutColor = vec4(mix(vec3(0.0), color, edgeFactor(barycentric)), u_opacity);\n\t// barycentric #2, transparent faces (kindof. bug)\n\t// outColor = vec4(1.0, 1.0, 1.0, (1.0-edgeFactor(barycentric))*0.95);\n\n\t// // barycentric #3 with raw edge\n\t// bool side2 = bool(rawEdge & 1);\n\t// bool side0 = bool(rawEdge & 2);\n\t// bool side1 = bool(rawEdge & 4);\n\t// if ((barycentric.x < 0.02 && side0)\n\t// \t|| (barycentric.y < 0.02 && side1)\n\t// \t|| (barycentric.z < 0.02 && side2)) {\n\t// \toutColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t// }\n\t// else {\n\t// \toutColor = vec4(color, u_opacity);\n\t// }\n\n\t\n\t// if (provokedVertex == 8) {\n\t// \toutColor = vec4(1, 1, 0, 1);\n\t// }\n\n\t// vec2 fragScale = vec2(gl_FragCoord.x / u_resolution.x, gl_FragCoord.y / u_resolution.y);\n\t// vec2 touchScale = vec2(u_touch.x / u_resolution.x, u_touch.y / u_resolution.y);\n\t// // fix. invert.\n\t// touchScale.y = 1.0 - touchScale.y;\n\t// float dist = distance(touchScale, fragScale);\n\t// if (dist < 0.1) {\n\t// \tfloat t = dist / 0.1;\n\t// \toutColor.r = outColor.r * t + 1.0 * (1.0 - t);\n\t// }\n}\n");return{program:s,vertexArrays:makeFoldedVertexArrays(e,s,n,o),elementArrays:makeFoldedElementArrays(e,t,n),flags:[e.DEPTH_TEST],makeUniforms:makeUniforms$1}};var xn=Object.freeze({__proto__:null,foldedFormFaces:foldedFormFaces,foldedFormEdges:foldedFormEdges,foldedFormFacesOutlined:foldedFormFacesOutlined});const kn={B:[.3,.3,.3],b:[.3,.3,.3],V:[.2,.4,.6],v:[.2,.4,.6],M:[.75,.25,.15],m:[.75,.25,.15],F:[.2,.2,.2],f:[.2,.2,.2],U:[.2,.2,.2],u:[.2,.2,.2]},make2D$1=e=>e.map((e=>[0,1].map((t=>e[t]||0)))),makeCPEdgesVertexData=(e,t=kn)=>{if(!e||!e.vertices_coords||!e.edges_vertices)return[];const r=make2D$1(e.edges_vertices.flatMap((t=>t.map((t=>e.vertices_coords[t])))).flatMap((e=>[e,e]))),o=make2D$1(makeEdgesVector(e));return{vertices_coords:r,vertices_color:e.edges_assignment?e.edges_assignment.flatMap((e=>[t[e],t[e],t[e],t[e]])):e.edges_vertices.flatMap((()=>[t.U,t.U,t.U,t.U])),verticesEdgesVector:o.flatMap((e=>[e,e,e,e])),vertices_vector:e.edges_vertices.flatMap((()=>[[1,0],[-1,0],[-1,0],[1,0]]))}};var An=Object.freeze({__proto__:null,makeCPEdgesVertexData:makeCPEdgesVertexData});const makeCPEdgesVertexArrays=(e,t,r)=>{if(!r||!r.vertices_coords||!r.edges_vertices)return[];const{vertices_coords:o,vertices_color:n,verticesEdgesVector:s,vertices_vector:c}=makeCPEdgesVertexData(r);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:2,data:new Float32Array(o.flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:n[0].length,data:new Float32Array(n.flat())},{location:e.getAttribLocation(t,"edge_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:s[0].length,data:new Float32Array(s.flat())},{location:e.getAttribLocation(t,"vertex_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:c[0].length,data:new Float32Array(c.flat())}].filter((e=>-1!==e.location))},makeCPEdgesElementArrays=(e,t=1,r={})=>{if(!r||!r.edges_vertices)return[];const o=r.edges_vertices.map(((e,t)=>4*t)).flatMap((e=>[e+0,e+1,e+2,e+2,e+3,e+0]));return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:2===t?new Uint32Array(o):new Uint16Array(o)}]},makeCPFacesVertexArrays=(e,t,r)=>{if(!r||!r.vertices_coords)return[];const o=r.vertices_coords.map((()=>[.11,.11,.11]));return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:2,data:new Float32Array((n=r.vertices_coords,n.map((e=>[0,1].map((t=>e[t]||0))))).flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:o[0].length,data:new Float32Array(o.flat())}].filter((e=>-1!==e.location));var n},makeCPFacesElementArrays=(e,t=1,r={})=>r&&r.vertices_coords&&r.faces_vertices?[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:2===t?new Uint32Array(triangulateConvexFacesVertices(r).flat()):new Uint16Array(triangulateConvexFacesVertices(r).flat())}]:[];var On=Object.freeze({__proto__:null,makeCPEdgesVertexArrays:makeCPEdgesVertexArrays,makeCPEdgesElementArrays:makeCPEdgesElementArrays,makeCPFacesVertexArrays:makeCPFacesVertexArrays,makeCPFacesElementArrays:makeCPFacesElementArrays});const makeUniforms=(e,{projectionMatrix:t,viewMatrix:r,modelMatrix:o,strokeWidth:n})=>({u_matrix:{func:"uniformMatrix4fv",value:Ne.core.multiplyMatrices4(Ne.core.multiplyMatrices4(t,r),o)},u_projection:{func:"uniformMatrix4fv",value:t},u_modelView:{func:"uniformMatrix4fv",value:Ne.core.multiplyMatrices4(r,o)},u_strokeWidth:{func:"uniform1f",value:n/2}});var Mn="#version 100\n\nprecision mediump float;\nvarying vec3 blend_color;\n\nvoid main () {\n\tgl_FragColor = vec4(blend_color.rgb, 1);\n}\n",wn="#version 300 es\nprecision mediump float;\n// precision highp float;\n\n// flat in vec4 blend_color;\nin vec3 blend_color;\nout vec4 outColor;\n \nvoid main() {\n\toutColor = vec4(blend_color.rgb, 1);\n}\n";const cpFacesV1=(e,t=1,r={})=>{const o=createProgram(e,"#version 100\n\nuniform mat4 u_matrix;\n\nattribute vec2 v_position;\nattribute vec3 v_color;\nvarying vec3 blend_color;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 0, 1);\n\tblend_color = v_color;\n}\n",Mn);return{program:o,vertexArrays:makeCPFacesVertexArrays(e,o,r),elementArrays:makeCPFacesElementArrays(e,t,r),flags:[],makeUniforms:makeUniforms}},cpEdgesV1=(e,t=1,r={})=>{const o=createProgram(e,"#version 100\n\nattribute vec2 v_position;\nattribute vec3 v_color;\nattribute vec2 edge_vector;\nattribute vec2 vertex_vector;\n\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\nvarying vec3 blend_color;\n\nvoid main () {\n\t// dot(normal, (u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t// this one works\n\tfloat sign = vertex_vector[0];\n\tvec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * u_strokeWidth;\n\tgl_Position = u_matrix * vec4(side + v_position, 0, 1);\n\n\t// vec3 forward = (u_modelView * vec4(0, 0, 1, 0)).xyz;\n\t// float sign = vertex_vector[0];\n\t// vec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign));\n\t// vec3 side3d = (u_modelView * vec4(side, 0, 1)).xyz;\n\t// vec3 c = normalize(cross(side3d, forward)) * u_strokeWidth;\n\t// // gl_Position = u_matrix * vec4(v_position.x + c.x, v_position.y + c.y, c.z, 1);\n\t// gl_Position = u_matrix * vec4(v_position, 0, 1) + u_projection * vec4(c, 1);\n\t\n\t// vec3 forward = (u_modelView * vec4(0, 0, 1, 0)).xyz;\n\t// vec3 edgeVec3d = (u_modelView * vec4(edge_vector, 0, 0)).xyz;\n\t// vec3 thick = normalize(cross(edgeVec3d, forward)) * sign * u_strokeWidth;\n\t// vec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * u_strokeWidth;\n\t// vec4 projected_vector = u_matrix * vec4(normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)), 0, 1);\n\t// gl_Position = u_matrix * vec4(v_position, 0, 1) + vec4(thick.xyz, 0);\n\t// gl_Position = u_matrix * vec4(v_position, 0, 1) + vec4(0, u_strokeWidth * sign, 0, 0);\n\tblend_color = v_color;\n}\n",Mn);return{program:o,vertexArrays:makeCPEdgesVertexArrays(e,o,r),elementArrays:makeCPEdgesElementArrays(e,t,r),flags:[],makeUniforms:makeUniforms}},cpFacesV2=(e,t=2,r={})=>{const o=createProgram(e,"#version 300 es\n\nuniform mat4 u_matrix;\n\nin vec2 v_position;\nin vec3 v_color;\nout vec3 blend_color;\n// flat out vec3 blend_color;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 0, 1);\n\tblend_color = v_color;\n}\n",wn);return{program:o,vertexArrays:makeCPFacesVertexArrays(e,o,r),elementArrays:makeCPFacesElementArrays(e,t,r),flags:[],makeUniforms:makeUniforms}},cpEdgesV2=(e,t=2,r={})=>{const o=createProgram(e,"#version 300 es\n\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\n\nin vec2 v_position;\nin vec3 v_color;\nin vec2 edge_vector;\nin vec2 vertex_vector;\nout vec3 blend_color;\n\nvoid main () {\n\t// dot(normal, (u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t// this one works\n\tfloat sign = vertex_vector[0];\n\tvec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * u_strokeWidth;\n\tgl_Position = u_matrix * vec4(side + v_position, 0, 1);\n\tblend_color = v_color;\n}\n",wn);return{program:o,vertexArrays:makeCPEdgesVertexArrays(e,o,r),elementArrays:makeCPEdgesElementArrays(e,t,r),flags:[],makeUniforms:makeUniforms}};var jn=Object.freeze({__proto__:null,cpFacesV1:cpFacesV1,cpEdgesV1:cpEdgesV1,cpFacesV2:cpFacesV2,cpEdgesV2:cpEdgesV2});var Pn=Object.assign(Object.create(null),{createProgram:createProgram,initialize:(e,t)=>{const r=[null,"webgl","webgl2"],o=window.devicePixelRatio||1;if(e.width=e.clientWidth*o,e.height=e.clientHeight*o,t)return{gl:e.getContext(r[t]),version:t};const n=e.getContext(r[2]);if(n)return{gl:n,version:2};const s=e.getContext(r[1]);if(s)return{gl:s,version:1};throw new Error("WebGl not Supported")},foldedForm:(e,t=1,r={},o={})=>{const n=[];return!1!==o.faces&&(!1===o.outlines?n.push(foldedFormFaces(e,t,r,o)):n.push(foldedFormFacesOutlined(e,t,r,o))),!0===o.edges&&n.push(foldedFormEdges(e,t,r,o)),n},creasePattern:(e,t=1,r={})=>1===t?[cpFacesV1(e,t,r),cpEdgesV1(e,t,r)]:[cpFacesV2(e,t,r),cpEdgesV2(e,t,r)],hexToRGB:hexToRGB},vn,_n,En,bn,xn,On,An,jn);const Sn=Object.assign(M,qt,{math:Ne.core,axiom:axiom,diagram:Xt,layer:Er,singleVertex:kr,text:Ar,convert:zr,webgl:Pn});return Object.keys(Ne).filter((e=>"core"!==e)).forEach((e=>{Sn[e]=Ne[e]})),Object.defineProperty(Sn,"use",{enumerable:!1,value:function(e){null!=e&&"function"==typeof e.linker&&e.linker(this)}.bind(Sn)}),k||(Sn.use(FOLDtoSVG),Sn.use(SVG)),Object.defineProperty(Sn,"window",{enumerable:!1,set:e=>{var t;(t=e).document||(t.document=(e=>(new e.DOMParser).parseFromString("<!DOCTYPE html><title>.</title>","text/html"))(t)),O.window=t,O.window,SVG.window=e}}),Sn}));
