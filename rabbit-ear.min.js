/* Rabbit Ear 0.9.33 alpha 2023-02-02 (c) Kraft, MIT License */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).ear=t()}(this,(function(){"use strict";const e="undefined",t="number",r="object",o="index",n="vertices",s="edges",a="faces",c="boundaries",i="vertices_coords",l="edges_vertices",d="faces_edges",m="edges_assignment",p="edges_foldAngle",u="faces_layer",g="boundary",v="front",h="back",_="foldedForm",y="black",b="white",E="none",x=typeof window!==e&&typeof window.document!==e;typeof process!==e&&null!=process.versions&&process.versions.node;const k=typeof self===r&&self.constructor&&"DedicatedWorkerGlobalScope"===self.constructor.name;var A="graph could not planarize",O="manifold required",w="cycle not allowed",M="planar boundary detection error, bad graph",j="circular edges not allowed",P="replace() index < value. indices parameter modified",S="replace() generated undefined",C="foldAngles cannot be determined from flat-folded faces without an assignment",z="WebGl not Supported",F="only convex faces are supported",L="window not set; if using node/deno include package @xmldom/xmldom and set ear.window = xmldom",N="non-convex triangulation requires vertices_coords";const V={window:void 0};x&&(V.window=window);const RabbitEarWindow=()=>{if(void 0===V.window)throw new Error(L);return V.window};var $=Object.create(null);const I=1e-6,T=180/Math.PI,B=Math.PI/180,q=2*Math.PI,U=Object.freeze({__proto__:null,EPSILON:I,R2D:T,D2R:B,TWO_PI:q}),fnTrue=()=>!0,fnSquare=e=>e*e,fnAdd=(e,t)=>e+(t||0),fnNotUndefined=e=>void 0!==e,fnVec2Angle=e=>Math.atan2(e[1],e[0]),fnToVec2=e=>[Math.cos(e),Math.sin(e)],fnEpsilonEqual=(e,t,r=I)=>Math.abs(e-t)<r,fnEpsilonSort=(e,t,r=I)=>fnEpsilonEqual(e,t,r)?0:Math.sign(t-e),fnEpsilonEqualVectors=(e,t,r=I)=>{for(let o=0;o<Math.max(e.length,t.length);o+=1)if(!fnEpsilonEqual(e[o]||0,t[o]||0,r))return!1;return!0},include=(e,t=I)=>e>-t,exclude=(e,t=I)=>e>t,R=fnTrue,D=fnTrue,W=include,G=exclude,includeS=(e,t=I)=>e>-t&&e<1+t,excludeS=(e,t=I)=>e>t&&e<1-t,clampSegment=e=>e<-I?0:e>1.000001?1:e,Z=Object.freeze({__proto__:null,fnTrue:fnTrue,fnSquare:fnSquare,fnAdd:fnAdd,fnNotUndefined:fnNotUndefined,fnAnd:(e,t)=>e&&t,fnCat:(e,t)=>e.concat(t),fnVec2Angle:fnVec2Angle,fnToVec2:fnToVec2,fnEqual:(e,t)=>e===t,fnEpsilonEqual:fnEpsilonEqual,fnEpsilonSort:fnEpsilonSort,fnEpsilonEqualVectors:fnEpsilonEqualVectors,include:include,exclude:exclude,includeL:R,excludeL:D,includeR:W,excludeR:G,includeS:includeS,excludeS:excludeS,clampLine:e=>e,clampRay:e=>e<-I?0:e,clampSegment:clampSegment}),magnitude=e=>Math.sqrt(e.map(fnSquare).reduce(fnAdd,0)),magnitude2=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]),magnitude3=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]),magSquared=e=>e.map(fnSquare).reduce(fnAdd,0),normalize=e=>{const t=magnitude(e);return 0===t?e:e.map((e=>e/t))},normalize2=e=>{const t=magnitude2(e);return 0===t?e:[e[0]/t,e[1]/t]},normalize3=e=>{const t=magnitude3(e);return 0===t?e:[e[0]/t,e[1]/t,e[2]/t]},scale=(e,t)=>e.map((e=>e*t)),scale2=(e,t)=>[e[0]*t,e[1]*t],scale3=(e,t)=>[e[0]*t,e[1]*t,e[2]*t],add=(e,t)=>e.map(((e,r)=>e+(t[r]||0))),add2=(e,t)=>[e[0]+t[0],e[1]+t[1]],add3=(e,t)=>[e[0]+t[0],e[1]+t[1],e[2]+t[2]],subtract=(e,t)=>e.map(((e,r)=>e-(t[r]||0))),subtract2=(e,t)=>[e[0]-t[0],e[1]-t[1]],subtract3=(e,t)=>[e[0]-t[0],e[1]-t[1],e[2]-t[2]],dot=(e,t)=>e.map(((r,o)=>e[o]*t[o])).reduce(fnAdd,0),dot2=(e,t)=>e[0]*t[0]+e[1]*t[1],midpoint=(e,t)=>e.map(((e,r)=>(e+t[r])/2)),lerp=(e,t,r)=>{const o=1-r;return e.map(((e,n)=>e*o+(t[n]||0)*r))},cross2=(e,t)=>e[0]*t[1]-e[1]*t[0],cross3=(e,t)=>[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]],distance=(e,t)=>Math.sqrt(e.map(((r,o)=>(e[o]-t[o])**2)).reduce(fnAdd,0)),distance2=(e,t)=>{const r=e[0]-t[0],o=e[1]-t[1];return Math.sqrt(r*r+o*o)},flip=e=>e.map((e=>-e)),rotate90=e=>[-e[1],e[0]],rotate270=e=>[e[1],-e[0]],parallelNormalized=(e,t,r=I)=>1-Math.abs(dot(e,t))<r,parallel=(e,t,r=I)=>parallelNormalized(normalize(e),normalize(t),r),Y=Object.freeze({__proto__:null,magnitude:magnitude,magnitude2:magnitude2,magnitude3:magnitude3,magSquared:magSquared,normalize:normalize,normalize2:normalize2,normalize3:normalize3,scale:scale,scale2:scale2,scale3:scale3,add:add,add2:add2,add3:add3,subtract:subtract,subtract2:subtract2,subtract3:subtract3,dot:dot,dot2:dot2,dot3:(e,t)=>e[0]*t[0]+e[1]*t[1]+e[2]*t[2],midpoint:midpoint,midpoint2:(e,t)=>scale2(add2(e,t),.5),midpoint3:(e,t)=>scale3(add3(e,t),.5),average:function(){if(0===arguments.length)return[];const e=arguments[0].length>0?arguments[0].length:0,t=Array(e).fill(0);return Array.from(arguments).forEach((e=>t.forEach(((r,o)=>{t[o]+=e[o]||0})))),t.map((e=>e/arguments.length))},lerp:lerp,cross2:cross2,cross3:cross3,distance:distance,distance2:distance2,distance3:(e,t)=>{const r=e[0]-t[0],o=e[1]-t[1],n=e[2]-t[2];return Math.sqrt(r*r+o*o+n*n)},flip:flip,rotate90:rotate90,rotate270:rotate270,degenerate:(e,t=I)=>e.map((e=>Math.abs(e))).reduce(fnAdd,0)<t,parallelNormalized:parallelNormalized,parallel:parallel,parallel2:(e,t,r=I)=>Math.abs(cross2(e,t))<r}),resize=(e,t)=>t.length===e?t:Array(e).fill(0).map(((e,r)=>t[r]?t[r]:e)),countPlaces=function(e){const t=`${e}`.match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);return t?Math.max(0,(t[1]?t[1].length:0)-(t[2]?+t[2]:0)):0},cleanNumber=function(e,t=15){if("number"!=typeof e)return e;const r=parseFloat(e.toFixed(t));return countPlaces(r)===Math.min(t,countPlaces(e))?e:r},isIterable=e=>null!=e&&"function"==typeof e[Symbol.iterator],semiFlattenArrays=function(){switch(arguments.length){case void 0:case 0:return Array.from(arguments);case 1:return isIterable(arguments[0])&&"string"!=typeof arguments[0]?semiFlattenArrays(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>isIterable(e)?[...semiFlattenArrays(e)]:e))}},flattenArrays=function(){switch(arguments.length){case void 0:case 0:return Array.from(arguments);case 1:return isIterable(arguments[0])&&"string"!=typeof arguments[0]?flattenArrays(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>isIterable(e)?[...flattenArrays(e)]:e)).reduce(((e,t)=>e.concat(t)),[])}},J=Object.freeze({__proto__:null,resize:resize,resizeUp:(e,t)=>[e,t].map((r=>resize(Math.max(e.length,t.length),r))),cleanNumber:cleanNumber,semiFlattenArrays:semiFlattenArrays,flattenArrays:flattenArrays}),smallestComparisonSearch=(e,t,r)=>{const o=t.map(((t,o)=>({o:t,i:o,d:r(e,t)})));let n,s=1/0;for(let e=0;e<o.length;e+=1)o[e].d<s&&(n=e,s=o[e].d);return n},minimum2DPointIndex=(e,t=I)=>{const r=((e,t=fnEpsilonSort,r=I)=>{let o=[0];for(let n=1;n<e.length;n+=1)switch(t(e[n][0],e[o[0]][0],r)){case 0:o.push(n);break;case 1:o=[n]}return o})(e,fnEpsilonSort,t);let o=0;for(let t=1;t<r.length;t+=1)e[r[t]][1]<e[r[o]][1]&&(o=t);return r[o]},nearestPointOnLine=(e,t,r,o,n=I)=>{t=resize(e.length,t),r=resize(e.length,r);const s=magSquared(e),a=subtract(r,t),c=o(dot(e,a)/s,n);return add(t,scale(e,c))},H=Object.freeze({__proto__:null,smallestComparisonSearch:smallestComparisonSearch,minimum2DPointIndex:minimum2DPointIndex,nearestPoint2:(e,t)=>{const r=smallestComparisonSearch(e,t,distance2);return void 0===r?void 0:t[r]},nearestPoint:(e,t)=>{const r=smallestComparisonSearch(e,t,distance);return void 0===r?void 0:t[r]},nearestPointOnLine:nearestPointOnLine,nearestPointOnPolygon:(e,t)=>{const r=e.map(((e,t,r)=>subtract(r[(t+1)%r.length],e)));return e.map(((e,o)=>nearestPointOnLine(r[o],e,t,clampSegment))).map(((e,r)=>({point:e,i:r,distance:distance(e,t)}))).sort(((e,t)=>e.distance-t.distance)).shift()},nearestPointOnCircle:(e,t,r)=>add(t,scale(normalize(subtract(r,t)),e))}),clusterIndicesOfSortedNumbers=(e,t=I)=>{const r=[[0]];let o=0;for(let n=1;n<e.length;n+=1)fnEpsilonEqual(e[n],e[n-1],t)?r[o].push(n):(o=r.length,r.push([n]));return r},radialSortPointIndices=(e=[],t=I)=>{const r=minimum2DPointIndex(e,t),o=e.map((t=>subtract2(t,e[r]))).map((e=>normalize2(e))).map((e=>dot2([0,1],e))),n=o.map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).map((e=>e.i)).filter((e=>e!==r));return[[r]].concat(clusterIndicesOfSortedNumbers(n.map((e=>o[e])),t).map((e=>e.map((e=>n[e])))).map((t=>1===t.length?t:t.map((t=>({i:t,len:distance2(e[t],e[r])}))).sort(((e,t)=>e.len-t.len)).map((e=>e.i)))))},X=Object.freeze({__proto__:null,sortPointsAlongVector2:(e,t)=>e.map((e=>({point:e,d:e[0]*t[0]+e[1]*t[1]}))).sort(((e,t)=>e.d-t.d)).map((e=>e.point)),clusterIndicesOfSortedNumbers:clusterIndicesOfSortedNumbers,radialSortPointIndices:radialSortPointIndices}),K=[1,0,0,1],Q=K.concat(0,0),determinant2=e=>e[0]*e[3]-e[1]*e[2],makeMatrix2Reflect=(e,t=[0,0])=>{const r=Math.atan2(e[1],e[0]),o=Math.cos(r),n=Math.sin(r),s=Math.cos(-r),a=Math.sin(-r),c=o*s+n*a,i=o*-a+n*s,l=n*s+-o*a,d=n*-a+-o*s;return[c,i,l,d,t[0]+c*-t[0]+-t[1]*l,t[1]+i*-t[0]+-t[1]*d]},ee=Object.freeze({__proto__:null,identity2x2:K,identity2x3:Q,multiplyMatrix2Vector2:(e,t)=>[e[0]*t[0]+e[2]*t[1]+e[4],e[1]*t[0]+e[3]*t[1]+e[5]],multiplyMatrix2Line2:(e,t,r)=>({vector:[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1]],origin:[e[0]*r[0]+e[2]*r[1]+e[4],e[1]*r[0]+e[3]*r[1]+e[5]]}),multiplyMatrices2:(e,t)=>[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1],e[0]*t[2]+e[2]*t[3],e[1]*t[2]+e[3]*t[3],e[0]*t[4]+e[2]*t[5]+e[4],e[1]*t[4]+e[3]*t[5]+e[5]],determinant2:determinant2,invertMatrix2:e=>{const t=determinant2(e);if(!(Math.abs(t)<1e-6||Number.isNaN(t))&&Number.isFinite(e[4])&&Number.isFinite(e[5]))return[e[3]/t,-e[1]/t,-e[2]/t,e[0]/t,(e[2]*e[5]-e[3]*e[4])/t,(e[1]*e[4]-e[0]*e[5])/t]},makeMatrix2Translate:(e=0,t=0)=>K.concat(e,t),makeMatrix2Scale:(e=[1,1],t=[0,0])=>[e[0],0,0,e[1],e[0]*-t[0]+t[0],e[1]*-t[1]+t[1]],makeMatrix2Rotate:(e,t=[0,0])=>{const r=Math.cos(e),o=Math.sin(e);return[r,o,-o,r,t[0],t[1]]},makeMatrix2Reflect:makeMatrix2Reflect}),te=Object.freeze([1,0,0,0,1,0,0,0,1]),re=Object.freeze(te.concat(0,0,0)),multiplyMatrices3=(e,t)=>[e[0]*t[0]+e[3]*t[1]+e[6]*t[2],e[1]*t[0]+e[4]*t[1]+e[7]*t[2],e[2]*t[0]+e[5]*t[1]+e[8]*t[2],e[0]*t[3]+e[3]*t[4]+e[6]*t[5],e[1]*t[3]+e[4]*t[4]+e[7]*t[5],e[2]*t[3]+e[5]*t[4]+e[8]*t[5],e[0]*t[6]+e[3]*t[7]+e[6]*t[8],e[1]*t[6]+e[4]*t[7]+e[7]*t[8],e[2]*t[6]+e[5]*t[7]+e[8]*t[8],e[0]*t[9]+e[3]*t[10]+e[6]*t[11]+e[9],e[1]*t[9]+e[4]*t[10]+e[7]*t[11]+e[10],e[2]*t[9]+e[5]*t[10]+e[8]*t[11]+e[11]],determinant3=e=>e[0]*e[4]*e[8]-e[0]*e[7]*e[5]-e[3]*e[1]*e[8]+e[3]*e[7]*e[2]+e[6]*e[1]*e[5]-e[6]*e[4]*e[2],singleAxisRotate=(e,t,r,o,n)=>{const s=te.concat([0,1,2].map((e=>t[e]||0))),a=Math.cos(e),c=Math.sin(e);return s[3*r+r]=a,s[3*r+o]=(n?1:-1)*c,s[3*o+r]=(n?-1:1)*c,s[3*o+o]=a,s},oe=Object.freeze({__proto__:null,identity3x3:te,identity3x4:re,isIdentity3x4:e=>re.map(((t,r)=>Math.abs(t-e[r])<I)).reduce(((e,t)=>e&&t),!0),multiplyMatrix3Vector3:(e,t)=>[e[0]*t[0]+e[3]*t[1]+e[6]*t[2]+e[9],e[1]*t[0]+e[4]*t[1]+e[7]*t[2]+e[10],e[2]*t[0]+e[5]*t[1]+e[8]*t[2]+e[11]],multiplyMatrix3Line3:(e,t,r)=>({vector:[e[0]*t[0]+e[3]*t[1]+e[6]*t[2],e[1]*t[0]+e[4]*t[1]+e[7]*t[2],e[2]*t[0]+e[5]*t[1]+e[8]*t[2]],origin:[e[0]*r[0]+e[3]*r[1]+e[6]*r[2]+e[9],e[1]*r[0]+e[4]*r[1]+e[7]*r[2]+e[10],e[2]*r[0]+e[5]*r[1]+e[8]*r[2]+e[11]]}),multiplyMatrices3:multiplyMatrices3,determinant3:determinant3,invertMatrix3:e=>{const t=determinant3(e);if(Math.abs(t)<1e-6||Number.isNaN(t)||!Number.isFinite(e[9])||!Number.isFinite(e[10])||!Number.isFinite(e[11]))return;const r=[e[4]*e[8]-e[7]*e[5],-e[1]*e[8]+e[7]*e[2],e[1]*e[5]-e[4]*e[2],-e[3]*e[8]+e[6]*e[5],e[0]*e[8]-e[6]*e[2],-e[0]*e[5]+e[3]*e[2],e[3]*e[7]-e[6]*e[4],-e[0]*e[7]+e[6]*e[1],e[0]*e[4]-e[3]*e[1],-e[3]*e[7]*e[11]+e[3]*e[8]*e[10]+e[6]*e[4]*e[11]-e[6]*e[5]*e[10]-e[9]*e[4]*e[8]+e[9]*e[5]*e[7],e[0]*e[7]*e[11]-e[0]*e[8]*e[10]-e[6]*e[1]*e[11]+e[6]*e[2]*e[10]+e[9]*e[1]*e[8]-e[9]*e[2]*e[7],-e[0]*e[4]*e[11]+e[0]*e[5]*e[10]+e[3]*e[1]*e[11]-e[3]*e[2]*e[10]-e[9]*e[1]*e[5]+e[9]*e[2]*e[4]],o=1/t;return r.map((e=>e*o))},makeMatrix3Translate:(e=0,t=0,r=0)=>te.concat(e,t,r),makeMatrix3RotateX:(e,t=[0,0,0])=>singleAxisRotate(e,t,1,2,!0),makeMatrix3RotateY:(e,t=[0,0,0])=>singleAxisRotate(e,t,0,2,!1),makeMatrix3RotateZ:(e,t=[0,0,0])=>singleAxisRotate(e,t,0,1,!0),makeMatrix3Rotate:(e,t=[0,0,1],r=[0,0,0])=>{const o=[0,1,2].map((e=>r[e]||0)),[n,s,a]=resize(3,normalize(t)),c=Math.cos(e),i=Math.sin(e),l=1-c,d=te.concat(-o[0],-o[1],-o[2]),m=te.concat(o[0],o[1],o[2]);return multiplyMatrices3(m,multiplyMatrices3([l*n*n+c,l*s*n+a*i,l*a*n-s*i,l*n*s-a*i,l*s*s+c,l*a*s+n*i,l*n*a+s*i,l*s*a-n*i,l*a*a+c,0,0,0],d))},makeMatrix3Scale:(e=[1,1,1],t=[0,0,0])=>[e[0],0,0,0,e[1],0,0,0,e[2],e[0]*-t[0]+t[0],e[1]*-t[1]+t[1],e[2]*-t[2]+t[2]],makeMatrix3ReflectZ:(e,t=[0,0])=>{const r=makeMatrix2Reflect(e,t);return[r[0],r[1],0,r[2],r[3],0,0,0,1,r[4],r[5],0]}}),ne=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),multiplyMatrices4=(e,t)=>[e[0]*t[0]+e[4]*t[1]+e[8]*t[2]+e[12]*t[3],e[1]*t[0]+e[5]*t[1]+e[9]*t[2]+e[13]*t[3],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]+e[14]*t[3],e[3]*t[0]+e[7]*t[1]+e[11]*t[2]+e[15]*t[3],e[0]*t[4]+e[4]*t[5]+e[8]*t[6]+e[12]*t[7],e[1]*t[4]+e[5]*t[5]+e[9]*t[6]+e[13]*t[7],e[2]*t[4]+e[6]*t[5]+e[10]*t[6]+e[14]*t[7],e[3]*t[4]+e[7]*t[5]+e[11]*t[6]+e[15]*t[7],e[0]*t[8]+e[4]*t[9]+e[8]*t[10]+e[12]*t[11],e[1]*t[8]+e[5]*t[9]+e[9]*t[10]+e[13]*t[11],e[2]*t[8]+e[6]*t[9]+e[10]*t[10]+e[14]*t[11],e[3]*t[8]+e[7]*t[9]+e[11]*t[10]+e[15]*t[11],e[0]*t[12]+e[4]*t[13]+e[8]*t[14]+e[12]*t[15],e[1]*t[12]+e[5]*t[13]+e[9]*t[14]+e[13]*t[15],e[2]*t[12]+e[6]*t[13]+e[10]*t[14]+e[14]*t[15],e[3]*t[12]+e[7]*t[13]+e[11]*t[14]+e[15]*t[15]],determinant4=e=>{const t=e[10]*e[15]-e[11]*e[14],r=e[9]*e[15]-e[11]*e[13],o=e[9]*e[14]-e[10]*e[13],n=e[8]*e[15]-e[11]*e[12],s=e[8]*e[14]-e[10]*e[12],a=e[8]*e[13]-e[9]*e[12];return e[0]*(e[5]*t-e[6]*r+e[7]*o)-e[1]*(e[4]*t-e[6]*n+e[7]*s)+e[2]*(e[4]*r-e[5]*n+e[7]*a)-e[3]*(e[4]*o-e[5]*s+e[6]*a)},se=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0]),makeMatrix4Translate=(e=0,t=0,r=0)=>[...se,e,t,r,1],singleAxisRotate4=(e,t,r,o,n)=>{const s=makeMatrix4Translate(...t),a=Math.cos(e),c=Math.sin(e);return s[4*r+r]=a,s[4*r+o]=(n?1:-1)*c,s[4*o+r]=(n?-1:1)*c,s[4*o+o]=a,s},ae=Object.freeze({__proto__:null,identity4x4:ne,isIdentity4x4:e=>ne.map(((t,r)=>Math.abs(t-e[r])<I)).reduce(((e,t)=>e&&t),!0),multiplyMatrix4Vector3:(e,t)=>[e[0]*t[0]+e[4]*t[1]+e[8]*t[2]+e[12],e[1]*t[0]+e[5]*t[1]+e[9]*t[2]+e[13],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]+e[14]],multiplyMatrix4Line3:(e,t,r)=>({vector:[e[0]*t[0]+e[4]*t[1]+e[8]*t[2],e[1]*t[0]+e[5]*t[1]+e[9]*t[2],e[2]*t[0]+e[6]*t[1]+e[10]*t[2]],origin:[e[0]*r[0]+e[4]*r[1]+e[8]*r[2]+e[12],e[1]*r[0]+e[5]*r[1]+e[9]*r[2]+e[13],e[2]*r[0]+e[6]*r[1]+e[10]*r[2]+e[14]]}),multiplyMatrices4:multiplyMatrices4,determinant4:determinant4,invertMatrix4:e=>{const t=determinant4(e);if(Math.abs(t)<1e-6||Number.isNaN(t)||!Number.isFinite(e[12])||!Number.isFinite(e[13])||!Number.isFinite(e[14]))return;const r=e[10]*e[15]-e[11]*e[14],o=e[9]*e[15]-e[11]*e[13],n=e[9]*e[14]-e[10]*e[13],s=e[8]*e[15]-e[11]*e[12],a=e[8]*e[14]-e[10]*e[12],c=e[8]*e[13]-e[9]*e[12],i=e[6]*e[15]-e[7]*e[14],l=e[5]*e[15]-e[7]*e[13],d=e[5]*e[14]-e[6]*e[13],m=e[6]*e[11]-e[7]*e[10],p=e[5]*e[11]-e[7]*e[9],u=e[5]*e[10]-e[6]*e[9],g=e[4]*e[15]-e[7]*e[12],v=e[4]*e[14]-e[6]*e[12],h=e[4]*e[11]-e[7]*e[8],_=e[4]*e[10]-e[6]*e[8],y=e[4]*e[13]-e[5]*e[12],b=e[4]*e[9]-e[5]*e[8],E=[+(e[5]*r-e[6]*o+e[7]*n),-(e[1]*r-e[2]*o+e[3]*n),+(e[1]*i-e[2]*l+e[3]*d),-(e[1]*m-e[2]*p+e[3]*u),-(e[4]*r-e[6]*s+e[7]*a),+(e[0]*r-e[2]*s+e[3]*a),-(e[0]*i-e[2]*g+e[3]*v),+(e[0]*m-e[2]*h+e[3]*_),+(e[4]*o-e[5]*s+e[7]*c),-(e[0]*o-e[1]*s+e[3]*c),+(e[0]*l-e[1]*g+e[3]*y),-(e[0]*p-e[1]*h+e[3]*b),-(e[4]*n-e[5]*a+e[6]*c),+(e[0]*n-e[1]*a+e[2]*c),-(e[0]*d-e[1]*v+e[2]*y),+(e[0]*u-e[1]*_+e[2]*b)],x=1/t;return E.map((e=>e*x))},makeMatrix4Translate:makeMatrix4Translate,makeMatrix4RotateX:(e,t=[0,0,0])=>singleAxisRotate4(e,t,1,2,!0),makeMatrix4RotateY:(e,t=[0,0,0])=>singleAxisRotate4(e,t,0,2,!1),makeMatrix4RotateZ:(e,t=[0,0,0])=>singleAxisRotate4(e,t,0,1,!0),makeMatrix4Rotate:(e,t=[0,0,1],r=[0,0,0])=>{const o=[0,1,2].map((e=>r[e]||0)),[n,s,a]=resize(3,normalize(t)),c=Math.cos(e),i=Math.sin(e),l=1-c,d=makeMatrix4Translate(-o[0],-o[1],-o[2]),m=makeMatrix4Translate(o[0],o[1],o[2]);return multiplyMatrices4(m,multiplyMatrices4([l*n*n+c,l*s*n+a*i,l*a*n-s*i,0,l*n*s-a*i,l*s*s+c,l*a*s+n*i,0,l*n*a+s*i,l*s*a-n*i,l*a*a+c,0,0,0,0,1],d))},makeMatrix4Scale:(e=[1,1,1],t=[0,0,0])=>[e[0],0,0,0,0,e[1],0,0,0,0,e[2],0,e[0]*-t[0]+t[0],e[1]*-t[1]+t[1],e[2]*-t[2]+t[2],1],makeMatrix4ReflectZ:(e,t=[0,0])=>{const r=makeMatrix2Reflect(e,t);return[r[0],r[1],0,0,r[2],r[3],0,0,0,0,1,0,r[4],r[5],0,1]},makePerspectiveMatrix4:(e,t,r,o)=>{const n=Math.tan(.5*Math.PI-.5*e),s=1/(r-o);return[n/t,0,0,0,0,n,0,0,0,0,(r+o)*s,-1,0,0,r*o*s*2,0]},makeOrthographicMatrix4:(e,t,r,o,n,s)=>[2/(t-o),0,0,0,0,2/(e-r),0,0,0,0,2/(n-s),0,(o+t)/(o-t),(r+e)/(r-e),(n+s)/(n-s),1],makeLookAtMatrix4:(e,t,r)=>{const o=normalize3(subtract3(e,t)),n=normalize3(cross3(r,o)),s=normalize3(cross3(o,n));return[n[0],n[1],n[2],0,s[0],s[1],s[2],0,o[0],o[1],o[2],0,e[0],e[1],e[2],1]}}),ce={...U,...Z,...Y,...X,...ee,...oe,...ae,...Object.freeze({__proto__:null,quaternionFromTwoVectors:(e,t)=>{const r=cross3(e,t),o=[r[0],r[1],r[2],dot(e,t)];return o[3]+=magnitude(o),normalize(o)},matrix4FromQuaternion:e=>multiplyMatrices4([e[3],e[2],-e[1],e[0],-e[2],e[3],e[0],e[1],e[1],-e[0],e[3],e[2],-e[0],-e[1],-e[2],e[3]],[e[3],e[2],-e[1],-e[0],-e[2],e[3],e[0],-e[1],e[1],-e[0],e[3],-e[2],e[0],e[1],e[2],e[3]])}),...H},clockwiseAngleRadians=(e,t)=>{for(;e<0;)e+=q;for(;t<0;)t+=q;for(;e>q;)e-=q;for(;t>q;)t-=q;const r=e-t;return r>=0?r:q-(t-e)},counterClockwiseAngleRadians=(e,t)=>{for(;e<0;)e+=q;for(;t<0;)t+=q;for(;e>q;)e-=q;for(;t>q;)t-=q;const r=t-e;return r>=0?r:q-(e-t)},clockwiseAngle2=(e,t)=>{const r=t[0]*e[0]+t[1]*e[1],o=t[0]*e[1]-t[1]*e[0];let n=Math.atan2(o,r);return n<0&&(n+=q),n},counterClockwiseAngle2=(e,t)=>{const r=e[0]*t[0]+e[1]*t[1],o=e[0]*t[1]-e[1]*t[0];let n=Math.atan2(o,r);return n<0&&(n+=q),n},clockwiseBisect2=(e,t)=>fnToVec2(fnVec2Angle(e)-clockwiseAngle2(e,t)/2),counterClockwiseBisect2=(e,t)=>fnToVec2(fnVec2Angle(e)+counterClockwiseAngle2(e,t)/2),clockwiseSubsectRadians=(e,t,r)=>{const o=clockwiseAngleRadians(t,r)/e;return Array.from(Array(e-1)).map(((e,r)=>t+o*(r+1)))},counterClockwiseSubsectRadians=(e,t,r)=>{const o=counterClockwiseAngleRadians(t,r)/e;return Array.from(Array(e-1)).map(((e,r)=>t+o*(r+1)))},clockwiseSubsect2=(e,t,r)=>{const o=Math.atan2(t[1],t[0]),n=Math.atan2(r[1],r[0]);return clockwiseSubsectRadians(e,o,n).map(fnToVec2)},counterClockwiseSubsect2=(e,t,r)=>{const o=Math.atan2(t[1],t[0]),n=Math.atan2(r[1],r[0]);return counterClockwiseSubsectRadians(e,o,n).map(fnToVec2)},counterClockwiseOrderRadians=function(){const e=Array.from(arguments).flat(),t=e.map(((e,t)=>t)).sort(((t,r)=>e[t]-e[r]));return t.slice(t.indexOf(0),t.length).concat(t.slice(0,t.indexOf(0)))},counterClockwiseSectorsRadians=function(){const e=Array.from(arguments).flat(),t=counterClockwiseOrderRadians(e).map((t=>e[t]));return t.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>counterClockwiseAngleRadians(e[0],e[1])))},threePointTurnDirection=(e,t,r,o=I)=>{const n=normalize2(subtract2(t,e)),s=normalize2(subtract2(r,e)),a=cross2(n,s);return fnEpsilonEqual(a,0,o)?fnEpsilonEqual(distance2(e,t)+distance2(t,r),distance2(e,r))?0:void 0:Math.sign(a)},ie=Object.freeze({__proto__:null,isCounterClockwiseBetween:(e,t,r)=>{for(;r<t;)r+=q;for(;e>t;)e-=q;for(;e<t;)e+=q;return e<r},clockwiseAngleRadians:clockwiseAngleRadians,counterClockwiseAngleRadians:counterClockwiseAngleRadians,clockwiseAngle2:clockwiseAngle2,counterClockwiseAngle2:counterClockwiseAngle2,clockwiseBisect2:clockwiseBisect2,counterClockwiseBisect2:counterClockwiseBisect2,clockwiseSubsectRadians:clockwiseSubsectRadians,counterClockwiseSubsectRadians:counterClockwiseSubsectRadians,clockwiseSubsect2:clockwiseSubsect2,counterClockwiseSubsect2:counterClockwiseSubsect2,bisectLines2:(e,t,r,o,n=I)=>{const s=cross2(e,r),a=dot(e,r),c=s>-n?[counterClockwiseBisect2(e,r)]:[clockwiseBisect2(e,r)];c[1]=s>-n?rotate90(c[0]):rotate270(c[0]);const i=((o[0]-t[0])*r[1]-r[0]*(o[1]-t[1]))/s,l=[e,r].map((e=>normalize(e))),d=Math.abs(cross2(...l))<n,m=d?midpoint(t,o):[t[0]+e[0]*i,t[1]+e[1]*i],p=c.map((e=>({vector:e,origin:m})));return d&&delete p[a>-n?1:0],p},counterClockwiseOrderRadians:counterClockwiseOrderRadians,counterClockwiseOrder2:function(){return counterClockwiseOrderRadians(semiFlattenArrays(arguments).map(fnVec2Angle))},counterClockwiseSectorsRadians:counterClockwiseSectorsRadians,counterClockwiseSectors2:function(){return counterClockwiseSectorsRadians(semiFlattenArrays(arguments).map(fnVec2Angle))},threePointTurnDirection:threePointTurnDirection}),convexHullIndices=(e=[],t=!1,r=I)=>{if(e.length<2)return[];const o=radialSortPointIndices(e,r).map((e=>1===e.length?e:(e=>e.concat(e.slice(0,-1).reverse()))(e))).flat();o.push(o[0]);const n=[o[0]];let s=1;const a={"-1":()=>n.pop(),1:e=>{n.push(e),s+=1},undefined:()=>{s+=1}};for(a[0]=t?a[1]:a[-1];s<o.length;){if(n.length<2){n.push(o[s]),s+=1;continue}const t=n[n.length-2],c=n[n.length-1],i=o[s];a[threePointTurnDirection(...[t,c,i].map((t=>e[t])),r)](i)}return n.pop(),n},le=Object.freeze({__proto__:null,convexHullIndices:convexHullIndices,convexHull:(e=[],t=!1,r=I)=>convexHullIndices(e,t,r).map((t=>e[t]))}),fe=Object.create(null),vectorOriginForm=(e,t)=>({vector:e||[],origin:t||[]}),getVector=function(){if(arguments[0]instanceof fe.vector)return arguments[0];let e=flattenArrays(arguments);return e.length>0&&"object"==typeof e[0]&&null!==e[0]&&!Number.isNaN(e[0].x)&&(e=["x","y","z"].map((t=>e[0][t])).filter(fnNotUndefined)),e.filter((e=>"number"==typeof e))},getLine$1=function(){const e=semiFlattenArrays(arguments);return 0===e.length?vectorOriginForm([],[]):e[0]instanceof fe.line||e[0]instanceof fe.ray||e[0]instanceof fe.segment?e[0]:e[0].constructor===Object&&void 0!==e[0].vector?vectorOriginForm(e[0].vector||[],e[0].origin||[]):"number"==typeof e[0]?vectorOriginForm(getVector(e)):vectorOriginForm(...e.map((e=>getVector(e))))},intersectLineLine=(e,t,r,o,n=R,s=R,a=I)=>{const c=cross2(normalize(e),normalize(r));if(Math.abs(c)<a)return;const i=cross2(e,r),l=-i,d=[o[0]-t[0],o[1]-t[1]],m=[-d[0],-d[1]],p=cross2(d,r)/i,u=cross2(m,e)/l;return n(p,a/magnitude(e))&&s(u,a/magnitude(r))?add(t,scale(e,p)):void 0},de=Object.freeze({__proto__:null,pleat:(e,t,r)=>{const o=getLine$1(t),n=getLine$1(r);return parallel(o.vector,n.vector)?((e,t,r)=>{const o=Array.from(Array(e-1)).map(((t,r)=>(r+1)/e)).map((e=>lerp(t.origin,r.origin,e))),n=[...t.vector];return o.map((e=>({origin:e,vector:n})))})(e,o,n):((e,t,r)=>{const o=intersectLineLine(t.vector,t.origin,r.vector,r.origin);return(clockwiseAngle2(t.vector,r.vector)<counterClockwiseAngle2(t.vector,r.vector)?clockwiseSubsect2(e,t.vector,r.vector):counterClockwiseSubsect2(e,t.vector,r.vector)).map((e=>({origin:o,vector:e})))})(e,o,n)}}),angleArray=e=>Array.from(Array(Math.floor(e))).map(((t,r)=>q*(r/e))),anglesToVecs=(e,t)=>e.map((e=>[t*Math.cos(e),t*Math.sin(e)])).map((e=>e.map((e=>cleanNumber(e,14))))),makePolygonCircumradius=(e=3,t=1)=>anglesToVecs(angleArray(e),t),makePolygonCircumradiusSide=(e=3,t=1)=>{const r=Math.PI/e,o=angleArray(e).map((e=>e+r));return anglesToVecs(o,t)},signedArea=e=>.5*e.map(((e,t,r)=>{const o=r[(t+1)%r.length];return e[0]*o[1]-o[0]*e[1]})).reduce(fnAdd,0),me=Object.freeze({__proto__:null,makePolygonCircumradius:makePolygonCircumradius,makePolygonCircumradiusSide:makePolygonCircumradiusSide,makePolygonInradius:(e=3,t=1)=>makePolygonCircumradius(e,t/Math.cos(Math.PI/e)),makePolygonInradiusSide:(e=3,t=1)=>makePolygonCircumradiusSide(e,t/Math.cos(Math.PI/e)),makePolygonSideLength:(e=3,t=1)=>makePolygonCircumradius(e,t/2/Math.sin(Math.PI/e)),makePolygonSideLengthSide:(e=3,t=1)=>makePolygonCircumradiusSide(e,t/2/Math.sin(Math.PI/e)),makePolygonNonCollinear:(e,t=I)=>{const r=e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>subtract(e[1],e[0]))).map(((e,t,r)=>[e,r[(t+r.length-1)%r.length]])).map((e=>!parallel(e[1],e[0],t)));return e.filter(((e,t)=>r[t]))},circumcircle:function(e,t,r){const o=t[0]-e[0],n=t[1]-e[1],s=r[0]-e[0],a=r[1]-e[1],c=o*(e[0]+t[0])+n*(e[1]+t[1]),i=s*(e[0]+r[0])+a*(e[1]+r[1]),l=2*(o*(r[1]-t[1])-n*(r[0]-t[0]));if(Math.abs(l)<I){const o=Math.min(e[0],t[0],r[0]),n=Math.min(e[1],t[1],r[1]),s=.5*(Math.max(e[0],t[0],r[0])-o),a=.5*(Math.max(e[1],t[1],r[1])-n);return{origin:[o+s,n+a],radius:Math.sqrt(s*s+a*a)}}const d=[(a*c-n*i)/l,(o*i-s*c)/l],m=d[0]-e[0],p=d[1]-e[1];return{origin:d,radius:Math.sqrt(m*m+p*p)}},signedArea:signedArea,centroid:e=>{const t=1/(6*signedArea(e));return e.map(((e,t,r)=>{const o=r[(t+1)%r.length],n=e[0]*o[1]-o[0]*e[1];return[(e[0]+o[0])*n,(e[1]+o[1])*n]})).reduce(((e,t)=>[e[0]+t[0],e[1]+t[1]]),[0,0]).map((e=>e*t))},boundingBox:(e,t=0)=>{if(!e||!e.length)return;const r=Array(e[0].length).fill(1/0),o=Array(e[0].length).fill(-1/0);e.forEach((e=>e.forEach(((e,n)=>{e<r[n]&&(r[n]=e-t),e>o[n]&&(o[n]=e+t)}))));const n=o.map(((e,t)=>e-r[t]));return{min:r,max:o,span:n}}}),overlapConvexPolygonPoint=(e,t,r=exclude,o=I)=>e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>cross2(normalize(subtract(e[1],e[0])),subtract(t,e[0])))).map((e=>r(e,o))).map(((e,t,r)=>e===r[0])).reduce(((e,t)=>e&&t),!0),linePointFromParameter=(e,t,r)=>add(t,scale(e,r)),getIntersectParameters=(e,t,r,o,n)=>e.map(((e,t,r)=>[subtract(r[(t+1)%r.length],e),e])).map((e=>((e,t,r,o,n=includeS,s=I)=>{const a=cross2(normalize(e),normalize(r));if(Math.abs(a)<s)return;const c=cross2(e,r),i=-c,l=subtract(o,t),d=flip(l),m=cross2(l,r)/c;return n(cross2(d,e)/i,s/magnitude(r))?m:void 0})(t,r,e[0],e[1],o,n))).filter(fnNotUndefined).sort(((e,t)=>e-t)),overlapLinePoint=(e,t,r,o=D,n=I)=>{const s=subtract(r,t),a=magSquared(e),c=Math.sqrt(a);if(c<n)return!1;const i=cross2(s,e.map((e=>e/c))),l=dot(s,e)/a;return Math.abs(i)<n&&o(l,n/c)},recurseSkeleton=(e,t,r)=>{const o=e.map(((e,t)=>({vector:r[t],origin:e}))).map(((e,t,r)=>intersectLineLine(e.vector,e.origin,r[(t+1)%r.length].vector,r[(t+1)%r.length].origin,G,G))),n=t.map(((e,t)=>nearestPointOnLine(e.vector,e.origin,o[t],(e=>e))));if(3===e.length)return e.map((e=>({type:"skeleton",points:[e,o[0]]}))).concat([{type:"perpendicular",points:[n[0],o[0]]}]);const s=o.map(((e,t)=>distance(e,n[t])));let a=0;s.forEach(((e,t)=>{e<s[a]&&(a=t)}));const c=[{type:"skeleton",points:[e[a],o[a]]},{type:"skeleton",points:[e[(a+1)%e.length],o[a]]},{type:"perpendicular",points:[n[a],o[a]]}],i=clockwiseBisect2(flip(t[(a+t.length-1)%t.length].vector),t[(a+1)%t.length].vector),l=a===e.length-1;return e.splice(a,2,o[a]),t.splice(a,1),r.splice(a,2,i),l&&(e.splice(0,1),r.splice(0,1),t.push(t.shift())),c.concat(recurseSkeleton(e,t,r))},pe={...le,...de,...me,...ie,clipLineConvexPolygon:(e,t,r,o=include,n=R,s=I)=>{const a=getIntersectParameters(e,t,r,includeS,s);if(a.length<2)return;const c=((e,t,r)=>{let o=0,n=e.length-1;for(;o<n&&!t(e[o+1]-e[o],r);)o+=1;for(;n>o&&!t(e[n]-e[n-1],r);)n-=1;if(!(o>=n))return[e[o],e[n]]})(a,o,2*s/magnitude(t));if(void 0===c)return;const i=c.map((e=>n(e)?e:e<.5?0:1));if(Math.abs(i[0]-i[1])<2*s/magnitude(t))return;const l=linePointFromParameter(t,r,(i[0]+i[1])/2);return overlapConvexPolygonPoint(e,l,o,s)?i.map((e=>linePointFromParameter(t,r,e))):void 0},clipPolygonPolygon:(e,t,r=I)=>{let o,n,s,a;const inside=e=>(n[0]-o[0])*(e[1]-o[1])>(n[1]-o[1])*(e[0]-o[0])+r,intersection=()=>{const e=[o[0]-n[0],o[1]-n[1]],t=[s[0]-a[0],s[1]-a[1]],r=o[0]*n[1]-o[1]*n[0],c=s[0]*a[1]-s[1]*a[0],i=1/(e[0]*t[1]-e[1]*t[0]);return[(r*t[0]-c*e[0])*i,(r*t[1]-c*e[1])*i]};let c=e;o=t[t.length-1];for(let e in t){n=t[e];const r=c;c=[],s=r[r.length-1];for(let e in r)a=r[e],inside(a)?(inside(s)||c.push(intersection()),c.push(a)):inside(s)&&c.push(intersection()),s=a;o=n}return 0===c.length?void 0:c},splitConvexPolygon:(e,t,r)=>{const o=e.map(((e,o)=>({point:overlapLinePoint(t,r,e,R)?e:null,at_index:o}))).filter((e=>null!=e.point)),n=e.map(((e,o,n)=>({point:intersectLineLine(t,r,subtract(e,n[(o+1)%n.length]),n[(o+1)%n.length],D,excludeS),at_index:o}))).filter((e=>null!=e.point));if(2===n.length){const t=n.slice().sort(((e,t)=>e.at_index-t.at_index)),r=e.slice(t[1].at_index+1).concat(e.slice(0,t[0].at_index+1));r.push(t[0].point),r.push(t[1].point);const o=e.slice(t[0].at_index+1,t[1].at_index+1);return o.push(t[1].point),o.push(t[0].point),[r,o]}if(1===n.length&&1===o.length){o[0].type="v",n[0].type="e";const t=o.concat(n).sort(((e,t)=>e.at_index-t.at_index)),r=e.slice(t[1].at_index+1).concat(e.slice(0,t[0].at_index+1));"e"===t[0].type&&r.push(t[0].point),r.push(t[1].point);const s=e.slice(t[0].at_index+1,t[1].at_index+1);return"e"===t[1].type&&s.push(t[1].point),s.push(t[0].point),[r,s]}if(2===o.length){const t=o.slice().sort(((e,t)=>e.at_index-t.at_index));return[e.slice(t[1].at_index).concat(e.slice(0,t[0].at_index+1)),e.slice(t[0].at_index,t[1].at_index+1)]}return[e.slice()]},straightSkeleton:e=>{const t=e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>({vector:subtract(e[1],e[0]),origin:e[0]}))),r=e.map(((e,t,r)=>[(t-1+r.length)%r.length,t,(t+1)%r.length].map((e=>r[e])))).map((e=>[subtract(e[0],e[1]),subtract(e[2],e[1])])).map((e=>clockwiseBisect2(...e)));return recurseSkeleton([...e],t,r)}},ue=Object.freeze({__proto__:null,collinearBetween:(e,t,r,o=!1,n=I)=>{if([e,r].map((e=>fnEpsilonEqualVectors(t,e))).reduce(((e,t)=>e||t),!1))return o;const s=[[e,t],[t,r]].map((e=>subtract(e[1],e[0]))).map((e=>normalize(e)));return fnEpsilonEqual(1,dot(...s),n)}}),ge=Object.freeze({__proto__:null,enclosingBoundingBoxes:(e,t)=>{const r=Math.min(e.min.length,t.min.length);for(let o=0;o<r;o+=1)if(t.min[o]<e.min[o]||t.max[o]>e.max[o])return!1;return!0},enclosingPolygonPolygon:(e,t,r=include)=>{const o=e.map((e=>overlapConvexPolygonPoint(t,e,r))).reduce(((e,t)=>e||t),!1),n=t.map((e=>overlapConvexPolygonPoint(t,e,r))).reduce(((e,t)=>e&&t),!0);return!o&&n}}),typeOf=function(e){switch(e.constructor.name){case"vector":case"matrix":case"segment":case"ray":case"line":case"circle":case"ellipse":case"rect":case"polygon":return e.constructor.name}if("object"==typeof e){if(null!=e.radius)return"circle";if(null!=e.width)return"rect";if(null!=e.x||"number"==typeof e[0])return"vector";if(null!=e[0]&&e[0].length&&("number"==typeof e[0].x||"number"==typeof e[0][0]))return"segment";if(null!=e.vector&&null!=e.origin)return"line"}},rotateVector2=(e,t,r)=>{const o=t[0]-e[0],n=t[1]-e[1],s=o*Math.cos(r)+n*Math.sin(r),a=n*Math.cos(r)-o*Math.sin(r);return[e[0]+s,e[1]+a]},intersectCircleCircle=(e,t,r,o,n=I)=>{const s=e<r?e:r,a=e<r?r:e,c=e<r?t:o,i=e<r?o:t,l=[c[0]-i[0],c[1]-i[1]],d=Math.sqrt(l[0]**2+l[1]**2);if(d<n)return;const m=l.map(((e,t)=>e/d*a+i[t]));if(Math.abs(a+s-d)<n||Math.abs(a-(s+d))<n)return[m];if(d+s<a||a+s<d)return;const p=(u=(s*s-d*d-a*a)/(-2*d*a))>=1?0:u<=-1?Math.PI:Math.acos(u);var u;return[rotateVector2(i,m,+p),rotateVector2(i,m,-p)]},intersectCircleLine=(e,t,r,o,n=R,s=I)=>{const a=r[0]**2+r[1]**2,c=Math.sqrt(a),i=0===c?r:r.map((e=>e/c)),l=rotate90(i),d=subtract(o,t),m=cross2(d,i);if(Math.abs(m)>e+s)return;const p=Math.sqrt(e**2-m**2),f=(e,r)=>t[r]-l[r]*m+i[r]*e,u=Math.abs(e-Math.abs(m))<s?[p].map((e=>[e,e].map(f))):[-p,p].map((e=>[e,e].map(f))),g=u.map((e=>e.map(((e,t)=>e-o[t])))).map((e=>e[0]*r[0]+r[1]*e[1])).map((e=>e/a));return u.filter(((e,t)=>n(g[t],s)))},getUniquePair=e=>{for(let t=1;t<e.length;t+=1)if(!fnEpsilonEqualVectors(e[0],e[t]))return[e[0],e[t]]},intersectConvexPolygonLineInclusive=(e,t,r,o=includeS,n=R,s=I)=>{const a=e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>intersectLineLine(subtract(e[1],e[0]),e[0],t,r,o,n,s))).filter((e=>void 0!==e));switch(a.length){case 0:return;case 1:return[a];default:return getUniquePair(a)||[a[0]]}},intersectConvexPolygonLine=(e,t,r,o=includeS,n=D,s=I)=>{const a=intersectConvexPolygonLineInclusive(e,t,r,o,n,s);let c;switch(n){case G:c=W;break;case excludeS:c=includeS;break;default:return a}const i=intersectConvexPolygonLineInclusive(e,t,r,includeS,c,s);if(void 0===i)return;const l=getUniquePair(i);if(void 0===l)switch(n){case G:return overlapConvexPolygonPoint(e,r,exclude,s)?i:void 0;case excludeS:return overlapConvexPolygonPoint(e,add(r,t),exclude,s)||overlapConvexPolygonPoint(e,r,exclude,s)?i:void 0;default:return}return overlapConvexPolygonPoint(e,midpoint(...l),exclude,s)?l:a},ve={polygon:e=>[e],rect:e=>[e],circle:e=>[e.radius,e.origin],line:e=>[e.vector,e.origin],ray:e=>[e.vector,e.origin],segment:e=>[e.vector,e.origin]},he={polygon:{line:(e,t,r,o,n)=>intersectConvexPolygonLine(...e,...t,includeS,o,n),ray:(e,t,r,o,n)=>intersectConvexPolygonLine(...e,...t,includeS,o,n),segment:(e,t,r,o,n)=>intersectConvexPolygonLine(...e,...t,includeS,o,n)},circle:{circle:(e,t,r,o,n)=>intersectCircleCircle(...e,...t,n),line:(e,t,r,o,n)=>intersectCircleLine(...e,...t,o,n),ray:(e,t,r,o,n)=>intersectCircleLine(...e,...t,o,n),segment:(e,t,r,o,n)=>intersectCircleLine(...e,...t,o,n)},line:{polygon:(e,t,r,o,n)=>intersectConvexPolygonLine(...t,...e,includeS,r,n),circle:(e,t,r,o,n)=>intersectCircleLine(...t,...e,r,n),line:(e,t,r,o,n)=>intersectLineLine(...e,...t,r,o,n),ray:(e,t,r,o,n)=>intersectLineLine(...e,...t,r,o,n),segment:(e,t,r,o,n)=>intersectLineLine(...e,...t,r,o,n)},ray:{polygon:(e,t,r,o,n)=>intersectConvexPolygonLine(...t,...e,includeS,r,n),circle:(e,t,r,o,n)=>intersectCircleLine(...t,...e,r,n),line:(e,t,r,o,n)=>intersectLineLine(...t,...e,o,r,n),ray:(e,t,r,o,n)=>intersectLineLine(...e,...t,r,o,n),segment:(e,t,r,o,n)=>intersectLineLine(...e,...t,r,o,n)},segment:{polygon:(e,t,r,o,n)=>intersectConvexPolygonLine(...t,...e,includeS,r,n),circle:(e,t,r,o,n)=>intersectCircleLine(...t,...e,r,n),line:(e,t,r,o,n)=>intersectLineLine(...t,...e,o,r,n),ray:(e,t,r,o,n)=>intersectLineLine(...t,...e,o,r,n),segment:(e,t,r,o,n)=>intersectLineLine(...e,...t,r,o,n)}},_e={polygon:"polygon",rect:"polygon",circle:"circle",line:"line",ray:"ray",segment:"segment"},ye={polygon:exclude,rect:exclude,circle:exclude,line:D,ray:G,segment:excludeS},overlapConvexPolygons=(e,t,r=I)=>{for(let o=0;o<2;o+=1){const n=0===o?e:t,s=0===o?t:e;for(let e=0;e<n.length;e+=1){const t=n[e],o=rotate90(subtract(n[(e+1)%n.length],n[e])),a=s.map((e=>subtract(e,t))).map((e=>dot(o,e))),c=n[(e+2)%n.length],i=dot(o,subtract(c,t))>0;if(a.map((e=>i?e<r:e>-r)).reduce(((e,t)=>e&&t),!0))return!1}}return!0},overlapCirclePoint=(e,t,r,o=exclude,n=I)=>o(e-distance2(t,r),n),overlapLineLine=(e,t,r,o,n=D,s=D,a=I)=>{const c=cross2(e,r),i=-c,l=[o[0]-t[0],o[1]-t[1]];if(Math.abs(c)<a){if(Math.abs(cross2(l,e))>a)return!1;const t=l,o=add(t,r),n=dot(e,e),s=dot(t,e)/n,c=dot(o,e)/n;return!((s<c?s:c)>1-a)&&!((s<c?c:s)<a)}const d=[-l[0],-l[1]],m=cross2(l,r)/c,p=cross2(d,e)/i;return n(m,a/magnitude(e))&&s(p,a/magnitude(r))},be={polygon:e=>[e],rect:e=>[e],circle:e=>[e.radius,e.origin],line:e=>[e.vector,e.origin],ray:e=>[e.vector,e.origin],segment:e=>[e.vector,e.origin],vector:e=>[e]},Ee={polygon:{polygon:(e,t,r,o,n)=>overlapConvexPolygons(...e,...t,n),vector:(e,t,r,o,n)=>overlapConvexPolygonPoint(...e,...t,r,n)},circle:{vector:(e,t,r,o,n)=>overlapCirclePoint(...e,...t,exclude,n)},line:{line:(e,t,r,o,n)=>overlapLineLine(...e,...t,r,o,n),ray:(e,t,r,o,n)=>overlapLineLine(...e,...t,r,o,n),segment:(e,t,r,o,n)=>overlapLineLine(...e,...t,r,o,n),vector:(e,t,r,o,n)=>overlapLinePoint(...e,...t,r,n)},ray:{line:(e,t,r,o,n)=>overlapLineLine(...t,...e,o,r,n),ray:(e,t,r,o,n)=>overlapLineLine(...e,...t,r,o,n),segment:(e,t,r,o,n)=>overlapLineLine(...e,...t,r,o,n),vector:(e,t,r,o,n)=>overlapLinePoint(...e,...t,r,n)},segment:{line:(e,t,r,o,n)=>overlapLineLine(...t,...e,o,r,n),ray:(e,t,r,o,n)=>overlapLineLine(...t,...e,o,r,n),segment:(e,t,r,o,n)=>overlapLineLine(...e,...t,r,o,n),vector:(e,t,r,o,n)=>overlapLinePoint(...e,...t,r,n)},vector:{polygon:(e,t,r,o,n)=>overlapConvexPolygonPoint(...t,...e,o,n),circle:(e,t,r,o,n)=>overlapCirclePoint(...t,...e,exclude,n),line:(e,t,r,o,n)=>overlapLinePoint(...t,...e,o,n),ray:(e,t,r,o,n)=>overlapLinePoint(...t,...e,o,n),segment:(e,t,r,o,n)=>overlapLinePoint(...t,...e,o,n),vector:(e,t,r,o,n)=>fnEpsilonEqualVectors(...e,...t,n)}},xe={polygon:"polygon",rect:"polygon",circle:"circle",line:"line",ray:"ray",segment:"segment",vector:"vector"},ke={polygon:exclude,rect:exclude,circle:exclude,line:D,ray:G,segment:excludeS,vector:D},Ae={...ue,...ge,intersect:function(e,t,r){const o=typeOf(e),n=typeOf(t),s=_e[o],a=_e[n],c=ve[o](e),i=ve[n](t),l=e.domain_function||ye[o],d=t.domain_function||ye[n];return he[s][a](c,i,l,d,r)},overlap:function(e,t,r){const o=typeOf(e),n=typeOf(t),s=xe[o],a=xe[n],c=be[o](e),i=be[n](t),l=e.domain_function||ke[o],d=t.domain_function||ke[n];return Ee[s][a](c,i,l,d,r)},intersectConvexPolygonLine:intersectConvexPolygonLine,intersectCircleCircle:intersectCircleCircle,intersectCircleLine:intersectCircleLine,intersectLineLine:intersectLineLine,overlapConvexPolygons:overlapConvexPolygons,overlapConvexPolygonPoint:overlapConvexPolygonPoint,overlapBoundingBoxes:(e,t)=>{const r=Math.min(e.min.length,t.min.length);for(let o=0;o<r;o+=1)if(e.min[o]>t.max[o]||e.max[o]<t.min[o])return!1;return!0},overlapLineLine:overlapLineLine,overlapLinePoint:overlapLinePoint},Oe=Object.freeze({__proto__:null,rayLineToUniqueLine:({vector:e,origin:t})=>{const r=magnitude(e),o=rotate90(e),n=dot(t,o)/r;return{normal:scale(o,1/r),distance:n}},uniqueLineToRayLine:({normal:e,distance:t})=>({vector:rotate270(e),origin:scale(e,t)})}),we={...ce,...pe,...Ae,...{...J,...Oe,typeOf:typeOf}},vertex_degree=function(e,t){const r=this;Object.defineProperty(e,"degree",{get:()=>r.vertices_vertices&&r.vertices_vertices[t]?r.vertices_vertices[t].length:null})},edge_coords=function(e,t){const r=this;Object.defineProperty(e,"coords",{get:()=>{if(r.edges_vertices&&r.edges_vertices[t]&&r.vertices_coords)return r.edges_vertices[t].map((e=>r.vertices_coords[e]))}})},face_simple=function(e,t){const r=this;Object.defineProperty(e,"simple",{get:()=>{if(!r.faces_vertices||!r.faces_vertices[t])return null;for(let o=0;o<e.length-1;o+=1)for(let n=o+1;n<e.length;n+=1)if(r.faces_vertices[t][o]===r.faces_vertices[t][n])return!1;return!0}})},face_coords=function(e,t){const r=this;Object.defineProperty(e,"coords",{get:()=>{if(r.faces_vertices&&r.faces_vertices[t]&&r.vertices_coords)return r.faces_vertices[t].map((e=>r.vertices_coords[e]))}})};var Me={vertices:function(e,t){return vertex_degree.call(this,e,t),e},edges:function(e,t){return edge_coords.call(this,e,t),e},faces:function(e,t){return face_simple.call(this,e,t),face_coords.call(this,e,t),e}};const je={file:["file_spec","file_creator","file_author","file_title","file_description","file_classes","file_frames"],frame:["frame_author","frame_title","frame_description","frame_attributes","frame_classes","frame_unit","frame_parent","frame_inherit"],graph:["vertices_coords","vertices_vertices","vertices_faces","edges_vertices","edges_faces","edges_assignment","edges_foldAngle","edges_length","faces_vertices","faces_edges","vertices_edges","edges_edges","faces_faces"],orders:["edgeOrders","faceOrders"]};var Pe=Object.freeze({__proto__:null,foldKeys:je,foldFileClasses:["singleModel","multiModel","animation","diagrams"],foldFrameClasses:["creasePattern","foldedForm","graph","linkage"],foldFrameAttributes:["2D","3D","abstract","manifold","nonManifold","orientable","nonOrientable","selfTouching","nonSelfTouching","selfIntersecting","nonSelfIntersecting"]});const Se={vertices:"vertex",edges:"edge",faces:"face"},Ce=Array.from("BbMmVvFfJjUu"),ze={b:"boundary",m:"mountain",v:"valley",f:"flat",j:"join",u:"unassigned"};Object.keys(ze).forEach((e=>{ze[e.toUpperCase()]=ze[e]}));const Fe={M:-180,m:-180,V:180,v:180,B:0,b:0,F:0,f:0,J:0,j:0,U:0,u:0},edgeAssignmentToFoldAngle=e=>Fe[e]||0,edgeFoldAngleToAssignment=e=>e>we.EPSILON?"V":e<-we.EPSILON?"M":"U",edgeFoldAngleIsFlat=e=>we.fnEpsilonEqual(0,e)||we.fnEpsilonEqual(-180,e)||we.fnEpsilonEqual(180,e),edgesFoldAngleAreAllFlat=({edges_foldAngle:e})=>{if(!e)return!0;for(let t=0;t<e.length;t+=1)if(!edgeFoldAngleIsFlat(e[t]))return!1;return!0},filterKeysWithSuffix=(e,t)=>Object.keys(e).map((e=>e.substring(e.length-t.length,e.length)===t?e:void 0)).filter((e=>void 0!==e)),filterKeysWithPrefix=(e,t)=>Object.keys(e).map((e=>e.substring(0,t.length)===t?e:void 0)).filter((e=>void 0!==e)),getGraphKeysWithPrefix=(e,t)=>filterKeysWithPrefix(e,`${t}_`),getGraphKeysWithSuffix=(e,t)=>filterKeysWithSuffix(e,`_${t}`),transposeGraphArrays=(e,t)=>{const r=getGraphKeysWithPrefix(e,t);if(0===r.length)return[];const o=Math.max(...r.map((t=>e[t].length))),n=Array.from(Array(o)).map((()=>({})));return r.forEach((t=>n.forEach(((r,o)=>{n[o][t]=e[t][o]})))),n},Le=Object.freeze([].concat(je.file).concat(je.frame).concat(je.graph).concat(je.orders)),isFoldObject=(e={})=>0===Object.keys(e).length?0:Le.filter((t=>e[t])).length/Object.keys(e).length;var Ne=Object.freeze({__proto__:null,singularize:Se,pluralize:{vertex:"vertices",edge:"edges",face:"faces"},edgesAssignmentValues:Ce,edgesAssignmentNames:ze,edgeAssignmentToFoldAngle:edgeAssignmentToFoldAngle,edgeFoldAngleToAssignment:edgeFoldAngleToAssignment,edgeFoldAngleIsFlat:edgeFoldAngleIsFlat,edgesFoldAngleAreAllFlat:edgesFoldAngleAreAllFlat,filterKeysWithSuffix:filterKeysWithSuffix,filterKeysWithPrefix:filterKeysWithPrefix,getGraphKeysWithPrefix:getGraphKeysWithPrefix,getGraphKeysWithSuffix:getGraphKeysWithSuffix,transposeGraphArrays:transposeGraphArrays,transposeGraphArrayAtIndex:(e,t,r)=>{const o=getGraphKeysWithPrefix(e,t);if(0===o.length)return;const n={};return o.forEach((t=>{n[t]=e[t][r]})),n},isFoldObject:isFoldObject});const verticesClusters=({vertices_coords:e},t=we.EPSILON)=>{if(!e)return[];const r=[],o=[],n=e.map(((e,t)=>({i:t,d:e[0]}))).sort(((e,t)=>e.d-t.d)).map((e=>e.i));let s=0,a=[0,0],c=[0,0];const updateRange=r=>{const o=r[r.length-1];for(;e[o]-e[r[s]]>t;)s+=1;const n=r.slice(s,r.length).map((t=>e[t])),i=n.map((e=>e[1]));a=[Math.min(...i)-t,Math.max(...i)+t],c=[n[0][0]-t,n[n.length-1][0]+t]};for(;o.length!==e.length;){const t=[],l=n.shift();t.push(l),o.push(l),s=0,updateRange(t);let d=0;for(;d<n.length&&e[n[d]][0]<c[1];)if(i=n[d],e[i][0]>c[0]&&e[i][0]<c[1]&&e[i][1]>a[0]&&e[i][1]<a[1]){const e=n.splice(d,1).shift();t.push(e),o.push(e),updateRange(t)}else d+=1;r.push(t)}var i;return r},max_arrays_length=(...e)=>Math.max(0,...e.filter((e=>void 0!==e)).map((e=>e.length))),count=(e,t)=>max_arrays_length(...getGraphKeysWithPrefix(e,t).map((t=>e[t])));count.vertices=({vertices_coords:e,vertices_faces:t,vertices_vertices:r})=>max_arrays_length(e,t,r),count.edges=({edges_vertices:e,edges_edges:t,edges_faces:r})=>max_arrays_length(e,t,r),count.faces=({faces_vertices:e,faces_edges:t,faces_faces:r})=>max_arrays_length(e,t,r);const uniqueElements=e=>Array.from(new Set(e)),nonUniqueElements=e=>{const t={};return e.forEach((e=>{void 0===t[e]&&(t[e]=0),t[e]+=1})),e.filter((e=>t[e]>1))},uniqueSortedNumbers=e=>uniqueElements(e).sort(((e,t)=>e-t)),splitCircularArray=(e,t)=>(t.sort(((e,t)=>e-t)),[e.slice(t[1]).concat(e.slice(0,t[0]+1)),e.slice(t[0],t[1]+1)]),booleanMatrixToIndexedArray=e=>e.map((e=>e.map(((e,t)=>!0===e?t:void 0)).filter((e=>void 0!==e)))),booleanMatrixToUniqueIndexPairs=e=>{const t=[];for(let r=0;r<e.length-1;r+=1)for(let o=r+1;o<e.length;o+=1)e[r][o]&&t.push([r,o]);return t},selfRelationalUniqueIndexPairs=e=>{const t=[],r=[];return e.forEach(((e,o)=>e.forEach((e=>{o<e&&r.push([o,e]),o!==e||t[o]||(t[o]=!0,r.push([o,e]))})))),r},clusterScalars=(e,t=we.EPSILON)=>{const r=e.map(((e,t)=>({v:e,i:t}))).sort(((e,t)=>e.v-t.v)).map((e=>e.i)),o=[[r[0]]];for(let n=1;n<r.length;n+=1){const s=r[n],a=o.length-1,c=o[a][o[a].length-1];Math.abs(e[c]-e[s])<t?o[a].push(s):o.push([s])}return o},chooseTwoPairs=e=>{const t=Array(e.length*(e.length-1)/2);let r=0;for(let o=0;o<e.length-1;o+=1)for(let n=o+1;n<e.length;n+=1,r+=1)t[r]=[e[o],e[n]];return t};var Ve=Object.freeze({__proto__:null,uniqueElements:uniqueElements,nonUniqueElements:nonUniqueElements,uniqueSortedNumbers:uniqueSortedNumbers,splitCircularArray:splitCircularArray,booleanMatrixToIndexedArray:booleanMatrixToIndexedArray,booleanMatrixToUniqueIndexPairs:booleanMatrixToUniqueIndexPairs,selfRelationalUniqueIndexPairs:selfRelationalUniqueIndexPairs,clusterScalars:clusterScalars,chooseTwoPairs:chooseTwoPairs});const removeGeometryIndices=(e,t,r)=>{const o=count(e,t),n=uniqueSortedNumbers(r),s=[];for(let e=0,t=0,r=0;e<o;e+=1,t+=1){for(;e===n[r];)s[e]=void 0,e+=1,r+=1;e<o&&(s[e]=t)}return getGraphKeysWithSuffix(e,t).forEach((t=>e[t].forEach(((r,o)=>e[t][o].forEach(((r,n)=>{e[t][o][n]=s[r]})))))),n.reverse(),getGraphKeysWithPrefix(e,t).forEach((t=>n.forEach((r=>e[t].splice(r,1))))),s},replaceGeometryIndices=(e,t,r)=>{const o=count(e,t);let n=!1;Object.entries(r).filter((([e,t])=>e<t)).forEach((([e,t])=>{n=!0,delete r[e],r[t]=e})),n&&console.warn(P);const s=Object.keys(r).map((e=>parseInt(e,10))),a=uniqueSortedNumbers(s),c=[];for(let e=0,t=0,n=0;e<o;e+=1,t+=1){for(;e===a[n];){if(c[e]=c[r[a[n]]],void 0===c[e])throw new Error(S);e+=1,n+=1}e<o&&(c[e]=t)}return getGraphKeysWithSuffix(e,t).forEach((t=>e[t].forEach(((r,o)=>e[t][o].forEach(((r,n)=>{e[t][o][n]=c[r]})))))),a.reverse(),getGraphKeysWithPrefix(e,t).forEach((t=>a.forEach((r=>e[t].splice(r,1))))),c},duplicateVertices=(e,t)=>verticesClusters(e,t).filter((e=>e.length>1)),isolatedVertices=({vertices_coords:e,edges_vertices:t,faces_vertices:r})=>{if(!e)return[];let o=e.length;const n=Array(o).fill(!1);return t&&t.forEach((e=>{e.filter((e=>!n[e])).forEach((e=>{n[e]=!0,o-=1}))})),r&&r.forEach((e=>{e.filter((e=>!n[e])).forEach((e=>{n[e]=!0,o-=1}))})),n.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))},removeIsolatedVertices=(e,t)=>(t||(t=isolatedVertices(e)),{map:removeGeometryIndices(e,n,t),remove:t}),removeDuplicateVertices=(e,t=we.EPSILON)=>{const r=[],o=[],s=verticesClusters(e,t).filter((e=>e.length>1));return s.forEach((e=>{Math.min(...e)!==e[0]&&e.sort(((e,t)=>e-t));for(let t=1;t<e.length;t+=1)r[e[t]]=e[0],o.push(e[t])})),s.map((t=>t.map((t=>e.vertices_coords[t])))).map((e=>we.average(...e))).forEach(((t,r)=>{e.vertices_coords[s[r][0]]=t})),{map:replaceGeometryIndices(e,n,r),remove:o}};var $e=Object.freeze({__proto__:null,duplicateVertices:duplicateVertices,edgeIsolatedVertices:({vertices_coords:e,edges_vertices:t})=>{if(!e||!t)return[];let r=e.length;const o=Array(r).fill(!1);return t.forEach((e=>{e.filter((e=>!o[e])).forEach((e=>{o[e]=!0,r-=1}))})),o.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))},faceIsolatedVertices:({vertices_coords:e,faces_vertices:t})=>{if(!e||!t)return[];let r=e.length;const o=Array(r).fill(!1);return t.forEach((e=>{e.filter((e=>!o[e])).forEach((e=>{o[e]=!0,r-=1}))})),o.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))},isolatedVertices:isolatedVertices,removeIsolatedVertices:removeIsolatedVertices,removeDuplicateVertices:removeDuplicateVertices});const Ie={edges:"edgeOrders",faces:"faceOrders"},countImplied=(e,t)=>Math.max((e=>{let t=-1;return e.filter((e=>void 0!==e)).forEach((e=>e.forEach((e=>e.forEach((e=>{e>t&&(t=e)})))))),t})(getGraphKeysWithSuffix(e,t).map((t=>e[t]))),e[Ie[t]]?(e=>{let t=-1;return e.forEach((e=>{e[0]>t&&(t=e[0]),e[1]>t&&(t=e[1])})),t})(e[Ie[t]]):-1)+1;countImplied.vertices=e=>countImplied(e,n),countImplied.edges=e=>countImplied(e,s),countImplied.faces=e=>countImplied(e,a);const counterClockwiseWalk=({vertices_vertices:e,vertices_sectors:t},r,o,n={})=>{const s={},a={vertices:[r],edges:[],angles:[]};let c=r,i=o;for(;;){const r=e[i],o=(r.indexOf(c)+r.length-1)%r.length,l=r[o],d=`${i} ${l}`;if(s[d])return Object.assign(n,s),a.vertices.pop(),a;if(s[d]=!0,n[d])return;a.vertices.push(i),a.edges.push(d),t&&a.angles.push(t[i][o]),c=i,i=l}},planarVertexWalk=({vertices_vertices:e,vertices_sectors:t})=>{const r={vertices_vertices:e,vertices_sectors:t},o={};return e.map(((e,t)=>e.map((e=>counterClockwiseWalk(r,t,e,o))).filter((e=>void 0!==e)))).flat()},filterWalkedBoundaryFace=e=>e.filter((e=>e.angles.map((e=>Math.PI-e)).reduce(((e,t)=>e+t),0)>0));var Te=Object.freeze({__proto__:null,counterClockwiseWalk:counterClockwiseWalk,planarVertexWalk:planarVertexWalk,filterWalkedBoundaryFace:filterWalkedBoundaryFace});const sortVerticesCounterClockwise=({vertices_coords:e},t,r)=>t.map((t=>e[t])).map((t=>we.subtract(t,e[r]))).map((e=>Math.atan2(e[1],e[0]))).map((e=>e>-we.EPSILON?e:e+2*Math.PI)).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).map((e=>e.i)).map((e=>t[e])),sortVerticesAlongVector=({vertices_coords:e},t,r)=>t.map((t=>({i:t,d:we.dot(e[t],r)}))).sort(((e,t)=>e.d-t.d)).map((e=>e.i));var Be=Object.freeze({__proto__:null,sortVerticesCounterClockwise:sortVerticesCounterClockwise,sortVerticesAlongVector:sortVerticesAlongVector});const makeFacesNormal=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))).map((e=>{const t=we.resize(3,we.subtract(e[1],e[0])),r=we.resize(3,we.subtract(e[2],e[0]));return we.normalize3(we.cross3(t,r))})),makeVerticesNormal=({vertices_coords:e,faces_vertices:t,faces_normal:r})=>{r||(r=makeFacesNormal({vertices_coords:e,faces_vertices:t}));const o=e.map((()=>[0,0,0]));return t.forEach(((e,t)=>e.forEach((e=>{return n=o[e],s=r[t],n[0]+=s[0],n[1]+=s[1],void(n[2]+=s[2]);var n,s})))),o.map((e=>we.normalize3(e)))};var qe=Object.freeze({__proto__:null,makeFacesNormal:makeFacesNormal,makeVerticesNormal:makeVerticesNormal});const makeVerticesEdgesUnsorted=({edges_vertices:e})=>{const t=[];return e.forEach(((e,r)=>e.forEach((e=>{void 0===t[e]&&(t[e]=[]),t[e].push(r)})))),t},makeVerticesEdges=({edges_vertices:e,vertices_vertices:t})=>{const r=makeVerticesToEdgeBidirectional({edges_vertices:e});return t.map(((e,t)=>e.map((e=>r[`${t} ${e}`]))))},makeVerticesVertices2D=({vertices_coords:e,vertices_edges:t,edges_vertices:r})=>{t||(t=makeVerticesEdgesUnsorted({edges_vertices:r}));const o=t.map(((e,t)=>e.map((e=>r[e].filter((e=>e!==t)))).reduce(((e,t)=>e.concat(t)),[])));return void 0===e?o:o.map(((t,r)=>sortVerticesCounterClockwise({vertices_coords:e},t,r)))},makeVerticesVerticesFromFaces=({vertices_coords:e,vertices_faces:t,faces_vertices:r})=>{t||(t=makeVerticesFacesUnsorted({vertices_coords:e,faces_vertices:r}));const o=t.map((e=>e.map((e=>r[e])))),n=o.map(((e,t)=>e.map((e=>e.indexOf(t)))));return o.map(((e,t)=>e.map(((e,r)=>[(n[t][r]+e.length-1)%e.length,n[t][r],(n[t][r]+1)%e.length])))).map(((e,t)=>e.map(((e,r)=>e.map((e=>o[t][r][e])))))).map((e=>{const t=e.map((e=>[[0,1],[1,2]].map((t=>t.map((t=>e[t])).join(" "))))),r={},o={};return t.forEach(((e,t)=>{r[e[0]]=t,o[e[1]]=t})),{facesVerts:t,to:o,from:r}})).map((e=>{const t=Object.keys(e.to),r=t.map((e=>e.split(" ").reverse().join(" "))),o=t.filter(((t,o)=>!(r[o]in e.from)));if(o.length>2)return console.warn("vertices_vertices found an unsolvable vertex"),[];const n=o.length?o:[t[0]],s=[],a={};for(let t=0;t<n.length;t+=1){const r=n[t],o=[r];a[r]=!0;let c=!1;do{const t=o[o.length-1],r=e.to[t];if(!(r in e.facesVerts))break;let n;if(e.facesVerts[r][0]===t&&(n=e.facesVerts[r][1]),e.facesVerts[r][1]===t&&(n=e.facesVerts[r][0]),void 0===n)return"not found";const s=n.split(" ").reverse().join(" ");o.push(n),c=s in a,c||o.push(s),a[n]=!0,a[s]=!0}while(!c);const i=o.filter(((e,t)=>t%2==0)).map((e=>e.split(" ")[1])).map((e=>parseInt(e,10)));s.push(...i)}return s}))},makeVerticesVertices=e=>e.vertices_coords&&e.vertices_coords.length?3===e.vertices_coords[0].length?makeVerticesVerticesFromFaces(e):makeVerticesVertices2D(e):[],makeVerticesVerticesUnsorted=({vertices_edges:e,edges_vertices:t})=>(e||(e=makeVerticesEdgesUnsorted({edges_vertices:t})),e.map(((e,r)=>e.flatMap((e=>t[e].filter((e=>e!==r))))))),makeVerticesFacesUnsorted=({vertices_coords:e,faces_vertices:t})=>{if(!t)return e.map((()=>[]));const r=void 0!==e?e.map((()=>[])):Array.from(Array(countImplied.vertices({faces_vertices:t}))).map((()=>[]));return t.forEach(((e,t)=>{const o=[];e.forEach((e=>{o[e]=t})),o.forEach(((e,t)=>r[t].push(e)))})),r},makeVerticesFaces=({vertices_coords:e,vertices_vertices:t,faces_vertices:r})=>{if(!r)return e.map((()=>[]));if(!t)return makeVerticesFacesUnsorted({vertices_coords:e,faces_vertices:r});const o=makeVerticesToFace({faces_vertices:r});return t.map(((e,t)=>e.map(((e,r,o)=>[o[(r+1)%o.length],t,e].join(" "))))).map((e=>e.map((e=>o[e]))))},makeVerticesToEdgeBidirectional=({edges_vertices:e})=>{const t={};return e.map((e=>e.join(" "))).forEach(((e,r)=>{t[e]=r})),e.map((e=>`${e[1]} ${e[0]}`)).forEach(((e,r)=>{t[e]=r})),t},makeVerticesToEdge=({edges_vertices:e})=>{const t={};return e.map((e=>e.join(" "))).forEach(((e,r)=>{t[e]=r})),t},makeVerticesToFace=({faces_vertices:e})=>{const t={};return e.forEach(((e,r)=>e.map(((t,r)=>[0,1,2].map((t=>(r+t)%e.length)).map((t=>e[t])).join(" "))).forEach((e=>{t[e]=r})))),t},makeVerticesVerticesVector=({vertices_coords:e,vertices_vertices:t,edges_vertices:r,edges_vector:o})=>{o||(o=makeEdgesVector({vertices_coords:e,edges_vertices:r}));const n=makeVerticesToEdge({edges_vertices:r});return t.map(((e,r)=>t[r].map((e=>{const t=n[`${r} ${e}`],s=n[`${e} ${r}`];return void 0!==t?o[t]:void 0!==s?we.flip(o[s]):void 0}))))},makeVerticesSectors=({vertices_coords:e,vertices_vertices:t,edges_vertices:r,edges_vector:o})=>makeVerticesVerticesVector({vertices_coords:e,vertices_vertices:t,edges_vertices:r,edges_vector:o}).map((e=>1===e.length?[we.TWO_PI]:we.counterClockwiseSectors2(e))),makeEdgesFacesUnsorted=({edges_vertices:e,faces_edges:t})=>{const r=void 0!==e?e.map((()=>[])):Array.from(Array(countImplied.edges({faces_edges:t}))).map((()=>[]));return t.forEach(((e,t)=>{const o=[];e.forEach((e=>{o[e]=t})),o.forEach(((e,t)=>r[t].push(e)))})),r},makeEdgesFaces=({vertices_coords:e,edges_vertices:t,edges_vector:r,faces_vertices:o,faces_edges:n,faces_center:s})=>{if(!t)return makeEdgesFacesUnsorted({faces_edges:n});r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const a=t.map((t=>e[t[0]]));s||(s=makeFacesConvexCenter({vertices_coords:e,faces_vertices:o}));const c=t.map((()=>[]));return n.forEach(((e,t)=>{const r=[];e.forEach((e=>{r[e]=t})),r.forEach(((e,t)=>c[t].push(e)))})),c.forEach(((e,t)=>{const o=e.map((e=>s[e])).map((e=>we.subtract2(e,a[t]))).map((e=>we.cross2(e,r[t])));e.sort(((e,t)=>o[e]-o[t]))})),c},Ue={M:-180,m:-180,V:180,v:180},makeEdgesAssignmentSimple=({edges_foldAngle:e})=>e.map((e=>0===e?"F":e<0?"M":"V")),makeEdgesAssignment=({edges_vertices:e,edges_foldAngle:t,edges_faces:r,faces_vertices:o,faces_edges:n})=>(r||(n||(n=makeFacesEdgesFromVertices({edges_vertices:e,faces_vertices:o})),r=makeEdgesFacesUnsorted({edges_vertices:e,faces_edges:n})),t.map(((e,t)=>r[t].length<2?"B":0===e?"F":e<0?"M":"V"))),makeEdgesFoldAngle=({edges_assignment:e})=>e.map((e=>Ue[e]||0)),makeEdgesFoldAngleFromFaces=({vertices_coords:e,edges_vertices:t,edges_faces:r,edges_assignment:o,faces_vertices:n,faces_edges:s,faces_normal:a,faces_center:c})=>(r||(s||(s=makeFacesEdgesFromVertices({edges_vertices:t,faces_vertices:n})),r=makeEdgesFacesUnsorted({edges_vertices:t,faces_edges:s})),a||(a=makeFacesNormal({vertices_coords:e,faces_vertices:n})),c||(c=makeFacesConvexCenter({vertices_coords:e,faces_vertices:n})),r.map(((e,t)=>{if(e.length>2)throw new Error(O);if(e.length<2)return 0;const r=a[e[0]],n=a[e[1]],s=we.normalize(we.subtract(c[e[1]],c[e[0]]));let i=Math.sign(we.dot(r,s));if(0===i){if(!o||!o[t])throw new Error(C);"F"!==o[t]&&"F"!==o[t]||(i=0),"M"!==o[t]&&"m"!==o[t]||(i=-1),"V"!==o[t]&&"v"!==o[t]||(i=1)}return Math.acos(we.dot(r,n))*(180/Math.PI)*i}))),makeEdgesCoords=({vertices_coords:e,edges_vertices:t})=>t.map((t=>t.map((t=>e[t])))),makeEdgesVector=({vertices_coords:e,edges_vertices:t})=>makeEdgesCoords({vertices_coords:e,edges_vertices:t}).map((e=>we.subtract(e[1],e[0]))),makeEdgesLength=({vertices_coords:e,edges_vertices:t})=>makeEdgesVector({vertices_coords:e,edges_vertices:t}).map((e=>we.magnitude(e))),makeEdgesBoundingBox=({vertices_coords:e,edges_vertices:t,edges_coords:r},o=0)=>(r||(r=makeEdgesCoords({vertices_coords:e,edges_vertices:t})),r.map((e=>we.boundingBox(e,o)))),makePlanarFaces=({vertices_coords:e,vertices_vertices:t,vertices_edges:r,vertices_sectors:o,edges_vertices:n,edges_vector:s})=>{t||(t=makeVerticesVertices({vertices_coords:e,edges_vertices:n,vertices_edges:r})),o||(o=makeVerticesSectors({vertices_coords:e,vertices_vertices:t,edges_vertices:n,edges_vector:s}));const a=makeVerticesToEdgeBidirectional({edges_vertices:n});return filterWalkedBoundaryFace(planarVertexWalk({vertices_vertices:t,vertices_sectors:o})).map((e=>({...e,edges:e.edges.map((e=>a[e]))})))},makeFacesVerticesFromEdges=e=>e.faces_edges.map((t=>t.map((t=>e.edges_vertices[t])).map(((e,t,r)=>{const o=r[(t+1)%r.length];return e[0]===o[0]||e[0]===o[1]?e[1]:e[0]})))),makeFacesEdgesFromVertices=e=>{const t=makeVerticesToEdgeBidirectional(e);return e.faces_vertices.map((e=>e.map(((e,t,r)=>[e,r[(t+1)%r.length]].join(" "))))).map((e=>e.map((e=>t[e]))))},makeFacesFaces=({faces_vertices:e})=>{const t=e.map((()=>[])),r={};return e.forEach(((e,t)=>e.forEach(((o,n,s)=>{let a=s[(n+1)%e.length];a<o&&([o,a]=[a,o]);const c=`${o} ${a}`;void 0===r[c]&&(r[c]={}),r[c][t]=!0})))),Object.values(r).map((e=>Object.keys(e))).filter((e=>e.length>1)).forEach((e=>{t[e[0]].push(parseInt(e[1],10)),t[e[1]].push(parseInt(e[0],10))})),t},makeFacesPolygon=({vertices_coords:e,faces_vertices:t},r)=>t.map((t=>t.map((t=>e[t])))).map((e=>we.makePolygonNonCollinear(e,r))),makeFacesConvexCenter=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])).reduce(((e,t)=>we.add(e,t)),Array(e[0].length).fill(0)).map((e=>e/t.length))));var Re=Object.freeze({__proto__:null,makeVerticesEdgesUnsorted:makeVerticesEdgesUnsorted,makeVerticesEdges:makeVerticesEdges,makeVerticesVertices2D:makeVerticesVertices2D,makeVerticesVerticesFromFaces:makeVerticesVerticesFromFaces,makeVerticesVertices:makeVerticesVertices,makeVerticesVerticesUnsorted:makeVerticesVerticesUnsorted,makeVerticesFacesUnsorted:makeVerticesFacesUnsorted,makeVerticesFaces:makeVerticesFaces,makeVerticesToEdgeBidirectional:makeVerticesToEdgeBidirectional,makeVerticesToEdge:makeVerticesToEdge,makeVerticesToFace:makeVerticesToFace,makeVerticesVerticesVector:makeVerticesVerticesVector,makeVerticesSectors:makeVerticesSectors,makeEdgesEdges:({edges_vertices:e,vertices_edges:t})=>e.map(((e,r)=>{const o=t[e[0]].filter((e=>e!==r)),n=t[e[1]].filter((e=>e!==r));return o.concat(n)})),makeEdgesFacesUnsorted:makeEdgesFacesUnsorted,makeEdgesFaces:makeEdgesFaces,makeEdgesAssignmentSimple:makeEdgesAssignmentSimple,makeEdgesAssignment:makeEdgesAssignment,makeEdgesFoldAngle:makeEdgesFoldAngle,makeEdgesFoldAngleFromFaces:makeEdgesFoldAngleFromFaces,makeEdgesCoords:makeEdgesCoords,makeEdgesVector:makeEdgesVector,makeEdgesLength:makeEdgesLength,makeEdgesBoundingBox:makeEdgesBoundingBox,makePlanarFaces:makePlanarFaces,makeFacesVerticesFromEdges:makeFacesVerticesFromEdges,makeFacesEdgesFromVertices:makeFacesEdgesFromVertices,makeFacesFaces:makeFacesFaces,makeFacesPolygon:makeFacesPolygon,makeFacesPolygonQuick:({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))),makeFacesCenter2D:({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])))).map((e=>we.centroid(e))),makeFacesConvexCenter:makeFacesConvexCenter});const circularEdges=({edges_vertices:e})=>{if(!e)return[];const t=[];for(let r=0;r<e.length;r+=1)e[r][0]===e[r][1]&&t.push(r);return t},duplicateEdges=({edges_vertices:e})=>{if(!e)return[];const t=[],r={};for(let o=0;o<e.length;o+=1){const n=`${e[o][0]} ${e[o][1]}`,s=`${e[o][1]} ${e[o][0]}`;void 0!==r[n]?t[o]=r[n]:(r[n]=o,r[s]=o)}return t},removeCircularEdges=(e,t)=>(t||(t=circularEdges(e)),t.length&&((e,t,r)=>{const o={};r.forEach((e=>{o[e]=!0})),getGraphKeysWithSuffix(e,t).forEach((t=>e[t].forEach(((r,n)=>{for(let s=r.length-1;s>=0;s-=1)!0===o[r[s]]&&e[t][n].splice(s,1)}))))})(e,s,t),{map:removeGeometryIndices(e,s,t),remove:t}),removeDuplicateEdges=(e,t)=>{t||(t=duplicateEdges(e));const r=Object.keys(t).map((e=>parseInt(e,10))),o=replaceGeometryIndices(e,s,t);return r.length&&(e.vertices_edges||e.vertices_vertices||e.vertices_faces)&&(e.vertices_edges=makeVerticesEdgesUnsorted(e),e.vertices_vertices=makeVerticesVertices(e),e.vertices_edges=makeVerticesEdges(e),e.vertices_faces=makeVerticesFaces(e)),{map:o,remove:r}};var De=Object.freeze({__proto__:null,circularEdges:circularEdges,duplicateEdges:duplicateEdges,removeCircularEdges:removeCircularEdges,removeDuplicateEdges:removeDuplicateEdges});const mergeSimpleNextmaps=(...e)=>{if(0===e.length)return[];const t=e[0].map(((e,t)=>t));return e.forEach((e=>t.forEach(((r,o)=>{t[o]=e[r]})))),t},mergeNextmaps=(...e)=>{if(0===e.length)return[];const t=e[0].map(((e,t)=>[t]));return e.forEach((e=>{t.forEach(((r,o)=>r.forEach(((r,n)=>{t[o][n]=e[r]})))),t.forEach(((e,r)=>{t[r]=e.reduce(((e,t)=>e.concat(t)),[]).filter((e=>void 0!==e))}))})),t},mergeBackmaps=(...e)=>{if(0===e.length)return[];let r=e[0].reduce(((e,t)=>e.concat(t)),[]).map(((e,t)=>[t]));return e.forEach((e=>{const o=[];e.forEach(((e,n)=>{o[n]=typeof e===t?r[e]:e.map((e=>r[e])).reduce(((e,t)=>e.concat(t)),[])})),r=o})),r},invertMap=e=>{const r=[],setIndexValue=(e,o)=>{void 0!==r[e]?typeof r[e]===t?r[e]=[r[e],o]:r[e].push(o):r[e]=o};return e.forEach(((e,r)=>{null!=e&&(typeof e===t&&setIndexValue(e,r),e.constructor===Array&&e.forEach((e=>setIndexValue(e,r))))})),r},invertSimpleMap=e=>{const t=[];return e.forEach(((e,r)=>{t[e]=r})),t};var We=Object.freeze({__proto__:null,mergeSimpleNextmaps:mergeSimpleNextmaps,mergeNextmaps:mergeNextmaps,mergeSimpleBackmaps:(...e)=>{if(0===e.length)return[];let t=e[0].map(((e,t)=>t));return e.forEach((e=>{const r=e.map((e=>t[e]));t=r})),t},mergeBackmaps:mergeBackmaps,invertMap:invertMap,invertSimpleMap:invertSimpleMap});const clean=(e,t)=>{const r=removeDuplicateVertices(e,t),o=removeCircularEdges(e),n=removeDuplicateEdges(e),s=removeIsolatedVertices(e),a=invertSimpleMap(r.map),c=s.remove.map((e=>a[e])),i=invertSimpleMap(o.map),l=n.remove.map((e=>i[e]));return{vertices:{map:mergeSimpleNextmaps(r.map,s.map),remove:r.remove.concat(c)},edges:{map:mergeSimpleNextmaps(o.map,n.map),remove:o.remove.concat(l)}}},validate=(e,t)=>{const r=duplicateEdges(e),o=circularEdges(e),n=isolatedVertices(e),s=duplicateVertices(e,t),a=(e=>{const t=count.vertices(e),r=count.edges(e),o=count.faces(e);return{vertices:t>=countImplied.vertices(e),edges:r>=countImplied.edges(e),faces:o>=countImplied.faces(e)}})(e);return{summary:0===r.length&&0===o.length&&0===n.length&&a.vertices&&a.edges&&a.faces?"valid":"problematic",vertices:{isolated:n,duplicate:s,references:a.vertices},edges:{circular:o,duplicate:r,references:a.edges},faces:{references:a.faces}}},populate=(e,t)=>"object"!=typeof e?e:e.edges_vertices?(e.vertices_edges=makeVerticesEdgesUnsorted(e),e.vertices_vertices=makeVerticesVertices(e),e.vertices_edges=makeVerticesEdges(e),(e=>{const t=e.edges_vertices.length;if(e.edges_assignment||(e.edges_assignment=[]),e.edges_foldAngle||(e.edges_foldAngle=[]),e.edges_assignment.length>e.edges_foldAngle.length)for(let t=e.edges_foldAngle.length;t<e.edges_assignment.length;t+=1)e.edges_foldAngle[t]=edgeAssignmentToFoldAngle(e.edges_assignment[t]);if(e.edges_foldAngle.length>e.edges_assignment.length)for(let t=e.edges_assignment.length;t<e.edges_foldAngle.length;t+=1)e.edges_assignment[t]=edgeFoldAngleToAssignment(e.edges_foldAngle[t]);for(let r=e.edges_assignment.length;r<t;r+=1)e.edges_assignment[r]="U",e.edges_foldAngle[r]=0})(e),((e,t)=>{if(void 0!==t||e.faces_vertices||e.faces_edges||(t=!0),t&&e.vertices_coords){const t=makePlanarFaces(e);return e.faces_vertices=t.map((e=>e.vertices)),void(e.faces_edges=t.map((e=>e.edges)))}e.faces_vertices&&e.faces_edges||(e.faces_vertices&&!e.faces_edges?e.faces_edges=makeFacesEdgesFromVertices(e):e.faces_edges&&!e.faces_vertices?e.faces_vertices=makeFacesVerticesFromEdges(e):(e.faces_vertices=[],e.faces_edges=[]))})(e,t),e.vertices_faces=makeVerticesFaces(e),e.edges_faces=makeEdgesFacesUnsorted(e),e.faces_faces=makeFacesFaces(e),e):e,getEdgesVerticesOverlappingSpan=(e,t=we.EPSILON)=>makeEdgesBoundingBox(e,t).map((t=>e.vertices_coords.map((e=>e[0]>t.min[0]&&e[1]>t.min[1]&&e[0]<t.max[0]&&e[1]<t.max[1])))),getEdgesEdgesOverlapingSpans=({vertices_coords:e,edges_vertices:t,edges_coords:r},o=we.EPSILON)=>{const n=makeEdgesBoundingBox({vertices_coords:e,edges_vertices:t,edges_coords:r},o),s=t.map((()=>[]));for(let e=0;e<t.length-1;e+=1)for(let r=e+1;r<t.length;r+=1){const t=(n[e].max[0]<n[r].min[0]||n[r].max[0]<n[e].min[0])&&(n[e].max[1]<n[r].min[1]||n[r].max[1]<n[e].min[1]);s[e][r]=!t,s[r][e]=!t}for(let e=0;e<t.length;e+=1)s[e][e]=!0;return s};var Ge=Object.freeze({__proto__:null,getEdgesVerticesOverlappingSpan:getEdgesVerticesOverlappingSpan,getEdgesEdgesOverlapingSpans:getEdgesEdgesOverlapingSpans});const getOppositeVertices=({edges_vertices:e},t,r)=>(r.forEach((r=>{if(e[r][0]===t&&e[r][1]===t)throw new Error(j)})),r.map((r=>e[r][0]===t?e[r][1]:e[r][0]))),isVertexCollinear=({vertices_coords:e,vertices_edges:t,edges_vertices:r},o,n=we.EPSILON)=>{if(!e||!r)return!1;t||(t=makeVerticesEdgesUnsorted({edges_vertices:r}));const s=t[o];if(void 0===s||2!==s.length)return!1;const a=getOppositeVertices({edges_vertices:r},o,s),c=[a[0],o,a[1]].map((t=>e[t]));return we.collinearBetween(...c,!1,n)},getVerticesEdgesOverlap=({vertices_coords:e,edges_vertices:t,edges_coords:r},o=we.EPSILON)=>{r||(r=t.map((t=>t.map((t=>e[t])))));const n=getEdgesVerticesOverlappingSpan({vertices_coords:e,edges_vertices:t,edges_coords:r},o);for(let t=0;t<r.length;t+=1)for(let s=0;s<e.length;s+=1)n[t][s]&&(n[t][s]=we.overlapLinePoint(we.subtract(r[t][1],r[t][0]),r[t][0],e[s],we.excludeS,o));return n.map((e=>e.map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e))))};var Ze=Object.freeze({__proto__:null,isVertexCollinear:isVertexCollinear,getVerticesEdgesOverlap:getVerticesEdgesOverlap});const makeEdgesLineParallelOverlap=({vertices_coords:e,edges_vertices:t},r,o,n=we.EPSILON)=>{const s=we.normalize2(r),a=t.map((t=>e[t[0]])),c=t.map((t=>t.map((t=>e[t])))).map((e=>we.subtract2(e[1],e[0]))).map((e=>we.parallel2(e,r,n)));for(let e=0;e<t.length;e+=1){if(!c[e])continue;if(we.fnEpsilonEqualVectors(a[e],o)){c[e]=!0;continue}const t=we.normalize2(we.subtract2(a[e],o)),r=Math.abs(we.dot2(t,s));c[e]=Math.abs(1-r)<n}return c},makeEdgesSegmentIntersection=({vertices_coords:e,edges_vertices:t,edges_coords:r},o,n,s=we.EPSILON)=>{r||(r=makeEdgesCoords({vertices_coords:e,edges_vertices:t}));const a=we.boundingBox([o,n],s),c=we.subtract2(n,o);return makeEdgesBoundingBox({vertices_coords:e,edges_vertices:t,edges_coords:r},s).map((e=>we.overlapBoundingBoxes(a,e))).map(((e,t)=>e?we.intersectLineLine(c,o,we.subtract2(r[t][1],r[t][0]),r[t][0],we.includeS,we.includeS,s):void 0))},makeEdgesEdgesIntersection=function({vertices_coords:e,edges_vertices:t,edges_vector:r,edges_origin:o},n=we.EPSILON){r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t})),o||(o=t.map((t=>e[t[0]])));const s=r.map((()=>[])),a=getEdgesEdgesOverlapingSpans({vertices_coords:e,edges_vertices:t},n);for(let e=0;e<r.length-1;e+=1)for(let t=e+1;t<r.length;t+=1){if(!0!==a[e][t])continue;const c=we.intersectLineLine(r[e],o[e],r[t],o[t],we.excludeS,we.excludeS,n);void 0!==c&&(s[e][t]=c,s[t][e]=c)}return s},intersectConvexFaceLine=({vertices_coords:e,edges_vertices:t,faces_vertices:r,faces_edges:o},n,s,a,c=we.EPSILON)=>{const i=r[n].map((t=>e[t])).map((e=>we.overlapLinePoint(s,a,e,(()=>!0),c))).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)),l=i.map((e=>r[n][e]));if(i.concat(i.map((e=>e+r[n].length))).map(((e,t,r)=>r[t+1]-e==1)).reduce(((e,t)=>e||t),!1))return;if(l.length>1)return{vertices:l,edges:[]};const d=o[n].map((r=>t[r].map((t=>e[t])))).map((e=>we.intersectLineLine(s,a,we.subtract(e[1],e[0]),e[0],we.includeL,we.excludeS,c))).map(((e,t)=>({coords:e,edge:o[n][t]}))).filter((e=>void 0!==e.coords)).filter((e=>!l.map((r=>t[e.edge].includes(r))).reduce(((e,t)=>e||t),!1)));return d.length+l.length===2?{vertices:l,edges:d}:void 0};var Ye=Object.freeze({__proto__:null,makeEdgesLineParallelOverlap:makeEdgesLineParallelOverlap,makeEdgesSegmentIntersection:makeEdgesSegmentIntersection,makeEdgesEdgesIntersection:makeEdgesEdgesIntersection,intersectConvexFaceLine:intersectConvexFaceLine});const fragment_graph=(e,t=we.EPSILON)=>{const r=e.edges_vertices.map((t=>t.map((t=>e.vertices_coords[t])))),o=r.map((e=>we.subtract(e[1],e[0]))),n=r.map((e=>e[0])),s=makeEdgesEdgesIntersection({vertices_coords:e.vertices_coords,edges_vertices:e.edges_vertices,edges_vector:o,edges_origin:n},1e-6),a=getVerticesEdgesOverlap({vertices_coords:e.vertices_coords,edges_vertices:e.edges_vertices,edges_coords:r},t);if(0===s.flat().filter((e=>void 0!==e)).length&&0===a.flat().filter((e=>void 0!==e)).length)return;const c=e.vertices_coords.length;s.forEach((t=>t.filter((e=>void 0!==e)).filter((e=>2===e.length)).forEach((t=>{const r=e.vertices_coords.length;e.vertices_coords.push([...t]),t.splice(0,2),t.push(r)})))),s.forEach(((e,t)=>{e.forEach(((e,r)=>{e&&(s[t][r]=e[0])}))}));const i=s.map((e=>e.filter((e=>void 0!==e))));e.edges_vertices.forEach(((e,t)=>e.push(...i[t],...a[t]))),e.edges_vertices.forEach(((t,r)=>{e.edges_vertices[r]=sortVerticesAlongVector({vertices_coords:e.vertices_coords},t,o[r])}));const l=e.edges_vertices.map(((e,t)=>Array(e.length-1).fill(t))).flat();if(e.edges_vertices=e.edges_vertices.map((e=>Array.from(Array(e.length-1)).map(((t,r,o)=>[e[r],e[r+1]])))).flat(),e.edges_assignment&&e.edges_foldAngle&&e.edges_foldAngle.length>e.edges_assignment.length)for(let t=e.edges_assignment.length;t<e.edges_foldAngle.length;t+=1)e.edges_assignment[t]=edgeFoldAngleToAssignment(e.edges_foldAngle[t]);return e.edges_assignment&&(e.edges_assignment=l.map((t=>e.edges_assignment[t]||"U"))),e.edges_foldAngle&&(e.edges_foldAngle=l.map((t=>e.edges_foldAngle[t])).map(((t,r)=>void 0===t?edgeAssignmentToFoldAngle(e.edges_assignment[r]):t))),{vertices:{new:Array.from(Array(e.vertices_coords.length-c)).map(((e,t)=>c+t))},edges:{backmap:l}}},Je=[i,l,m,p],fragment=(e,t=we.EPSILON)=>{e.vertices_coords=e.vertices_coords.map((e=>e.slice(0,2))),[n,s,a].map((t=>getGraphKeysWithPrefix(e,t))).flat().filter((e=>!Je.includes(e))).forEach((t=>delete e[t]));const r={vertices:{},edges:{}};let o;for(o=0;o<20;o+=1){const o=removeDuplicateVertices(e,t/2),n=removeDuplicateEdges(e),s=removeCircularEdges(e),a=fragment_graph(e,t);if(void 0===a){r.vertices.map=void 0===r.vertices.map?o.map:mergeNextmaps(r.vertices.map,o.map),r.edges.map=void 0===r.edges.map?mergeNextmaps(n.map,s.map):mergeNextmaps(r.edges.map,n.map,s.map);break}const c=invertMap(a.edges.backmap),i=mergeNextmaps(n.map,s.map,c);r.vertices.map=void 0===r.vertices.map?o.map:mergeNextmaps(r.vertices.map,o.map),r.edges.map=void 0===r.edges.map?i:mergeNextmaps(r.edges.map,i)}if(20===o)throw new Error(A);return r},boundingBox=({vertices_coords:e},t)=>we.boundingBox(e,t),boundaryVertices=({edges_vertices:e,edges_assignment:t})=>uniqueElements(e.filter(((e,r)=>"B"===t[r]||"b"===t[r])).flat()),boundary=({vertices_edges:e,edges_vertices:t,edges_assignment:r})=>{if(void 0===r)return{vertices:[],edges:[]};e||(e=makeVerticesEdgesUnsorted({edges_vertices:t}));const o=r.map((e=>"B"===e||"b"===e)),n=[],s=[];let a=-1;for(let e=0;e<o.length;e+=1)if(o[e]){a=e;break}if(-1===a)return{vertices:[],edges:[]};o[a]=!1,n.push(a),s.push(t[a][0]);let c=t[a][1];for(;s[0]!==c;){if(s.push(c),a=e[c].filter((e=>o[e])).shift(),void 0===a)return{vertices:[],edges:[]};t[a][0]===c?[,c]=t[a]:[c]=t[a],o[a]=!1,n.push(a)}return{vertices:s,edges:n}},planarBoundary=({vertices_coords:e,vertices_edges:t,vertices_vertices:r,edges_vertices:o},n=!0)=>{r||(r=makeVerticesVertices({vertices_coords:e,vertices_edges:t,edges_vertices:o}));const s=makeVerticesToEdgeBidirectional({edges_vertices:o}),a=[],c=[],i={vertices:c,edges:a};let l=-1/0,d=-1;if(e.forEach(((e,t)=>{e[0]>l&&(l=e[0],d=t)})),-1===d)return i;c.push(d);const m=e[d],p=r[d],u=p.map((t=>e[t])).map((e=>[e[0]-m[0],e[1]-m[1]])).map((e=>Math.atan2(e[1],e[0]))).map((e=>e<0?e+2*Math.PI:e)).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a)).shift().i,g=p[u],v=s[d<g?`${d} ${g}`:`${g} ${d}`];a.push(v);let h=d,_=g;const y=performance.now();let b=0;for(;;){const e=r[_],t=e.indexOf(h),o=e[(t+1)%e.length],l=s[_<o?`${_} ${o}`:`${o} ${_}`];if(l===a[0])return i;if(c.push(_),a.push(l),h=_,_=o,b+=1,n&&b%1e3==0&&performance.now()-y>1e4)throw new Error(M)}};var He=Object.freeze({__proto__:null,boundingBox:boundingBox,boundaryVertices:boundaryVertices,boundary:boundary,planarBoundary:planarBoundary});const apply_matrix_to_graph=function(e,t){return filterKeysWithSuffix(e,"coords").forEach((r=>{e[r]=e[r].map((e=>we.resize(3,e))).map((e=>we.multiplyMatrix3Vector3(t,e)))})),filterKeysWithSuffix(e,"matrix").forEach((r=>{e[r]=e[r].map((e=>we.multiplyMatrices3(e,t)))})),e};var Xe={scale:(e,...t)=>{const r=1===t.length?[t[0],t[0],t[0]]:[1,1,1].map(((e,r)=>void 0===t[r]?e:t[r])),o=we.makeMatrix3Scale(r);return apply_matrix_to_graph(e,o)},translate:(e,...t)=>{const r=we.getVector(...t),o=we.resize(3,r),n=we.makeMatrix3Translate(...o);return apply_matrix_to_graph(e,n)},rotateZ:(e,t,...r)=>{const o=we.getVector(...r),n=we.resize(3,o),s=we.makeMatrix3RotateZ(t,...n);return apply_matrix_to_graph(e,s)},transform:apply_matrix_to_graph};const getFaceFaceSharedVertices=(e,t)=>{const r={};t.forEach((e=>{r[e]=!0}));const o=e.map((e=>!!r[e])),n=[],s=o.indexOf(!1),a={};for(let t=s+1;t<o.length;t+=1)o[t]&&!a[e[t]]&&(n.push(e[t]),a[e[t]]=!0);for(let t=0;t<s;t+=1)o[t]&&!a[e[t]]&&(n.push(e[t]),a[e[t]]=!0);return n},makeFaceSpanningTree=({faces_vertices:e,faces_faces:t},r=0)=>{if(t||(t=makeFacesFaces({faces_vertices:e})),0===t.length)return[];const o=[[{face:r}]],n={};n[r]=!0;do{const r=o[o.length-1].map((e=>t[e.face].map((t=>({face:t,parent:e.face}))))).reduce(((e,t)=>e.concat(t)),[]),s={};r.forEach(((e,t)=>{n[e.face]&&(s[t]=!0),n[e.face]=!0}));const a=r.filter(((e,t)=>!s[t]));a.map((t=>getFaceFaceSharedVertices(e[t.face],e[t.parent]))).forEach(((e,t)=>{const r=e.slice(0,2);a[t].edge_vertices=r})),o[o.length]=a}while(o[o.length-1].length>0);return o.length>0&&0===o[o.length-1].length&&o.pop(),o};var Ke=Object.freeze({__proto__:null,getFaceFaceSharedVertices:getFaceFaceSharedVertices,makeFaceSpanningTree:makeFaceSpanningTree});const multiplyVerticesFacesMatrix2=({vertices_coords:e,vertices_faces:t,faces_vertices:r},o)=>{t||(t=makeVerticesFaces({faces_vertices:r}));const n=t.map((e=>e.filter((e=>null!=e)).shift())).map((e=>void 0===e?we.identity2x3:o[e]));return e.map(((e,t)=>we.multiplyMatrix2Vector2(n[t],e)))},Qe={U:!0,u:!0},makeFacesMatrix=({vertices_coords:e,edges_vertices:t,edges_foldAngle:r,edges_assignment:o,faces_vertices:n,faces_faces:s},a=0)=>{!o&&r&&(o=makeEdgesAssignmentSimple({edges_foldAngle:r})),r||(r=o?makeEdgesFoldAngle({edges_assignment:o}):Array(t.length).fill(0));const c=makeVerticesToEdgeBidirectional({edges_vertices:t}),i=n.map((()=>we.identity3x4));return makeFaceSpanningTree({faces_vertices:n,faces_faces:s},a).slice(1).forEach((t=>t.forEach((t=>{const n=t.edge_vertices.map((t=>e[t])),s=t.edge_vertices.join(" "),a=c[s],l=Qe[o[a]]?Math.PI:r[a]*Math.PI/180,d=we.makeMatrix3Rotate(l,we.subtract(...we.resizeUp(n[1],n[0])),n[0]);i[t.face]=we.multiplyMatrices3(i[t.parent],d)})))),i},et={M:!0,m:!0,V:!0,v:!0,U:!0,u:!0,F:!1,f:!1,B:!1,b:!1},makeEdgesIsFolded=({edges_vertices:e,edges_foldAngle:t,edges_assignment:r})=>void 0===r?void 0===t?e.map((()=>!0)):t.map((e=>e<-we.EPSILON||e>we.EPSILON)):r.map((e=>et[e])),makeFacesMatrix2=({vertices_coords:e,edges_vertices:t,edges_foldAngle:r,edges_assignment:o,faces_vertices:n,faces_faces:s},a=0)=>{r||(r=o?makeEdgesFoldAngle({edges_assignment:o}):Array(t.length).fill(0));const c=makeEdgesIsFolded({edges_vertices:t,edges_foldAngle:r,edges_assignment:o}),i=makeVerticesToEdgeBidirectional({edges_vertices:t}),l=n.map((()=>we.identity2x3));return makeFaceSpanningTree({faces_vertices:n,faces_faces:s},a).slice(1).forEach((t=>t.forEach((t=>{const r=t.edge_vertices.map((t=>e[t])),o=t.edge_vertices.join(" "),n=i[o],s=we.subtract2(r[1],r[0]),a=r[0],d=c[n]?we.makeMatrix2Reflect(s,a):we.identity2x3;l[t.face]=we.multiplyMatrices2(l[t.parent],d)})))),l};var tt=Object.freeze({__proto__:null,multiplyVerticesFacesMatrix2:multiplyVerticesFacesMatrix2,makeFacesMatrix:makeFacesMatrix,makeEdgesIsFolded:makeEdgesIsFolded,makeFacesMatrix2:makeFacesMatrix2});const makeVerticesCoordsFolded=({vertices_coords:e,vertices_faces:t,edges_vertices:r,edges_foldAngle:o,edges_assignment:n,faces_vertices:s,faces_faces:a,faces_matrix:c},i)=>{c=makeFacesMatrix({vertices_coords:e,edges_vertices:r,edges_foldAngle:o,edges_assignment:n,faces_vertices:s,faces_faces:a},i),t||(t=makeVerticesFaces({faces_vertices:s}));const l=t.map((e=>e.filter((e=>null!=e)).shift())).map((e=>void 0===e?we.identity3x4:c[e]));return e.map((e=>we.resize(3,e))).map(((e,t)=>we.multiplyMatrix3Vector3(l[t],e)))},makeVerticesCoordsFlatFolded=({vertices_coords:e,edges_vertices:t,edges_foldAngle:r,edges_assignment:o,faces_vertices:n,faces_faces:s},a=0)=>{const c=makeEdgesIsFolded({edges_vertices:t,edges_foldAngle:r,edges_assignment:o}),i=[];n[a].forEach((t=>{i[t]=[...e[t]]}));const l=[];l[a]=!1;const d=makeVerticesToEdgeBidirectional({edges_vertices:t});return makeFaceSpanningTree({faces_vertices:n,faces_faces:s},a).slice(1).forEach((r=>r.forEach((r=>{const o=r.edge_vertices.join(" "),s=d[o],a=t[s].map((e=>i[e]));if(void 0===a[0]||void 0===a[1])return;const m=t[s].map((t=>e[t])),p=m[0],u=we.normalize2(we.subtract2(m[1],m[0])),g=we.rotate90(u);l[r.face]=c[s]?!l[r.parent]:l[r.parent];const v=we.normalize2(we.subtract2(a[1],a[0])),h=a[0],_=l[r.face]?we.rotate270(v):we.rotate90(v);n[r.face].filter((e=>void 0===i[e])).forEach((t=>{const r=we.subtract2(e[t],p),o=we.dot(r,g),n=we.dot(r,u),s=we.scale2(v,n),a=we.scale2(_,o),c=we.add2(we.add2(h,s),a);i[t]=c}))})))),i};var rt=Object.freeze({__proto__:null,makeVerticesCoordsFolded:makeVerticesCoordsFolded,makeVerticesCoordsFlatFolded:makeVerticesCoordsFlatFolded});const clone=function(e){let t,o;if(typeof e!==r)return e;if(!e)return e;if("[object Array]"===Object.prototype.toString.apply(e)){for(t=[],o=0;o<e.length;o+=1)t[o]=clone(e[o]);return t}for(o in t={},e)e.hasOwnProperty(o)&&(t[o]=clone(e[o]));return t},makeFacesWindingFromMatrix2=e=>e.map((e=>e[0]*e[3]-e[1]*e[2])).map((e=>e>=0)),makeFacesWinding=({vertices_coords:e,faces_vertices:t})=>t.map((t=>t.map((t=>e[t])).map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>(e[1][0]-e[0][0])*(e[1][1]+e[0][1]))).reduce(((e,t)=>e+t),0))).map((e=>e<0));var ot=Object.freeze({__proto__:null,makeFacesWindingFromMatrix:e=>e.map((e=>e[0]*e[4]-e[1]*e[3])).map((e=>e>=0)),makeFacesWindingFromMatrix2:makeFacesWindingFromMatrix2,makeFacesWinding:makeFacesWinding});const explode=e=>{if(!e.faces_vertices)return{};const t=e.faces_edges?e.faces_edges:makeFacesEdgesFromVertices(e),r=e.faces_vertices.flatMap((e=>e)),o=t.flatMap((e=>e));let n=0,s=0,a=0;return e.faces_vertices=e.faces_vertices.map((e=>e.map((()=>n++)))),e.faces_edges=e.faces_edges.map((e=>e.map((()=>s++)))),e.edges_vertices=e.faces_edges.flatMap((e=>e.map(((e,t,r)=>{const o=t===r.length-1?[a,a+1-r.length]:[a,a+1];return a+=1,o})))),e.vertices_coords&&(e.vertices_coords=clone(r.map((t=>e.vertices_coords[t])))),e.edges_assignment&&(e.edges_assignment=clone(o.map((t=>e.edges_assignment[t])))),e.edges_foldAngle&&(e.edges_foldAngle=clone(o.map((t=>e.edges_foldAngle[t])))),e.vertices_vertices&&delete e.vertices_vertices,e.vertices_edges&&delete e.vertices_edges,e.vertices_faces&&delete e.vertices_faces,e.edges_edges&&delete e.edges_edges,e.edges_faces&&delete e.edges_faces,e.faces_faces&&delete e.faces_faces,{vertices:{map:r},edges:{map:o}}},explodeFaces=e=>{const t=e.faces_vertices.flatMap((t=>t.map((t=>e.vertices_coords[t]))));let r=0;const o=e.faces_vertices.map((e=>e.map((()=>r++))));return{vertices_coords:JSON.parse(JSON.stringify(t)),faces_vertices:o}},explodeShrinkFaces=({vertices_coords:e,faces_vertices:t},r=.333)=>{const o=explodeFaces({vertices_coords:e,faces_vertices:t}),n=makeFacesWinding(o),s=o.faces_vertices.map((e=>e.map((e=>o.vertices_coords[e])))).map((e=>e.map(((e,t,r)=>we.subtract2(e,r[(t+1)%r.length]))))),a=makeFacesConvexCenter({vertices_coords:e,faces_vertices:t}),c=t.map((t=>t.map((t=>e[t])))).map(((e,t)=>e.map((e=>we.distance2(e,a[t]))))),i=s.map(((e,t)=>e.map(((e,t,r)=>[e,we.flip(r[(t-1+r.length)%r.length])])).map((e=>n[t]?we.counterClockwiseBisect2(...e):we.clockwiseBisect2(...e))))).map(((e,t)=>e.map(((e,r)=>we.scale(e,c[t][r])))));return o.faces_vertices.forEach(((e,t)=>e.forEach(((e,n)=>{o.vertices_coords[e]=we.add2(o.vertices_coords[e],we.scale2(i[t][n],-r))})))),o};var nt=Object.freeze({__proto__:null,explode:explode,explodeFaces:explodeFaces,explodeShrinkFaces:explodeShrinkFaces});const nearestVertex=({vertices_coords:e},t)=>{if(!e)return;const r=we.resize(e[0].length,t),o=e.map(((e,t)=>({d:we.distance(r,e),i:t}))).sort(((e,t)=>e.d-t.d)).shift();return o?o.i:void 0},nearestEdge=({vertices_coords:e,edges_vertices:t},r)=>{if(!e||!t)return;const o=t.map((t=>t.map((t=>e[t])))).map((e=>we.nearestPointOnLine(we.subtract(e[1],e[0]),e[0],r,we.segmentLimiter)));return we.smallestComparisonSearch(r,o,we.distance)},faceContainingPoint=({vertices_coords:e,faces_vertices:t},r)=>{if(!e||!t)return;const o=t.map(((t,r)=>({face:t.map((t=>e[t])),i:r}))).filter((e=>we.overlapConvexPolygonPoint(e.face,r))).shift();return void 0===o?void 0:o.i},nearestFace=(e,t)=>{const r=faceContainingPoint(e,t);if(void 0!==r)return r;if(e.edges_faces){const r=nearestEdge(e,t),o=e.edges_faces[r];if(1===o.length)return o[0];if(o.length>1){const r=makeFacesConvexCenter({vertices_coords:e.vertices_coords,faces_vertices:o.map((t=>e.faces_vertices[t]))}).map((e=>we.distance(e,t)));let n=0;for(let e=0;e<r.length;e+=1)r[e]<r[n]&&(n=e);return o[n]}}};var st=Object.freeze({__proto__:null,nearestVertex:nearestVertex,nearestEdge:nearestEdge,faceContainingPoint:faceContainingPoint,nearestFace:nearestFace,nearest:(e,...t)=>{const r={vertices:nearestVertex,edges:nearestEdge,faces:nearestFace},o=we.getVector(...t),n=Object.create(null);return["vertices","edges","faces"].forEach((t=>{Object.defineProperty(n,Se[t],{enumerable:!0,get:()=>r[t](e,o)}),filterKeysWithPrefix(e,t).forEach((r=>Object.defineProperty(n,r,{enumerable:!0,get:()=>e[r][n[Se[t]]]})))})),n}});const addVertices=(e,t,r=we.EPSILON)=>{e.vertices_coords||(e.vertices_coords=[]),"number"==typeof t[0]&&(t=[t]);const o=t.map((t=>e.vertices_coords.map((e=>we.distance(e,t)<r)).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).shift()));let n=e.vertices_coords.length;const s=t.filter(((e,t)=>void 0===o[t]));return e.vertices_coords.push(...s),o.map((e=>void 0===e?n++:e))},splitEdge=(e,t,r,o=we.EPSILON)=>{if(e.edges_vertices.length<t)return{};const n=e.edges_vertices[t];r||(r=we.midpoint(...n));const a=n.map((t=>e.vertices_coords[t])).map((e=>we.distance(e,r)<o));if(a[0])return{vertex:n[0],edges:{}};if(a[1])return{vertex:n[1],edges:{}};const c=e.vertices_coords.length;e.vertices_coords[c]=r;const i=[0,1].map((t=>t+e.edges_vertices.length));((e,t,r)=>{const o=e.edges_vertices[t],n=[{edges_vertices:[o[0],r]},{edges_vertices:[r,o[1]]}];if(n.forEach((r=>[m,p].filter((r=>e[r]&&void 0!==e[r][t])).forEach((o=>{r[o]=e[o][t]})))),e.vertices_coords&&(e.edges_length||e.edges_vector)){const t=n.map((t=>t.edges_vertices.map((t=>e.vertices_coords[t]))));e.edges_vector&&n.forEach(((e,r)=>{e.edges_vector=we.subtract(t[r][1],t[r][0])})),e.edges_length&&n.forEach(((e,r)=>{e.edges_length=we.distance2(...t[r])}))}return n})(e,t,c).forEach(((t,r)=>Object.keys(t).forEach((o=>{e[o][i[r]]=t[o]})))),(({vertices_vertices:e},t,r)=>{e&&(e[t]=[...r],r.forEach(((r,o,n)=>{const s=n[(o+1)%n.length],a=e[r].indexOf(s);e[r][a]=t})))})(e,c,n),(({vertices_coords:e,vertices_vertices:t,vertices_sectors:r},o)=>{r&&(r[o]=1===t[o].length?[we.TWO_PI]:we.counterClockwiseSectors2(t[o].map((t=>we.subtract2(e[t],e[o])))))})(e,c),(({vertices_edges:e},t,r,o,n)=>{e&&(e[r]=[...n],o.map((r=>e[r].indexOf(t))).forEach(((t,r)=>{e[o[r]][t]=n[r]})))})(e,t,c,n,i);const l=(({vertices_faces:e,edges_vertices:t,edges_faces:r,faces_edges:o,faces_vertices:n},s)=>{if(r&&r[s])return r[s];const a=t[s];if(void 0!==e){const t=[];for(let r=0;r<e[a[0]].length;r+=1)for(let o=0;o<e[a[1]].length;o+=1)if(e[a[0]][r]===e[a[1]][o]){if(void 0===e[a[0]][r])continue;t.push(e[a[0]][r])}return t}if(o){const e=[];for(let t=0;t<o.length;t+=1)for(let r=0;r<o[t].length;r+=1)o[t][r]===s&&e.push(t);return e}n&&console.warn("todo: findAdjacentFacesToEdge")})(e,t);l&&((({vertices_faces:e},t,r)=>{e&&(e[t]=[...r])})(e,c,l),(({edges_faces:e},t,r)=>{e&&t.forEach((t=>{e[t]=[...r]}))})(e,i,l),(({faces_vertices:e},t,r,o)=>{e&&o.map((t=>e[t])).forEach((e=>e.map(((e,t,o)=>{const n=(t+1)%o.length;return e===r[0]&&o[n]===r[1]||e===r[1]&&o[n]===r[0]?n:void 0})).filter((e=>void 0!==e)).sort(((e,t)=>t-e)).forEach((r=>e.splice(r,0,t)))))})(e,c,n,l),(({edges_vertices:e,faces_vertices:t,faces_edges:r},o)=>{const n=makeVerticesToEdgeBidirectional({edges_vertices:e});o.map((e=>t[e].map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>n[e.join(" ")])))).forEach(((e,t)=>{r[o[t]]=e}))})(e,l));const d=removeGeometryIndices(e,s,[t]);return i.forEach(((e,t)=>{i[t]=d[i[t]]})),d.splice(-2),d[t]=i,{vertex:c,edges:{map:d,new:i,remove:t}}},rebuild_edge=(e,t,r)=>{const o=e.edges_vertices.length,n=(({vertices_coords:e},t,r)=>{const o=t.map((t=>e[t])).reverse();return{edges_vertices:[...t],edges_foldAngle:0,edges_assignment:"U",edges_length:we.distance2(...o),edges_vector:we.subtract(...o),edges_faces:[r,r]}})(e,r,t);return Object.keys(n).filter((t=>void 0!==e[t])).forEach((t=>{e[t][o]=n[t]})),o},build_faces=(e,t,r)=>{const o=[0,1].map((t=>e.faces_vertices.length+t));return(({edges_vertices:e,faces_vertices:t,faces_edges:r},o,n)=>{const s=n.map((e=>t[o].indexOf(e))),a=splitCircularArray(t[o],s).map((e=>({faces_vertices:e})));if(r){const t=makeVerticesToEdgeBidirectional({edges_vertices:e});a.map((e=>e.faces_vertices.map(((e,t,r)=>`${e} ${r[(t+1)%r.length]}`)).map((e=>t[e])))).forEach(((e,t)=>{a[t].faces_edges=e}))}return a})(e,t,r).forEach(((t,r)=>Object.keys(t).forEach((n=>{e[n][o[r]]=t[n]})))),o},splitFace=(e,t,r,o,n)=>{const s=intersectConvexFaceLine(e,t,r,o,n);if(void 0===s)return;const c=((e,{vertices:t,edges:r})=>{let o;const n=r.map((t=>{const r=splitEdge(e,o?o[t.edge]:t.edge,t.coords);return o=o?mergeNextmaps(o,r.edges.map):r.edges.map,r}));let s;return t.push(...n.map((e=>e.vertex))),n.forEach((e=>{e.edges.remove=s?s[e.edges.remove]:e.edges.remove;const t=invertSimpleMap(e.edges.map);s=s?mergeBackmaps(s,t):t})),{vertices:t,edges:{map:o,remove:n.map((e=>e.edges.remove))}}})(e,s);c.edges.new=rebuild_edge(e,t,c.vertices),(({vertices_coords:e,vertices_vertices:t,edges_vertices:r},o)=>{const n=r[o][0],s=r[o][1];t[n]=sortVerticesCounterClockwise({vertices_coords:e},t[n].concat(s),n),t[s]=sortVerticesCounterClockwise({vertices_coords:e},t[s].concat(n),s)})(e,c.edges.new),(({edges_vertices:e,vertices_edges:t,vertices_vertices:r},o)=>{if(!t||!r)return;const n=e[o];n.map((e=>r[e])).map(((e,t)=>e.indexOf(n[(t+1)%n.length]))).forEach(((e,r)=>t[n[r]].splice(e,0,o)))})(e,c.edges.new);const i=build_faces(e,t,c.vertices);((e,t,r)=>{const o={};r.forEach((t=>e.faces_vertices[t].forEach((e=>{o[e]||(o[e]=[]),o[e].push(t)})))),e.faces_vertices[t].forEach((r=>{const n=e.vertices_faces[r].indexOf(t),s=o[r];if(-1===n||!s)throw new Error(F);e.vertices_faces[r].splice(n,1,...s)}))})(e,t,i),((e,t,r,o)=>{const n={};o.forEach((t=>e.faces_edges[t].forEach((e=>{n[e]||(n[e]=[]),n[e].push(t)})))),[...e.faces_edges[t],r].forEach((r=>{const o=n[r],s=[];for(let o=0;o<e.edges_faces[r].length;o+=1)e.edges_faces[r][o]===t&&s.push(o);if(0===s.length||!o)throw new Error(F);s.reverse().forEach((t=>e.edges_faces[r].splice(t,1)));const a=s[s.length-1];e.edges_faces[r].splice(a,0,...o)}))})(e,t,c.edges.new,i),(({faces_vertices:e,faces_faces:t},r,o)=>{const n=t[r],s=o.map((t=>e[t])),a=n.map((t=>{const r=e[t],n=[0,0];for(let e=0;e<s.length;e+=1){let t=0;for(let o=0;o<r.length;o+=1)-1!==s[e].indexOf(r[o])&&(t+=1);n[e]=t}return n[0]>=2?o[0]:n[1]>=2?o[1]:void 0}));o.forEach(((e,r,n)=>{t[e]=[n[(r+1)%o.length]]})),n.forEach(((e,o)=>{for(let n=0;n<t[e].length;n+=1)t[e][n]===r&&(t[e][n]=a[o],t[a[o]].push(e))}))})(e,t,i);const l=removeGeometryIndices(e,a,[t]);return i.forEach(((e,t)=>{i[t]=l[i[t]]})),l.splice(-2),l[t]=i,c.faces={map:l,new:i,remove:t},c},at={};at.prototype=Object.create(Object.prototype),at.prototype.constructor=at;const ct={clean:clean,validate:validate,populate:populate,fragment:fragment,addVertices:addVertices,splitEdge:splitEdge,faceSpanningTree:makeFaceSpanningTree,explodeFaces:explodeFaces,explodeShrinkFaces:explodeShrinkFaces,...Xe};Object.keys(ct).forEach((e=>{at.prototype[e]=function(){return ct[e](this,...arguments)}})),at.prototype.splitFace=function(e,...t){const r=we.core.getLine(...t);return splitFace(this,e,r.vector,r.origin)},at.prototype.copy=function(){return Object.assign(Object.create(Object.getPrototypeOf(this)),clone(this))},at.prototype.clear=function(){return je.graph.forEach((e=>delete this[e])),je.orders.forEach((e=>delete this[e])),delete this.file_frames,this},at.prototype.boundingBox=function(){return we.rect.fromPoints(this.vertices_coords)},at.prototype.unitize=function(){if(!this.vertices_coords)return this;const e=we.core.bounding_box(this.vertices_coords),t=Math.max(...e.span),r=0===t?1:1/t,o=e.min;return this.vertices_coords=this.vertices_coords.map((e=>we.core.subtract(e,o))).map((e=>e.map((e=>e*r)))),this},at.prototype.folded=function(){const e=this.faces_matrix2?multiplyVerticesFacesMatrix2(this,this.faces_matrix2):makeVerticesCoordsFolded(this,...arguments);return Object.assign(Object.create(Object.getPrototypeOf(this)),Object.assign(clone(this),{vertices_coords:e,frame_classes:[_]}))},at.prototype.flatFolded=function(){const e=this.faces_matrix2?multiplyVerticesFacesMatrix2(this,this.faces_matrix2):makeVerticesCoordsFlatFolded(this,...arguments);return Object.assign(Object.create(Object.getPrototypeOf(this)),Object.assign(clone(this),{vertices_coords:e,frame_classes:[_]}))};const shortenKeys=function(e){const t=Object.create(null);return Object.keys(e).forEach((r=>{t[r.substring(this.length+1)]=e[r]})),t},getComponent=function(e){return transposeGraphArrays(this,e).map(shortenKeys.bind(e)).map(Me[e].bind(this))};[n,s,a].forEach((e=>Object.defineProperty(at.prototype,e,{enumerable:!0,get:function(){return getComponent.call(this,e)}}))),Object.defineProperty(at.prototype,g,{enumerable:!0,get:function(){const e=boundary(this),t=e.vertices.map((e=>this.vertices_coords[e]));return Object.keys(e).forEach((r=>{t[r]=e[r]})),Object.assign(t,e)}});const it={vertices:nearestVertex,edges:nearestEdge,faces:nearestFace};at.prototype.nearest=function(){const e=we.core.getVector(arguments),t=Object.create(null),r={};return[n,s,a].forEach((o=>{Object.defineProperty(t,Se[o],{enumerable:!0,get:()=>(void 0!==r[o]||(r[o]=it[o](this,e)),r[o])}),filterKeysWithPrefix(this,o).forEach((e=>Object.defineProperty(t,e,{enumerable:!0,get:()=>this[e][t[Se[o]]]})))})),t};var lt=at.prototype;const clip=function(e,t){const r=boundary(e).vertices.map((t=>e.vertices_coords[t])),o=t.vector?t.vector:we.subtract2(t[1],t[0]),n=t.origin?t.origin:t[0],s=t.domain_function?t.domain_function:we.includeL;return we.clipLineConvexPolygon(r,o,n,we.include,s)},addEdges=(e,t)=>{e.edges_vertices||(e.edges_vertices=[]),"number"==typeof t[0]&&(t=[t]);const r=t.map(((t,r)=>e.edges_vertices.length+r));e.edges_vertices.push(...t);const o=removeDuplicateEdges(e).map;return r.map((e=>o[e]))},addPlanarSegment=(e,t,r,o=we.EPSILON)=>{e.vertices_sectors||(e.vertices_sectors=makeVerticesSectors(e));const n=[t,r].map((e=>[e[0],e[1]])),s=we.subtract2(n[1],n[0]),a=makeEdgesSegmentIntersection(e,n[0],n[1],o),c=a.map(((e,t)=>void 0===e?void 0:t)).filter((e=>void 0!==e)).sort(((e,t)=>e-t)),i={};c.forEach((t=>e.edges_faces[t].forEach((e=>{i[e]=!0}))));const l=Object.keys(i).map((e=>parseInt(e,10))).sort(((e,t)=>e-t)),d=c.reverse().map((t=>splitEdge(e,t,a[t],o))).map((e=>e.vertex)),m=addVertices(e,n,o),p={};d.forEach((e=>{p[e]=!0})),m.forEach((e=>{p[e]=!0}));const u=Object.keys(p).map((e=>parseInt(e,10))),g=sortVerticesAlongVector(e,u,s),v=makeVerticesToEdgeBidirectional(e),h=((e,t,r)=>{const o=Array.from(Array(t.length-1)).map(((e,r)=>[t[r],t[r+1]])),n=o.map((e=>e.join(" "))).map((e=>void 0===r[e])),s=o.filter(((e,t)=>n[t])),a=Array.from(Array(s.length)).map(((t,r)=>e.edges_vertices.length+r));a.forEach(((t,r)=>{e.edges_vertices[t]=s[r]})),e.edges_assignment&&a.forEach((t=>{e.edges_assignment[t]="U"})),e.edges_foldAngle&&a.forEach((t=>{e.edges_foldAngle[t]=0}));for(let r=0;r<t.length;r+=1){const o=t[r],s=[n[r-1]?t[r-1]:void 0,n[r]?t[r+1]:void 0].filter((e=>void 0!==e)),a=(e.vertices_vertices[o]?e.vertices_vertices[o]:[]).concat(s);e.vertices_vertices[o]=sortVerticesCounterClockwise(e,a,t[r])}const c=makeVerticesToEdgeBidirectional(e);for(let r=0;r<t.length;r+=1){const o=t[r];e.vertices_edges[o]=e.vertices_vertices[o].map((e=>c[`${o} ${e}`]))}return t.map((t=>1===e.vertices_vertices[t].length?[we.TWO_PI]:we.counterClockwiseSectors2(e.vertices_vertices[t].map((r=>we.subtract2(e.vertices_coords[r],e.vertices_coords[t])))))).forEach(((r,o)=>{e.vertices_sectors[t[o]]=r})),a})(e,g,v);h.forEach((t=>{const r=e.edges_vertices[t];v[`${r[0]} ${r[1]}`]=t,v[`${r[1]} ${r[0]}`]=t}));const _=g.map((t=>e.vertices_vertices[t].map((e=>[[e,t],[t,e]])))).reduce(((e,t)=>e.concat(t)),[]).reduce(((e,t)=>e.concat(t)),[]),y={},b=_.map((t=>counterClockwiseWalk(e,t[0],t[1],y))).filter((e=>void 0!==e)),E=filterWalkedBoundaryFace(b);removeGeometryIndices(e,"faces",l);const x=E.map(((t,r)=>e.faces_vertices.length+r));return e.faces_vertices&&x.forEach(((t,r)=>{e.faces_vertices[t]=E[r].vertices})),e.faces_edges&&x.forEach(((t,r)=>{e.faces_edges[t]=E[r].edges.map((e=>v[e]))})),e.faces_angles&&x.forEach(((t,r)=>{e.faces_angles[t]=E[r].faces_angles})),e.vertices_faces&&(e.vertices_faces=makeVerticesFaces(e)),e.edges_faces&&(e.edges_faces=makeEdgesFacesUnsorted(e)),e.faces_faces&&(e.faces_faces=makeFacesFaces(e)),e.vertices_coords.length===e.vertices_vertices.length&&e.vertices_coords.length===e.vertices_edges.length&&e.vertices_coords.length===e.vertices_faces.length||console.warn("vertices mismatch",JSON.parse(JSON.stringify(e))),e.edges_vertices.length===e.edges_faces.length&&e.edges_vertices.length===e.edges_assignment.length||console.warn("edges mismatch",JSON.parse(JSON.stringify(e))),e.faces_vertices.length===e.faces_edges.length&&e.faces_vertices.length===e.faces_faces.length||console.warn("faces mismatch",JSON.parse(JSON.stringify(e))),h},removePlanarEdge=(e,t)=>{const r=[...e.edges_vertices[t]].sort(((e,t)=>t-e)),o=[...e.edges_faces[t]];(({vertices_vertices:e},t)=>{const r=[t[1],t[0]];t.map(((t,o)=>e[t].indexOf(r[o]))).forEach(((r,o)=>e[t[o]].splice(r,1)))})(e,r),(({vertices_edges:e},t,r)=>{r.map(((r,o)=>e[r].indexOf(t))).forEach(((t,o)=>e[r[o]].splice(t,1)))})(e,t,r);const n=r.map((t=>0===e.vertices_vertices[t].length)),s=r.filter(((e,t)=>n[t]));if(2===o.length&&o[0]!==o[1]){const n=e.faces_vertices.length,s=((e,t,r,o)=>{const n=t.map((t=>e.faces_edges[t].indexOf(r))),s=[];t.forEach(((t,r)=>e.faces_vertices[t].forEach(((e,t,n)=>{const a=n[(t+1)%n.length];(e===o[0]&&a===o[1]||e===o[1]&&a===o[0])&&(s[r]=t)})))),void 0!==s[0]&&void 0!==s[1]||console.warn("removePlanarEdge error joining faces");const a=t.map((t=>e.faces_edges[t].length)),c=t.map((t=>e.faces_vertices[t].length)),i=a.map((e=>e-1)),l=c.map((e=>e-1)),d=n.map(((e,t)=>(e+1)%a[t])),m=s.map(((e,t)=>(e+1)%c[t])),p=t.map(((t,r)=>Array.from(Array(i[r])).map(((e,t)=>(d[r]+t)%a[r])).map((r=>e.faces_edges[t][r])))),u=t.map(((t,r)=>Array.from(Array(l[r])).map(((e,t)=>(m[r]+t)%c[r])).map((r=>e.faces_vertices[t][r])))),g=t.map((t=>e.faces_faces[t])).reduce(((e,t)=>e.concat(t)),[]).filter((e=>e!==t[0]&&e!==t[1]));return{vertices:u[0].concat(u[1]),edges:p[0].concat(p[1]),faces:g}})(e,o,t,r);e.faces_vertices.push(s.vertices),e.faces_edges.push(s.edges),e.faces_faces.push(s.faces),e.vertices_faces.forEach(((t,r)=>{let s=!1;t.forEach(((a,c)=>{if(a===o[0]||a===o[1]){e.vertices_faces[r][c]=n;const o=s?[r,1]:[r,1,n];t.splice(...o),s=!0}}))})),e.edges_faces.forEach(((t,r)=>t.forEach(((t,s)=>{t!==o[0]&&t!==o[1]||(e.edges_faces[r][s]=n)})))),e.faces_faces.forEach(((t,r)=>t.forEach(((t,s)=>{t!==o[0]&&t!==o[1]||(e.faces_faces[r][s]=n)})))),e.faces_vertices.forEach((t=>t.forEach((t=>{void 0===t&&console.log("FOUND ONE before remove",e.faces_vertices)})))),removeGeometryIndices(e,"faces",o)}if(2===o.length&&o[0]===o[1]&&s.length){const r=o[0];e.faces_vertices[r]=e.faces_vertices[r].filter((e=>!s.includes(e))).filter(((e,t,r)=>e!==r[(t+1)%r.length])),e.faces_edges[r]=e.faces_edges[r].filter((e=>e!==t))}removeGeometryIndices(e,"edges",[t]),removeGeometryIndices(e,"vertices",s)},removePlanarVertex=(e,t)=>{const r=e.vertices_edges[t],o=uniqueSortedNumbers(e.vertices_faces[t].filter((e=>null!=e)));if(2!==r.length||o.length>2)return void console.warn("cannot remove non 2-degree vertex yet (e,f)",r,o);const n=getOppositeVertices(e,t,r),s=n.slice().reverse();r.sort(((e,t)=>e-t)),n.forEach((t=>{const o=e.vertices_edges[t].indexOf(r[1]);-1!==o&&(e.vertices_edges[t][o]=r[0])})),n.forEach(((r,o)=>{const n=e.vertices_vertices[r].indexOf(t);-1!==n?e.vertices_vertices[r][n]=s[o]:console.warn("removePlanarVertex unknown vertex issue")})),e.edges_vertices[r[0]]=[...n],o.forEach((r=>{const o=e.faces_vertices[r].indexOf(t);-1!==o?e.faces_vertices[r].splice(o,1):console.warn("removePlanarVertex unknown face_vertex issue")})),o.forEach((t=>{const o=e.faces_edges[t].indexOf(r[1]);-1!==o?e.faces_edges[t].splice(o,1):console.warn("removePlanarVertex unknown face_edge issue")})),removeGeometryIndices(e,"vertices",[t]),removeGeometryIndices(e,"edges",[r[1]])},alternatingSum=e=>[0,1].map((t=>e.filter(((e,r)=>r%2===t)).reduce(((e,t)=>e+t),0))),kawasakiSolutionsRadians=e=>e.map(((e,t,r)=>[e,r[(t+1)%r.length]])).map((e=>we.counterClockwiseAngleRadians(...e))).map(((e,t,r)=>r.slice(t+1,r.length).concat(r.slice(0,t)))).map((e=>alternatingSum(e).map((e=>Math.PI-e)))).map(((t,r)=>e[r]+t[0])).map(((t,r)=>we.isCounterClockwiseBetween(t,e[r],e[(r+1)%e.length])?t:void 0)),kawasakiSolutionsVectors=e=>{const t=e.map((e=>Math.atan2(e[1],e[0])));return kawasakiSolutionsRadians(t).map((e=>void 0===e?void 0:[Math.cos(e),Math.sin(e)]))};var ft=Object.freeze({__proto__:null,alternatingSum:alternatingSum,alternatingSumDifference:e=>{const t=e.reduce(((e,t)=>e+t),0)/2;return alternatingSum(e).map((e=>e-t))},kawasakiSolutionsRadians:kawasakiSolutionsRadians,kawasakiSolutionsVectors:kawasakiSolutionsVectors});const dt={B:!0,b:!0,F:!0,f:!0,U:!0,u:!0},vertices_flat=({vertices_edges:e,edges_assignment:t})=>e.map((e=>e.map((e=>dt[t[e]])).reduce(((e,t)=>e&&t),!0))).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)),mt={M:!0,m:!0,V:!0,v:!0},pt={M:-1,m:-1,V:1,v:1},validateMaekawa=({edges_vertices:e,vertices_edges:t,edges_assignment:r})=>{t||(t=makeVerticesEdgesUnsorted({edges_vertices:e}));const o=t.map((e=>e.map((e=>pt[r[e]])).filter((e=>void 0!==e)).reduce(((e,t)=>e+t),0))).map((e=>2===e||-2===e));return boundaryVertices({edges_vertices:e,edges_assignment:r}).forEach((e=>{o[e]=!0})),vertices_flat({vertices_edges:t,edges_assignment:r}).forEach((e=>{o[e]=!0})),o.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))},validateKawasaki=({vertices_coords:e,vertices_vertices:t,vertices_edges:r,edges_vertices:o,edges_assignment:n,edges_vector:s},a=we.EPSILON)=>{t||(t=makeVerticesVertices({vertices_coords:e,vertices_edges:r,edges_vertices:o}));const c=makeVerticesVerticesVector({vertices_coords:e,vertices_vertices:t,edges_vertices:o,edges_vector:s}).map(((e,t)=>e.filter(((e,o)=>mt[n[r[t][o]]])))).map((e=>e.length>1?we.counterClockwiseSectors2(e):[0,0])).map((e=>alternatingSum(e))).map((e=>Math.abs(e[0]-e[1])<a));return boundaryVertices({edges_vertices:o,edges_assignment:n}).forEach((e=>{c[e]=!0})),vertices_flat({vertices_edges:r,edges_assignment:n}).forEach((e=>{c[e]=!0})),c.map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))};var ut=Object.freeze({__proto__:null,validateMaekawa:validateMaekawa,validateKawasaki:validateKawasaki});const gt={};gt.prototype=Object.create(lt),gt.prototype.constructor=gt;const make_edges_array=function(e){return e.mountain=(t=-180)=>(e.forEach((e=>{this.edges_assignment[e]="M",this.edges_foldAngle[e]=t})),e),e.valley=(t=180)=>(e.forEach((e=>{this.edges_assignment[e]="V",this.edges_foldAngle[e]=t})),e),e.flat=()=>(e.forEach((e=>{this.edges_assignment[e]="F",this.edges_foldAngle[e]=0})),e),e};["line","ray","segment"].forEach((e=>{gt.prototype[e]=function(){const t=we[e](...arguments);if(!t)return;const r=clip(this,t);if(!r)return;const o=addPlanarSegment(this,r[0],r[1]);return make_edges_array.call(this,o)}})),["circle","ellipse","rect","polygon"].forEach((e=>{gt.prototype[e]=function(){const t=we[e](...arguments);if(!t)return;const r=t.segments(96).map((e=>we.segment(e))).map((e=>clip(this,e))).filter((e=>void 0!==e));if(!r)return;const o=[],n=[];r.forEach((e=>{const t=addVertices(this,e);o.push(...t),n.push(...addEdges(this,t))}));const{map:s}=fragment(this).edges;return populate(this),make_edges_array.call(this,n.map((e=>s[e])).reduce(((e,t)=>e.concat(t)),[]))}})),gt.prototype.removeEdge=function(e){const t=this.edges_vertices[e];return removePlanarEdge(this,e),t.map((e=>isVertexCollinear(this,e))).map(((e,r)=>e?t[r]:void 0)).filter((e=>void 0!==e)).sort(((e,t)=>t-e)).forEach((e=>removePlanarVertex(this,e))),!0},gt.prototype.validate=function(e){const t=validate(this,e);return t.vertices.kawasaki=validateKawasaki(this,e),t.vertices.maekawa=validateMaekawa(this),this.edges_foldAngle&&(t.edges.not_flat=this.edges_foldAngle.map(((e,t)=>edgeFoldAngleIsFlat(e)?void 0:t)).filter((e=>void 0!==e))),"valid"===t.summary&&(t.vertices.kawasaki.length||t.vertices.maekawa.length?t.summary="invalid":t.edges.not_flat.length&&(t.summary="not flat")),t};var vt=gt.prototype;const make_face_side=(e,t,r,o)=>{const n=we.subtract2(r,t),s=we.cross2(e,n);return o?s>0:s<0},make_face_center=(e,t)=>e.faces_vertices[t]?e.faces_vertices[t].map((t=>e.vertices_coords[t])).reduce(((e,t)=>[e[0]+t[0],e[1]+t[1]]),[0,0]).map((r=>r/e.faces_vertices[t].length)):[0,0],ht={F:!0,f:!0,U:!0,u:!0},_t={M:"V",m:"V",V:"M",v:"M"},face_snapshot=(e,t)=>({center:e.faces_center[t],matrix:e.faces_matrix2[t],winding:e.faces_winding[t],crease:e.faces_crease[t],side:e.faces_side[t],layer:e.faces_layer[t]}),flatFold=(e,t,r,o="V",n=we.EPSILON)=>{const s=_t[a=o]||a;var a;populate(e),e.faces_layer||(e.faces_layer=Array(e.faces_vertices.length).fill(0)),e.faces_center=e.faces_vertices.map(((t,r)=>make_face_center(e,r))),e.faces_matrix2||(e.faces_matrix2=makeFacesMatrix2(e,0)),e.faces_winding=makeFacesWindingFromMatrix2(e.faces_matrix2),e.faces_crease=e.faces_matrix2.map(we.invertMatrix2).map((e=>we.multiplyMatrix2Line2(e,t,r))),e.faces_side=e.faces_vertices.map(((t,r)=>make_face_side(e.faces_crease[r].vector,e.faces_crease[r].origin,e.faces_center[r],e.faces_winding[r])));const c=multiplyVerticesFacesMatrix2(e,e.faces_matrix2),i=makeEdgesLineParallelOverlap({vertices_coords:c,edges_vertices:e.edges_vertices},t,r,n).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).filter((t=>ht[e.edges_assignment[t]]));i.map((t=>e.edges_faces[t].find((e=>null!=e)))).map((t=>e.faces_winding[t])).map((e=>e?o:s)).forEach(((t,r)=>{e.edges_assignment[i[r]]=t,e.edges_foldAngle[i[r]]=edgeAssignmentToFoldAngle(t)}));const l=face_snapshot(e,0),d=e.faces_vertices.map(((e,t)=>t)).reverse().map((t=>{const r=face_snapshot(e,t),a=splitFace(e,t,r.crease.vector,r.crease.origin,n);if(void 0===a)return;e.edges_assignment[a.edges.new]=r.winding?o:s,e.edges_foldAngle[a.edges.new]=edgeAssignmentToFoldAngle(e.edges_assignment[a.edges.new]);return a.faces.map[a.faces.remove].forEach((t=>{e.faces_center[t]=make_face_center(e,t),e.faces_side[t]=make_face_side(r.crease.vector,r.crease.origin,e.faces_center[t],r.winding),e.faces_layer[t]=r.layer})),a})).filter((e=>void 0!==e)),m=mergeNextmaps(...d.map((e=>e.faces.map))),p=mergeNextmaps(...d.map((e=>e.edges.map)).filter((e=>void 0!==e))),u=d.map((e=>e.faces.remove)).reverse();e.faces_layer=((e,t)=>{const r=[],o=e.map(((e,t)=>t)),n=o.filter((e=>t[e])),s=o.filter((e=>!t[e]));return s.sort(((t,r)=>e[t]-e[r])).forEach(((e,t)=>{r[e]=t})),n.sort(((t,r)=>e[r]-e[t])).forEach(((e,t)=>{r[e]=s.length+t})),r})(e.faces_layer,e.faces_side);const g=m&&m[0]&&2===m[0].length,v=g?m[0].filter((t=>e.faces_side[t])).shift():0;let h=l.matrix;return o!==s&&(h=g||e.faces_side[0]?we.multiplyMatrices2(l.matrix,we.makeMatrix2Reflect(l.crease.vector,l.crease.origin)):l.matrix),e.faces_matrix2=makeFacesMatrix2(e,v).map((e=>we.multiplyMatrices2(h,e))),delete e.faces_center,delete e.faces_winding,delete e.faces_crease,delete e.faces_side,{faces:{map:m,remove:u},edges:{map:p}}},yt={};yt.prototype=Object.create(lt),yt.prototype.constructor=yt,yt.prototype.flatFold=function(){const e=we.core.getLine(arguments);return flatFold(this,e.vector,e.origin),this};var bt=yt.prototype;const isFoldedForm=e=>e.frame_classes&&e.frame_classes.includes("foldedForm")||e.file_classes&&e.file_classes.includes("foldedForm");var Et=Object.freeze({__proto__:null,isFoldedForm:isFoldedForm});const selfRelationalArraySubset=(e,t)=>{const r={};t.forEach((e=>{r[e]=!0}));const o=[];return t.forEach((t=>{o[t]=e[t].filter((e=>r[e]))})),o},subgraph=(e,t)=>{const r=["faces","edges","vertices"],o={};r.forEach((e=>{o[e]={}})),r.forEach((e=>t[e].forEach((t=>{o[e][t]=!0}))));const n={};r.forEach((t=>{filterKeysWithPrefix(e,t).forEach((e=>{n[e]={}})),filterKeysWithSuffix(e,t).forEach((e=>{n[e]={}}))})),r.forEach((t=>{filterKeysWithPrefix(e,t).forEach((e=>{n[e].prefix=t})),filterKeysWithSuffix(e,t).forEach((e=>{n[e].suffix=t}))})),console.log("keys",n);const s={...e};return je.graph.forEach((e=>delete s[e])),delete s.file_frames,Object.keys(n).forEach((e=>{s[e]=[]})),Object.keys(n).forEach((r=>{const{prefix:a,suffix:c}=n[r];a&&c?t[a].forEach((t=>{s[r][t]=e[r][t].filter((e=>o[c][e]))})):a?t[a].forEach((t=>{s[r][t]=e[r][t]})):s[r]=c?e[r].map((e=>e.filter((e=>o[c][e])))):e[r]})),s};var xt=Object.freeze({__proto__:null,selfRelationalArraySubset:selfRelationalArraySubset,subgraph:subgraph,subgraphWithFaces:(e,t)=>{const r=uniqueSortedNumbers(t.flatMap((t=>e.faces_vertices[t])));let o=[];if(e.faces_edges)o=uniqueSortedNumbers(t.flatMap((t=>e.faces_edges[t])));else if(e.edges_vertices){const t={};r.forEach((e=>{t[e]=!0})),o=e.edges_vertices.map(((e,r)=>t[e[0]]&&t[e[1]]?r:void 0)).filter((e=>void 0!==e))}return subgraph(e,{faces:t,edges:o,vertices:r})}});const makeEdgesFacesOverlap=({vertices_coords:e,edges_vertices:t,edges_vector:r,edges_faces:o,faces_vertices:n},s)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const a=makeFacesWinding({vertices_coords:e,faces_vertices:n}),c=t.map((t=>e[t[0]])),i=t.map((t=>t.map((t=>e[t])))),l=n.map((t=>t.map((t=>e[t]))));a.forEach(((e,t)=>{e||l[t].reverse()}));const d=t.map((()=>n.map((()=>{}))));o.forEach(((e,t)=>e.forEach((e=>{d[t][e]=!1}))));const m=makeEdgesBoundingBox({edges_coords:i}),p=l.map((e=>we.boundingBox(e)));return m.forEach(((e,t)=>p.forEach(((r,o)=>{!1!==d[t][o]&&(we.overlapBoundingBoxes(r,e)||(d[t][o]=!1))})))),i.forEach(((e,t)=>l.forEach(((e,o)=>{if(void 0!==d[t][o])return;if(i[t].map((e=>we.overlapConvexPolygonPoint(l[o],e,we.exclude,s))).reduce(((e,t)=>e||t),!1))return void(d[t][o]=!0);we.intersectConvexPolygonLine(l[o],r[t],c[t],we.excludeS,we.excludeS,s)?d[t][o]=!0:d[t][o]=!1})))),d},getFacesFaces2DOverlap=({vertices_coords:e,faces_vertices:t},r=we.EPSILON)=>{const o=Array.from(Array(t.length)).map((()=>Array.from(Array(t.length)))),n=t.map((t=>t.map((t=>e[t])))),s=n.map((e=>we.boundingBox(e)));for(let e=0;e<s.length-1;e+=1)for(let t=e+1;t<s.length;t+=1)we.overlapBoundingBoxes(s[e],s[t])||(o[e][t]=!1,o[t][e]=!1);const a=n.map((e=>we.makePolygonNonCollinear(e,r)));for(let e=0;e<t.length-1;e+=1)for(let n=e+1;n<t.length;n+=1){if(!1===o[e][n])continue;const t=we.overlapConvexPolygons(a[e],a[n],r);o[e][n]=t,o[n][e]=t}return o};var kt=Object.freeze({__proto__:null,makeEdgesFacesOverlap:makeEdgesFacesOverlap,getFacesFaces2DOverlap:getFacesFaces2DOverlap});const triangulateConvexFacesVertices=({faces_vertices:e})=>e.flatMap((e=>{return e.length<4?[e]:(t=e,Array.from(Array(t.length-2)).map(((e,r)=>[t[0],t[r+1],t[r+2]])));var t})),triangulateNonConvexFacesVertices=({vertices_coords:e,faces_vertices:t},r)=>{if(!e||!e.length)throw new Error(N);const o=e[0].length;return t.map((t=>t.flatMap((t=>e[t])))).map((e=>r(e,null,o))).map(((e,r)=>e.map((e=>t[r][e])))).flatMap((e=>{return 3===(t=e).length?[t]:Array.from(Array(Math.floor(t.length/3))).map(((e,r)=>[3*r+0,3*r+1,3*r+2].map((e=>t[e]))));var t}))},triangulate=(e,t)=>{if(!e.faces_vertices)return{};const r=e.edges_vertices?e.edges_vertices.length:0,o=(({faces_vertices:e})=>{let t=0;return e.map((e=>Math.max(3,e.length))).map((e=>Array.from(Array(e-2)).map((()=>t++))))})(e);e.faces_vertices=t?triangulateNonConvexFacesVertices(e,t):triangulateConvexFacesVertices(e),(e=>{e.edges_vertices||(e.edges_vertices=[]);const t=makeVerticesToEdgeBidirectional(e);let r=e.edges_vertices.length;const o=[];e.faces_edges=e.faces_vertices.map((e=>e.map(((e,n,s)=>{const a=[e,s[(n+1)%s.length]],c=a.join(" ");return c in t?t[c]:(o.push(a),t[c]=r,t[a.reverse().join(" ")]=r,r++)}))));const n=o.length;e.edges_vertices.push(...o),e.edges_assignment&&e.edges_assignment.push(...Array(n).fill("J")),e.edges_foldAngle&&e.edges_foldAngle.push(...Array(n).fill(0)),e.vertices_vertices&&delete e.vertices_vertices,e.vertices_edges&&delete e.vertices_edges,e.vertices_faces&&delete e.vertices_faces,e.edges_faces&&delete e.edges_faces,e.faces_faces&&delete e.faces_faces,e.faceOrders&&delete e.faceOrders})(e);return{faces:{map:o},edges:{new:Array.from(Array(e.edges_vertices.length-r)).map(((e,t)=>r+t))}}};var At=Object.freeze({__proto__:null,triangulateConvexFacesVertices:triangulateConvexFacesVertices,triangulateNonConvexFacesVertices:triangulateNonConvexFacesVertices,triangulate:triangulate});const connectedComponents=e=>{const t=[],recurse=(r,o)=>void 0!==t[r]?0:(t[r]=o,e[r].forEach((e=>recurse(e,o))),1);for(let t=0,r=0;t<e.length;t+=1)t in e&&(r+=recurse(t,r));return t},makeEdgesEdgesParallel=({vertices_coords:e,edges_vertices:t,edges_vector:r},o=we.EPSILON)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const n=r.map((e=>we.normalize(e)));return n.map(((e,t)=>n.map(((e,r)=>t===r?void 0:1-Math.abs(we.dot(n[t],n[r]))<o)).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e))))},overwriteEdgesOverlaps=(e,t,r,o,n)=>{const s=e.map((()=>[]));return e.forEach(((e,a)=>e.forEach((e=>{a>=e||we.overlapLineLine(t[a],r[a],t[e],r[e],o,o,n)&&(s[a].push(e),s[e].push(a))})))),s},makeEdgesEdgesParallelOverlap=({vertices_coords:e,edges_vertices:t,edges_vector:r},o)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const n=t.map((t=>e[t[0]])),s=makeEdgesEdgesParallel({vertices_coords:e,edges_vertices:t,edges_vector:r},o);return overwriteEdgesOverlaps(s,r,n,we.excludeS,o)};var Ot=Object.freeze({__proto__:null,makeEdgesEdgesSimilar:({vertices_coords:e,edges_vertices:t,edges_coords:r},o=we.EPSILON)=>{r||(r=makeEdgesCoords({vertices_coords:e,edges_vertices:t}));const n=makeEdgesBoundingBox({vertices_coords:e,edges_vertices:t,edges_coords:r}),s=Array.from(Array(r.length)).map((()=>[])),a=n.length?n[0].min.length:0;for(let e=0;e<r.length-1;e+=1)for(let t=e+1;t<r.length;t+=1){let r=!0;for(let s=0;s<a;s+=1)we.fnEpsilonEqual(n[e].min[s],n[t].min[s],o)&&we.fnEpsilonEqual(n[e].max[s],n[t].max[s],o)||(r=!1);s[e][t]=r,s[t][e]=r}for(let e=0;e<r.length-1;e+=1)for(let t=e+1;t<r.length;t+=1){if(!s[e][t])continue;const n=we.fnEpsilonEqualVectors(r[e][0],r[t][0],o)&&we.fnEpsilonEqualVectors(r[e][1],r[t][1],o),a=we.fnEpsilonEqualVectors(r[e][0],r[t][1],o)&&we.fnEpsilonEqualVectors(r[e][1],r[t][0],o),c=n||a;s[e][t]=c,s[t][e]=c}return booleanMatrixToIndexedArray(s)},makeEdgesEdgesParallel:makeEdgesEdgesParallel,makeEdgesEdges2DParallel:({vertices_coords:e,edges_vertices:t,edges_vector:r},o=we.EPSILON)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const n=r.map((e=>Math.atan2(e[1],e[0]))).map(((e,t)=>({a:e,i:t}))).sort(((e,t)=>e.a-t.a));n.forEach(((e,t)=>{}));const s=n.slice(-1).concat(n.slice(0,-1)).filter((e=>e));console.log("shifted",s)},makeEdgesEdgesCrossing:({vertices_coords:e,edges_vertices:t,edges_vector:r},o)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const n=t.map((t=>e[t[0]])),s=(({vertices_coords:e,edges_vertices:t,edges_vector:r},o=we.EPSILON)=>{r||(r=makeEdgesVector({vertices_coords:e,edges_vertices:t}));const n=r.map((e=>we.normalize(e)));return n.map(((e,t)=>n.map(((e,r)=>t===r?void 0:1-Math.abs(we.dot(n[t],n[r]))<o)).map(((e,t)=>e?void 0:t)).filter((e=>void 0!==e))))})({vertices_coords:e,edges_vertices:t,edges_vector:r},o);return overwriteEdgesOverlaps(s,r,n,we.excludeS,o)},makeEdgesEdgesParallelOverlap:makeEdgesEdgesParallelOverlap});var wt=Object.assign(Object.create(null),{count:count,countImplied:countImplied,validate:validate,clean:clean,populate:populate,remove:removeGeometryIndices,replace:replaceGeometryIndices,removePlanarVertex:removePlanarVertex,removePlanarEdge:removePlanarEdge,addVertices:addVertices,addEdges:addEdges,splitEdge:splitEdge,splitFace:splitFace,flatFold:flatFold,addPlanarSegment:addPlanarSegment,clip:clip,fragment:fragment,verticesClusters:verticesClusters,connectedComponents:connectedComponents,clone:clone,flattenFrame:(e,t=1)=>{if(!e.file_frames||e.file_frames.length<t)return e;const r=["frame_parent","frame_inherit"],o={visited_frames:[]},n={};filterKeysWithPrefix(e,"file_").filter((e=>"file_frames"!==e)).forEach((t=>{n[t]=e[t]}));const recurse=(e,t,r)=>{if(-1!==o.visited_frames.indexOf(t))throw new Error(w);return o.visited_frames.push(t),r=[t].concat(r),0===t?r:e.file_frames[t-1].frame_inherit&&null!=e.file_frames[t-1].frame_parent?recurse(e,e.file_frames[t-1].frame_parent,r):r};return recurse(e,t,[]).map((t=>{if(0===t){const t=e.file_frames;e.file_frames=null;const o=clone(e);return e.file_frames=t,delete o.file_frames,r.forEach((e=>delete o[e])),o}const o=clone(e.file_frames[t-1]);return r.forEach((e=>delete o[e])),o})).reduce(((e,t)=>Object.assign(e,t)),n)}},Pe,Ne,Re,He,Te,st,Be,Ge,We,Et,xt,Ye,kt,At,qe,Xe,$e,De,Ze,Ot,rt,Ke,tt,ot,nt,Ve);const Mt=1.1,jt="Rabbit Ear",Pt={},make_rect_vertices_coords=(e,t)=>[[0,0],[e,0],[e,t],[0,t]],make_closed_polygon=e=>populate({vertices_coords:e,edges_vertices:e.map(((e,t,r)=>[t,(t+1)%r.length])),edges_assignment:Array(e.length).fill("B")});Pt.square=(e=1)=>make_closed_polygon(make_rect_vertices_coords(e,e)),Pt.rectangle=(e=1,t=1)=>make_closed_polygon(make_rect_vertices_coords(e,t)),Pt.polygon=(e=3,t=1)=>make_closed_polygon(we.makePolygonCircumradius(e,t)),Pt.kite=()=>populate({vertices_coords:[[0,0],[1,0],[1,Math.sqrt(2)-1],[1,1],[Math.sqrt(2)-1,1],[0,1]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,2],[0,4],[0,3]],edges_assignment:Array.from("BBBBBBVVF")});const St=Object.create(null),Ct={graph:lt,cp:vt,origami:bt},zt={graph:()=>{},cp:Pt.square,origami:Pt.square},Ft={graph:()=>({file_spec:Mt,file_creator:jt}),cp:()=>({file_spec:Mt,file_creator:jt,frame_classes:["creasePattern"]}),origami:()=>({file_spec:Mt,file_creator:jt,frame_classes:["foldedForm"]})};Object.keys(Ct).forEach((e=>{St[e]=function(){const t=Array.from(arguments).filter((e=>isFoldObject(e))).map((e=>JSON.parse(JSON.stringify(e))));return populate(Object.assign(Object.create(Ct[e]),t.length?{}:zt[e](),...t,Ft[e]()))},St[e].prototype=Ct[e],St[e].prototype.constructor=St[e],Object.keys(Pt).forEach((t=>{St[e][t]=function(){return St[e](Pt[t](...arguments))}}))})),Object.assign(St.graph,wt);const cubrt=e=>e<0?-Math.pow(-e,1/3):Math.pow(e,1/3),normalAxiom6=(e,t,r,o)=>{if(Math.abs(1-we.dot2(e.normal,r)/e.distance)<.02)return[];const n=we.rotate90(e.normal),s=we.subtract2(we.add2(r,we.scale2(e.normal,e.distance)),we.scale2(o,2)),a=we.subtract2(we.scale2(e.normal,e.distance),r),c=we.dot2(o,t.normal)-t.distance,i=2*we.dot2(a,n),l=we.dot2(a,a),d=we.dot2(we.add2(s,a),n),m=we.dot2(s,a),p=we.dot2(n,t.normal),u=we.dot2(a,t.normal),g=p,v=c+d*p+u,h=c*i+m*p+d*u,_=c*l+m*u;let y=0;return Math.abs(h)>we.EPSILON&&(y=1),Math.abs(v)>we.EPSILON&&(y=2),Math.abs(g)>we.EPSILON&&(y=3),((e,t,r,o,n)=>{switch(e){case 1:return[-n/o];case 2:{const e=Math.pow(o,2)-4*r*n;if(e<-we.EPSILON)return[];const t=-o/(2*r);if(e<we.EPSILON)return[t];const s=Math.sqrt(e)/(2*r);return[t+s,t-s]}case 3:{const e=r/t,s=o/t,a=n/t,c=(3*s-Math.pow(e,2))/9,i=(9*e*s-27*a-2*Math.pow(e,3))/54,l=Math.pow(c,3)+Math.pow(i,2),d=-e/3;if(l>0){const e=Math.sqrt(l);return[d+cubrt(i+e)+cubrt(i-e)]}if(Math.abs(l)<we.EPSILON){const e=Math.pow(i,1/3);return i<0?[]:[d+2*e,d-e]}const m=Math.sqrt(-l),p=Math.atan2(m,i)/3,u=Math.pow(Math.pow(i,2)-l,1/6),g=u*Math.cos(p),v=u*Math.sin(p);return[d+2*g,d-g-Math.sqrt(3)*v,d-g+Math.sqrt(3)*v]}default:return[]}})(y,g,v,h,_).map((t=>we.add2(we.scale2(e.normal,e.distance),we.scale2(n,t)))).map((e=>({p:e,normal:we.normalize2(we.subtract2(e,r))}))).map((e=>({normal:e.normal,distance:we.dot2(e.normal,we.midpoint2(e.p,r))})))};var Lt=Object.freeze({__proto__:null,normalAxiom1:(e,t)=>{const r=we.normalize2(we.rotate90(we.subtract2(t,e)));return{normal:r,distance:we.dot2(we.add2(e,t),r)/2}},normalAxiom2:(e,t)=>{const r=we.normalize2(we.subtract2(t,e));return{normal:r,distance:we.dot2(we.add2(e,t),r)/2}},normalAxiom3:(e,t)=>{const r=((e,t)=>{const r=we.cross2(e.normal,t.normal);if(Math.abs(r)<we.EPSILON)return;return[(e.distance*t.normal[1]-t.distance*e.normal[1])/r,(t.distance*e.normal[0]-e.distance*t.normal[0])/r]})(e,t);return void 0===r?[{normal:e.normal,distance:(e.distance+t.distance*we.dot2(e.normal,t.normal))/2}]:[we.add2,we.subtract2].map((r=>we.normalize2(r(e.normal,t.normal)))).map((e=>({normal:e,distance:we.dot2(r,e)})))},normalAxiom4:(e,t)=>{const r=we.rotate90(e.normal);return{normal:r,distance:we.dot2(t,r)}},normalAxiom5:(e,t,r)=>{const o=we.dot2(t,e.normal),n=e.distance-o,s=we.distance2(t,r);if(n>s)return[];const a=Math.sqrt(s*s-n*n),c=we.scale2(e.normal,n),i=we.add2(t,c),l=we.scale2(we.rotate90(e.normal),a);return(a<we.EPSILON?[i]:[we.add2(i,l),we.subtract2(i,l)]).map((e=>we.normalize2(we.subtract2(r,e)))).map((e=>({normal:e,distance:we.dot2(t,e)})))},normalAxiom6:normalAxiom6,normalAxiom7:(e,t,r)=>{const o=we.rotate90(e.normal),n=we.dot2(o,t.normal);if(Math.abs(n)<we.EPSILON)return;const s=we.dot2(r,o),a=we.dot2(r,t.normal);return{normal:o,distance:(t.distance+2*s*n-a)/(2*n)}}});var Nt=Object.freeze({__proto__:null,axiom1:(e,t)=>({vector:we.normalize2(we.subtract2(...we.resizeUp(t,e))),origin:e}),axiom2:(e,t)=>({vector:we.normalize2(we.rotate90(we.subtract2(...we.resizeUp(t,e)))),origin:we.midpoint2(e,t)}),axiom3:(e,t)=>we.bisectLines2(e.vector,e.origin,t.vector,t.origin),axiom4:(e,t)=>({vector:we.rotate90(we.normalize2(e.vector)),origin:t}),axiom5:(e,t,r)=>(we.intersectCircleLine(we.distance2(t,r),t,e.vector,e.origin,we.include_l)||[]).map((e=>({vector:we.normalize2(we.rotate90(we.subtract2(...we.resizeUp(e,r)))),origin:we.midpoint2(r,e)}))),axiom6:(e,t,r,o)=>normalAxiom6(we.rayLineToUniqueLine(e),we.rayLineToUniqueLine(t),r,o).map(we.uniqueLineToRayLine),axiom7:(e,t,r)=>{const o=we.intersectLineLine(e.vector,e.origin,t.vector,r,we.include_l,we.include_l);return void 0===o?void 0:{vector:we.normalize2(we.rotate90(we.subtract2(...we.resizeUp(o,r)))),origin:we.midpoint2(r,o)}}});const arrayify=(e,t)=>{switch(e){case 3:case"3":case 5:case"5":case 6:case"6":return t;case 7:case"7":return void 0===t?[]:[t];default:return[t]}},reflectPoint=(e,t)=>{const r=we.makeMatrix2Reflect(e.vector,e.origin);return we.multiplyMatrix2Vector2(r,t)},validateAxiom1=(e,t)=>e.points.map((e=>we.overlapConvexPolygonPoint(t,e,we.include))).reduce(((e,t)=>e&&t),!0),Vt=validateAxiom1,validateAxiom3=(e,t,r)=>{const o=e.lines.map((e=>we.clipLineConvexPolygon(t,e.vector,e.origin,we.include,we.includeL)));if(void 0===o[0]||void 0===o[1])return[!1,!1];const n=r.map((e=>void 0===e?void 0:we.clipLineConvexPolygon(t,e.vector,e.origin,we.include,we.includeL))),s=[0,1].map((e=>void 0!==n[e])),a=r.map((e=>void 0===e?void 0:[reflectPoint(e,o[0][0]),reflectPoint(e,o[0][1])])).map((e=>void 0!==e&&(we.overlapLinePoint(we.subtract(o[1][1],o[1][0]),o[1][0],e[0],we.includeS)||we.overlapLinePoint(we.subtract(o[1][1],o[1][0]),o[1][0],e[1],we.includeS)||we.overlapLinePoint(we.subtract(e[1],e[0]),e[0],o[1][0],we.includeS)||we.overlapLinePoint(we.subtract(e[1],e[0]),e[0],o[1][1],we.includeS))));return[0,1].map((e=>!0===a[e]&&!0===s[e]))},validateAxiom4=(e,t)=>{const r=we.intersectLineLine(e.lines[0].vector,e.lines[0].origin,we.rotate90(e.lines[0].vector),e.points[0],we.includeL,we.includeL);return[e.points[0],r].filter((e=>void 0!==e)).map((e=>we.overlapConvexPolygonPoint(t,e,we.include))).reduce(((e,t)=>e&&t),!0)},validateAxiom5=(e,t,r)=>{if(0===r.length)return[];const o=e.points.map((e=>we.overlapConvexPolygonPoint(t,e,we.include))).reduce(((e,t)=>e&&t),!0);return r.map((t=>reflectPoint(t,e.points[1]))).map((e=>we.overlapConvexPolygonPoint(t,e,we.include))).map((e=>e&&o))},validateAxiom6=function(e,t,r){if(0===r.length)return[];if(!e.points.map((e=>we.overlapConvexPolygonPoint(t,e,we.include))).reduce(((e,t)=>e&&t),!0))return r.map((()=>!1));const o=r.map((t=>reflectPoint(t,e.points[0]))).map((e=>we.overlapConvexPolygonPoint(t,e,we.include))),n=r.map((t=>reflectPoint(t,e.points[1]))).map((e=>we.overlapConvexPolygonPoint(t,e,we.include)));return r.map(((e,t)=>o[t]&&n[t]))},validateAxiom7=(e,t,r)=>{const o=we.overlapConvexPolygonPoint(t,e.points[0],we.include);if(void 0===r)return[!1];const n=reflectPoint(r,e.points[0]),s=we.overlapConvexPolygonPoint(t,n,we.include),a=void 0!==we.intersectConvexPolygonLine(t,e.lines[1].vector,e.lines[1].origin,we.includeS,we.includeL),c=we.intersectLineLine(e.lines[1].vector,e.lines[1].origin,r.vector,r.origin,we.includeL,we.includeL),i=!!c&&we.overlapConvexPolygonPoint(t,c,we.include);return o&&s&&a&&i},validateAxiom=(e,t,r,o)=>arrayify(e,[null,validateAxiom1,Vt,validateAxiom3,validateAxiom4,validateAxiom5,validateAxiom6,validateAxiom7][e](t,r,((e,t)=>{switch(e){case 3:case"3":case 5:case"5":case 6:case"6":return t;default:return t?t[0]:void 0}})(e,o)));var $t=Object.freeze({__proto__:null,validateAxiom1:validateAxiom1,validateAxiom2:Vt,validateAxiom3:validateAxiom3,validateAxiom4:validateAxiom4,validateAxiom5:validateAxiom5,validateAxiom6:validateAxiom6,validateAxiom7:validateAxiom7,validateAxiom:validateAxiom});const spreadParams=e=>[...e.lines?e.lines:[],...e.points?e.points:[]],axiomInBoundary=(e,t={},r)=>{const o=arrayify(e,Nt[`axiom${e}`](...spreadParams(t))).map((e=>we.line(e)));return r&&arrayify(e,$t[`validateAxiom${e}`](t,r,o)).forEach(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).forEach((e=>delete o[e])),o};var It=Object.freeze({__proto__:null,axiomInBoundary:axiomInBoundary,normalAxiomInBoundary:(e,t={},r)=>{const o=arrayify(e,Lt[`normalAxiom${e}`](...spreadParams(t))).map((e=>we.line.fromNormalDistance(e)));return r&&arrayify(e,$t[`validateAxiom${e}`]((e=>({points:e.points,lines:e.lines.map(we.uniqueLineToRayLine)}))(t),r,o)).forEach(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)).forEach((e=>delete o[e])),o}});const axiom=(e,t={},r)=>axiomInBoundary(e,t,r);Object.keys(Nt).forEach((e=>{axiom[e]=Nt[e]})),Object.keys(Lt).forEach((e=>{axiom[e]=Lt[e]})),Object.keys(It).forEach((e=>{axiom[e]=It[e]})),axiom.validateAxiom1=validateAxiom1,axiom.validateAxiom2=Vt,axiom.validateAxiom3=validateAxiom3,axiom.validateAxiom4=validateAxiom4,axiom.validateAxiom5=validateAxiom5,axiom.validateAxiom6=validateAxiom6,axiom.validateAxiom7=validateAxiom7,axiom.validate=validateAxiom;const line_line_for_arrows=(e,t)=>we.intersectLineLine(e.vector,e.origin,t.vector,t.origin,we.includeL,we.includeL),diagram_reflect_point=(e,t)=>{const r=we.makeMatrix2Reflect(e.vector,e.origin);return we.multiplyMatrix2Vector2(r,t)},boundary_for_arrows$1=({vertices_coords:e})=>we.convexHull(e),widest_perp=(e,t,r)=>{const o=boundary_for_arrows$1(e);if(void 0===r){const e=we.clipLineConvexPolygon(o,t.vector,t.origin,we.exclude,we.includeL);r=we.midpoint(...e)}const n=we.rotate270(t.vector),s=we.clipLineConvexPolygon(o,n,r,we.exclude,we.includeL).map((e=>we.distance(r,e))).sort(((e,t)=>e-t)).shift(),a=we.scale(we.normalize(n),s);return we.segment(we.add(r,we.flip(a)),we.add(r,a))},between_2_segments=(e,t,r)=>{const o=t.map((e=>we.midpoint(e[0],e[1]))),n=we.line.fromPoints(...o),s=we.intersect(r,n),a=we.line(r.vector.rotate90(),s);return we.segment(e.lines.map((e=>we.intersect(e,a))))},Tt=[null,(e,t)=>axiom(1,e).map((e=>[widest_perp(t,e)])),e=>[[we.segment(e.points)]],(e,t)=>{const r=boundary_for_arrows$1(t),o=e.lines.map((e=>we.clipLineConvexPolygon(r,e.vector,e.origin,we.exclude,we.includeL))),n=o.map((e=>we.subtract(e[1],e[0]))),s=we.intersectLineLine(n[0],o[0][0],n[1],o[1][0],we.excludeS,we.excludeS);return s?axiom(3,e).map((t=>((e,t,r,o)=>{const n=e.lines.map((e=>e.vector)),s=n.map(we.flip),a=n.concat(s).map((e=>we.ray(e,t))),c=a.filter((e=>we.dot(e.vector,r.vector)>0&&we.cross2(e.vector,r.vector)>0)).shift(),i=a.filter((e=>we.dot(e.vector,r.vector)>0&&we.cross2(e.vector,r.vector)<0)).shift(),l=a.filter((e=>we.dot(e.vector,r.vector)<0&&we.cross2(e.vector,r.vector)>0)).shift(),d=a.filter((e=>we.dot(e.vector,r.vector)<0&&we.cross2(e.vector,r.vector)<0)).shift(),m=[c,i,l,d].map((e=>we.intersectConvexPolygonLine(o,e.vector,e.origin,we.excludeS,we.excludeR).shift().shift())),p=m.map((e=>we.distance(e,t))),u=p[0]<p[1]?m[0]:m[1],g=p[0]<p[1]?we.add(i.origin,i.vector.normalize().scale(p[0])):we.add(c.origin,c.vector.normalize().scale(p[1])),v=p[2]<p[3]?m[2]:m[3],h=p[2]<p[3]?we.add(d.origin,d.vector.normalize().scale(p[2])):we.add(l.origin,l.vector.normalize().scale(p[3]));return[we.segment(u,g),we.segment(v,h)]})(e,s,t,r))):[between_2_segments(e,o,axiom(3,e).filter((e=>void 0!==e)).shift())]},(e,t)=>axiom(4,e).map((r=>[widest_perp(t,r,line_line_for_arrows(r,e.lines[0]))])),e=>axiom(5,e).map((t=>[we.segment(e.points[1],diagram_reflect_point(t,e.points[1]))])),e=>axiom(6,e).map((t=>e.points.map((e=>we.segment(e,diagram_reflect_point(t,e)))))),(e,t)=>axiom(7,e).map((r=>[we.segment(e.points[0],diagram_reflect_point(r,e.points[0])),widest_perp(t,r,line_line_for_arrows(r,e.lines[1]))]))];delete Tt[0];const axiomArrows=(e,t={},...r)=>{const o=t.points?t.points.map((e=>we.getVector(e))):void 0,n=t.lines?t.lines.map((e=>we.getLine(e))):void 0;return Tt[e]({points:o,lines:n},...r)};Object.keys(Tt).forEach((e=>{axiomArrows[e]=(...t)=>axiomArrows(e,...t)}));var Bt=Object.assign(Object.create(null),{axiom_arrows:axiomArrows,simple_arrow:(e,t)=>{const r=(({vertices_coords:e})=>we.convexHull(e))(e),o=we.boundingBox(r),n=((e,t,r)=>{if(void 0===r){const o=we.clipLineConvexPolygon(e,t.vector,t.origin,we.exclude,we.includeL);if(void 0===o)return;r=we.midpoint(...o)}const o=we.rotate90(t.vector),n=we.clipLineConvexPolygon(e,o,r,we.exclude,we.includeL).map((e=>we.distance(r,e))).sort(((e,t)=>e-t)).shift(),s=we.scale(we.normalize(o),n);return we.segment(we.add(r,we.flip(s)),we.add(r,s))})(r,t);if(void 0===n)return;const s=we.subtract(n[1],n[0]),a=we.magnitude(s),c=we.dot(s,[1,0]),i=o.span[0]<o.span[1]?o.span[0]:o.span[1];return n.head={width:.1*i,height:.15*i},n.bend=c>0?.3:-.3,n.padding=.05*a,n}});var qt=Object.freeze({__proto__:null,flipFacesLayer:e=>invertMap(invertMap(e).reverse()),facesLayerToEdgesAssignments:(e,t)=>{const r=[],o=makeFacesWinding(e);return(e.edges_faces?e.edges_faces:makeEdgesFaces(e)).forEach(((e,n)=>{if(1===e.length&&(r[n]="B"),2===e.length){const s=e.map((e=>o[e]));if(s[0]===s[1])return void(r[n]="F");const a=e.map((e=>t[e])),c=a[0]<a[1],i=s[0]?c:!c;r[n]=i?"V":"M"}})),r},faceOrdersToMatrix:e=>{const t=[];e.forEach((e=>{t[e[0]]=void 0,t[e[1]]=void 0}));const r=t.map((()=>[]));return e.forEach((([e,t,o])=>{r[e][t]=o,r[t][e]=-o})),r}});const nudgeFacesWithFacesLayer=({faces_layer:e})=>{const t=[];return invertMap(e).forEach(((e,r)=>{t[e]={vector:[0,0,1],layer:r}})),t},nudgeFacesWithFaceOrders=({vertices_coords:e,faces_vertices:t,faceOrders:r})=>{const o=makeFacesNormal({vertices_coords:e,faces_vertices:t}),n=connectedComponents(makeVerticesVerticesUnsorted({edges_vertices:r.map((e=>[e[0],e[1]]))})),s=invertMap(n).map((e=>e.constructor===Array?e:[e])),a=s.map((e=>(({faceOrders:e,faces_normal:t},r)=>{if(!e)return[];const o={};r.forEach((e=>{o[e]=!0})),r[0];const n=[];r.map((e=>{n[e]=we.dot(t[e],t[r[0]])>0}));const s=[];r.forEach((e=>{s[e]=[]})),e.forEach((e=>{if(!o[e[0]])return;const t=-1===e[2]^!n[e[1]]?[e[1],e[0]]:[e[0],e[1]];s[t[0]].push(t[1])}));const a=[],c={},recurse=e=>{c[e]=!0,s[e].forEach((e=>{c[e]||recurse(e)})),a.push(e)};return r.forEach((e=>{c[e]||recurse(e)})),a})({faceOrders:r,faces_normal:o},e))),c=s.map((e=>o[e[0]])),i=[];return a.forEach(((e,t)=>e.forEach(((e,r)=>{i[e]={vector:c[t],layer:r}})))),i};var Ut=Object.freeze({__proto__:null,nudgeFacesWithFacesLayer:nudgeFacesWithFacesLayer,nudgeFacesWithFaceOrders:nudgeFacesWithFaceOrders});const between=(e,t,r)=>t<r?e.slice(t+1,r):e.slice(r+1,t),validateTacoTacoFacePairs=e=>{const t=nonUniqueElements(e),r={};let o=0;for(let e=0;e<t.length;e+=1)if(void 0===r[t[e]])o+=1,r[t[e]]=o;else if(void 0!==r[t[e]]){if(r[t[e]]!==o)return!1;o-=1,r[t[e]]=void 0}return!0},build_layers=(e,t)=>e.map((e=>t[e])).filter((e=>void 0!==e)),validateLayerSolver=(e,t,r,o,n)=>{const s=we.flattenArrays(t);if(!((e,t,r=!0,o=we.EPSILON)=>{const n=invertMap(t),s=e.map((e=>e?e[1]:void 0)),a=e.map((e=>e?Math.min(...e):void 0)).map((e=>e+o)),c=e.map((e=>e?Math.max(...e):void 0)).map((e=>e-o)),i=n.length+(r?0:-1);for(let e=0;e<i;e+=1){const r=(e+1)%n.length;if(n[e]===n[r])continue;const o=between(t,n[e],n[r]).flat(),i=o.map((t=>s[e]<a[t])).reduce(((e,t)=>e&&t),!0),l=o.map((t=>s[e]>c[t])).reduce(((e,t)=>e&&t),!0);if(!i&&!l)return!1}return!0})(e,t,o,n))return!1;for(let e=0;e<r.length;e+=1){const t=build_layers(s,r[e]);if(!validateTacoTacoFacePairs(t))return!1}return!0},Rt={V:!0,v:!0,M:!0,m:!0},Dt={V:1,v:1,M:-1,m:-1},assignmentsToFacesVertical=e=>{let t=0;return e.slice(1).concat([e[0]]).map((e=>{const r=(o=e,t%2==0?Dt[o]||0:-(Dt[o]||0));var o;return t+=void 0===Dt[e]?0:1,r}))},foldStripWithAssignments=(e,t)=>{const r=(e=>{let t=0;const r=e.slice(1);return[!1].concat(r.map((e=>Rt[e]?++t:t)).map((e=>e%2==1)))})(t).map(((t,r)=>e[r]*(t?-1:1))),o=e.map((()=>{}));o[0]=[0,r[0]];for(let n=1;n<e.length&&("B"!==t[n]&&"b"!==t[n]);n+=1){const t=o[(n-1+e.length)%e.length][1];o[n]=[t,t+r[n]]}return o},Wt={B:!0,b:!0},singleVertexSolver=(e,t,r=we.EPSILON)=>{const o=foldStripWithAssignments(e,t),n=assignmentsToFacesVertical(t),s=t.map((e=>!Wt[e])).reduce(((e,t)=>e&&t),!0);if(s){const e=o[0][0],t=o[o.length-1][1];if(Math.abs(e-t)>r)return[]}const a=((e,t,r)=>{const o=e.map((e=>e?(e[0]+e[1])/2:void 0)),n=[];return e.forEach(((s,a)=>{if(!s)return;if(!t&&a===e.length-1)return;const c=s[1],i=c-2*r,l=c+2*r,d=[a,(a+1)%e.length],m=d.map((e=>o[e])).map((e=>e>c)),p=1*(!m[0]&&!m[1])+2*(m[0]&&m[1]),u=n.filter((e=>e.min<c&&e.max>c)).shift(),g={faces:d,taco_type:p};u?u.pairs.push(g):n.push({min:i,max:l,pairs:[g]})})),n.map((e=>e.pairs)).filter((e=>e.length>1)).map((e=>({both:e.filter((e=>0===e.taco_type)).map((e=>e.faces)),left:e.filter((e=>1===e.taco_type)).map((e=>e.faces)),right:e.filter((e=>2===e.taco_type)).map((e=>e.faces))})))})(o,s,r).map((e=>[e.left,e.right].map(invertMap).filter((e=>e.length>1)))).reduce(((e,t)=>e.concat(t)),[]),recurse=(t=[0],c=0,i=0)=>{const l=c+1,d=n[c],m=c>=e.length-1,p=s&&m;if(!validateLayerSolver(o,t,a,p,r))return[];if(p){const e=invertMap(t),r=e[0],o=e[c];if(d>0&&o>r)return[];if(d<0&&o<r)return[]}if(m)return[t];if(0===d)return t[i]=[l].concat(t[i]),recurse(t,l,i);const u=1===d?Array.from(Array(t.length-i)).map(((e,t)=>i+t+1)):Array.from(Array(i+1)).map(((e,t)=>t)),g=u.map((()=>clone(t)));return g.forEach(((e,t)=>e.splice(u[t],0,l))),g.map(((e,t)=>recurse(e,l,u[t]))).reduce(((e,t)=>e.concat(t)),[])};return recurse().map(invertMap)},maekawaAssignments=e=>{const t=(r=e).map(((e,t)=>t)).filter((e=>"U"===r[e]||"u"===r[e]));var r;const o=Array.from(Array(2**t.length)).map(((e,t)=>t.toString(2))).map((e=>Array(t.length-e.length+1).join("0")+e)).map((e=>Array.from(e).map((e=>"0"===e?"V":"M")))).map((r=>{const o=e.slice();return t.forEach(((e,t)=>{o[e]=r[t]})),o}));if(e.includes("B")||e.includes("b"))return o;const n=o.map((e=>e.filter((e=>"M"===e||"m"===e)).length)),s=o.map((e=>e.filter((e=>"V"===e||"v"===e)).length));return o.filter(((e,t)=>2===Math.abs(n[t]-s[t])))},make_lookup$1=e=>{const t=e[0].length,r=Array.from(Array(t+1)).map((()=>({})));Array.from(Array(Math.pow(2,t))).map(((e,t)=>t.toString(2))).map((e=>Array.from(e).map((e=>parseInt(e,10)+1)).join(""))).map((e=>`11111${e}`.slice(-t))).forEach((e=>{r[0][e]=!1})),e.forEach((e=>{r[0][e]=!0})),Array.from(Array(t)).map(((e,t)=>t+1)).map((e=>Array.from(Array(Math.pow(3,t))).map(((e,t)=>t.toString(3))).map((e=>`000000${e}`.slice(-t))).forEach((t=>((e,t,r)=>{const o=Array.from(r).map((e=>parseInt(e,10)));if(o.filter((e=>0===e)).length!==t)return;e[t][r]=!1;let n=!1;for(let r=0;r<o.length;r+=1){const s=[];if(0===o[r]){for(let n=1;n<=2;n+=1)o[r]=n,!1!==e[t-1][o.join("")]&&s.push([r,n]);o[r]=0,s.length>0&&!1===n&&(n=[]),1===s.length&&n.push(s[0])}}!1!==n&&0===n.length&&(n=!0),e[t][r]=n})(r,e,t)))));let o=[];Array.from(Array(t+1)).map(((e,r)=>t-r)).forEach((e=>{const t=[];Object.keys(r[e]).forEach((o=>{let n=r[e][o];n.constructor===Array&&(n=n[0]),t.push([o,n])})),o=o.concat(t)})),o.sort(((e,t)=>parseInt(e[0],10)-parseInt(t[0],10)));const n={};return o.forEach((e=>{n[e[0]]=Object.freeze(e[1])})),Object.freeze(n)},Gt={taco_taco:make_lookup$1(["111112","111121","111222","112111","121112","121222","122111","122212","211121","211222","212111","212221","221222","222111","222212","222221"]),taco_tortilla:make_lookup$1(["112","121","212","221"]),tortilla_tortilla:make_lookup$1(["11","22"]),transitivity:make_lookup$1(["112","121","122","211","212","221"])},Zt={taco_taco:e=>[[e[0],e[2]],[e[1],e[3]],[e[1],e[2]],[e[0],e[3]],[e[0],e[1]],[e[2],e[3]]],taco_tortilla:e=>[[e[0],e[2]],[e[0],e[1]],[e[1],e[2]]],tortilla_tortilla:e=>[[e[0],e[2]],[e[1],e[3]]],transitivity:e=>[[e[0],e[1]],[e[1],e[2]],[e[2],e[0]]]},pairArrayToSortedPairString$1=e=>e[0]<e[1]?`${e[0]} ${e[1]}`:`${e[1]} ${e[0]}`,Yt={taco_taco:e=>[pairArrayToSortedPairString$1([e[0],e[2]]),pairArrayToSortedPairString$1([e[1],e[3]]),pairArrayToSortedPairString$1([e[1],e[2]]),pairArrayToSortedPairString$1([e[0],e[3]]),pairArrayToSortedPairString$1([e[0],e[1]]),pairArrayToSortedPairString$1([e[2],e[3]])],taco_tortilla:e=>[pairArrayToSortedPairString$1([e[0],e[2]]),pairArrayToSortedPairString$1([e[0],e[1]]),pairArrayToSortedPairString$1([e[1],e[2]])],tortilla_tortilla:e=>[pairArrayToSortedPairString$1([e[0],e[2]]),pairArrayToSortedPairString$1([e[1],e[3]])],transitivity:e=>[pairArrayToSortedPairString$1([e[0],e[1]]),pairArrayToSortedPairString$1([e[1],e[2]]),pairArrayToSortedPairString$1([e[2],e[0]])]},Jt={0:0,1:1,2:-1},keysToFaceOrders$1=(e,t)=>{const r=Object.keys(e),o=r.map((e=>e.split(" ").map((e=>parseInt(e,10)))));return o.forEach(((o,n)=>{const s=-2*(1===Jt[e[r[n]]]^t[o[1]])+1;o.push(s)})),o},reformatSolution=(e,t)=>(e.orders&&(e.orders=e.orders.flatMap((e=>keysToFaceOrders$1(e,t)))),e.leaves&&(e.leaves=e.leaves.map((e=>keysToFaceOrders$1(e,t)))),e.partitions&&e.partitions.forEach((e=>reformatSolution(e,t))),e.node&&e.node.forEach((e=>reformatSolution(e,t))),e),Ht=Object.freeze(Object.keys(Gt)),Xt={0:0,1:2,2:1},buildRuleAndLookup$1=(e,t,...r)=>{const o=Zt[e](t),n=o.map((e=>e[1]<e[0])),s=o.map(((e,t)=>n[t]?`${e[1]} ${e[0]}`:`${e[0]} ${e[1]}`)),a=s.map(((e,t)=>{for(let o=0;o<r.length;o+=1)if(r[o][e])return n[t]?Xt[r[o][e]]:r[o][e];return 0})).join("");if(!0===Gt[e][a])return!0;if(!1===Gt[e][a])return!1;const c=Gt[e][a];return[s[c[0]],n[c[0]]?Xt[c[1]]:c[1]]},getConstraintIndicesFromFacePairs$1=(e,t,r)=>{const o={};return Ht.forEach((n=>{const s=r.flatMap((e=>t[n][e]));o[n]=uniqueElements(s).filter((t=>e[n][t]))})),o},propagate$1=(e,t,r,...o)=>{let n=r;const s={};do{const r=getConstraintIndicesFromFacePairs$1(e,t,n),a={};for(let t=0;t<Ht.length;t+=1){const n=Ht[t],c=r[n];for(let t=0;t<c.length;t+=1){const r=buildRuleAndLookup$1(n,e[n][c[t]],...o,s);if(!0!==r){if(!1===r)return console.warn("invalid state found",n,e[n][c[t]]),!1;if(s[r[0]]){if(s[r[0]]!==r[1])return console.warn("order conflict",n,e[n][c[t]]),!1}else{const[e,t]=r;a[e]=!0,s[r[0]]=t}}}}n=Object.keys(a)}while(n.length);return s},getNeighborsArray=(e,t,r)=>{const o={};return Object.keys(t).forEach((n=>{const s=r[n][e];s&&s.map((e=>t[n][e])).map((e=>Yt[n](e).forEach((e=>{o[e]=!0}))))})),Object.keys(o)},coplanarOverlappingFacesGroups=({vertices_coords:e,faces_vertices:t,faces_faces:r},o=we.EPSILON)=>{r||(r=makeFacesFaces({faces_vertices:t}));const n=(({vertices_coords:e,faces_vertices:t},r=we.EPSILON)=>{const o=makeFacesNormal({vertices_coords:e,faces_vertices:t}),n=t.map((()=>[]));for(let e=0;e<t.length-1;e+=1)for(let s=e+1;s<t.length;s+=1)e!==s&&we.parallelNormalized(o[e],o[s],r)&&(n[e].push(s),n[s].push(e));const s=connectedComponents(n),a=invertMap(s).map((e=>"number"==typeof e?[e]:e)),c=a.map((e=>o[e[0]])),i=[];a.forEach(((e,t)=>e.forEach((e=>{i[e]=we.dot3(o[e],c[t])>0}))));const l=t.map((t=>e[t[0]])).map((e=>we.resize(3,e))),d=a.map(((e,t)=>e.map((e=>we.dot3(c[t],l[e]))))).map(((e,t)=>clusterScalars(e).map((e=>e.map((e=>a[t][e])))))),m=d.flatMap(((e,t)=>e.map((()=>[...c[t]])))),p=d.flat(),u=p.map((e=>e[0])).map((e=>l[e])).map(((e,t)=>we.dot3(m[t],e))).map(((e,t)=>we.scale3(m[t],e))),g=p.map(((e,t)=>({normal:m[t],origin:u[t]})));return p.map(((e,t)=>({faces:e,facesAligned:e.map((e=>i[e])),plane:g[t]})))})({vertices_coords:e,faces_vertices:t},o),s=[];n.forEach((e=>e.facesAligned.forEach(((t,r)=>{s[e.faces[r]]=t}))));const a=[0,0,1],c=n.map((e=>e.plane.normal)).map((e=>{const t=we.dot(e,a);return Math.abs(t+1)<.01?we.makeMatrix4Rotate(Math.PI,[1,0,0]):we.matrix4FromQuaternion(we.quaternionFromTwoVectors(e,a))})),i=((e,t,r,o)=>{const n=e.vertices_coords.map((e=>we.resize(3,e))),s=t.map((t=>t.faces.map(((r,o)=>t.facesAligned[o]?e.faces_vertices[r]:e.faces_vertices[r].slice().reverse())).map((e=>e.map((e=>n[e])))).map((e=>we.makePolygonNonCollinear(e,o))))),a=[],c=s.map(((e,t)=>e.map((e=>e.map((e=>we.multiplyMatrix4Vector3(r[t],e))).map((e=>[e[0],e[1]]))))));return t.map((e=>e.faces)).forEach(((e,t)=>e.forEach(((e,r)=>{a[e]=c[t][r]})))),a})({vertices_coords:e,faces_vertices:t},n,c,o),l=n.map((e=>e.faces)).map((e=>selfRelationalArraySubset(r,e))).map((e=>connectedComponents(e))),d=l.map((e=>invertMap(e).map((e=>e.constructor===Array?e:[e])))),m=l.map((e=>{const t=e.map(((e,t)=>t));return e.map((r=>t.filter((t=>e[t]!==r))))})),p=t.map((()=>[]));m.forEach((e=>e.forEach(((e,t)=>{for(let r=0;r<e.length;r+=1){const n=e[r],s=[t,n].map((e=>i[e]));we.overlapConvexPolygons(...s,o)&&(p[t][n]=!0,p[n][t]=!0)}}))));const u=m.map((e=>e.map(((e,t)=>e.filter((e=>p[t][e])))))),g=[];u.forEach(((e,t)=>{g[t]=[],e.forEach(((e,r)=>{const o=l[t][r],n=e.map((e=>l[t][e]));g[t][o]||(g[t][o]=new Set),n.forEach((e=>{g[t][e]||(g[t][e]=new Set)})),n.forEach((e=>{g[t][o].add(e),g[t][e].add(o)}))}))})),g.forEach(((e,t)=>e.forEach(((e,r)=>{g[t][r]=[...e]}))));const v=g.map((e=>invertMap(connectedComponents(e)).map((e=>e.constructor===Array?e:[e])))),h=v.flatMap(((e,t)=>e.map((()=>t)))),_=n.map(((e,t)=>v[t].map((e=>e.flatMap((e=>d[t][e])))))).flatMap(((e,t)=>e.map((e=>({faces:e,facesAligned:e.map((e=>s[e])),plane:n[t].plane}))))),y=h.map((e=>n[e].plane)),b=h.map((e=>c[e])),E=_.map((e=>e.faces));return{sets_plane:y,sets_transformXY:b,faces_set:invertMap(E),faces_winding:s,faces_facesOverlap:p.map((e=>e.map(((e,t)=>t)).filter((e=>void 0!==e))))}},makeTortillaTortillaFacesCrossing$1=(e,t,r)=>{const o=((e,t,r)=>{const o=makeFacesWinding(e),n=makeFacesPolygon(e,r);o.forEach(((e,t)=>{e||n[t].reverse()}));const s=t.map((e=>2===e.length&&e[0]!==e[1])).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)),a=s.map((t=>e.edges_vertices[t])).map((t=>t.map((t=>e.vertices_coords[t])))),c=a.map((e=>we.subtract2(e[1],e[0]))),i=[];return s.forEach((e=>{i[e]=[]})),s.map(((e,t)=>n.map((e=>we.clipLineConvexPolygon(e,c[t],a[t][0],we.exclude,we.excludeS,r))).map((e=>void 0!==e)))).forEach(((e,t)=>e.forEach(((e,r)=>{e&&i[s[t]].push(r)})))),i})(e,t,r);return o.map(((t,r)=>t.map((t=>[e.edges_faces[r],[t,t]])))).reduce(((e,t)=>e.concat(t)),[])},classify_faces_pair$1=e=>1===e[0]&&-1===e[1]||-1===e[0]&&1===e[1]?"both":1===e[0]&&1===e[1]?"right":-1===e[0]&&-1===e[1]?"left":void 0,makeTacosTortillas$1=(e,t=we.EPSILON)=>{const r=(e=>{const t=e.edges_vertices.map((t=>e.vertices_coords[t[0]])),r=e.edges_vertices.map((t=>we.subtract2(e.vertices_coords[t[1]],e.vertices_coords[t[0]])));return e.edges_faces.map(((o,n)=>o.map((o=>we.cross2(we.subtract2(e.faces_center[o],t[n]),r[n]))).map((e=>Math.sign(e)))))})(e),o=makeEdgesEdgesParallelOverlap(e,t),n=selfRelationalUniqueIndexPairs(o).filter((t=>t.map((t=>e.edges_faces[t].length>1)).reduce(((e,t)=>e&&t),!0))),s=n.map((t=>t.map((t=>e.edges_faces[t])))),a=((e,t,r)=>{const o=t.map((t=>e.edges_vertices[t[0]].map((t=>e.vertices_coords[t])))),n=o.map((e=>e[0])),s=o.map((e=>we.subtract2(e[1],e[0])));return r.map((t=>t.map((t=>t.map((t=>e.faces_center[t])))))).map(((e,t)=>e.map((e=>e.map((e=>we.cross2(we.subtract2(e,n[t]),s[t]))).map((e=>Math.sign(e)))))))})(e,n,s),c=a.map((e=>e.map(classify_faces_pair$1))),i=c.map(((e,t)=>{return(r=e)[0]===r[1]&&"both"!==r[0]?s[t]:void 0;var r})).filter((e=>void 0!==e)),l=c.map(((e,t)=>{return(r=e)[0]===r[1]&&"both"===r[0]?s[t]:void 0;var r})).map(((e,t)=>((e,t)=>{if(void 0!==e)return t[0][0]===t[1][0]?e:[e[0],[e[1][1],e[1][0]]]})(e,a[t]))).filter((e=>void 0!==e)),d=makeTortillaTortillaFacesCrossing$1(e,r,t),m=l.concat(d),p=c.map(((e,t)=>{return(r=e)[0]===r[1]||"both"!==r[0]&&"both"!==r[1]?void 0:((e,t,r)=>{const o="left"===t[0]||"left"===t[1]?-1:1,n="both"===t[0]?[...e[1]]:[...e[0]],s="both"===t[0]?0:1;return{taco:n,tortilla:r[s][0]===o?e[s][0]:e[s][1]}})(s[t],c[t],a[t]);var r})).filter((e=>void 0!==e)),u=makeEdgesFacesOverlap(e,t),g=booleanMatrixToIndexedArray(u).map(((e,t)=>r[t].length>1&&r[t][0]===r[t][1]?e:[])).map(((t,r)=>({taco:e.edges_faces[r],tortillas:t}))).filter((e=>e.tortillas.length)).flatMap((e=>e.tortillas.map((t=>({taco:[...e.taco],tortilla:t})))));return{taco_taco:i,tortilla_tortilla:m,taco_tortilla:p.concat(g)}},Kt={0:0,1:2,2:1},Qt={M:1,m:1,V:2,v:2},doEdgesOverlap=(e,t,r,o=1e-6)=>{const n=((e,t,r=1e-6)=>{const o=e[0]<e[1]?e:[e[1],e[0]],n=t[0]<t[1]?t:[t[1],t[0]];return Math.min(o[1],n[1])-Math.max(o[0],n[0])>r})(...t.map((t=>e.edges_vertices[t].map((t=>e.vertices_coords[t])))).map((e=>e.map((e=>we.dot(e,r))))),o);return n},make3DTortillas=(e,t,r=1e-6)=>{const o=((e,t,r=1e-6)=>{const o=e.edges_vertices.map((()=>({})));t.faces_set.forEach(((t,r)=>e.faces_edges[r].forEach((e=>{o[e][t]=!0}))));const n=o.map((e=>Object.keys(e).map((e=>parseInt(e,10)))));n.forEach(((e,t)=>{2!==e.length&&delete n[t]})),n.forEach(((e,t)=>{e[0]>e[1]&&n[t].reverse()}));const s=n.map((e=>e.join(" "))),a={};s.forEach(((e,t)=>{void 0===a[e]&&(a[e]=[]),a[e].push(t)})),Object.keys(a).filter((e=>a[e].length<2)).forEach((e=>delete a[e]));const c={};Object.keys(a).forEach((e=>{c[e]=chooseTwoPairs(a[e])}));const i={};Object.keys(c).forEach((t=>{const o=c[t][0][0],n=e.edges_vertices[o].map((t=>e.vertices_coords[t])),s=we.normalize(we.subtract(n[1],n[0]));i[t]=c[t].map((t=>doEdgesOverlap(e,t,s,r)))}));const l={};return Object.keys(c).forEach((e=>{l[e]=c[e].filter(((t,r)=>i[e][r]))})),Object.keys(l).flatMap((e=>l[e]))})(e,t,r),n=o.map((t=>t.map((t=>e.edges_faces[t]))));return n.forEach(((e,r)=>{t.faces_set[e[0][0]]!==t.faces_set[e[1][0]]&&n[r][1].reverse()})),n},prepare$1=(e,t=1e-6)=>{const r={...e};r.faces_edges||(r.faces_edges=makeFacesEdgesFromVertices(r));const o=coplanarOverlappingFacesGroups(r,t),n=invertMap(o.faces_set).map((e=>e.constructor===Array?e:[e])),s=((e,t,r)=>{const o=t.sets_transformXY.map((()=>({...e})));filterKeysWithPrefix(e,"vertices").forEach((e=>o.forEach((t=>delete t[e])))),o.forEach((e=>delete e.edges_edges)),o.forEach((e=>delete e.edges_faces));const n=filterKeysWithPrefix(e,"faces");o.forEach(((t,o)=>n.forEach((n=>{t[n]=[],r[o].forEach((r=>{t[n][r]=e[n][r]}))}))));const s=e.vertices_coords.map((e=>we.resize(3,e))),a=r.map((()=>({})));r.forEach(((t,r)=>t.forEach((t=>e.faces_vertices[t].forEach((e=>{a[r][e]=!0}))))));const c=a.map((e=>Object.keys(e).map((e=>parseInt(e,10)))));o.forEach((e=>{e.vertices_coords=[]})),t.sets_transformXY.forEach(((e,t)=>c[t].forEach((r=>{const n=we.multiplyMatrix4Vector3(e,s[r]);o[t].vertices_coords[r]=[n[0],n[1]]}))));const i=r.map((()=>({})));r.forEach(((t,r)=>t.forEach((t=>e.faces_edges[t].forEach((e=>{i[r][e]=!0}))))));const l=i.map((e=>Object.keys(e).map((e=>parseInt(e,10))))),d=filterKeysWithPrefix(e,"edges");return o.forEach(((t,r)=>d.forEach((o=>{t[o]=[],l[r].forEach((r=>{t[o][r]=e[o][r]}))})))),o.forEach((e=>{e.edges_faces=makeEdgesFacesUnsorted(e)})),o})(r,o,n),a=[];n.map(((e,t)=>e.map((e=>r.faces_vertices[e])).map((e=>e.map((e=>s[t].vertices_coords[e])))).forEach(((t,r)=>{a[e[r]]=t}))));const c=a.map((e=>e.reduce(((e,t)=>we.add(e,t)),[0,0]).map((t=>t/e.length))));s.forEach((e=>{e.faces_center=e.faces_vertices.map(((e,t)=>c[t]))}));const i=s.map((e=>makeTacosTortillas$1(e,t))),l=s.map((e=>((e,t,r,o=we.EPSILON)=>{const n=makeFacesPolygon(e,o);n.forEach(((e,t)=>{r[t]||e.reverse()}));const s=e.faces_vertices.map((()=>[]));n.forEach(((e,r)=>t[r].forEach((e=>{if(e<=r)return;const t=we.clipPolygonPolygon(n[r],n[e],o);t&&(s[r][e]=t)}))));const a=[];return s.forEach(((e,t)=>e.forEach(((e,r)=>{r<=t||!s[t][r]||s.forEach(((s,c)=>{c<=t||c<=r||we.clipPolygonPolygon(e,n[c],o)&&a.push([t,r,c].sort(((e,t)=>e-t)))}))})))),a})(e,o.faces_facesOverlap,o.faces_winding,t))),d=l.map(((e,t)=>((e,t)=>{const r={};return t.taco_taco.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]].sort(((e,t)=>e-t)))).forEach((e=>[`${e[0]} ${e[1]} ${e[2]}`,`${e[0]} ${e[1]} ${e[3]}`,`${e[0]} ${e[2]} ${e[3]}`,`${e[1]} ${e[2]} ${e[3]}`].forEach((e=>{r[e]=!0})))),t.taco_tortilla.map((e=>[e.taco[0],e.taco[1],e.tortilla].sort(((e,t)=>e-t)).join(" "))).forEach((e=>{r[e]=!0})),e.filter((e=>void 0===r[e.join(" ")]))})(e,i[t]))),m=i.map(((e,t)=>((e,t)=>{const r={};return r.taco_taco=e.taco_taco.map((e=>[e[0][0],e[1][0],e[0][1],e[1][1]])),r.taco_tortilla=e.taco_tortilla.map((e=>[e.taco[0],e.tortilla,e.taco[1]])),r.tortilla_tortilla=e.tortilla_tortilla.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]])),r.transitivity=t.map((e=>[e[0],e[1],e[2]])),r})(e,d[t]))),p=selfRelationalUniqueIndexPairs(o.faces_facesOverlap),u=p.map((e=>e.join(" "))),g=p.map((e=>o.faces_set[e[0]])),v=invertMap(g).map((e=>e.constructor===Array?e:[e])),h=v.map((e=>e.map((e=>u[e])))),_=m.map(((e,t)=>h[t]?h[t]:[]));console.log("overlapInfo",o),console.log("graphCopies",s),console.log("faces_polygon",a),console.log("faces_center",c),console.log("sets_faces",n),console.log("groups_tacos_tortillas",i),console.log("groups_unfiltered_trios",l),console.log("groups_transitivity_trios",d),console.log("groups_constraints",m),console.log("facePairsInts",p),console.log("facePairs",u),console.log("facePairsIndex_group",g),console.log("groups_facePairsIndex",v),console.log("groups_facePairs",h),r.edges_faces||(r.edges_faces=makeEdgesFacesUnsorted(r));const y={taco_taco:[],taco_tortilla:[],tortilla_tortilla:[],transitivity:[]};m.forEach((e=>{y.taco_taco.push(...e.taco_taco),y.taco_tortilla.push(...e.taco_tortilla),y.tortilla_tortilla.push(...e.tortilla_tortilla),y.transitivity.push(...e.transitivity)}));const b=make3DTortillas(r,o,t).map((e=>[...e[0],...e[1]]));y.tortilla_tortilla.push(...b);const E=(e=>{const t={};return Object.keys(e).forEach((e=>{t[e]={}})),Object.keys(e).forEach((r=>{e[r].forEach(((e,o)=>Yt[r](e).forEach((e=>{void 0===t[r][e]&&(t[r][e]=[]),t[r][e].push(o)}))))})),t})(y),x=_.flat(),k=((e,t,r)=>{const o={};t.forEach((e=>{o[e]=!0}));const n={};return e.edges_faces.forEach(((t,s)=>{const a=e.edges_assignment[s],c=Qt[a];if(t.length<2||void 0===c)return;const i=r[t[0]]?c:Kt[c],l=`${t[0]} ${t[1]}`,d=`${t[1]} ${t[0]}`;l in o&&(n[l]=i),d in o&&(n[d]=Kt[i])})),n})(r,u,o.faces_winding);return console.log("constraints",y),console.log("tortillas3D",b),console.log("constraintsLookup",E),console.log("facePairsFlat",x),console.log("edgeAdjacentOrders",k),{constraints:y,constraintsLookup:E,facePairs:x,edgeAdjacentOrders:k,faces_winding:o.faces_winding}},allSolutions=(e,...t)=>{const r=e.orders?[...t,e.orders]:[...t];if(e.partitions){const t=e.partitions.map((e=>allSolutions(e)));return(e=>{const t=e.map((e=>e.length)),r=t.slice();for(let e=r.length-2;e>=0;e-=1)r[e]*=r[e+1];r[0]>2**28&&console.warn("allSolutions() might fail: too many");const o=r.slice();return o.push(1),o.shift(),Array.from(Array(r[0])).map(((e,t)=>t)).map((e=>o.map(((r,o)=>Math.floor(e/r)%t[o]))))})(t).map((e=>e.flatMap(((e,r)=>t[r][e])))).map((e=>[...r,...e]))}const o=[];if(e.leaves&&e.leaves.forEach((e=>o.push([...r,e]))),e.node){const t=e.node.flatMap((e=>allSolutions(e,...r)));o.push(...t)}return e.leaves||e.node||o.push([...r]),o},anySolution=e=>{const t=e.orders?e.orders:[];return e.partitions?[...t,...e.partitions.flatMap((e=>anySolution(e)))]:e.leaves?[...t,...e.leaves[0]]:e.node?[...t,...anySolution(e.node[0])]:t},er={anySolution:function(){return anySolution(this)},allSolutions:function(){return this.allSolutionsMemo||(this.allSolutionsMemo=allSolutions(this)),this.allSolutionsMemo},count:function(){return this.allSolutions().length}},solveNonBranchingNode=(e,t,r,o,...n)=>{if(!r.length)return{};const s=r[0],a=[],c=[];[1,2].forEach((i=>{const l=propagate$1(e,t,[s],...o,...n,{[s]:i});if(!1===l)return;l[s]=i;(Object.keys(l).length===r.length?a:c).push(l)}));const i={leaves:a,node:c.map((s=>solveNode(e,t,r.filter((e=>!(e in s))),[...o,...n],s)))};return 0===i.leaves.length&&delete i.leaves,0===i.node.length&&delete i.node,i},solveNode=(e,t,r,o,...n)=>{if(!r.length)return{orders:n};const s=((e,t,r,o={})=>{const n={};e.forEach((e=>{n[e]=!0}));let s=0;const a=[];for(;s<e.length;){if(!n[e[s]]){s+=1;continue}const c=[],i=[e[s]],l={[e[s]]:!0};do{const e=i.shift();delete n[e],c.push(e);const s=o[e]?o[e]:getNeighborsArray(e,t,r);o[e]=s;const a=s.filter((e=>n[e]&&!l[e]));i.push(...a),a.forEach((e=>{l[e]=!0}))}while(i.length);s+=1,a.push(c)}return a})(r,e,t);return s.length>1?{orders:n,partitions:s.map((r=>solveNonBranchingNode(e,t,r,o,...n)))}:{orders:n,...solveNonBranchingNode(e,t,s[0],o,...n)}},make_lookup=e=>{const t=e[0].length,r=Array.from(Array(t+1)).map((()=>({})));Array.from(Array(Math.pow(2,t))).map(((e,t)=>t.toString(2))).map((e=>Array.from(e).map((e=>parseInt(e,10)+1)).join(""))).map((e=>`11111${e}`.slice(-t))).forEach((e=>{r[0][e]=!1})),e.forEach((e=>{r[0][e]=!0})),Array.from(Array(t)).map(((e,t)=>t+1)).map((e=>Array.from(Array(Math.pow(3,t))).map(((e,t)=>t.toString(3))).map((e=>`000000${e}`.slice(-t))).forEach((t=>((e,t,r)=>{const o=Array.from(r).map((e=>parseInt(e,10)));if(o.filter((e=>0===e)).length!==t)return;e[t][r]=!1;let n=!1;for(let r=0;r<o.length;r+=1){const s=[];if(0===o[r]){for(let n=1;n<=2;n+=1)o[r]=n,!1!==e[t-1][o.join("")]&&s.push([r,n]);o[r]=0,s.length>0&&!1===n&&(n=[]),1===s.length&&n.push(s[0])}}!1!==n&&0===n.length&&(n=!0),e[t][r]=n})(r,e,t)))));let o=[];Array.from(Array(t+1)).map(((e,r)=>t-r)).forEach((e=>{const t=[];Object.keys(r[e]).forEach((o=>{let n=r[e][o];n.constructor===Array&&(n=n[0]),t.push([o,n])})),o=o.concat(t)})),o.sort(((e,t)=>parseInt(e[0],10)-parseInt(t[0],10)));const n={};return o.forEach((e=>{n[e[0]]=Object.freeze(e[1])})),Object.freeze(n)},tr={taco_taco:make_lookup(["111112","111121","111222","112111","121112","121222","122111","122212","211121","211222","212111","212221","221222","222111","222212","222221"]),taco_tortilla:make_lookup(["112","121","212","221"]),tortilla_tortilla:make_lookup(["11","22"]),transitivity:make_lookup(["112","121","122","211","212","221"])},rr={taco_taco:e=>[[e[0],e[2]],[e[1],e[3]],[e[1],e[2]],[e[0],e[3]],[e[0],e[1]],[e[2],e[3]]],taco_tortilla:e=>[[e[0],e[2]],[e[0],e[1]],[e[1],e[2]]],tortilla_tortilla:e=>[[e[0],e[2]],[e[1],e[3]]],transitivity:e=>[[e[0],e[1]],[e[1],e[2]],[e[2],e[0]]]},pairArrayToSortedPairString=e=>e[0]<e[1]?`${e[0]} ${e[1]}`:`${e[1]} ${e[0]}`,or={taco_taco:e=>[pairArrayToSortedPairString([e[0],e[2]]),pairArrayToSortedPairString([e[1],e[3]]),pairArrayToSortedPairString([e[1],e[2]]),pairArrayToSortedPairString([e[0],e[3]]),pairArrayToSortedPairString([e[0],e[1]]),pairArrayToSortedPairString([e[2],e[3]])],taco_tortilla:e=>[pairArrayToSortedPairString([e[0],e[2]]),pairArrayToSortedPairString([e[0],e[1]]),pairArrayToSortedPairString([e[1],e[2]])],tortilla_tortilla:e=>[pairArrayToSortedPairString([e[0],e[2]]),pairArrayToSortedPairString([e[1],e[3]])],transitivity:e=>[pairArrayToSortedPairString([e[0],e[1]]),pairArrayToSortedPairString([e[1],e[2]]),pairArrayToSortedPairString([e[2],e[0]])]},nr={0:0,1:1,2:-1},sr=Object.freeze(Object.keys(tr)),ar={0:0,1:2,2:1},buildRuleAndLookup=(e,t,...r)=>{const o=rr[e](t),n=o.map((e=>e[1]<e[0])),s=o.map(((e,t)=>n[t]?`${e[1]} ${e[0]}`:`${e[0]} ${e[1]}`)),a=s.map(((e,t)=>{for(let o=0;o<r.length;o+=1)if(r[o][e])return n[t]?ar[r[o][e]]:r[o][e];return 0})).join("");if(!0===tr[e][a])return!0;if(!1===tr[e][a])return!1;const c=tr[e][a];return[s[c[0]],n[c[0]]?ar[c[1]]:c[1]]},getConstraintIndicesFromFacePairs=(e,t,r)=>{const o={};return sr.forEach((n=>{const s=r.flatMap((e=>t[n][e]));o[n]=uniqueElements(s).filter((t=>e[n][t]))})),o},propagate=(e,t,r,...o)=>{let n=r;const s={};do{const r=getConstraintIndicesFromFacePairs(e,t,n),a={};for(let t=0;t<sr.length;t+=1){const n=sr[t],c=r[n];for(let t=0;t<c.length;t+=1){const r=buildRuleAndLookup(n,e[n][c[t]],...o,s);if(!0!==r){if(!1===r)return console.warn("invalid state found",n,e[n][c[t]]),!1;if(s[r[0]]){if(s[r[0]]!==r[1])return console.warn("order conflict",n,e[n][c[t]]),!1}else{const[e,t]=r;a[e]=!0,s[r[0]]=t}}}}n=Object.keys(a)}while(n.length);return s},getBranches=(e,t,r,o={})=>{const n=Object.keys(t),s={};e.forEach((e=>{s[e]=!0}));let a=0;const c=[];for(;a<e.length;){if(!s[e[a]]){a+=1;continue}const i=[],l=[e[a]],d={[e[a]]:!0};do{const e=l.shift();let a;if(delete s[e],i.push(e),o[e])a=o[e];else{const s={};n.forEach((o=>{const n=r[o][e];n&&n.map((e=>t[o][e])).map((e=>or[o](e).forEach((e=>{s[e]=!0}))))})),a=Object.keys(s),o[e]=a}const c=a.filter((e=>s[e])).filter((e=>!d[e]));l.push(...c),c.forEach((e=>{d[e]=!0}))}while(l.length);a+=1,c.push(i)}return c},makeTortillaTortillaFacesCrossing=(e,t,r)=>{const o=((e,t,r)=>{const o=makeFacesWinding(e),n=makeFacesPolygon(e,r);for(let e=0;e<n.length;e+=1)o[e]||n[e].reverse();const s=t.map((e=>2===e.length&&e[0]!==e[1])).map(((e,t)=>e?t:void 0)).filter((e=>void 0!==e)),a=s.map((t=>e.edges_vertices[t])).map((t=>t.map((t=>e.vertices_coords[t])))),c=a.map((e=>we.subtract2(e[1],e[0]))),i=[];return s.forEach((e=>{i[e]=[]})),s.map(((e,t)=>n.map((e=>we.clipLineConvexPolygon(e,c[t],a[t][0],we.exclude,we.excludeS,r))).map((e=>void 0!==e)))).forEach(((e,t)=>e.forEach(((e,r)=>{e&&i[s[t]].push(r)})))),i})(e,t,r);return o.map(((t,r)=>t.map((t=>[e.edges_faces[r],[t,t]])))).reduce(((e,t)=>e.concat(t)),[])},classify_faces_pair=e=>1===e[0]&&-1===e[1]||-1===e[0]&&1===e[1]?"both":1===e[0]&&1===e[1]?"right":-1===e[0]&&-1===e[1]?"left":void 0,makeTacosTortillas=(e,t=we.EPSILON)=>{const r=makeFacesConvexCenter(e),o=((e,t)=>{const r=e.edges_vertices.map((t=>e.vertices_coords[t[0]])),o=e.edges_vertices.map((t=>we.subtract2(e.vertices_coords[t[1]],e.vertices_coords[t[0]])));return e.edges_faces.map(((e,n)=>e.map((e=>we.cross2(we.subtract2(t[e],r[n]),o[n]))).map((e=>Math.sign(e)))))})(e,r),n=(e=>{const t=Array.from(Array(e.length)).map((()=>Array(e.length).fill(!1)));return e.forEach(((e,r)=>e.forEach((e=>{t[r][e]=!0})))),t})(makeEdgesEdgesParallelOverlap(e,t)),s=booleanMatrixToUniqueIndexPairs(n).filter((t=>t.map((t=>e.edges_faces[t].length>1)).reduce(((e,t)=>e&&t),!0))),a=s.map((t=>t.map((t=>e.edges_faces[t])))),c=((e,t,r,o)=>{const n=r.map((t=>e.edges_vertices[t[0]].map((t=>e.vertices_coords[t])))),s=n.map((e=>e[0])),a=n.map((e=>we.subtract2(e[1],e[0])));return o.map((e=>e.map((e=>e.map((e=>t[e])))))).map(((e,t)=>e.map((e=>e.map((e=>we.cross2(we.subtract2(e,s[t]),a[t]))).map((e=>Math.sign(e)))))))})(e,r,s,a),i=c.map((e=>e.map(classify_faces_pair))),l=i.map(((e,t)=>{return(r=e)[0]===r[1]&&"both"!==r[0]?a[t]:void 0;var r})).filter((e=>void 0!==e)),d=i.map(((e,t)=>{return(r=e)[0]===r[1]&&"both"===r[0]?a[t]:void 0;var r})).map(((e,t)=>((e,t)=>{if(void 0!==e)return t[0][0]===t[1][0]?e:[e[0],[e[1][1],e[1][0]]]})(e,c[t]))).filter((e=>void 0!==e)),m=makeTortillaTortillaFacesCrossing(e,o,t),p=d.concat(m),u=i.map(((e,t)=>{return(r=e)[0]===r[1]||"both"!==r[0]&&"both"!==r[1]?void 0:((e,t,r)=>{const o="left"===t[0]||"left"===t[1]?-1:1,n="both"===t[0]?[...e[1]]:[...e[0]],s="both"===t[0]?0:1;return{taco:n,tortilla:r[s][0]===o?e[s][0]:e[s][1]}})(a[t],i[t],c[t]);var r})).filter((e=>void 0!==e)),g=makeEdgesFacesOverlap(e,t),v=booleanMatrixToIndexedArray(g).map(((e,t)=>o[t].length>1&&o[t][0]===o[t][1]?e:[])).map(((t,r)=>({taco:e.edges_faces[r],tortillas:t}))).filter((e=>e.tortillas.length)).flatMap((e=>e.tortillas.map((t=>({taco:[...e.taco],tortilla:t})))));return{taco_taco:l,tortilla_tortilla:p,taco_tortilla:u.concat(v)}},cr={0:0,1:2,2:1},ir={M:1,m:1,V:2,v:2},prepare=(e,t=1e-6)=>{const r=getFacesFaces2DOverlap(e,t),o=makeFacesWinding(e),n=makeTacosTortillas(e,t),s=((e,t,r,o=we.EPSILON)=>{t||(t=getFacesFaces2DOverlap(e,o)),r||(r=makeFacesWinding(e));const n=e.faces_vertices.map((t=>t.map((t=>e.vertices_coords[t]))));n.forEach(((e,t)=>{r[t]||e.reverse()}));const s=e.faces_vertices.map((()=>[]));for(let e=0;e<s.length-1;e+=1)for(let r=e+1;r<s.length;r+=1){if(!t[e][r])continue;const a=we.clipPolygonPolygon(n[e],n[r],o);a&&(s[e][r]=a)}const a=[];for(let e=0;e<s.length-1;e+=1)for(let r=e+1;r<s.length;r+=1)if(s[e][r])for(let c=r+1;c<s.length;c+=1)e!==c&&r!==c&&t[e][c]&&t[r][c]&&we.clipPolygonPolygon(s[e][r],n[c],o)&&a.push([e,r,c].sort(((e,t)=>e-t)));return a})(e,r,o,t),a=((e,t)=>{const r={};return t.taco_taco.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]].sort(((e,t)=>e-t)))).forEach((e=>[`${e[0]} ${e[1]} ${e[2]}`,`${e[0]} ${e[1]} ${e[3]}`,`${e[0]} ${e[2]} ${e[3]}`,`${e[1]} ${e[2]} ${e[3]}`].forEach((e=>{r[e]=!0})))),t.taco_tortilla.map((e=>[e.taco[0],e.taco[1],e.tortilla].sort(((e,t)=>e-t)).join(" "))).forEach((e=>{r[e]=!0})),e.filter((e=>void 0===r[e.join(" ")]))})(s,n),c=((e,t)=>{const r={};return r.taco_taco=e.taco_taco.map((e=>[e[0][0],e[1][0],e[0][1],e[1][1]])),r.taco_tortilla=e.taco_tortilla.map((e=>[e.taco[0],e.tortilla,e.taco[1]])),r.tortilla_tortilla=e.tortilla_tortilla.map((e=>[e[0][0],e[0][1],e[1][0],e[1][1]])),r.transitivity=t.map((e=>[e[0],e[1],e[2]])),r})(n,a),i=(e=>{const t={};return Object.keys(e).forEach((e=>{t[e]={}})),Object.keys(e).forEach((r=>{e[r].forEach(((e,o)=>or[r](e).forEach((e=>{void 0===t[r][e]&&(t[r][e]=[]),t[r][e].push(o)}))))})),t})(c),l=((e,t)=>(t||(t=getFacesFaces2DOverlap(e)),booleanMatrixToUniqueIndexPairs(t).map((e=>e.join(" ")))))(e,r),d=((e,t,r)=>{r||(r=makeFacesWinding(e));const o={};t.forEach((e=>{o[e]=!0}));const n={};return e.edges_faces.forEach(((t,s)=>{const a=e.edges_assignment[s],c=ir[a];if(t.length<2||void 0===c)return;const i=r[t[0]]?c:cr[c],l=`${t[0]} ${t[1]}`,d=`${t[1]} ${t[0]}`;l in o&&(n[l]=i),d in o&&(n[d]=cr[i])})),n})(e,l,o);return console.log("overlap",r),console.log("graph",e),console.log("facesWinding",o),console.log("tacos_tortillas",n),console.log("unfiltered_trios",s),console.log("transitivity_trios",a),console.log("facePairs",l),console.log("constraints",c),console.log("constraintsLookup",i),console.log("edgeAdjacentOrders",d),{constraints:c,constraintsLookup:i,facePairs:l,edgeAdjacentOrders:d}},lr={allSolutions:function(){return(e=>{const recurse=(e,t=[])=>{e.faceOrders&&t.push(e.faceOrders);const r=e.finished?e.finished.map((e=>[...t,e.faceOrders])):void 0;if(e.unfinished){const o=e.unfinished.map((e=>recurse(e,JSON.parse(JSON.stringify(t))))),n=o.length>1?((e,t)=>{const r=[];for(let o=0;o<e.length;o+=1)for(let n=0;n<t.length;n+=1)r.push([e[o],t[n]]);return r})(...o):o;n.forEach((e=>{e.branch=!0})),r.forEach((e=>e.push(...n)))}return r.finished=!0,r};return recurse(e)})(this)}},solveBranch=(e,t,r,o,n,...s)=>{if(!o.length)return[];const a=o[0],c=[],i=[];[1,2].forEach((r=>{const n=propagate(e,t,[a],...s,{[a]:r});!1!==n&&(n[a]=r,Object.keys(n).length===o.length?c.push(n):i.push(n))}));const l=i.map((e=>({faceOrders:e}))),d=i.map(((n,a)=>{const c=o.filter((e=>!(e in n)));return getBranches(c,e,t,r).map((o=>solveBranch(e,t,r,o,l[a],...s,n)))}));return c.length&&(n.finished=c.map((e=>({faceOrders:e})))),l.length&&(n.unfinished=l),l.length>1&&c.length&&console.log("HAPPENED"),c.map((e=>[...s,e])).concat(...d)};var fr=Object.assign(Object.create(null),{solver:(e,t=1e-6)=>{const{constraints:r,constraintsLookup:o,facePairs:n,edgeAdjacentOrders:s,faces_winding:a}=prepare$1(e,t),c=((e,t,r,o,n)=>{const s=propagate$1(e,t,Object.keys(o),o);if(!s)return;const a=r.filter((e=>!(e in o))).filter((e=>!(e in s))),c=solveNode(e,t,a,[],o,s);return reformatSolution(c,n)})(r,o,n,s,a);return Object.assign(Object.create(er),c)},solver2d:(e,t=1e-6)=>{const r=new Date,{constraints:o,constraintsLookup:n,facePairs:s,edgeAdjacentOrders:a}=prepare(e,t),c=Date.now()-r,i=new Date,l=propagate(o,n,Object.keys(a),a);if(!l)return;console.log("2D initialResult",JSON.parse(JSON.stringify(l)));const d={},m=s.filter((e=>!(e in a))).filter((e=>!(e in l))),p={},u=getBranches(m,o,n,p);console.log("branches",u);const g=u.map((()=>({}))),v=u.map(((e,t)=>solveBranch(o,n,p,e,g[t],a,l)));g.length&&(d.unfinished=g),d.faceOrders={...a,...l},console.log("2D solution",JSON.parse(JSON.stringify(d.faceOrders)));const h=e.faces_normal?e.faces_normal:makeFacesNormal(e),_=[0,0,1],recurse=e=>{e.faceOrders&&(e.faceOrders=((e,t,r)=>{const o=t.map((e=>we.dot(e,r)>0)),n=Object.keys(e),s=n.map((e=>e.split(" ").map((e=>parseInt(e,10)))));return s.forEach(((t,r)=>{const s=nr[e[n[r]]],a=o[t[1]]?s:-s;t.push(a)})),s})(e.faceOrders,h,_)),e.finished&&e.finished.forEach((e=>recurse(e))),e.unfinished&&e.unfinished.forEach((e=>recurse(e)))};recurse(d),console.log("2D solution final",JSON.parse(JSON.stringify(d.faceOrders)));const y=Date.now()-i;return console.log(`prep ${c}ms solver ${y}ms`),console.log("solution",d),console.log("branches",v),Object.assign(Object.create(lr),d)},topologicalOrder:(e,t)=>{if(!e)return[];const r=[];Object.keys(e).forEach((t=>{const o=t.split(" ").map((e=>parseInt(e,10)));-1===e[t]&&o.reverse(),void 0===r[o[0]]&&(r[o[0]]=[]),r[o[0]].push(o[1])})),t&&t.faces_vertices&&t.faces_vertices.forEach(((e,t)=>{void 0===r[t]&&(r[t]=[])}));const o=[],n=[];let s=0;for(let e=0;e<r.length;e+=1){if(n[e])continue;const t=[e];for(;t.length&&s<2*r.length;){const e=t[t.length-1];if(r[e]&&r[e].length){const o=r[e].pop();n[o]||t.push(o)}else o.push(e),n[e]=!0,t.pop(),s+=1}}return s>=2*r.length&&console.warn("fix protection in topological order"),o},singleVertexSolver:singleVertexSolver,singleVertexAssignmentSolver:(e,t,r)=>{null==t&&(t=e.map((()=>"U")));const o=maekawaAssignments(t),n=o.map((t=>singleVertexSolver(e,t,r)));return o.map(((e,t)=>t)).filter((e=>n[e].length>0)).map((e=>({assignment:o[e],layer:n[e]})))},foldStripWithAssignments:foldStripWithAssignments},qt,Ut);var dr=Object.freeze({__proto__:null,kawasakiSolutions:({vertices_coords:e,vertices_edges:t,edges_vertices:r,edges_vectors:o},n)=>{o||(o=makeEdgesVector({vertices_coords:e,edges_vertices:r})),t||(t=makeVerticesEdgesUnsorted({edges_vertices:r}));const s=t[n].map((e=>o[e])),a=we.counterClockwiseOrder2(s).map((e=>s[e]));return kawasakiSolutionsVectors(a)}}),mr=Object.assign(Object.create(null),{maekawaAssignments:maekawaAssignments,foldAngles4:(e,t,r=0)=>{const o=(e=>{let t=0,r=0;for(let o=0;o<e.length;o+=1)"M"!==e[o]&&"m"!==e[o]||(t+=1),"V"!==e[o]&&"v"!==e[o]||(r+=1);for(let o=0;o<e.length;o+=1){if(t>r&&("V"===e[o]||"v"===e[o]))return o;if(r>t&&("M"===e[o]||"m"===e[o]))return o}})(t);if(void 0===o)return;const n=e[(o+1)%e.length],s=e[(o+2)%e.length],a=Math.PI*r,c=-Math.cos(n)*Math.cos(s)+Math.sin(n)*Math.sin(s)*Math.cos(Math.PI-a),i=Math.cos(Math.PI-a)-Math.sin(Math.PI-a)**2*Math.sin(n)*Math.sin(s)/(1-c),l=-Math.acos(i)+Math.PI;return o%2==0?[l,a,l,a].map(((e,t)=>o===t?-e:e)):[a,l,a,l].map(((e,t)=>o===t?-e:e))}},ft,dr,ut),pr={axioms:{ar:[null,"اصنع خطاً يمر بنقطتين","اصنع خطاً عن طريق طي نقطة واحدة إلى أخرى","اصنع خطاً عن طريق طي خط واحد على آخر","اصنع خطاً يمر عبر نقطة واحدة ويجعل خطاً واحداً فوق نفسه","اصنع خطاً يمر بالنقطة الأولى ويجعل النقطة الثانية على الخط","اصنع خطاً يجلب النقطة الأولى إلى الخط الأول والنقطة الثانية إلى الخط الثاني","اصنع خطاً يجلب نقطة إلى خط ويجعل خط ثاني فوق نفسه"],de:[null,"Falte eine Linie durch zwei Punkte","Falte zwei Punkte aufeinander","Falte zwei Linien aufeinander","Falte eine Linie auf sich selbst, falte dabei durch einen Punkt","Falte einen Punkt auf eine Linie, falte dabei durch einen anderen Punkt","Falte einen Punkt auf eine Linie und einen weiteren Punkt auf eine weitere Linie","Falte einen Punkt auf eine Linie und eine weitere Linie in sich selbst zusammen"],en:[null,"fold a line through two points","fold two points together","fold two lines together","fold a line on top of itself, creasing through a point","fold a point to a line, creasing through another point","fold a point to a line and another point to another line","fold a point to a line and another line onto itself"],es:[null,"dobla una línea entre dos puntos","dobla dos puntos juntos","dobla y une dos líneas","dobla una línea sobre sí misma, doblándola hacia un punto","dobla un punto hasta una línea, doblándola a través de otro punto","dobla un punto hacia una línea y otro punto hacia otra línea","dobla un punto hacia una línea y otra línea sobre sí misma"],fr:[null,"créez un pli passant par deux points","pliez pour superposer deux points","pliez pour superposer deux lignes","rabattez une ligne sur elle-même à l'aide d'un pli qui passe par un point","rabattez un point sur une ligne à l'aide d'un pli qui passe par un autre point","rabattez un point sur une ligne et un autre point sur une autre ligne","rabattez un point sur une ligne et une autre ligne sur elle-même"],hi:[null,"एक क्रीज़ बनाएँ जो दो स्थानों से गुजरता है","एक स्थान को दूसरे स्थान पर मोड़कर एक क्रीज़ बनाएँ","एक रेखा पर दूसरी रेखा को मोड़कर क्रीज़ बनाएँ","एक क्रीज़ बनाएँ जो एक स्थान से गुजरता है और एक रेखा को स्वयं के ऊपर ले आता है","एक क्रीज़ बनाएँ जो पहले स्थान से गुजरता है और दूसरे स्थान को रेखा पर ले आता है","एक क्रीज़ बनाएँ जो पहले स्थान को पहली रेखा पर और दूसरे स्थान को दूसरी रेखा पर ले आता है","एक क्रीज़ बनाएँ जो एक स्थान को एक रेखा पर ले आता है और दूसरी रेखा को स्वयं के ऊपर ले आता है"],jp:[null,"2点に沿って折り目を付けます","2点を合わせて折ります","2つの線を合わせて折ります","点を通過させ、既にある線に沿って折ります","点を線沿いに合わせ別の点を通過させ折ります","線に向かって点を折り、同時にもう一方の線に向かってもう一方の点を折ります","線に向かって点を折り、同時に別の線をその上に折ります"],ko:[null,"두 점을 통과하는 선으로 접으세요","두 점을 함께 접으세요","두 선을 함께 접으세요","그 위에 선을 접으면서 점을 통과하게 접으세요","점을 선으로 접으면서, 다른 점을 지나게 접으세요","점을 선으로 접고 다른 점을 다른 선으로 접으세요","점을 선으로 접고 다른 선을 그 위에 접으세요"],ms:[null,"lipat garisan melalui dua titik","lipat dua titik bersama","lipat dua garisan bersama","lipat satu garisan di atasnya sendiri, melipat melalui satu titik","lipat satu titik ke garisan, melipat melalui titik lain","lipat satu titik ke garisan dan satu lagi titik ke garisan lain","lipat satu titik ke garisan dan satu lagi garisan di atasnya sendiri"],pt:[null,"dobre uma linha entre dois pontos","dobre os dois pontos para uni-los","dobre as duas linhas para uni-las","dobre uma linha sobre si mesma, criando uma dobra ao longo de um ponto","dobre um ponto até uma linha, criando uma dobra ao longo de outro ponto","dobre um ponto até uma linha e outro ponto até outra linha","dobre um ponto até uma linha e outra linha sobre si mesma"],ru:[null,"сложите линию через две точки","сложите две точки вместе","сложите две линии вместе","сверните линию сверху себя, сгибая через точку","сложите точку в линию, сгибая через другую точку","сложите точку в линию и другую точку в другую линию","сложите точку в линию и другую линию на себя"],tr:[null,"iki noktadan geçen bir çizgi boyunca katla","iki noktayı birbirine katla","iki çizgiyi birbirine katla","bir noktadan kıvırarak kendi üzerindeki bir çizgi boyunca katla","başka bir noktadan kıvırarak bir noktayı bir çizgiye katla","bir noktayı bir çizgiye ve başka bir noktayı başka bir çizgiye katla","bir noktayı bir çizgiye ve başka bir çizgiyi kendi üzerine katla"],vi:[null,"tạo một nếp gấp đi qua hai điểm","tạo nếp gấp bằng cách gấp một điểm này sang điểm khác","tạo nếp gấp bằng cách gấp một đường lên một đường khác","tạo một nếp gấp đi qua một điểm và đưa một đường lên trên chính nó","tạo một nếp gấp đi qua điểm đầu tiên và đưa điểm thứ hai lên đường thẳng","tạo một nếp gấp mang điểm đầu tiên đến đường đầu tiên và điểm thứ hai cho đường thứ hai","tạo một nếp gấp mang lại một điểm cho một đường và đưa một đường thứ hai lên trên chính nó"],zh:[null,"通過兩點折一條線","將兩點折疊起來","將兩條線折疊在一起","通過一個點折疊一條線在自身上面","將一個點，通過另一個點折疊成一條線，","將一個點折疊為一條線，再將另一個點折疊到另一條線","將一個點折疊成一條線，另一條線折疊到它自身上"]},instructions:{fold:{es:"doblez"},"valley fold":{es:"doblez de valle",zh:"谷摺"},"mountain fold":{es:"doblez de montaña",zh:"山摺"},"inside reverse fold":{zh:"內中割摺"},"outside reverse fold":{zh:"外中割摺"},sink:{},"open sink":{zh:"開放式沉壓摺"},"closed sink":{zh:"封閉式沉壓摺"},"rabbit ear":{zh:"兔耳摺"},"double rabbit ear":{zh:"雙兔耳摺"},"petal fold":{zh:"花瓣摺"},blintz:{zh:"坐墊基"},squash:{zh:"壓摺"},"flip over":{es:"dale la vuelta a tu papel"}}};const pairify=e=>e.map(((e,t,r)=>[e,r[(t+1)%r.length]])),getContainingValue=(e,t)=>Array.from(e.children).filter((e=>e.attributes.length&&void 0!==Array.from(e.attributes).filter((e=>e.nodeValue===t)).shift())).shift(),ur={children:[{textContent:"0"}]},gr=["F","B","M","V","U"],setMetadata=(e,t)=>{const r={file_description:"memo",file_author:"originalAuthorName",file_title:"title"};Object.keys(r).forEach((t=>{r[t]=((e,t)=>{const r=getContainingValue(e,t),o=r?Array.from(r.children).shift():null;return o?o.textContent:void 0})(e,r[t])})),Object.keys(r).filter((e=>r[e])).forEach((e=>{t[e]=r[e]})),t.file_classes=["singleModel"],t.frame_classes=["creasePattern"]},flattenDomTree=e=>null!=e.children&&e.children.length?Array.from(e.children).flatMap((e=>flattenDomTree(e))):[e],getAttributeValue=(e,t,r,o=[])=>{const n=r.style?r.style.match(new RegExp(`${e}[\\s]*:[^;]*;`)):null;if(n)return n[0].split(":")[1].replace(";","");const s=((e,t,r,o=[])=>{const n=r.class?r.class.split(/\s/).filter(Boolean).map((e=>e.trim())).map((e=>`.${e}`)):[],s=r.id?`#${r.id}`:null;if(s)for(let t=0;t<o.length;t+=1)if(o[t][s]&&o[t][s][e])return o[t][s][e];for(let r=0;r<o.length;r+=1){for(let t=0;t<n.length;t+=1)if(o[r][n[t]]&&o[r][n[t]][e])return o[r][n[t]][e];if(o[r][t]&&o[r][t][e])return o[r][t][e]}})(e,t,r,o);return void 0!==s?s:r[e]?r[e]:null};var vr={line:{x1:1,y1:1,x2:1,y2:1},rect:{x:1,y:1,width:1,height:1},circle:{cx:1,cy:1,r:1},ellipse:{cx:1,cy:1,rx:1,ry:1},polygon:{points:1},polyline:{points:1},path:{d:1}};const getAttributesFloatValue=(e,t)=>t.map((t=>e.getAttribute(t))).map((e=>null==e?"0":e)).map(parseFloat),PolygonToSegments=e=>(e=>{const t=e.split(/[\s,]+/).map((e=>parseFloat(e)));return Array.from(Array(Math.floor(t.length/2))).map(((e,r)=>[t[2*r+0],t[2*r+1]]))})(e.getAttribute("points")||"").map(((e,t,r)=>[r[t][0],r[t][1],r[(t+1)%r.length][0],r[(t+1)%r.length][1]])),hr={L:!0,V:!0,H:!0,Z:!0},_r={line:e=>[getAttributesFloatValue(e,["x1","y1","x2","y2"])],rect:function(e){const[t,r,o,n]=getAttributesFloatValue(e,["x","y","width","height"]);return[[t,r,t+o,r],[t+o,r,t+o,r+n],[t+o,r+n,t,r+n],[t,r+n,t,r]]},polygon:PolygonToSegments,polyline:function(e){const t=PolygonToSegments(e);return t.pop(),t},path:e=>$.svg.core.parsePathCommandsEndpoints(e.getAttribute("d")||"").filter((e=>hr[e.command.toUpperCase()])).map((e=>[e.start,e.end])).filter((e=>!we.fnEpsilonEqualVectors(...e))).map((e=>e.flat()))};var yr={black:"#000000",silver:"#c0c0c0",gray:"#808080",white:"#ffffff",maroon:"#800000",red:"#ff0000",purple:"#800080",fuchsia:"#ff00ff",green:"#008000",lime:"#00ff00",olive:"#808000",yellow:"#ffff00",navy:"#000080",blue:"#0000ff",teal:"#008080",aqua:"#00ffff",orange:"#ffa500",aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",blanchedalmond:"#ffebcd",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",oldlace:"#fdf5e6",olivedrab:"#6b8e23",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",whitesmoke:"#f5f5f5",yellowgreen:"#9acd32"};const hexToRGB=e=>{const t=e.replace(/#(?=\S)/g,""),r=Array.from(Array(6)).map(((e,r)=>t[r]||"0")),o=t.length<=4?[0,0,1,1,2,2].map((e=>r[e])).join(""):r.join(""),n=parseInt(o,16);return[n>>16&255,n>>8&255,255&n].map((e=>e/255))},parseCSSColor=e=>{if(yr[e])return hexToRGB(yr[e]);if("#"===e[0])return hexToRGB(e);if("rgba"===e.substring(0,4)||"rgb"===e.substring(0,3)){const t=(e=>{const t=e.match(/\(([^\)]+)\)/g);if(null!=t&&t.length)return t[0].substring(1,t[0].length-1).split(/[\s,]+/).map(parseFloat)})(e);return[0,1,2].forEach(((e,r)=>{t[r]/=255})),t}return[0,0,0]},br={M:[1,0,0],V:[0,0,1],F:[1,1,0],U:[1,0,1],C:[0,1,0]},parseCSSStyleSheet=e=>{if(!e.cssRules)return{};const t={};for(let r=0;r<e.cssRules.length;r+=1){const o=e.cssRules[r];if(1!==o.type)continue;const n=o.selectorText.split(/,/gm).filter(Boolean).map((e=>e.trim())),s={};Object.values(o.style).forEach((e=>{s[e]=o.style[e]})),n.forEach((e=>{t[e]=s}))}return t},parseStyleElement=e=>{if(e.sheet)return parseCSSStyleSheet(e.sheet);if(!((e=>{let t=e;for(;null!=t.parentNode;)t=t.parentNode;return t})(e).constructor===RabbitEarWindow().HTMLDocument)){const t=e.parentNode;null!=t&&t.removeChild(e);const r=null!=RabbitEarWindow().document.body?RabbitEarWindow().document.body:RabbitEarWindow().document.createElement("body");r.appendChild(e);const o=parseCSSStyleSheet(e.sheet);return r.removeChild(e),null!=t&&t.appendChild(e),o}return{}},objectifyAttributeList=function(e){const t={};return e.forEach((e=>{t[e.nodeName]=e.value})),t},svgToBasicGraph=e=>{const t="string"==typeof e?((e,t="text/xml")=>(new(RabbitEarWindow().DOMParser)).parseFromString(e,t).documentElement)(e,"image/svg+xml"):e,r=flattenDomTree(t),o=r.filter((e=>"style"===e.nodeName)).map(parseStyleElement),n=(e=>e.filter((e=>_r[e.tagName])).flatMap((e=>_r[e.tagName](e).map((t=>{return{nodeName:e.tagName,segment:t,attributes:objectifyAttributeList((r=e,Array.from(r.attributes).filter((e=>!vr[r.nodeName][e.nodeName]))))};var r})))))(r),s=n.map((e=>getAttributeValue("stroke",e.nodeName,e.attributes,o)||"black")).map((e=>(e=>{if(null==e||"string"!=typeof e)return"U";const t=parseCSSColor(e).slice(0,3),r=t.reduce(((e,t)=>e+t),0)/3,o=[r,r,r],n="F",s=we.distance3(t,o),a=Object.keys(br).map((e=>({key:e,distance:we.distance3(t,br[e])}))).sort(((e,t)=>e.distance-t.distance)).shift();return s<a.distance?n:a.key})(e))),a=n.map((e=>getAttributeValue("opacity",e.nodeName,e.attributes,o)||"1")).map(((e,t)=>((e,t)=>{switch(t){case"M":case"m":return-180*e;case"V":case"v":return 180*e;default:return 0}})(e,s[t])));return{vertices_coords:n.map((e=>e.segment)).flatMap((e=>[[e[0],e[1]],[e[2],e[3]]])),edges_vertices:n.map(((e,t)=>[2*t,2*t+1])),edges_assignment:s,edges_foldAngle:a}};var Er={objToFold:e=>{const t=e.split("\n").map((e=>e.trim().split(/\s+/))),r=(()=>{const e={};return e.file_spec=Mt,e.file_creator=jt,e.file_classes=["singleModel"],e.frame_classes=[],e.frame_attributes=[],e.vertices_coords=[],e.faces_vertices=[],e})();for(let e=0;e<t.length;e+=1)switch(t[e][0].toLowerCase()){case"f":r.faces_vertices.push(t[e].slice(1).map((e=>parseInt(e,10)-1)));break;case"v":r.vertices_coords.push(t[e].slice(1).map((e=>parseFloat(e))))}return r.faces_normal=makeFacesNormal(r),r.faces_center=makeFacesConvexCenter(r),r.edges_vertices=(({faces_vertices:e})=>{const t={},r=[];return e.flatMap(pairify).forEach((e=>{const o=[e.join(" "),`${e[1]} ${e[0]}`];o[0]in t||o[1]in t||(r.push(e),t[o[0]]=!0)})),r})(r),r.faces_edges=makeFacesEdgesFromVertices(r),r.edges_faces=makeEdgesFacesUnsorted(r),r.edges_foldAngle=makeEdgesFoldAngleFromFaces(r),r.edges_assignment=makeEdgesAssignment(r),r.vertices_vertices=makeVerticesVerticesFromFaces(r),delete r.faces_normal,delete r.faces_center,delete r.edges_faces,(e=>{if(!e.edges_foldAngle||!e.edges_foldAngle.length)return;let t=!0;for(let r=0;r<e.edges_foldAngle.length;r+=1)if(0!==e.edges_foldAngle[r]&&-180!==e.edges_foldAngle[r]&&180!==e.edges_foldAngle[r]){t=!1;break}e.frame_classes.push(t?"creasePattern":"foldedForm"),e.frame_attributes.push(t?"2D":"3D")})(r),r},opxToFold:(e,t)=>{try{const o=(new(RabbitEarWindow().DOMParser)).parseFromString(e,"text/xml"),n=Array.from(o.documentElement.children).filter((e=>Array.from(e.classList).includes("oripa.DataSet"))).shift(),s=((e,t)=>{const r={};if(r.vertices_coords=e.flatMap((e=>[[e[1],e[3]],[e[2],e[4]]])),r.edges_vertices=e.map(((e,t)=>[2*t,2*t+1])),r.edges_assignment=e.map((e=>gr[e[0]])),r.edges_foldAngle=makeEdgesFoldAngle(r),void 0===t){const{span:e}=we.boundingBox(r.vertices_coords);t=1e-6*Math.min(...e)}removeDuplicateVertices(r,t),r.vertices_vertices=makeVerticesVertices(r);const o=makePlanarFaces(r);return r.faces_vertices=o.map((e=>e.vertices)),r.faces_edges=o.map((e=>e.edges)),r})((r=(e=>{const t=getContainingValue(e,"lines"),r=t?Array.from(t.children).filter((e=>"oripa.OriLineProxy"===e.className)).shift():void 0;return r?Array.from(r.children):[]})(n),r.map((e=>{const t=Array.from(e.children[0].children);return["type","x0","x1","y0","y1"].map((e=>parseFloat((t.filter((t=>t.attributes[0].nodeValue===e)).shift()||ur).children[0].textContent)))}))),t);return setMetadata(n,s),s}catch(e){console.error(e)}var r},svgToFold:e=>{const t=(e=>{const t={...e};removeDuplicateVertices(t),fragment(t),t.vertices_vertices=makeVerticesVertices(t);const r=makePlanarFaces(t);t.faces_vertices=r.map((e=>e.vertices)),t.faces_edges=r.map((e=>e.edges));const{edges:o}=planarBoundary(t);return o.forEach((e=>{t.edges_assignment[e]="B"})),t})(svgToBasicGraph(e));return{file_spec:1.1,file_creator:"Rabbit Ear",frame_classes:["creasePattern"],...t}}};const addClassToClassList=(e,...t)=>{if(!e)return;const r={},o=e.getAttribute("class"),n=o?o.split(" "):[];n.push(...t),n.forEach((e=>{r[e]=!0}));const s=Object.keys(r).join(" ");e.setAttribute("class",s)},xr={},kr={stroke:y},Ar={},Or={M:{stroke:"red"},m:{stroke:"red"},V:{stroke:"blue"},v:{stroke:"blue"},F:{stroke:"lightgray"},f:{stroke:"lightgray"}},edgesPathData=e=>(({vertices_coords:e,edges_vertices:t})=>e&&t?t.map((t=>t.map((t=>e[t])))):[])(e).map((e=>{return`M${(t=e)[0][0]} ${t[0][1]}L${t[1][0]} ${t[1][1]}`;var t})).join(""),edgesPathDataAssign=({vertices_coords:e,edges_vertices:t,edges_assignment:r})=>{if(!e||!t)return{};if(!r)return{u:edgesPathData({vertices_coords:e,edges_vertices:t})};const o=(e=>{const t={u:[],f:[],v:[],m:[],b:[]},r=e[m].map((e=>e.toLowerCase()));return e[l].map(((e,t)=>r[t]||"u")).forEach(((e,r)=>t[e].push(r))),t})({vertices_coords:e,edges_vertices:t,edges_assignment:r});return Object.keys(o).forEach((r=>{o[r]=edgesPathData({vertices_coords:e,edges_vertices:o[r].map((e=>t[e]))})})),Object.keys(o).forEach((e=>{""===o[e]&&delete o[e]})),o},applyEdgesStyle=(e,t={})=>Object.keys(t).forEach((r=>e.setAttributeNS(null,r,t[r]))),edgesPaths=(e,t={})=>{const r=$.svg.g();if(!e)return r;const o=isFoldedForm(e),n=(({vertices_coords:e,edges_vertices:t,edges_assignment:r})=>{const o=edgesPathDataAssign({vertices_coords:e,edges_vertices:t,edges_assignment:r});return Object.keys(o).forEach((e=>{const t=$.svg.path(o[e]);addClassToClassList(t,ze[e]),o[e]=t})),o})(e);return Object.keys(n).forEach((e=>{addClassToClassList(n[e],ze[e]),applyEdgesStyle(n[e],o?Ar[e]:Or[e]),applyEdgesStyle(n[e],t[e]),applyEdgesStyle(n[e],t[ze[e]]),r.appendChild(n[e]),Object.defineProperty(r,ze[e],{get:()=>n[e]})})),applyEdgesStyle(r,o?xr:kr),applyEdgesStyle(r,t.stroke?{stroke:t.stroke}:{}),r},edgesLines=(e,t={})=>{const r=$.svg.g();if(!e)return r;const o=isFoldedForm(e),n=(e.edges_assignment?e.edges_assignment:makeEdgesAssignment(e)).map((e=>e.toLowerCase())),s={};["b","m","v","f","u"].forEach((e=>{const n=$.svg.g();r.appendChild(n),addClassToClassList(n,ze[e]),applyEdgesStyle(n,o?Ar[e]:Or[e]),applyEdgesStyle(n,t[ze[e]]),Object.defineProperty(r,ze[e],{get:()=>n}),s[e]=n}));const a=e.edges_vertices.map((t=>t.map((t=>e.vertices_coords[t])))).map((e=>$.svg.line(e[0][0],e[0][1],e[1][0],e[1][1])));return e.edges_foldAngle&&a.forEach(((t,r)=>{const o=e.edges_foldAngle[r];var n;0!==o&&180!==o&&-180!==o&&t.setAttributeNS(null,"opacity",(n=o,Math.abs(n)/180))})),a.forEach(((e,t)=>s[n[t]].appendChild(e))),applyEdgesStyle(r,o?xr:kr),applyEdgesStyle(r,t.stroke?{stroke:t.stroke}:{}),r},wr={back:{fill:b},front:{fill:"#ddd"}},Mr={back:{opacity:.1},front:{opacity:.1}},jr={},Pr={stroke:y,"stroke-linejoin":"bevel"},Sr={stroke:E,fill:y,"stroke-linejoin":"bevel"},Cr={fill:E},applyFacesStyle=(e,t={})=>Object.keys(t).forEach((r=>e.setAttributeNS(null,r,t[r]))),finalize_faces=(e,t,r,o)=>{const n=isFoldedForm(e),s=null!=e[u],a=[[v],[h]],c=makeFacesWinding(e);c.map((e=>e?a[0]:a[1])).forEach(((e,r)=>{addClassToClassList(t[r],e),applyFacesStyle(t[r],n?s?wr[e]:Mr[e]:jr[e]),applyFacesStyle(t[r],o[e])}));const i=s?function(e,t){const r=t.faces_vertices.length||t.faces_edges.length;return Array.from(Array(r)).map(((e,t)=>t)).filter((t=>null==e[t])).concat(invertMap(e))}(e[u],e).map((e=>t[e])):t;return i.forEach((e=>r.appendChild(e))),Object.defineProperty(r,v,{get:()=>t.filter(((e,t)=>c[t]))}),Object.defineProperty(r,h,{get:()=>t.filter(((e,t)=>!c[t]))}),applyFacesStyle(r,n?s?Pr:Sr:Cr),r},zr={fill:E},Fr={stroke:y,fill:b},Lr={vertices:(e,t={})=>{const r=$.svg.g();return e&&e.vertices_coords?(e.vertices_coords.map((e=>$.svg.circle(e[0],e[1],.01))).forEach((e=>r.appendChild(e))),r.setAttributeNS(null,"fill",E),Object.keys(t).forEach((e=>r.setAttributeNS(null,e,t[e]))),r):r},edges:(e,t)=>edgesFoldAngleAreAllFlat(e)?edgesPaths(e,t):edgesLines(e,t),faces:(e,t)=>e&&e.faces_vertices?((e,t={})=>{const r=$.svg.g();if(!e||!e.vertices_coords||!e.faces_vertices)return r;const n=e.faces_vertices.map((t=>t.map((t=>[0,1].map((r=>e.vertices_coords[t][r])))))).map((e=>$.svg.polygon(e)));return n.forEach(((e,t)=>e.setAttributeNS(null,o,t))),r.setAttributeNS(null,"fill",b),finalize_faces(e,n,r,t)})(e,t):e&&e[d]?function(e,t={}){const r=$.svg.g();if(!e||d in e==0||l in e==0||i in e==0)return r;const n=e[d].map((t=>t.map((t=>e[l][t])).map(((e,t,r)=>{const o=r[(t+1)%r.length];return e[1]===o[0]||e[1]===o[1]?e[0]:e[1]})).map((t=>[0,1].map((r=>e[i][t][r])))))).map((e=>$.svg.polygon(e)));return n.forEach(((e,t)=>e.setAttributeNS(null,o,t))),r.setAttributeNS(null,"fill","white"),finalize_faces(e,n,r,t)}(e,t):$.svg.g(),boundaries:(e,t={})=>{const r=$.svg.g();if(!(e&&e.vertices_coords&&e.edges_vertices&&e.edges_assignment))return r;const o=boundary(e).vertices.map((t=>[0,1].map((r=>e.vertices_coords[t][r]))));if(0===o.length)return r;const n=$.svg.polygon(o);return addClassToClassList(n,g),r.appendChild(n),((e,t={})=>{Object.keys(t).forEach((r=>e.setAttributeNS(null,r,t[r])))})(r,isFoldedForm(e)?zr:Fr),Object.keys(t).forEach((e=>r.setAttributeNS(null,e,t[e]))),r}},drawGroup=(e,t,r)=>{const o=!1===r?$.svg.g():Lr[e](t,r);return addClassToClassList(o,e),o},DrawGroups=(e,t={})=>[c,a,s,n].map((r=>drawGroup(r,e,t[r])));[c,a,s,n].forEach((e=>{DrawGroups[e]=function(t,r={}){return drawGroup(e,t,r[e])}}));const getBoundingRect=({vertices_coords:e})=>{if(null==e||0===e.length)return;const t=Array(2).fill(1/0),r=Array(2).fill(-1/0);e.forEach((e=>{e[0]<t[0]&&(t[0]=e[0]),e[0]>r[0]&&(r[0]=e[0]),e[1]<t[1]&&(t[1]=e[1]),e[1]>r[1]&&(r[1]=e[1])}));return Number.isNaN(t[0])||Number.isNaN(t[1])||Number.isNaN(r[0])||Number.isNaN(r[1])?void 0:[t[0],t[1],r[0]-t[0],r[1]-t[1]]},findSVGInParents=e=>"SVG"===(e.nodeName||"").toUpperCase()?e:e.parentNode?findSVGInParents(e.parentNode):void 0,applyTopLevelOptions=(e,t,r,o)=>{const n=t[3]&&t[3].childNodes.length;if(!(o.strokeWidth||o.viewBox||n))return;const s=getBoundingRect(r),a=s?Math.max(s[2],s[3]):1,c=findSVGInParents(e);if(c&&o.viewBox){const e=s?s.join(" "):"0 0 1 1";c.setAttributeNS(null,"viewBox",e)}if(c&&o.padding){const e=c.getAttribute("viewBox");if(null!=e){const t=o.padding*a,r=e.split(" ").map((e=>parseFloat(e))),n=[-t,-t,2*t,2*t].map(((e,t)=>r[t]+e)).join(" ");c.setAttributeNS(null,"viewBox",n)}}if(o.strokeWidth||o["stroke-width"]){const t=o.strokeWidth?o.strokeWidth:o["stroke-width"],n=(({vertices_coords:e,edges_vertices:t,edges_length:r})=>{if(!e||!t)return;r||(r=makeEdgesLength({vertices_coords:e,edges_vertices:t}));const o=r.slice().sort(((e,t)=>e-t));return o[Math.floor(.1*o.length)]})(r);let s;s=n?"number"==typeof t?10*n*t:10*n*.01:"number"==typeof t?a*t:.01*a,e.setAttributeNS(null,"stroke-width",s)}if(n){const e=o.vertices&&null!=o.vertices.radius?o.vertices.radius:o.radius,r="string"==typeof e?parseFloat(e):e,n="number"!=typeof r||Number.isNaN(r)?.02*a:a*r;((e,t)=>{for(let r=0;r<e.childNodes.length;r+=1)e.childNodes[r].setAttributeNS(null,"r",t)})(t[3],n)}},drawInto=(e,t,r={})=>{const o=DrawGroups(t,r);return o.filter((e=>e.childNodes.length>0)).forEach((t=>e.appendChild(t))),applyTopLevelOptions(e,o,t,r),((e,t)=>{const r=[t.file_classes||[],t.frame_classes||[]].flat();r.length&&addClassToClassList(e,...r)})(e,t),Object.keys(DrawGroups).map(((e,t)=>({key:e,i:t}))).filter((t=>null==e[t.key])).forEach((t=>Object.defineProperty(e,t.key,{get:()=>o[t.i]}))),e},FOLDtoSVG=(e,t)=>drawInto($.svg(),e,t);Object.keys(DrawGroups).forEach((e=>{FOLDtoSVG[e]=DrawGroups[e]})),FOLDtoSVG.drawInto=drawInto,FOLDtoSVG.getViewBox=e=>{const t=getBoundingRect(e);return void 0===t?"":t.join(" ")},Object.defineProperty(FOLDtoSVG,"linker",{enumerable:!1,value:function(e){e.graph.svg=this;const t={svg:this};Object.keys(t).forEach((r=>{e.graph.prototype[r]=function(){return t[r](this,...arguments)}}))}.bind(FOLDtoSVG)});const Nr={init:()=>{}};function SVG(){return Nr.init(...arguments)}const Vr="class",$r="function",Ir="undefined",Tr="number",Br="string",qr="object",Ur="svg",Rr="path",Dr="id",Wr="style",Gr="viewBox",Zr="transform",Yr="points",Jr="stroke",Hr="none",Xr="arrow",Kr="head",Qr="tail",eo=typeof window!==Ir&&typeof window.document!==Ir,to=typeof process!==Ir&&null!=process.versions&&null!=process.versions.node,ro=[];ro[10]='"error 010: window" not set. if using node/deno, include package @xmldom/xmldom, set to the main export ( ear.window = xmldom; )';const oo={window:void 0};eo&&(oo.window=window);const SVGWindow=()=>{if(void 0===oo.window)throw ro[10];return oo.window};var no="http://www.w3.org/2000/svg",so={s:["svg"],d:["defs"],h:["desc","filter","metadata","style","script","title","view"],c:["cdata"],g:["g"],v:["circle","ellipse","line","path","polygon","polyline","rect"],t:["text"],i:["marker","symbol","clipPath","mask"],p:["linearGradient","radialGradient","pattern"],cT:["textPath","tspan"],cG:["stop"],cF:["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]};const svg_add2=(e,t)=>[e[0]+t[0],e[1]+t[1]],svg_sub2=(e,t)=>[e[0]-t[0],e[1]-t[1]],svg_scale2=(e,t)=>[e[0]*t,e[1]*t],svg_magnitudeSq2=e=>e[0]**2+e[1]**2,svg_magnitude2=e=>Math.sqrt(svg_magnitudeSq2(e)),svg_distanceSq2=(e,t)=>svg_magnitudeSq2(svg_sub2(e,t)),svg_distance2=(e,t)=>Math.sqrt(svg_distanceSq2(e,t)),svg_polar_to_cart=(e,t)=>[Math.cos(e)*t,Math.sin(e)*t];var ao=Object.freeze({__proto__:null,svg_add2:svg_add2,svg_sub2:svg_sub2,svg_scale2:svg_scale2,svg_magnitudeSq2:svg_magnitudeSq2,svg_magnitude2:svg_magnitude2,svg_distanceSq2:svg_distanceSq2,svg_distance2:svg_distance2,svg_polar_to_cart:svg_polar_to_cart});const arcPath=(e,t,r,o,n,s=!1)=>{if(null==n)return"";const a=svg_polar_to_cart(o,r),c=svg_polar_to_cart(n,r),i=[c[0]-a[0],c[1]-a[1]],l=a[0]*c[1]-a[1]*c[0],d=a[0]*c[0]+a[1]*c[1],m=Math.atan2(l,d)>0?0:1;let p=s?`M ${e},${t} l ${a[0]},${a[1]} `:`M ${e+a[0]},${t+a[1]} `;return p+=["a ",r,r,0,m,1,i[0],i[1]].join(" "),s&&(p+=" Z"),p},arcArguments=(e,t,r,o,n)=>[arcPath(e,t,r,o,n,!1)];var co={arc:{nodeName:Rr,attributes:["d"],args:arcArguments,methods:{setArc:(e,...t)=>e.setAttribute("d",arcArguments(...t))}}};const wedgeArguments=(e,t,r,o,n)=>[arcPath(e,t,r,o,n,!0)];var io={wedge:{nodeName:Rr,args:wedgeArguments,attributes:["d"],methods:{setArc:(e,...t)=>e.setAttribute("d",wedgeArguments(...t))}}};const parabolaArguments=(e=-1,t=0,r=2,o=1)=>Array.from(Array(129)).map(((e,t)=>(t-128)/128*2+1)).map((n=>[e+(n+1)*r*.5,t+n**2*o]));var lo={parabola:{nodeName:"polyline",attributes:[Yr],args:(e,t,r,o)=>[parabolaArguments(e,t,r,o).map((e=>`${e[0]},${e[1]}`)).join(" ")]}};const regularPolygonArguments=(e,t,r,o)=>{const n=[t,r];return Array.from(Array(e)).map(((t,r)=>2*Math.PI*(r/e))).map((e=>[Math.cos(e),Math.sin(e)])).map((e=>n.map(((t,r)=>t+o*e[r]))))};var fo={regularPolygon:{nodeName:"polygon",attributes:[Yr],args:(e,t=0,r=0,o=1)=>[regularPolygonArguments(e,t,r,o).map((e=>`${e[0]},${e[1]}`)).join(" ")]}};var mo={roundRect:{nodeName:Rr,attributes:["d"],args:(e,t,r,o,n=0)=>{n>r/2&&(n=r/2),n>o/2&&(n=o/2);const s=r-2*n,a=o-2*n,c=`A${n} ${n} 0 0 1`;return[[`M${e+(r-s)/2},${t}`,`h${s}`,c,`${e+r},${t+(o-a)/2}`,`v${a}`,c,`${e+r-n},${t+o}`,"h"+-s,c,`${e},${t+o-n}`,"v"+-a,c,`${e+n},${t}`].join(" ")]}}},po={toCamel:e=>e.replace(/([-_][a-z])/gi,(e=>e.toUpperCase().replace("-","").replace("_",""))),toKebab:e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z])([A-Z])(?=[a-z])/g,"$1-$2").toLowerCase(),capitalized:e=>e.charAt(0).toUpperCase()+e.slice(1)};const svg_is_iterable=e=>null!=e&&typeof e[Symbol.iterator]===$r,svg_semi_flatten_arrays=function(){switch(arguments.length){case void 0:case 0:return Array.from(arguments);case 1:return svg_is_iterable(arguments[0])&&typeof arguments[0]!==Br?svg_semi_flatten_arrays(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map((e=>svg_is_iterable(e)?[...svg_semi_flatten_arrays(e)]:e))}};var coordinates=(...e)=>e.filter((e=>typeof e===Tr)).concat(e.filter((e=>typeof e===qr&&null!==e)).map((e=>typeof e.x===Tr?[e.x,e.y]:typeof e[0]===Tr?[e[0],e[1]]:void 0)).filter((e=>void 0!==e)).reduce(((e,t)=>e.concat(t)),[]));const uo=[Qr,Kr],stringifyPoint=e=>e.join(","),pointsToPath=e=>"M"+e.map((e=>e.join(","))).join("L")+"Z",setArrowheadOptions=(e,t,r)=>{"boolean"==typeof t?e.options[r].visible=t:typeof t===qr?(Object.assign(e.options[r],t),null==t.visible&&(e.options[r].visible=!0)):null==t&&(e.options[r].visible=!0)},setArrowStyle=(e,t={},r=Kr)=>{const o=e.getElementsByClassName(`${Xr}-${r}`)[0];Object.keys(t).map((e=>({key:e,fn:o[po.toCamel(e)]}))).filter((e=>typeof e.fn===$r&&"class"!==e.key)).forEach((e=>e.fn(t[e.key]))),Object.keys(t).filter((e=>"class"===e)).forEach((e=>o.classList.add(t[e])))},redraw=e=>{const t=function(e){let t=[[0,1],[2,3]].map((t=>t.map((t=>e.points[t]||0)))),r=svg_sub2(t[1],t[0]),o=svg_add2(t[0],svg_scale2(r,.5));const n=svg_magnitude2(r),s=uo.map((t=>e[t].visible?(1+e[t].padding)*e[t].height*2.5:0)).reduce(((e,t)=>e+t),0);if(n<s){const e=0===n?[s,0]:svg_scale2(r,s/n);t=[svg_sub2,svg_add2].map((t=>t(o,svg_scale2(e,.5)))),r=svg_sub2(t[1],t[0])}let a=[r[1],-r[0]],c=svg_add2(o,svg_scale2(a,e.bend));const i=t.map((e=>svg_sub2(c,e))),l=i.map((e=>svg_magnitude2(e))),d=i.map(((e,t)=>0===l[t]?e:svg_scale2(e,1/l[t]))),m=d.map((e=>svg_scale2(e,-1))),p=m.map((e=>[e[1],-e[0]])),u=uo.map(((t,r)=>e[t].padding?e[t].padding:e.padding?e.padding:0)),g=uo.map(((t,r)=>e[t].height*(e[t].visible?1:0))).map(((e,t)=>e+u[t])),v=t.map(((e,t)=>svg_add2(e,svg_scale2(d[t],g[t]))));r=svg_sub2(v[1],v[0]),a=[r[1],-r[0]],o=svg_add2(v[0],svg_scale2(r,.5)),c=svg_add2(o,svg_scale2(a,e.bend));const h=v.map(((t,r)=>svg_add2(t,svg_scale2(svg_sub2(c,t),e.pinch)))),_=uo.map(((t,r)=>[svg_add2(v[r],svg_scale2(m[r],e[t].height)),svg_add2(v[r],svg_scale2(p[r],e[t].width/2)),svg_add2(v[r],svg_scale2(p[r],-e[t].width/2))]));return{line:`M${stringifyPoint(v[0])}C${stringifyPoint(h[0])},${stringifyPoint(h[1])},${stringifyPoint(v[1])}`,tail:pointsToPath(_[0]),head:pointsToPath(_[1])}}(e.options);return Object.keys(t).map((t=>({path:t,element:e.getElementsByClassName(`${Xr}-${t}`)[0]}))).filter((e=>e.element)).map((e=>(e.element.setAttribute("d",t[e.path]),e))).filter((t=>e.options[t.path])).forEach((t=>t.element.setAttribute("visibility",e.options[t.path].visible?"visible":"hidden"))),e},setPoints$3=(e,...t)=>(e.options.points=coordinates(...svg_semi_flatten_arrays(...t)).slice(0,4),redraw(e));var go={setPoints:setPoints$3,points:setPoints$3,bend:(e,t)=>(e.options.bend=t,redraw(e)),pinch:(e,t)=>(e.options.pinch=t,redraw(e)),padding:(e,t)=>(e.options.padding=t,redraw(e)),head:(e,t)=>(setArrowheadOptions(e,t,Kr),setArrowStyle(e,t,Kr),redraw(e)),tail:(e,t)=>(setArrowheadOptions(e,t,Qr),setArrowStyle(e,t,Qr),redraw(e)),getLine:e=>e.getElementsByClassName(`${Xr}-line`)[0],getHead:e=>e.getElementsByClassName(`${Xr}-${Kr}`)[0],getTail:e=>e.getElementsByClassName(`${Xr}-${Qr}`)[0]};const vo=Object.keys({head:{visible:!1,width:8,height:10,padding:0},tail:{visible:!1,width:8,height:10,padding:0},bend:0,padding:0,pinch:.618,points:[]});var ho={arrow:{nodeName:"g",attributes:[],args:()=>[],methods:go,init:function(e,...t){e.classList.add(Xr);const r=["line",Qr,Kr].map((t=>SVG.path().addClass(`${Xr}-${t}`).appendTo(e)));r[0].setAttribute(Wr,"fill:none;"),r[1].setAttribute(Jr,Hr),r[2].setAttribute(Jr,Hr),e.options={head:{visible:!1,width:8,height:10,padding:0},tail:{visible:!1,width:8,height:10,padding:0},bend:0,padding:0,pinch:.618,points:[]},go.setPoints(e,...t);const o=((...e)=>{for(let t=0;t<e.length;t+=1){if(typeof e[t]!==qr)continue;const r=Object.keys(e[t]);for(let o=0;o<r.length;o+=1)if(vo.includes(r[o]))return e[t]}})(...t);return o&&Object.keys(o).filter((e=>go[e])).forEach((t=>go[t](e,o[t]))),e}}};const svg_flatten_arrays=function(){return svg_semi_flatten_arrays(arguments).reduce(((e,t)=>e.concat(t)),[])},makeCurvePath=(e=[],t=0,r=.5)=>{const o=[e[0]||0,e[1]||0],n=[e[2]||0,e[3]||0],s=svg_sub2(n,o),a=svg_add2(o,svg_scale2(s,.5)),c=[s[1],-s[0]],i=svg_add2(a,svg_scale2(c,t)),l=svg_add2(o,svg_scale2(svg_sub2(i,o),r)),d=svg_add2(n,svg_scale2(svg_sub2(i,n),r));return`M${o[0]},${o[1]}C${l[0]},${l[1]} ${d[0]},${d[1]} ${n[0]},${n[1]}`},getNumbersFromPathCommand=e=>e.slice(1).split(/[, ]+/).map((e=>parseFloat(e))),getCurveEndpoints=e=>{const t=(e=>e.match(/[Mm][(0-9), .-]+/).map((e=>getNumbersFromPathCommand(e))))(e).shift(),r=(e=>e.match(/[Cc][(0-9), .-]+/).map((e=>getNumbersFromPathCommand(e))))(e).shift();return[...t?[t[t.length-2],t[t.length-1]]:[0,0],...r?[r[r.length-2],r[r.length-1]]:[0,0]]},setPoints$2=(e,...t)=>{const r=coordinates(...svg_flatten_arrays(...t)).slice(0,4);return e.setAttribute("d",makeCurvePath(r,e._bend,e._pinch)),e};var _o={curve:{nodeName:Rr,attributes:["d"],args:(...e)=>[makeCurvePath(coordinates(...svg_flatten_arrays(...e)))],methods:{setPoints:setPoints$2,bend:(e,t)=>(e._bend=t,setPoints$2(e,...getCurveEndpoints(e.getAttribute("d")))),pinch:(e,t)=>(e._pinch=t,setPoints$2(e,...getCurveEndpoints(e.getAttribute("d"))))}}};const yo={};Object.assign(yo,co,io,lo,fo,mo,ho,_o);const bo=Object.keys(yo),Eo=[so.h,so.p,so.i],xo=[so.g,so.v,so.t,bo],ko={svg:[so.s,so.d].concat(Eo).concat(xo),g:xo,text:[so.cT],linearGradient:[so.cG],radialGradient:[so.cG],defs:Eo,filter:[so.cF],marker:xo,symbol:xo,clipPath:xo,mask:xo},Ao=Object.create(null);Object.keys(ko).forEach((e=>{Ao[e]=ko[e].reduce(((e,t)=>e.concat(t)),[])}));const viewBoxValue=function(e,t,r,o,n=0){const s=r/1-r;return[e-s-n,t-s-n,r+2*s+2*n,o+2*s+2*n].join(" ")};function viewBox$1(){const e=coordinates(...svg_flatten_arrays(arguments));return 2===e.length&&e.unshift(0,0),4===e.length?viewBoxValue(...e):void 0}const cdata=e=>(new(SVGWindow().DOMParser)).parseFromString("<root></root>","text/xml").createCDATASection(`${e}`),removeChildren=e=>{for(;e.lastChild;)e.removeChild(e.lastChild);return e},moveChildren=(e,t)=>{for(;t.childNodes.length>0;){const r=t.childNodes[0];t.removeChild(r),e.appendChild(r)}return e},assignSVG=(e,t)=>(Array.from(t.attributes).forEach((t=>e.setAttribute(t.name,t.value))),moveChildren(e,t));var Oo={removeChildren:removeChildren,appendTo:(e,t)=>(null!=t&&t.appendChild(e),e),setAttributes:(e,t)=>Object.keys(t).forEach((r=>e.setAttribute(po.toKebab(r),t[r])))};const filterWhitespaceNodes=e=>{if(null===e)return e;for(let t=e.childNodes.length-1;t>=0;t-=1){const r=e.childNodes[t];3===r.nodeType&&r.data.match(/^\s*$/)&&e.removeChild(r),1===r.nodeType&&filterWhitespaceNodes(r)}return e},parse=e=>(new(SVGWindow().DOMParser)).parseFromString(e,"text/xml"),checkParseError=e=>{const t=e.getElementsByTagName("parsererror");if(t.length>0)throw new Error(t[0]);return filterWhitespaceNodes(e.documentElement)},sync=function(e){if(typeof e===Br||e instanceof String)try{return checkParseError(parse(e))}catch(e){return e}if(null!=e.childNodes)return e},Load=e=>(e=>typeof e===Br&&/^[\w,\s-]+\.[A-Za-z]{3}$/.test(e)&&e.length<1e4)(e)&&eo&&typeof SVGWindow().fetch===$r?function(e){return new Promise(((t,r)=>{if(typeof e===Br||e instanceof String)fetch(e).then((e=>e.text())).then((e=>checkParseError(parse(e)))).then((e=>e.nodeName===Ur?e:e.getElementsByTagName(Ur)[0])).then((e=>null==e?r(new Error("valid XML found, but no SVG element")):t(e))).catch((e=>r(e)));else if(e instanceof SVGWindow().Document)return asyncDone(e)}))}(e):sync(e);const save=function(e,t){if((t=Object.assign({download:!1,output:Br,windowStyle:!1,filename:"image.svg"},t)).windowStyle){const t=SVGWindow().document.createElementNS(no,Wr);t.setAttribute("type","text/css"),t.innerHTML=function(){const e=[];if(SVGWindow().document.styleSheets)for(let t=0;t<SVGWindow().document.styleSheets.length;t+=1){const r=SVGWindow().document.styleSheets[t];try{const t="cssRules"in r?r.cssRules:r.rules;for(let r=0;r<t.length;r+=1){const o=t[r];"cssText"in o?e.push(o.cssText):e.push(`${o.selectorText} {\n${o.style.cssText}\n}\n`)}}catch(e){console.warn(e)}}return e.join("\n")}(),e.appendChild(t)}const r=function vkXML(e,t){const r=e.replace(/>\s{0,}</g,"><").replace(/</g,"~::~<").replace(/\s*xmlns\:/g,"~::~xmlns:").split("~::~"),o=r.length;let n=!1,s=0,a="";const c=null!=t&&"string"==typeof t?t:"\t",i=["\n"];for(let e=0;e<100;e+=1)i.push(i[e]+c);for(let e=0;e<o;e+=1)r[e].search(/<!/)>-1?(a+=i[s]+r[e],n=!0,(r[e].search(/-->/)>-1||r[e].search(/\]>/)>-1||r[e].search(/!DOCTYPE/)>-1)&&(n=!1)):r[e].search(/-->/)>-1||r[e].search(/\]>/)>-1?(a+=r[e],n=!1):/^<\w/.exec(r[e-1])&&/^<\/\w/.exec(r[e])&&/^<[\w:\-\.\,]+/.exec(r[e-1])==/^<\/[\w:\-\.\,]+/.exec(r[e])[0].replace("/","")?(a+=r[e],n||(s-=1)):r[e].search(/<\w/)>-1&&-1===r[e].search(/<\//)&&-1===r[e].search(/\/>/)?a=a+=n?r[e]:i[s++]+r[e]:r[e].search(/<\w/)>-1&&r[e].search(/<\//)>-1?a=a+=n?r[e]:i[s]+r[e]:r[e].search(/<\//)>-1?a=a+=n?r[e]:i[--s]+r[e]:r[e].search(/\/>/)>-1?a=a+=n?r[e]:i[s]+r[e]:r[e].search(/<\?/)>-1||r[e].search(/xmlns\:/)>-1||r[e].search(/xmlns\=/)>-1?a+=i[s]+r[e]:a+=r[e];return"\n"===a[0]?a.slice(1):a}((new(SVGWindow().XMLSerializer)).serializeToString(e));return t.download&&eo&&!to&&function(e,t){const r=new(SVGWindow().Blob)([t],{type:"text/plain"}),o=SVGWindow().document.createElement("a");o.setAttribute("href",SVGWindow().URL.createObjectURL(r)),o.setAttribute("download",e),SVGWindow().document.body.appendChild(o),o.click(),SVGWindow().document.body.removeChild(o)}(t.filename,r),t.output===Ur?e:r},setViewBox=(e,...t)=>{const r=1===t.length&&typeof t[0]===Br?t[0]:viewBox$1(...t);return r&&e.setAttribute(Gr,r),e},getViewBox=function(e){const t=e.getAttribute(Gr);return null==t?void 0:t.split(" ").map((e=>parseFloat(e)))},convertToViewBox=function(e,t,r){const o=e.createSVGPoint();o.x=t,o.y=r;const n=o.matrixTransform(e.getScreenCTM().inverse());return[n.x,n.y]};var wo=Object.freeze({__proto__:null,setViewBox:setViewBox,getViewBox:getViewBox,convertToViewBox:convertToViewBox});const loadSVG=(e,t)=>{const r=Load(t);if(null!=r)return typeof r.then===$r?r.then((t=>assignSVG(e,t))):assignSVG(e,r)},getFrame=function(e){const t=getViewBox(e);if(void 0!==t)return t;if(typeof e.getBoundingClientRect===$r){const t=e.getBoundingClientRect();return[t.x,t.y,t.width,t.height]}return[]},Mo="svg-background-rectangle",stylesheet=function(e,t){let r=function(e){const t=e.getElementsByTagName(Wr);return 0===t.length?void 0:t[0]}(e);return null==r&&(r=this.Constructor(Wr),e.insertBefore(r,e.firstChild)),r.textContent="",r.appendChild(cdata(t)),r};var jo={clear:e=>(Array.from(e.attributes).filter((e=>"xmlns"!==e)).forEach((t=>e.removeAttribute(t.name))),removeChildren(e)),size:setViewBox,setViewBox:setViewBox,getViewBox:getViewBox,padding:function(e,t){const r=getViewBox(e);return void 0!==r&&setViewBox(e,...[-t,-t,2*t,2*t].map(((e,t)=>r[t]+e))),e},background:function(e,t){let r=Array.from(e.childNodes).filter((e=>e.getAttribute(Vr)===Mo)).shift();return null==r&&(r=this.Constructor("rect",null,...getFrame(e)),r.setAttribute(Vr,Mo),r.setAttribute(Jr,Hr),e.insertBefore(r,e.firstChild)),r.setAttribute("fill",t),e},getWidth:e=>getFrame(e)[2],getHeight:e=>getFrame(e)[3],stylesheet:function(e,t){return stylesheet.call(this,e,t)},load:loadSVG,save:save};const Po={math:{vector:(...e)=>[...e]}},So={move:["mousemove","touchmove"],press:["mousedown","touchstart"],release:["mouseup","touchend"],leave:["mouseleave","touchcancel"]},Co=Object.values(So).reduce(((e,t)=>e.concat(t)),[]),defineGetter=(e,t,r)=>Object.defineProperty(e,t,{get:()=>r,enumerable:!0,configurable:!0}),assignPress=(e,t)=>{["pressX","pressY"].filter((t=>!Object.prototype.hasOwnProperty.call(e,t))).forEach(((r,o)=>defineGetter(e,r,t[o]))),Object.prototype.hasOwnProperty.call(e,"press")||defineGetter(e,"press",Po.math.vector(...t))},TouchEvents=function(e){let t=[];const r=[];Object.keys(So).forEach((e=>{So[e].forEach((e=>{r[e]=[]}))}));const o={press:(e,r)=>{t=r,assignPress(e,t)},release:()=>{},leave:()=>{},move:(e,r)=>{e.buttons>0&&void 0===t[0]?t=r:0===e.buttons&&void 0!==t[0]&&(t=[]),assignPress(e,t)}};Object.keys(So).forEach((t=>{const n=`on${po.capitalized(t)}`;Object.defineProperty(e,n,{set:n=>{null!=n?So[t].forEach((s=>{const handlerFunc=r=>{const s=null!=r.touches?r.touches[0]:r;if(void 0!==s){const n=convertToViewBox(e,s.clientX,s.clientY).map((e=>Number.isNaN(e)?void 0:e));["x","y"].filter((e=>!Object.prototype.hasOwnProperty.call(r,e))).forEach(((e,t)=>defineGetter(r,e,n[t]))),Object.prototype.hasOwnProperty.call(r,"position")||defineGetter(r,"position",Po.math.vector(...n)),o[t](r,n)}n(r)};e.addEventListener&&(r[s].push(handlerFunc),e.addEventListener(s,handlerFunc))})):(t=>{So[t].forEach((t=>r[t].forEach((r=>e.removeEventListener(t,r)))))})(t)},enumerable:!0})})),Object.defineProperty(e,"off",{value:()=>((e,t)=>Co.forEach((r=>{t[r].forEach((t=>e.removeEventListener(r,t))),t[r]=[]})))(e,r)})};var UUID=()=>Math.random().toString(36).replace(/[^a-z]+/g,"").concat("aaaaa").substr(0,5);const zo=[["cx","cy"],["x","y"]],controlPoint=function(e,t={}){const r=[0,0],o={selected:!1,svg:void 0,updatePosition:e=>e},updateSVG=()=>{o.svg&&(o.svg.parentNode||e.appendChild(o.svg),zo.filter((e=>null!=o.svg[e[0]])).forEach((e=>e.forEach(((e,t)=>{o.svg.setAttribute(e,r[t])})))))},n=new Proxy(r,{set:(e,t,r)=>(e[t]=r,updateSVG(),!0)}),setPosition=function(...e){coordinates(...svg_flatten_arrays(...e)).forEach(((e,t)=>{r[t]=e})),updateSVG(),typeof r.delegate===$r&&r.delegate.apply(r.pointsContainer,[n,r.pointsContainer])};return r.delegate=void 0,r.setPosition=setPosition,r.onMouseMove=e=>o.selected?setPosition(o.updatePosition(e)):void 0,r.onMouseUp=()=>{o.selected=!1},r.distance=e=>Math.sqrt(svg_distanceSq2(e,r)),["x","y"].forEach(((e,t)=>Object.defineProperty(r,e,{get:()=>r[t],set:e=>{r[t]=e}}))),[Ur,"updatePosition","selected"].forEach((e=>Object.defineProperty(r,e,{get:()=>o[e],set:t=>{o[e]=t}}))),Object.defineProperty(r,"remove",{value:()=>{var e;(e=o.svg)&&e.parentNode&&e.parentNode.removeChild(e),r.delegate=void 0}}),n},controls=function(e,t,r){let o,n;const s=Array.from(Array(t)).map((()=>controlPoint(e,r))),protocol=e=>typeof n===$r?n.call(s,e,o,s):void 0;s.forEach((e=>{e.delegate=protocol,e.pointsContainer=s}));e.onPress=function(e){s.length>0&&(o=s.map(((t,r)=>({i:r,d:svg_distanceSq2(t,[e.x,e.y])}))).sort(((e,t)=>e.d-t.d)).shift().i,s[o].selected=!0)},e.onMove=function(e){s.forEach((t=>t.onMouseMove(e)))},e.onRelease=function(){s.forEach((e=>e.onMouseUp())),o=void 0},Object.defineProperty(s,"selectedIndex",{get:()=>o}),Object.defineProperty(s,"selected",{get:()=>s[o]}),Object.defineProperty(s,"add",{value:t=>{s.push(controlPoint(e,t))}}),s.removeAll=()=>{for(;s.length>0;)s.pop().remove()};const a={onChange:(e,t)=>{if(n=e,!0===t){const t=s.length-1;e.call(s,s[t],t,s)}},position:e=>s.forEach(((t,r)=>t.setPosition(e.call(s,t,r,s)))),svg:e=>s.forEach(((t,r)=>{t.svg=e.call(s,t,r,s)}))};return Object.keys(a).forEach((e=>{s[e]=function(){return typeof arguments[0]===$r&&a[e](...arguments),s}})),s.parent=function(e){return null!=e&&null!=e.appendChild&&s.forEach((t=>{e.appendChild(t.svg)})),s},s},applyControlsToSVG=e=>{e.controls=(...t)=>controls.call(e,e,...t)};var Fo={svg:{args:(...e)=>[viewBox$1(coordinates(...e))].filter((e=>null!=e)),methods:jo,init:(e,...t)=>{t.filter((e=>typeof e===Br)).forEach((t=>loadSVG(e,t))),t.filter((e=>null!=e)).filter((e=>typeof e.appendChild===$r)).forEach((t=>t.appendChild(e))),TouchEvents(e),function(e){let t;const r={};let o,n=0;const removeHandlers=()=>{SVGWindow().cancelAnimationFrame&&SVGWindow().cancelAnimationFrame(o),Object.keys(r).forEach((e=>delete r[e])),t=void 0,n=0};Object.defineProperty(e,"play",{set:e=>{if(removeHandlers(),null==e)return;const s=UUID();r[s]=a=>{t||(t=a,n=0),e({time:.001*(a-t),frame:n}),n+=1,r[s]&&(o=SVGWindow().requestAnimationFrame(r[s]))},SVGWindow().requestAnimationFrame&&(o=SVGWindow().requestAnimationFrame(r[s]))},enumerable:!0}),Object.defineProperty(e,"stop",{value:removeHandlers,enumerable:!0})}(e),applyControlsToSVG(e)}}};const loadGroup=(e,...t)=>{const r=t.map((e=>sync(e))).filter((e=>void 0!==e));return r.filter((e=>e.tagName===Ur)).forEach((t=>moveChildren(e,t))),r.filter((e=>e.tagName!==Ur)).forEach((t=>e.appendChild(t))),e};var Lo={g:{init:loadGroup,methods:{load:loadGroup}}},No=Object.assign(Object.create(null),{svg:[Gr],line:["x1","y1","x2","y2"],rect:["x","y","width","height"],circle:["cx","cy","r"],ellipse:["cx","cy","rx","ry"],polygon:[Yr],polyline:[Yr],path:["d"],text:["x","y"],mask:[Dr],symbol:[Dr],clipPath:[Dr,"clip-rule"],marker:[Dr,"markerHeight","markerUnits","markerWidth","orient","refX","refY"],linearGradient:["x1","x2","y1","y2"],radialGradient:["cx","cy","r","fr","fx","fy"],stop:["offset","stop-color","stop-opacity"],pattern:["patternContentUnits","patternTransform","patternUnits"]});const setRadius=(e,t)=>(e.setAttribute(No.circle[2],t),e),setOrigin=(e,t,r)=>([...coordinates(...svg_flatten_arrays(t,r)).slice(0,2)].forEach(((t,r)=>e.setAttribute(No.circle[r],t))),e);var Vo={circle:{args:(e,t,r,o)=>{const n=coordinates(...svg_flatten_arrays(e,t,r,o));switch(n.length){case 0:case 1:return[,,...n];case 2:case 3:return n;default:return((e,t,r,o)=>[e,t,svg_distance2([e,t],[r,o])])(...n)}},methods:{radius:setRadius,setRadius:setRadius,origin:setOrigin,setOrigin:setOrigin,center:setOrigin,setCenter:setOrigin,position:setOrigin,setPosition:setOrigin}}};const setRadii=(e,t,r)=>([,,t,r].forEach(((t,r)=>e.setAttribute(No.ellipse[r],t))),e),setCenter=(e,t,r)=>([...coordinates(...svg_flatten_arrays(t,r)).slice(0,2)].forEach(((t,r)=>e.setAttribute(No.ellipse[r],t))),e);var $o={ellipse:{args:(e,t,r,o)=>{const n=coordinates(...svg_flatten_arrays(e,t,r,o)).slice(0,4);switch(n.length){case 0:case 1:case 2:return[,,...n];default:return n}},methods:{radius:setRadii,setRadius:setRadii,origin:setCenter,setOrigin:setCenter,center:setCenter,setCenter:setCenter,position:setCenter,setPosition:setCenter}}};const Args$1=(...e)=>coordinates(...svg_semi_flatten_arrays(...e)).slice(0,4);var Io={line:{args:Args$1,methods:{setPoints:(e,...t)=>(Args$1(...t).forEach(((t,r)=>e.setAttribute(No.line[r],t))),e)}}};const To={m:"move",l:"line",v:"vertical",h:"horizontal",a:"ellipse",c:"curve",s:"smoothCurve",q:"quadCurve",t:"smoothQuadCurve",z:"close"},add2path=(e,t)=>[e[0]+(t[0]||0),e[1]+(t[1]||0)];Object.keys(To).forEach((e=>{const t=To[e];To[e.toUpperCase()]=t.charAt(0).toUpperCase()+t.slice(1)}));const Bo=/[MmLlSsQqLlHhVvCcSsQqTtAaZz]/g,qo=/-?[0-9]*\.?\d+/g,parsePathCommands=e=>{const t=[];let r;for(;null!==(r=Bo.exec(e));)t.push(r);return t.map(((t,r,o)=>[t[0],t.index,r===o.length-1?e.length-1:o[(r+1)%o.length].index-1])).map((t=>{const r=t[0],o=e.substring(t[1]+1,t[2]).match(qo);return{command:r,values:o?o.map(parseFloat):[]}}))};var Uo=Object.freeze({__proto__:null,pathCommandNames:To,parsePathCommands:parsePathCommands,parsePathCommandsEndpoints:e=>{let t=[0,0];const r=parsePathCommands(e);if(!r.length)return r;r.forEach(((e,o)=>{r[o].end=((e,t,r=[0,0])=>{const o=e.toUpperCase(),n=e===o?[0,0]:r;switch(o){case"M":case"L":case"V":case"H":case"T":return add2path(n,t);case"A":return add2path(n,[t[5],t[6]]);case"C":return add2path(n,[t[4],t[5]]);case"S":case"Q":return add2path(n,[t[2],t[3]]);case"Z":return;default:return n}})(e.command,e.values,t),r[o].start=0===o?t:r[o-1].end,t=r[o].end}));const o=r[r.length-1],n=r.filter((e=>"M"!==e.command.toUpperCase()&&"Z"!==e.command.toUpperCase())).shift();return"Z"===o.command.toUpperCase()&&(o.end=[...n.start]),r}});const getD=e=>{const t=e.getAttribute("d");return null==t?"":t},appendPathCommand=(e,t,...r)=>(e.setAttribute("d",`${getD(e)}${t}${svg_flatten_arrays(...r).join(" ")}`),e),getCommands=e=>parsePathCommands(getD(e)),Ro={addCommand:appendPathCommand,appendCommand:appendPathCommand,clear:e=>(e.removeAttribute("d"),e),getCommands:getCommands,get:getCommands,getD:e=>e.getAttribute("d")};Object.keys(To).forEach((e=>{Ro[To[e]]=(t,...r)=>appendPathCommand(t,e,...r)}));var Do={path:{methods:Ro}};const setRectSize=(e,t,r)=>([,,t,r].forEach(((t,r)=>e.setAttribute(No.rect[r],t))),e),setRectOrigin=(e,t,r)=>([...coordinates(...svg_flatten_arrays(t,r)).slice(0,2)].forEach(((t,r)=>e.setAttribute(No.rect[r],t))),e),fixNegatives=function(e){return[0,1].forEach((t=>{e[2+t]<0&&(void 0===e[0+t]&&(e[0+t]=0),e[0+t]+=e[2+t],e[2+t]=-e[2+t])})),e};var Wo={rect:{args:(e,t,r,o)=>{const n=coordinates(...svg_flatten_arrays(e,t,r,o)).slice(0,4);switch(n.length){case 0:case 1:case 2:case 3:return fixNegatives([,,...n]);default:return fixNegatives(n)}},methods:{origin:setRectOrigin,setOrigin:setRectOrigin,center:setRectOrigin,setCenter:setRectOrigin,size:setRectSize,setSize:setRectSize}}},Go={style:{init:(e,t)=>{e.textContent="",e.appendChild(cdata(t))},methods:{setTextContent:(e,t)=>(e.textContent="",e.appendChild(cdata(t)),e)}}},Zo={text:{args:(e,t,r)=>coordinates(...svg_flatten_arrays(e,t,r)).slice(0,2),init:(e,t,r,o,n)=>{const s=[t,r,o,n].filter((e=>typeof e===Br)).shift();s&&e.appendChild(SVGWindow().document.createTextNode(s))}}};const makeIDString=function(){return Array.from(arguments).filter((e=>typeof e===Br||e instanceof String)).shift()||UUID()},maskArgs=(...e)=>[makeIDString(...e)];var Yo={mask:{args:maskArgs},clipPath:{args:maskArgs},symbol:{args:maskArgs},marker:{args:maskArgs,methods:{size:setViewBox,setViewBox:setViewBox}}};const getPoints=e=>{const t=e.getAttribute(Yr);return null==t?"":t},polyString=function(){return Array.from(Array(Math.floor(arguments.length/2))).map(((e,t)=>`${arguments[2*t+0]},${arguments[2*t+1]}`)).join(" ")},stringifyArgs=(...e)=>[polyString(...coordinates(...svg_semi_flatten_arrays(...e)))],setPoints=(e,...t)=>(e.setAttribute(Yr,stringifyArgs(...t)[0]),e),addPoint=(e,...t)=>(e.setAttribute(Yr,[getPoints(e),stringifyArgs(...t)[0]].filter((e=>""!==e)).join(" ")),e),Args=function(...e){return 1===e.length&&typeof e[0]===Br?[e[0]]:stringifyArgs(...e)};var Jo={polyline:{args:Args,methods:{setPoints:setPoints,addPoint:addPoint}},polygon:{args:Args,methods:{setPoints:setPoints,addPoint:addPoint}}},Ho=Object.assign({},Fo,Lo,Vo,$o,Io,Do,Wo,Go,Zo,Yo,Jo),Xo={presentation:["color","color-interpolation","cursor","direction","display","fill","fill-opacity","fill-rule","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","image-rendering","letter-spacing","opacity","overflow","paint-order","pointer-events","preserveAspectRatio","shape-rendering","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","tabindex","transform-origin","user-select","vector-effect","visibility"],animation:["accumulate","additive","attributeName","begin","by","calcMode","dur","end","from","keyPoints","keySplines","keyTimes","max","min","repeatCount","repeatDur","restart","to","values"],effects:["azimuth","baseFrequency","bias","color-interpolation-filters","diffuseConstant","divisor","edgeMode","elevation","exponent","filter","filterRes","filterUnits","flood-color","flood-opacity","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","lighting-color","limitingConeAngle","mode","numOctaves","operator","order","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","primitiveUnits","radius","result","seed","specularConstant","specularExponent","stdDeviation","stitchTiles","surfaceScale","targetX","targetY","type","xChannelSelector","yChannelSelector"],text:["dx","dy","alignment-baseline","baseline-shift","dominant-baseline","lengthAdjust","method","overline-position","overline-thickness","rotate","spacing","startOffset","strikethrough-position","strikethrough-thickness","text-anchor","text-decoration","text-rendering","textLength","underline-position","underline-thickness","word-spacing","writing-mode"],gradient:["gradientTransform","gradientUnits","spreadMethod"]};Object.values(so).reduce(((e,t)=>e.concat(t)),[]).filter((e=>void 0===No[e])).forEach((e=>{No[e]=[]})),[[[Ur,"defs","g"].concat(so.v,so.t),Xo.presentation],[["filter"],Xo.effects],[so.cT.concat("text"),Xo.text],[so.cF,Xo.effects],[so.cG,Xo.gradient]].forEach((e=>e[0].forEach((t=>{No[t]=No[t].concat(e[1])}))));const getClassList=e=>{if(null==e)return[];const t=e.getAttribute(Vr);return null==t?[]:t.split(" ").filter((e=>""!==e))};var Ko={addClass:(e,t)=>{const r=getClassList(e).filter((e=>e!==t));r.push(t),e.setAttributeNS(null,Vr,r.join(" "))},removeClass:(e,t)=>{const r=getClassList(e).filter((e=>e!==t));e.setAttributeNS(null,Vr,r.join(" "))},setClass:(e,t)=>{e.setAttributeNS(null,Vr,t)},setId:(e,t)=>{e.setAttributeNS(null,Dr,t)}};const getAttr=e=>{const t=e.getAttribute(Zr);return null==t||""===t?void 0:t},Qo={clearTransform:e=>(e.removeAttribute(Zr),e)};["translate","rotate","scale","matrix"].forEach((e=>{Qo[e]=(t,...r)=>t.setAttribute(Zr,[getAttr(t),`${e}(${r.join(" ")})`].filter((e=>void 0!==e)).join(" "))}));const en={};["clip-path","mask","symbol","marker-end","marker-mid","marker-start"].forEach((e=>{en[po.toCamel(e)]=(t,r)=>t.setAttribute(e,function(e){if(null==e)return"";if(typeof e===Br)return"url"===e.slice(0,3)?e:`url(#${e})`;if(null!=e.getAttribute)return`url(#${e.getAttribute(Dr)})`;return""}(r))}));const tn={};so.v.push(...Object.keys(yo)),Object.keys(yo).forEach((e=>{yo[e].attributes=void 0===yo[e].attributes?[...Xo.presentation]:yo[e].attributes.concat(Xo.presentation)})),Object.assign(tn,Ho,yo),Object.keys(so).forEach((e=>so[e].filter((e=>void 0===tn[e])).forEach((e=>{tn[e]={}}))));const passthrough=function(){return Array.from(arguments)};Object.keys(tn).forEach((e=>{tn[e].nodeName||(tn[e].nodeName=e),tn[e].init||(tn[e].init=passthrough),tn[e].args||(tn[e].args=passthrough),tn[e].methods||(tn[e].methods={}),tn[e].attributes||(tn[e].attributes=No[e]||[])}));const assignMethods=(e,t)=>{e.forEach((e=>Object.keys(t).forEach((r=>{tn[e].methods[r]=function(){return t[r](...arguments),arguments[0]}}))))};assignMethods(svg_flatten_arrays(so.t,so.v,so.g,so.s,so.p,so.i,so.h,so.d),Ko),assignMethods(svg_flatten_arrays(so.t,so.v,so.g,so.s,so.p,so.i,so.h,so.d),Oo),assignMethods(svg_flatten_arrays(so.v,so.g,so.s),Qo),assignMethods(svg_flatten_arrays(so.t,so.v,so.g),en);const rn={svg:{version:"1.1",xmlns:no},style:{type:"text/css"}},on={},constructor=(e,t,...r)=>{const o=SVGWindow().document.createElementNS(no,tn[e].nodeName);return t&&t.appendChild(o),((e,t)=>{rn[t]&&Object.keys(rn[t]).forEach((r=>e.setAttribute(r,rn[t][r])))})(o,e),tn[e].init(o,...r),tn[e].args(...r).forEach(((t,r)=>{null!=tn[e].attributes[r]&&o.setAttribute(tn[e].attributes[r],t)})),tn[e].attributes.forEach((e=>{Object.defineProperty(o,po.toCamel(e),{value:function(){return o.setAttribute(e,...arguments),o}})})),Object.keys(tn[e].methods).forEach((t=>Object.defineProperty(o,t,{value:function(){return tn[e].methods[t].call(on,o,...arguments)}}))),Ao[e]&&Ao[e].forEach((e=>{const value=function(){return constructor(e,o,...arguments)};tn[e].static&&Object.keys(tn[e].static).forEach((t=>{value[t]=function(){return tn[e].static[t](o,...arguments)}})),Object.defineProperty(o,e,{value:value})})),o};on.Constructor=constructor;const nn={};Object.keys(so).forEach((e=>so[e].forEach((e=>{nn[e]=(...t)=>constructor(e,null,...t)}))));const link_rabbitear_math=(e,t)=>{["segment","circle","ellipse","rect","polygon"].filter((e=>t[e]&&t[e].prototype)).forEach((r=>{t[r].prototype.svg=function(){return e.path(this.svgPath())}})),Po.math.vector=t.vector},initialize=function(e,...t){t.filter((e=>typeof e===$r)).forEach((t=>t.call(e,e)))};Nr.init=function(){const e=constructor(Ur,null,...arguments);return"loading"===SVGWindow().document.readyState?SVGWindow().document.addEventListener("DOMContentLoaded",(()=>initialize(e,...arguments))):initialize(e,...arguments),e},SVG.NS=no,SVG.linker=function(e){e.graph&&e.origami&&(e.svg=this,link_rabbitear_math(this,e),((e,t)=>{const r="origami";tn[r]={nodeName:"g",init:function(e,...r){return t.graph.svg.drawInto(e,...r)},args:()=>[],methods:tn.g.methods,attributes:tn.g.attributes,static:{}},Object.keys(t.graph.svg).forEach((e=>{tn[r].static[e]=(r,...o)=>{const n=t.graph.svg[e](...o);return r.appendChild(n),n}})),Ao[r]=[...Ao.g],Ao.svg.push(r),Ao.g.push(r),e[r]=(...e)=>constructor(r,null,...e),Object.keys(t.graph.svg).forEach((o=>{e[r][o]=t.graph.svg[o]}))})(this,e))}.bind(SVG),Object.assign(SVG,nn),SVG.core=Object.assign(Object.create(null),{load:Load,save:save,coordinates:coordinates,flatten:svg_flatten_arrays,attributes:No,children:Ao,cdata:cdata},po,Ko,Oo,ao,Uo,Qo,wo),Object.defineProperty(SVG,"window",{enumerable:!1,set:e=>{var t;(t=e).document||(t.document=(e=>(new e.DOMParser).parseFromString("<!DOCTYPE html><title>.</title>","text/html"))(t)),oo.window=t,oo.window}});const compileShader=(e,t,r)=>{const o=e.createShader(r);if(e.shaderSource(o,t),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS))throw new Error(e.getShaderInfoLog(o));return o},createProgram=(e,t,r)=>((e,t,r)=>{const o=e.createProgram();if(e.attachShader(o,t),e.attachShader(o,r),e.linkProgram(o),!e.getProgramParameter(o,e.LINK_STATUS))throw new Error(e.getProgramInfoLog(o));return e.deleteShader(t),e.deleteShader(r),o})(e,compileShader(e,t,e.VERTEX_SHADER),compileShader(e,r,e.FRAGMENT_SHADER));var sn=Object.freeze({__proto__:null,rebuildViewport:(e,t)=>{if(!e)return;const r=window.devicePixelRatio||1,o=[t.clientWidth,t.clientHeight].map((e=>e*r));t.width===o[0]&&t.height===o[1]||(t.width=o[0],t.height=o[1]),e.viewport(0,0,e.canvas.width,e.canvas.height)},makeProjectionMatrix:(e,t="perspective",r=45)=>{if(!e)return we.identity4x4;const o=[e.clientWidth,e.clientHeight],n=Math.min(...o),s=[0,1].map((e=>(o[e]-n)/n/2)).map((e=>e+.5));return"orthographic"===t?we.makeOrthographicMatrix4(s[1],s[0],-s[1],-s[0],-100,100):we.makePerspectiveMatrix4(r*(Math.PI/180),o[0]/o[1],.1,20)},makeModelMatrix:e=>{if(!e)return we.identity4x4;const t=boundingBox(e);if(!t)return we.identity4x4;const r=Math.max(...t.span),o=[r,0,0,0,0,r,0,0,0,0,r,0,...we.resize(3,we.midpoint(t.min,t.max)),1];return we.invertMatrix4(o)}});const uniformFunc=(e,t,r,o)=>{if("uniformMatrix4fv"===r)e[r](t,!1,o);else e[r](t,o)};var an=Object.freeze({__proto__:null,drawProgram:(e,t,r,o={})=>{e.useProgram(r.program),r.flags.forEach((t=>e.enable(t)));const n=e.getProgramParameter(r.program,e.ACTIVE_UNIFORMS);for(let t=0;t<n;t+=1){const n=e.getActiveUniform(r.program,t).name,s=o[n];if(s){const t=e.getUniformLocation(r.program,n);uniformFunc(e,t,s.func,s.value)}}r.vertexArrays.forEach((t=>{e.bindBuffer(e.ARRAY_BUFFER,t.buffer),e.bufferData(e.ARRAY_BUFFER,t.data,e.STATIC_DRAW),e.vertexAttribPointer(t.location,t.length,t.type,!1,0,0),e.enableVertexAttribArray(t.location)})),r.elementArrays.forEach((r=>{e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r.buffer),e.bufferData(e.ELEMENT_ARRAY_BUFFER,r.data,e.STATIC_DRAW),e.drawElements(r.mode,r.data.length,2===t?e.UNSIGNED_INT:e.UNSIGNED_SHORT,r.buffer)})),r.flags.forEach((t=>e.disable(t)))},deallocProgram:(e,t)=>{t.vertexArrays.forEach((t=>e.disableVertexAttribArray(t.location))),t.vertexArrays.forEach((t=>e.deleteBuffer(t.buffer))),t.elementArrays.forEach((t=>e.deleteBuffer(t.buffer))),e.deleteProgram(t.program)}});const makeFacesVertexData=(e,t={})=>{const r=e.vertices_coords.map((e=>[...e].concat(Array(3-e.length).fill(0)))),o=makeVerticesNormal(e),n=r.map(((e,t)=>t%3)).map((e=>[0===e?1:0,1===e?1:0,2===e?1:0])),s=e.faces_edges.map((t=>t.map((t=>e.edges_assignment[t])).map((e=>"J"===e||"j"===e))));if(!t.showTrianglulation)for(let e=0;e<s.length;e+=1)s[e][0]&&(n[3*e+0][2]=n[3*e+1][2]=100),s[e][1]&&(n[3*e+1][0]=n[3*e+2][0]=100),s[e][2]&&(n[3*e+0][1]=n[3*e+2][1]=100);return{vertices_coords:r,vertices_normal:o,vertices_barycentric:n}},cn={B:[.3,.3,.3],b:[.3,.3,.3],V:[.2,.4,.6],v:[.2,.4,.6],M:[.75,.25,.15],m:[.75,.25,.15],F:[.2,.2,.2],f:[.2,.2,.2],C:[1,.75,.25],c:[1,.75,.25],U:[.2,.2,.2],u:[.2,.2,.2]},makeThickEdgesVertexData=(e,t=cn)=>{if(!e||!e.vertices_coords||!e.edges_vertices)return[];const r=e.vertices_coords.map((e=>[...e].concat(Array(3-e.length).fill(0)))),o=e.edges_vertices.flatMap((e=>e.map((e=>r[e])))).flatMap((e=>[e,e,e,e])),n=makeEdgesVector(e);return{vertices_coords:o,vertices_color:e.edges_assignment?e.edges_assignment.flatMap((e=>Array(8).fill(t[e]))):e.edges_vertices.flatMap((()=>Array(8).fill(t.U))),verticesEdgesVector:n.flatMap((e=>[e,e,e,e,e,e,e,e])),vertices_vector:e.edges_vertices.flatMap((()=>[[1,0],[0,1],[-1,0],[0,-1],[1,0],[0,1],[-1,0],[0,-1]]))}};var ln=Object.freeze({__proto__:null,makeFacesVertexData:makeFacesVertexData,makeThickEdgesVertexData:makeThickEdgesVertexData});const makeFoldedVertexArrays=(e,t,r,o={})=>{if(!r||!r.vertices_coords||!r.faces_vertices)return[];const{vertices_coords:n,vertices_normal:s,vertices_barycentric:a}=makeFacesVertexData(r,o);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:n[0].length,data:new Float32Array(n.flat())},{location:e.getAttribLocation(t,"v_normal"),buffer:e.createBuffer(),type:e.FLOAT,length:s[0].length,data:new Float32Array(s.flat())},{location:e.getAttribLocation(t,"v_barycentric"),buffer:e.createBuffer(),type:e.FLOAT,length:3,data:new Float32Array(a.flat())}].filter((e=>-1!==e.location))},makeFoldedElementArrays=(e,t=1,r={})=>r&&r.vertices_coords&&r.faces_vertices?[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:2===t?new Uint32Array(r.faces_vertices.flat()):new Uint16Array(r.faces_vertices.flat())}]:[],makeThickEdgesVertexArrays=(e,t,r,o={})=>{if(!r||!r.vertices_coords||!r.edges_vertices)return[];const{vertices_coords:n,vertices_color:s,verticesEdgesVector:a,vertices_vector:c}=makeThickEdgesVertexData(r,o.assignment_color);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:n[0].length,data:new Float32Array(n.flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:s[0].length,data:new Float32Array(s.flat())},{location:e.getAttribLocation(t,"edge_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:a[0].length,data:new Float32Array(a.flat())},{location:e.getAttribLocation(t,"vertex_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:c[0].length,data:new Float32Array(c.flat())}].filter((e=>-1!==e.location))},makeThickEdgesElementArrays=(e,t=1,r={})=>{if(!r||!r.edges_vertices)return[];const o=r.edges_vertices.map(((e,t)=>8*t)).flatMap((e=>[e+0,e+1,e+4,e+4,e+1,e+5,e+1,e+2,e+5,e+5,e+2,e+6,e+2,e+3,e+6,e+6,e+3,e+7,e+3,e+0,e+7,e+7,e+0,e+4]));return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:2===t?new Uint32Array(o):new Uint16Array(o)}]};var fn=Object.freeze({__proto__:null,makeFoldedVertexArrays:makeFoldedVertexArrays,makeFoldedElementArrays:makeFoldedElementArrays,makeThickEdgesVertexArrays:makeThickEdgesVertexArrays,makeThickEdgesElementArrays:makeThickEdgesElementArrays});const makeExplodedGraph=(e,t=1e-5)=>{const r=JSON.parse(JSON.stringify(e));if(!r.edges_assignment){const t=count.edges(e)||countImplied.edges(e);r.edges_assignment=Array(t).fill("U")}let o=[];r.faceOrders?o=nudgeFacesWithFaceOrders(r):r.faces_layer&&(o=nudgeFacesWithFacesLayer(r));const n=triangulate(r);if(explode(r),n.faces){invertMap(n.faces.map).forEach(((e,n)=>{const s=o[e];s&&r.faces_vertices[n].forEach((e=>{const o=we.scale(s.vector,s.layer*t);r.vertices_coords[e]=we.add(we.resize(3,r.vertices_coords[e]),o)}))}))}return r},makeUniforms$1=(e,{projectionMatrix:t,viewMatrix:r,modelMatrix:o,canvas:n,opacity:s,touchPoint:a,frontColor:c,backColor:i,strokeWidth:l})=>({u_matrix:{func:"uniformMatrix4fv",value:we.multiplyMatrices4(we.multiplyMatrices4(t,r),o)},u_projection:{func:"uniformMatrix4fv",value:t},u_modelView:{func:"uniformMatrix4fv",value:we.multiplyMatrices4(r,o)},u_opacity:{func:"uniform1f",value:s},u_touch:{func:"uniform2fv",value:a},u_resolution:{func:"uniform2fv",value:[n.clientWidth,n.clientHeight].map((e=>e*window.devicePixelRatio||1))},u_frontColor:{func:"uniform3fv",value:hexToRGB(c)},u_backColor:{func:"uniform3fv",value:hexToRGB(i)},u_strokeWidth:{func:"uniform1f",value:l}});const foldedFormFaces=(e,t=1,r={},o={})=>{const n=makeExplodedGraph(r,o.layerNudge),s=1===t?createProgram(e,"#version 100\n\nattribute vec3 v_position;\nattribute vec3 v_normal;\n\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nvarying vec3 normal_color;\nvarying vec3 front_color;\nvarying vec3 back_color;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\n\tnormal_color = vec3(\n\t\tdot(v_normal, normalize(u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 1, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 0, 1, 0)).xyz)\n\t);\n\tfloat grayX = abs(normal_color.x);\n\tfloat grayY = abs(normal_color.y);\n\tfloat grayZ = abs(normal_color.z);\n\tfloat gray = 0.25 + clamp(grayY, 1.0, 0.25) * 0.5 + grayX * 0.25 + grayZ * 0.25;\n\tfloat c = clamp(gray, 0.0, 1.0);\n\tfront_color = u_frontColor * c;\n\tback_color = u_backColor * c;\n}\n","#version 100\n\nprecision mediump float;\nuniform float u_opacity;\nvarying vec3 front_color;\nvarying vec3 back_color;\n\nvoid main () {\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\tgl_FragColor = vec4(color, u_opacity)\n}\n"):createProgram(e,"#version 300 es\n\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\n\nin vec3 v_position;\nin vec3 v_normal;\nout vec3 front_color;\nout vec3 back_color;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tvec3 normal_color = vec3(\n\t\tdot(v_normal, normalize(u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 1, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 0, 1, 0)).xyz)\n\t);\n\tfloat grayX = abs(normal_color.x);\n\tfloat grayY = abs(normal_color.y);\n\tfloat grayZ = abs(normal_color.z);\n\tfloat gray = 0.25 + clamp(grayY, 1.0, 0.25) * 0.5 + grayX * 0.25 + grayZ * 0.25;\n\tfloat c = clamp(gray, 0.0, 1.0);\n\tfront_color = u_frontColor * c;\n\tback_color = u_backColor * c;\n}\n","#version 300 es\nprecision highp float;\n\nuniform float u_opacity;\nin vec3 front_color;\nin vec3 back_color;\nout vec4 outColor;\n\nvoid main () {\n\tgl_FragDepth = gl_FragCoord.z;\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\toutColor = vec4(color, u_opacity);\n}\n");return{program:s,vertexArrays:makeFoldedVertexArrays(e,s,n,o),elementArrays:makeFoldedElementArrays(e,t,n),flags:[e.DEPTH_TEST],makeUniforms:makeUniforms$1}},foldedFormEdges=(e,t=1,r={},o={})=>{const n=1===t?createProgram(e,"#version 100\n\nattribute vec3 v_position;\nattribute vec3 v_color;\nattribute vec3 edge_vector;\nattribute vec2 vertex_vector;\n\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\nvarying vec3 blend_color;\n\nvoid main () {\n\tvec3 edge_norm = normalize(edge_vector);\n\t// find an axis with which to compute the cross product\n\t// we want the axis which is most unlike the edge_vector\n\tfloat xdot = abs(dot(vec3(1,0,0), edge_norm));\n\tfloat ydot = abs(dot(vec3(0,1,0), edge_norm));\n\tfloat zdot = abs(dot(vec3(0,0,1), edge_norm));\n\tvec3 xory = xdot < ydot ? vec3(1,0,0) : vec3(0,1,0);\n\tvec3 axis = xdot > zdot && ydot > zdot ? vec3(0,0,1) : xory;\n\t// these are two perpendicular vectors to the edge_vector\n\t// together all three of them are the basis vectors\n\tvec3 one = cross(axis, edge_norm);\n\tvec3 two = cross(one, edge_norm);\n\t// displace the point along a vector from its original spot\n\tvec3 displace = normalize(\n\t\tone * vertex_vector.x +\n\t\ttwo * vertex_vector.y) * u_strokeWidth;\n\t// gl_Position = u_matrix * vec4(vec3(side, 0) + v_position, 1);\n\tgl_Position = u_matrix * vec4(v_position + displace, 1);\n\t// gl_Position = u_matrix * vec4(v_position, 1);\n\tblend_color = v_color;\n}\n","#version 100\n\nprecision mediump float;\nvarying vec3 blend_color;\n\nvoid main () {\n\tgl_FragColor = vec4(blend_color.rgb, 1);\n}\n"):createProgram(e,"#version 300 es\n\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\n\nin vec3 v_position;\nin vec3 v_color;\nin vec3 edge_vector;\nin vec2 vertex_vector;\nout vec3 blend_color;\n\nvoid main () {\n\tvec3 edge_norm = normalize(edge_vector);\n\t// find an axis with which to compute the cross product\n\t// we want the axis which is most unlike the edge_vector\n\tfloat xdot = abs(dot(vec3(1,0,0), edge_norm));\n\tfloat ydot = abs(dot(vec3(0,1,0), edge_norm));\n\tfloat zdot = abs(dot(vec3(0,0,1), edge_norm));\n\tvec3 xory = xdot < ydot ? vec3(1,0,0) : vec3(0,1,0);\n\tvec3 axis = xdot > zdot && ydot > zdot ? vec3(0,0,1) : xory;\n\t// these are two perpendicular vectors to the edge_vector\n\t// together all three of them are the basis vectors\n\tvec3 one = cross(axis, edge_norm);\n\tvec3 two = cross(one, edge_norm);\n\t// displace the point along a vector from its original spot\n\tvec3 displace = normalize(\n\t\tone * vertex_vector.x +\n\t\ttwo * vertex_vector.y) * u_strokeWidth;\n\t// gl_Position = u_matrix * vec4(vec3(side, 0) + v_position, 1);\n\tgl_Position = u_matrix * vec4(v_position + displace, 1);\n\t// gl_Position = u_matrix * vec4(v_position, 1);\n\tblend_color = v_color;\n}\n","#version 300 es\n\nprecision mediump float;\nin vec3 blend_color;\nout vec4 outColor;\n \nvoid main() {\n\toutColor = vec4(blend_color.rgb, 1);\n}\n");return{program:n,vertexArrays:makeThickEdgesVertexArrays(e,n,r,o),elementArrays:makeThickEdgesElementArrays(e,t,r),flags:[e.DEPTH_TEST],makeUniforms:makeUniforms$1}},foldedFormFacesOutlined=(e,t=1,r={},o={})=>{const n=makeExplodedGraph(r,o.layerNudge),s=1===t?createProgram(e,"#version 100\n\nattribute vec3 v_position;\nattribute vec3 v_normal;\nattribute vec3 v_barycentric;\n\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\nvarying vec3 normal_color;\nvarying vec3 barycentric;\nvarying vec3 front_color;\nvarying vec3 back_color;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tbarycentric = v_barycentric;\n\n\tnormal_color = vec3(\n\t\tdot(v_normal, normalize(u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 1, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 0, 1, 0)).xyz)\n\t);\n\t// normal_color = vec3(\n\t// \tdot(v_normal, vec4(1, 0, 0, 0).xyz),\n\t// \tdot(v_normal, vec4(0, 1, 0, 0).xyz),\n\t// \tdot(v_normal, vec4(0, 0, 1, 0).xyz)\n\t// );\n\n\tfloat grayX = abs(normal_color.x);\n\tfloat grayY = abs(normal_color.y);\n\tfloat grayZ = abs(normal_color.z);\n\tfloat gray = 0.25 + clamp(grayY, 1.0, 0.25) * 0.5 + grayX * 0.25 + grayZ * 0.25;\n\tfloat c = clamp(gray, 0.0, 1.0);\n\tfront_color = u_frontColor * c;\n\tback_color = u_backColor * c;\n}\n","#version 100\n\nprecision mediump float;\nuniform float u_opacity;\nvarying vec3 barycentric;\nvarying vec3 front_color;\nvarying vec3 back_color;\n\n// float edgeFactor(vec3 barycenter) {\n// \tvec3 d = fwidth(barycenter);\n// \tvec3 a3 = smoothstep(vec3(0.0), d*3.5, barycenter);\n// \treturn min(min(a3.x, a3.y), a3.z);\n// }\n\nvoid main () {\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\t// gl_FragColor = vec4(blend_color.rgb, u_opacity);\n\t// gl_FragDepth = 0.5;\n\n\t// barycentric #1\n\tgl_FragColor = any(lessThan(barycentric, vec3(0.02)))\n\t\t? vec4(0.0, 0.0, 0.0, 1.0)\n\t\t: vec4(color, u_opacity);\n\t// barycentric #2\n\t// gl_FragColor = vec4(mix(vec3(0.0), color, edgeFactor(barycentric)), u_opacity);\n}\n"):createProgram(e,"#version 300 es\n\n// uniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform mat4 u_matrix;\nuniform vec3 u_frontColor;\nuniform vec3 u_backColor;\n\nin vec3 v_position;\nin vec3 v_normal;\nin vec3 v_barycentric;\nin float v_rawEdge;\n// in uint8_t \nout vec3 front_color;\nout vec3 back_color;\nout vec3 barycentric;\n// flat out int rawEdge;\nflat out int provokedVertex;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 1);\n\tprovokedVertex = gl_VertexID;\n\tbarycentric = v_barycentric;\n\t// rawEdge = int(v_rawEdge);\n\n\tvec3 normal_color = vec3(\n\t\tdot(v_normal, normalize(u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 1, 0, 0)).xyz),\n\t\tdot(v_normal, normalize(u_modelView * vec4(0, 0, 1, 0)).xyz)\n\t);\n\t// normal_color = vec3(\n\t// \tdot(v_normal, vec4(1, 0, 0, 0).xyz),\n\t// \tdot(v_normal, vec4(0, 1, 0, 0).xyz),\n\t// \tdot(v_normal, vec4(0, 0, 1, 0).xyz)\n\t// );\n\n\tfloat grayX = abs(normal_color.x);\n\tfloat grayY = abs(normal_color.y);\n\tfloat grayZ = abs(normal_color.z);\n\tfloat gray = 0.25 + clamp(grayY, 1.0, 0.25) * 0.5 + grayX * 0.25 + grayZ * 0.25;\n\tfloat c = clamp(gray, 0.0, 1.0);\n\tfront_color = u_frontColor * c;\n\tback_color = u_backColor * c;\n}\n","#version 300 es\n// precision mediump float;\nprecision highp float;\n\nuniform float u_opacity;\n\nuniform vec2 u_touch;\nuniform vec2 u_resolution;\n\n// in int gl_PrimitiveID;\n// in highp vec4 gl_FragCoord;\n// in mediump vec2 gl_PointCoord; // 0.0 to 1.0, location on the screen\n// in bool gl_FrontFacing;\n// out highp float gl_FragDepth;\n\nflat in int provokedVertex;\n\nin vec3 front_color;\nin vec3 back_color;\nin vec3 barycentric;\n// flat in int rawEdge;\nout vec4 outColor;\n\nfloat hue2rgb (float p, float q, float t) {\n\twhile (t < 0.0) t += 1.0;\n\twhile (t > 1.0) t -= 1.0;\n\tif (t < 1.0 / 6.0) return p + (q - p) * 6.0 * t;\n\tif (t < 1.0 / 2.0) return q;\n\tif (t < 2.0 / 3.0) return p + (q - p) * (2.0 / 3.0 - t) * 6.0;\n\treturn p;\n}\nvec3 hslToRgb (float h, float s, float l) {\n\tif (s == 0.0) { return vec3(l, l, l); }\n\tfloat q = l < 0.5 ? l * (1.0 + s) : l + s - l * s;\n\tfloat p = 2.0 * l - q;\n\tfloat r = hue2rgb(p, q, h + 1.0 / 3.0);\n\tfloat g = hue2rgb(p, q, h);\n\tfloat b = hue2rgb(p, q, h - 1.0 / 3.0);\n\treturn vec3(r, g, b);\n}\n\nfloat edgeFactor(vec3 barycenter) {\n\tvec3 d = fwidth(barycenter);\n\tvec3 a3 = smoothstep(vec3(0.0), d*3.5, barycenter);\n\treturn min(min(a3.x, a3.y), a3.z);\n}\n\nvoid main () {\n\tgl_FragDepth = gl_FragCoord.z;\n\tvec3 color = gl_FrontFacing ? front_color : back_color;\n\t// vec3 color = hslToRgb(float(gl_PrimitiveID) / 57.0, 0.5, 0.8);\n\t// vec3 color = hslToRgb(float(provokedVertex) * 1.618, 1.0, 0.45);\n\n\t// original output\n\t// outColor = vec4(color, u_opacity);\n\n\t// barycentric #1\n\t// outColor = any(lessThan(barycentric, vec3(0.02)))\n\t// \t? vec4(0.0, 0.0, 0.0, 1.0)\n\t// \t: vec4(color, u_opacity);\n\n\t// barycentric #2\n\toutColor = vec4(mix(vec3(0.0), color, edgeFactor(barycentric)), u_opacity);\n\t// barycentric #2, transparent faces (kindof. bug)\n\t// outColor = vec4(1.0, 1.0, 1.0, (1.0-edgeFactor(barycentric))*0.95);\n\n\t// // barycentric #3 with raw edge\n\t// bool side2 = bool(rawEdge & 1);\n\t// bool side0 = bool(rawEdge & 2);\n\t// bool side1 = bool(rawEdge & 4);\n\t// if ((barycentric.x < 0.02 && side0)\n\t// \t|| (barycentric.y < 0.02 && side1)\n\t// \t|| (barycentric.z < 0.02 && side2)) {\n\t// \toutColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t// }\n\t// else {\n\t// \toutColor = vec4(color, u_opacity);\n\t// }\n\n\t\n\t// if (provokedVertex == 8) {\n\t// \toutColor = vec4(1, 1, 0, 1);\n\t// }\n\n\t// vec2 fragScale = vec2(gl_FragCoord.x / u_resolution.x, gl_FragCoord.y / u_resolution.y);\n\t// vec2 touchScale = vec2(u_touch.x / u_resolution.x, u_touch.y / u_resolution.y);\n\t// // fix. invert.\n\t// touchScale.y = 1.0 - touchScale.y;\n\t// float dist = distance(touchScale, fragScale);\n\t// if (dist < 0.1) {\n\t// \tfloat t = dist / 0.1;\n\t// \toutColor.r = outColor.r * t + 1.0 * (1.0 - t);\n\t// }\n}\n");return{program:s,vertexArrays:makeFoldedVertexArrays(e,s,n,o),elementArrays:makeFoldedElementArrays(e,t,n),flags:[e.DEPTH_TEST],makeUniforms:makeUniforms$1}};var dn=Object.freeze({__proto__:null,foldedFormFaces:foldedFormFaces,foldedFormEdges:foldedFormEdges,foldedFormFacesOutlined:foldedFormFacesOutlined});const mn={B:[.3,.3,.3],b:[.3,.3,.3],V:[.2,.4,.6],v:[.2,.4,.6],M:[.75,.25,.15],m:[.75,.25,.15],F:[.2,.2,.2],f:[.2,.2,.2],U:[.2,.2,.2],u:[.2,.2,.2]},make2D$1=e=>e.map((e=>[0,1].map((t=>e[t]||0)))),makeCPEdgesVertexData=(e,t=mn)=>{if(!e||!e.vertices_coords||!e.edges_vertices)return[];const r=make2D$1(e.edges_vertices.flatMap((t=>t.map((t=>e.vertices_coords[t])))).flatMap((e=>[e,e]))),o=make2D$1(makeEdgesVector(e));return{vertices_coords:r,vertices_color:e.edges_assignment?e.edges_assignment.flatMap((e=>[t[e],t[e],t[e],t[e]])):e.edges_vertices.flatMap((()=>[t.U,t.U,t.U,t.U])),verticesEdgesVector:o.flatMap((e=>[e,e,e,e])),vertices_vector:e.edges_vertices.flatMap((()=>[[1,0],[-1,0],[-1,0],[1,0]]))}};var pn=Object.freeze({__proto__:null,makeCPEdgesVertexData:makeCPEdgesVertexData});const makeCPEdgesVertexArrays=(e,t,r)=>{if(!r||!r.vertices_coords||!r.edges_vertices)return[];const{vertices_coords:o,vertices_color:n,verticesEdgesVector:s,vertices_vector:a}=makeCPEdgesVertexData(r);return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:2,data:new Float32Array(o.flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:n[0].length,data:new Float32Array(n.flat())},{location:e.getAttribLocation(t,"edge_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:s[0].length,data:new Float32Array(s.flat())},{location:e.getAttribLocation(t,"vertex_vector"),buffer:e.createBuffer(),type:e.FLOAT,length:a[0].length,data:new Float32Array(a.flat())}].filter((e=>-1!==e.location))},makeCPEdgesElementArrays=(e,t=1,r={})=>{if(!r||!r.edges_vertices)return[];const o=r.edges_vertices.map(((e,t)=>4*t)).flatMap((e=>[e+0,e+1,e+2,e+2,e+3,e+0]));return[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:2===t?new Uint32Array(o):new Uint16Array(o)}]},makeCPFacesVertexArrays=(e,t,r)=>{if(!r||!r.vertices_coords)return[];const o=r.vertices_coords.map((()=>[.11,.11,.11]));return[{location:e.getAttribLocation(t,"v_position"),buffer:e.createBuffer(),type:e.FLOAT,length:2,data:new Float32Array((n=r.vertices_coords,n.map((e=>[0,1].map((t=>e[t]||0))))).flat())},{location:e.getAttribLocation(t,"v_color"),buffer:e.createBuffer(),type:e.FLOAT,length:o[0].length,data:new Float32Array(o.flat())}].filter((e=>-1!==e.location));var n},makeCPFacesElementArrays=(e,t=1,r={})=>r&&r.vertices_coords&&r.faces_vertices?[{mode:e.TRIANGLES,buffer:e.createBuffer(),data:2===t?new Uint32Array(triangulateConvexFacesVertices(r).flat()):new Uint16Array(triangulateConvexFacesVertices(r).flat())}]:[];var un=Object.freeze({__proto__:null,makeCPEdgesVertexArrays:makeCPEdgesVertexArrays,makeCPEdgesElementArrays:makeCPEdgesElementArrays,makeCPFacesVertexArrays:makeCPFacesVertexArrays,makeCPFacesElementArrays:makeCPFacesElementArrays});const makeUniforms=(e,{projectionMatrix:t,viewMatrix:r,modelMatrix:o,strokeWidth:n})=>({u_matrix:{func:"uniformMatrix4fv",value:we.multiplyMatrices4(we.multiplyMatrices4(t,r),o)},u_projection:{func:"uniformMatrix4fv",value:t},u_modelView:{func:"uniformMatrix4fv",value:we.multiplyMatrices4(r,o)},u_strokeWidth:{func:"uniform1f",value:n/2}});var gn="#version 100\n\nprecision mediump float;\nvarying vec3 blend_color;\n\nvoid main () {\n\tgl_FragColor = vec4(blend_color.rgb, 1);\n}\n",vn="#version 300 es\nprecision mediump float;\n// precision highp float;\n\n// flat in vec4 blend_color;\nin vec3 blend_color;\nout vec4 outColor;\n \nvoid main() {\n\toutColor = vec4(blend_color.rgb, 1);\n}\n";const cpFacesV1=(e,t=1,r={})=>{const o=createProgram(e,"#version 100\n\nuniform mat4 u_matrix;\n\nattribute vec2 v_position;\nattribute vec3 v_color;\nvarying vec3 blend_color;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 0, 1);\n\tblend_color = v_color;\n}\n",gn);return{program:o,vertexArrays:makeCPFacesVertexArrays(e,o,r),elementArrays:makeCPFacesElementArrays(e,t,r),flags:[],makeUniforms:makeUniforms}},cpEdgesV1=(e,t=1,r={})=>{const o=createProgram(e,"#version 100\n\nattribute vec2 v_position;\nattribute vec3 v_color;\nattribute vec2 edge_vector;\nattribute vec2 vertex_vector;\n\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\nvarying vec3 blend_color;\n\nvoid main () {\n\t// dot(normal, (u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t// this one works\n\tfloat sign = vertex_vector[0];\n\tvec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * u_strokeWidth;\n\tgl_Position = u_matrix * vec4(side + v_position, 0, 1);\n\n\t// vec3 forward = (u_modelView * vec4(0, 0, 1, 0)).xyz;\n\t// float sign = vertex_vector[0];\n\t// vec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign));\n\t// vec3 side3d = (u_modelView * vec4(side, 0, 1)).xyz;\n\t// vec3 c = normalize(cross(side3d, forward)) * u_strokeWidth;\n\t// // gl_Position = u_matrix * vec4(v_position.x + c.x, v_position.y + c.y, c.z, 1);\n\t// gl_Position = u_matrix * vec4(v_position, 0, 1) + u_projection * vec4(c, 1);\n\t\n\t// vec3 forward = (u_modelView * vec4(0, 0, 1, 0)).xyz;\n\t// vec3 edgeVec3d = (u_modelView * vec4(edge_vector, 0, 0)).xyz;\n\t// vec3 thick = normalize(cross(edgeVec3d, forward)) * sign * u_strokeWidth;\n\t// vec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * u_strokeWidth;\n\t// vec4 projected_vector = u_matrix * vec4(normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)), 0, 1);\n\t// gl_Position = u_matrix * vec4(v_position, 0, 1) + vec4(thick.xyz, 0);\n\t// gl_Position = u_matrix * vec4(v_position, 0, 1) + vec4(0, u_strokeWidth * sign, 0, 0);\n\tblend_color = v_color;\n}\n",gn);return{program:o,vertexArrays:makeCPEdgesVertexArrays(e,o,r),elementArrays:makeCPEdgesElementArrays(e,t,r),flags:[],makeUniforms:makeUniforms}},cpFacesV2=(e,t=2,r={})=>{const o=createProgram(e,"#version 300 es\n\nuniform mat4 u_matrix;\n\nin vec2 v_position;\nin vec3 v_color;\nout vec3 blend_color;\n// flat out vec3 blend_color;\n\nvoid main () {\n\tgl_Position = u_matrix * vec4(v_position, 0, 1);\n\tblend_color = v_color;\n}\n",vn);return{program:o,vertexArrays:makeCPFacesVertexArrays(e,o,r),elementArrays:makeCPFacesElementArrays(e,t,r),flags:[],makeUniforms:makeUniforms}},cpEdgesV2=(e,t=2,r={})=>{const o=createProgram(e,"#version 300 es\n\nuniform mat4 u_matrix;\nuniform mat4 u_projection;\nuniform mat4 u_modelView;\nuniform float u_strokeWidth;\n\nin vec2 v_position;\nin vec3 v_color;\nin vec2 edge_vector;\nin vec2 vertex_vector;\nout vec3 blend_color;\n\nvoid main () {\n\t// dot(normal, (u_modelView * vec4(1, 0, 0, 0)).xyz),\n\t// this one works\n\tfloat sign = vertex_vector[0];\n\tvec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * u_strokeWidth;\n\tgl_Position = u_matrix * vec4(side + v_position, 0, 1);\n\tblend_color = v_color;\n}\n",vn);return{program:o,vertexArrays:makeCPEdgesVertexArrays(e,o,r),elementArrays:makeCPEdgesElementArrays(e,t,r),flags:[],makeUniforms:makeUniforms}};var hn=Object.freeze({__proto__:null,cpFacesV1:cpFacesV1,cpEdgesV1:cpEdgesV1,cpFacesV2:cpFacesV2,cpEdgesV2:cpEdgesV2});var _n=Object.assign(Object.create(null),{createProgram:createProgram,initialize:(e,t)=>{const r=[null,"webgl","webgl2"],o=window.devicePixelRatio||1;if(e.width=e.clientWidth*o,e.height=e.clientHeight*o,t)return{gl:e.getContext(r[t]),version:t};const n=e.getContext(r[2]);if(n)return{gl:n,version:2};const s=e.getContext(r[1]);if(s)return{gl:s,version:1};throw new Error(z)},foldedForm:(e,t=1,r={},o={})=>{const n=[];return!1!==o.faces&&(!1===o.outlines?n.push(foldedFormFaces(e,t,r,o)):n.push(foldedFormFacesOutlined(e,t,r,o))),!0===o.edges&&n.push(foldedFormEdges(e,t,r,o)),n},creasePattern:(e,t=1,r={})=>1===t?[cpFacesV1(e,t,r),cpEdgesV1(e,t,r)]:[cpFacesV2(e,t,r),cpEdgesV2(e,t,r)]},sn,an,fn,ln,dn,un,pn,hn);const yn=Object.assign($,St,{math:we,axiom:axiom,diagram:Bt,layer:fr,singleVertex:mr,text:pr,convert:Er,webgl:_n});return Object.defineProperty(yn,"use",{enumerable:!1,value:function(e){null!=e&&"function"==typeof e.linker&&e.linker(this)}.bind(yn)}),k||(yn.use(FOLDtoSVG),yn.use(SVG)),Object.defineProperty(yn,"window",{enumerable:!1,set:e=>{var t;(t=e).document||(t.document=(e=>(new e.DOMParser).parseFromString("<!DOCTYPE html><title>.</title>","text/html"))(t)),V.window=t,V.window,SVG.window=e}}),yn}));
