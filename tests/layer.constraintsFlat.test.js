import fs from "fs";
import { expect, test } from "vitest";
import ear from "../rabbit-ear.js";

// test("makeSolverConstraintsFlat four panel square", () => {
// 	const foldfile = fs.readFileSync("./tests/files/fold/panels-4x2.fold", "utf-8");
// 	const fold = JSON.parse(foldfile);
// 	const folded = ear.graph.getFramesByClassName(fold, "foldedForm")[0];
// 	ear.graph.populate(folded);

// 	const {
// 		constraints: {
// 			taco_taco,
// 			taco_tortilla,
// 			tortilla_tortilla,
// 			transitivity,
// 		},
// 	} = ear.layer.makeSolverConstraintsFlat(folded);

// 	// only two taco-tacos, one on the top and one bottom
// 	expect(taco_taco).toMatchObject([
// 		[0, 2, 1, 3],
// 		[4, 6, 5, 7],
// 	]);

// 	expect(taco_tortilla).toMatchObject([
// 		[1, 3, 2],
// 		[5, 7, 6],
// 	]);

// 	// tortilla-tortilla between 4 sets of pairs, 0-4, 1-5, 2-6, 3-7
// 	expect(tortilla_tortilla).toMatchObject([
// 		[0, 4, 1, 5],
// 		[0, 4, 2, 6],
// 		[0, 4, 3, 7],
// 		[1, 5, 2, 6],
// 		[1, 5, 3, 7],
// 		[2, 6, 3, 7],
// 	]);

// 	expect(transitivity).toMatchObject([]);
// });

// test("makeSolverConstraintsFlat strip weave", () => {
// 	const foldfile = fs.readFileSync("./tests/files/fold/strip-weave.fold", "utf-8");
// 	const fold = JSON.parse(foldfile);
// 	const folded = ear.graph.getFramesByClassName(fold, "foldedForm")[0];
// 	ear.graph.populate(folded);

// 	const {
// 		constraints: {
// 			taco_taco,
// 			taco_tortilla,
// 			tortilla_tortilla,
// 			transitivity,
// 		},
// 		faces_winding,
// 	} = ear.layer.makeSolverConstraintsFlat(folded);

// 	// interestingly, this model, which obviously has various different layer
// 	// solutions, results in no information for the solver.
// 	expect(taco_taco).toMatchObject([]);
// 	expect(taco_tortilla).toMatchObject([]);
// 	expect(tortilla_tortilla).toMatchObject([]);
// 	expect(transitivity).toMatchObject([[0, 1, 4]]);

// 	expect(faces_winding).toMatchObject([true, false, true, false, false, true, false]);
// });

// test("makeSolverConstraintsFlat zig-zag panels", () => {
// 	const foldfile = fs.readFileSync("./tests/files/fold/panels-zig-zag.fold", "utf-8");
// 	const fold = JSON.parse(foldfile);
// 	const folded = ear.graph.getFramesByClassName(fold, "foldedForm")[0];
// 	ear.graph.populate(folded);

// 	const {
// 		constraints: {
// 			taco_taco,
// 			taco_tortilla,
// 			tortilla_tortilla,
// 			transitivity,
// 		},
// 	} = ear.layer.makeSolverConstraintsFlat(folded);

// 	expect(taco_taco).toMatchObject([
// 		[0, 2, 4, 3],
// 		[3, 1, 4, 2],
// 	]);

// 	expect(taco_tortilla).toMatchObject([
// 		[0, 1, 4],
// 		[3, 0, 4],
// 		[2, 1, 3],
// 		[1, 0, 2],
// 	]);

// 	expect(tortilla_tortilla).toMatchObject([]);

// 	expect(transitivity).toMatchObject([[0, 1, 3]]);
// });

// test("makeSolverConstraintsFlat triangle strip", () => {
// 	const fileStrip1 = fs.readFileSync("./tests/files/fold/triangle-strip.fold", "utf-8");
// 	const fileStrip2 = fs.readFileSync("./tests/files/fold/triangle-strip-2.fold", "utf-8");
// 	const foldStrip1 = JSON.parse(fileStrip1);
// 	const foldStrip2 = JSON.parse(fileStrip2);
// 	const folded1 = ear.graph.getFramesByClassName(foldStrip1, "foldedForm")[0];
// 	const folded2 = ear.graph.getFramesByClassName(foldStrip2, "foldedForm")[0];
// 	ear.graph.populate(folded1);
// 	ear.graph.populate(folded2);

// 	const res1 = ear.layer.makeSolverConstraintsFlat(folded1);
// 	expect(res1.constraints.taco_taco.length).toBe(0);
// 	expect(res1.constraints.taco_tortilla.length).toBe(0);
// 	expect(res1.constraints.tortilla_tortilla.length).toBe(0);
// 	expect(res1.constraints.transitivity.length).toBe(0);

// 	const {
// 		constraints: {
// 			taco_taco,
// 			taco_tortilla,
// 			tortilla_tortilla,
// 			transitivity,
// 		},
// 	} = ear.layer.makeSolverConstraintsFlat(folded2);

// 	expect(taco_taco).toMatchObject([
// 		[15, 4, 16, 5],
// 		[17, 6, 27, 7],
// 		[25, 8, 26, 9],
// 		[23, 10, 24, 11],
// 		[21, 12, 22, 13],
// 	]);

// 	expect(taco_tortilla.length).toBe(0);

// 	expect(tortilla_tortilla).toMatchObject([
// 		[13, 19, 21, 20],
// 		[11, 21, 23, 22],
// 		[11, 21, 10, 13],
// 		[9, 23, 25, 24],
// 		[9, 23, 8, 11],
// 		[7, 25, 27, 26],
// 		[7, 25, 6, 9],
// 		[5, 27, 16, 17],
// 		[5, 27, 4, 7],
// 		[3, 16, 14, 15],
// 		[3, 16, 2, 5],
// 		[1, 14, 0, 3],
// 		[14, 15, 2, 5],
// 		[16, 17, 4, 7],
// 		[26, 27, 9, 6],
// 		[24, 25, 11, 8],
// 		[22, 23, 13, 10],
// 	]);

// 	expect(transitivity).toMatchObject([[2, 3, 14], [18, 19, 20]]);
// });

// test("makeSolverConstraintsFlat bird base", () => {
// 	const cp = ear.graph.bird();
// 	const folded = {
// 		...cp,
// 		vertices_coords: ear.graph.makeVerticesCoordsFlatFolded(cp),
// 	};
// 	ear.graph.populate(folded);

// 	expect(ear.graph.getEdgesEdgesCollinearOverlap(folded).flat().length).toBe(194);
// 	expect(ear.layer.getEdgesFacesOverlap(folded).flat().length).toBe(16);

// 	const {
// 		constraints: {
// 			taco_taco,
// 			taco_tortilla,
// 			tortilla_tortilla,
// 			transitivity,
// 		},
// 	} = ear.layer.makeSolverConstraintsFlat(folded);

// 	expect(taco_taco).toMatchObject([
// 		// long 22.5 edges, one side, 8 faces
// 		// faces: 0-1, 5-6, 4-7, 8-11
// 		[0, 4, 1, 7],
// 		[0, 5, 1, 6],
// 		[0, 8, 1, 11],
// 		[4, 5, 7, 6],
// 		[4, 8, 7, 11],
// 		[5, 8, 6, 11],

// 		// long 22.5 edges, the other side, 8 faces
// 		// faces: 2-3, 13-14, 9-10, 12-15
// 		[9, 12, 10, 15],
// 		[9, 13, 10, 14],
// 		[9, 2, 10, 3],
// 		[12, 13, 15, 14],
// 		[12, 2, 15, 3],
// 		[13, 2, 14, 3],

// 		// inside reverse fold (under armpit), one side: 0-4, 5-8
// 		[0, 5, 4, 8],
// 		// top 45 triangle hypotenuse, one side: 6-16, 7-19
// 		[7, 6, 19, 16],
// 		// inside reverse fold (under armpit), the other side: 3-13, 9-12
// 		[9, 3, 12, 13],
// 		// top 45 triangle hypotenuse, the other side: 14-18, 15-17
// 		[15, 14, 17, 18],
// 	]);

// 	expect(taco_tortilla).toMatchObject([
// 		[0, 1, 4],
// 		[0, 11, 4],
// 		[5, 1, 8],
// 		[5, 11, 8],
// 		[9, 2, 12],
// 		[9, 10, 12],
// 		[3, 2, 13],
// 		[3, 10, 13],
// 		[6, 1, 7],
// 		[6, 19, 7],
// 		[6, 11, 7],
// 		[6, 16, 7],
// 		[14, 2, 15],
// 		[14, 18, 15],
// 		[14, 10, 15],
// 		[14, 17, 15],
// 		[0, 6, 4],
// 		[0, 7, 4],
// 		[5, 6, 8],
// 		[5, 7, 8],
// 		[9, 14, 12],
// 		[9, 15, 12],
// 		[3, 14, 13],
// 		[3, 15, 13],
// 	]);

// 	expect(tortilla_tortilla).toMatchObject([
// 		[1, 2, 11, 10],
// 		[18, 19, 17, 16],
// 		[1, 19, 11, 16],
// 		[2, 18, 10, 17],
// 		[1, 19, 6, 6],
// 		[1, 19, 7, 7],
// 		[2, 18, 14, 14],
// 		[2, 18, 15, 15],
// 		[11, 16, 6, 6],
// 		[11, 16, 7, 7],
// 		[10, 17, 14, 14],
// 		[10, 17, 15, 15],
// 	]);

// 	expect(transitivity).toMatchObject([
// 		[0, 5, 7], [0, 5, 11], [0, 6, 7], [0, 6, 8], [0, 6, 11], [0, 7, 8],
// 		[0, 7, 11], [1, 4, 5], [1, 4, 6], [1, 4, 8], [1, 4, 11], [1, 5, 7],
// 		[1, 5, 11], [1, 6, 8], [1, 6, 11], [1, 7, 8], [1, 7, 11], [2, 9, 13],
// 		[2, 9, 14], [2, 9, 15], [2, 10, 12], [2, 10, 13], [2, 10, 14], [2, 10, 15],
// 		[2, 12, 13], [2, 12, 14], [2, 13, 15], [3, 9, 14], [3, 9, 15], [3, 10, 12],
// 		[3, 10, 14], [3, 10, 15], [3, 12, 14], [3, 14, 15], [4, 5, 11], [4, 6, 8],
// 		[4, 6, 11], [5, 7, 11], [6, 7, 8], [9, 13, 15], [9, 14, 15], [10, 12, 13],
// 		[10, 12, 14], [10, 13, 15],
// 	]);
// });

// test("makeSolverConstraintsFlat kabuto", () => {
// 	const foldfile = fs.readFileSync("./tests/files/fold/kabuto.fold", "utf-8");
// 	const fold = JSON.parse(foldfile);
// 	const folded = ear.graph.getFramesByClassName(fold, "foldedForm")[0];
// 	ear.graph.populate(folded);

// 	const {
// 		constraints,
// 		facePairs,
// 		orders,
// 	} = ear.layer.makeSolverConstraintsFlat(folded);

// 	const expectedJSON = fs.readFileSync(
// 		"./tests/files/json/kabuto-constraints.json",
// 		"utf-8",
// 	);
// 	const expected = JSON.parse(expectedJSON);

// 	expect(constraints).toMatchObject(expected);
// 	expect(ear.graph.getEdgesEdgesCollinearOverlap(folded).flat().length).toBe(104);
// 	expect(ear.layer.getEdgesFacesOverlap(folded).flat().length).toBe(138);
// 	expect(constraints.taco_taco.length).toMatchObject(21);
// 	expect(constraints.taco_tortilla.length).toMatchObject(88);
// 	expect(constraints.tortilla_tortilla.length).toMatchObject(0);
// 	expect(constraints.transitivity.length).toMatchObject(258);
// 	expect(Object.keys(facePairs).length).toBe(117);
// 	expect(Object.keys(orders).length).toBe(20);
// });

test("makeSolverConstraintsFlat crane", () => {
	const foldfile = fs.readFileSync("./tests/files/fold/crane.fold", "utf-8");
	const fold = JSON.parse(foldfile);
	// const cp = ear.graph.getFramesByClassName(fold, "creasePattern")[0];
	// console.log(JSON.stringify(cp));
	const folded = ear.graph.getFramesByClassName(fold, "foldedForm")[0];
	ear.graph.populate(folded);

	// const compareArray = [
	// 	[0,0],[0,1],[0,3],[0,4],[0,5],[0,7],[0,24],[0,26],[0,28],[0,31],[73,0],[73,1],[73,3],[73,4],[73,5],[73,7],[73,24],[73,26],[73,28],[73,31],[0,0],[0,1],[0,3],[0,4],[0,5],[0,7],[0,8],[0,9],[0,10],[0,11],[0,12],[0,13],[0,14],[0,15],[0,24],[0,26],[0,28],[0,31],[73,0],[73,1],[73,3],[73,4],[73,5],[73,7],[73,8],[73,9],[73,10],[73,11],[73,12],[73,13],[73,14],[73,15],[73,24],[73,26],[73,28],[73,31],[0,0],[0,3],[0,4],[0,5],[0,8],[0,9],[0,10],[0,11],[0,12],[0,13],[0,14],[0,15],[0,26],[0,28],[0,0],[0,3],[0,8],[0,9],[0,10],[0,11],[0,12],[0,13],[0,14],[0,15],[1,0],[1,1],[1,3],[1,4],[1,5],[1,7],[1,24],[1,26],[1,28],[1,29],[1,31],[1,34],[1,35],[1,42],[6,0],[6,1],[6,3],[6,4],[6,5],[6,7],[6,24],[6,26],[6,28],[6,29],[6,31],[6,34],[6,35],[6,42],[1,0],[1,1],[1,3],[1,4],[1,5],[1,7],[1,8],[1,9],[1,10],[1,11],[1,12],[1,13],[1,14],[1,15],[1,24],[1,26],[1,28],[1,29],[1,31],[1,34],[1,35],[1,42],[6,0],[6,1],[6,3],[6,4],[6,5],[6,7],[6,8],[6,9],[6,10],[6,11],[6,12],[6,13],[6,14],[6,15],[6,24],[6,26],[6,28],[6,29],[6,31],[6,34],[6,35],[6,42],[1,0],[1,1],[1,3],[1,4],[1,5],[1,7],[1,8],[1,9],[1,10],[1,11],[1,12],[1,13],[1,14],[1,15],[1,24],[1,26],[1,28],[1,29],[1,31],[1,34],[1,35],[1,42],[1,47],[1,50],[6,0],[6,1],[6,3],[6,4],[6,5],[6,7],[6,8],[6,9],[6,10],[6,11],[6,12],[6,13],[6,14],[6,15],[6,24],[6,26],[6,28],[6,29],[6,31],[6,34],[6,35],[6,42],[6,47],[6,50],[2,1],[2,7],[2,8],[2,9],[2,10],[2,11],[2,12],[2,13],[2,14],[2,15],[3,1],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[5,1],[5,7],[5,8],[5,9],[5,10],[5,11],[5,12],[5,13],[5,14],[5,15],[42,1],[42,7],[42,8],[42,9],[42,10],[42,11],[42,12],[42,13],[42,14],[42,15],[44,1],[44,7],[44,8],[44,9],[44,10],[44,11],[44,12],[44,13],[44,14],[44,15],[48,1],[48,7],[48,8],[48,9],[48,10],[48,11],[48,12],[48,13],[48,14],[48,15],[54,1],[54,7],[54,8],[54,9],[54,10],[54,11],[54,12],[54,13],[54,14],[54,15],[77,1],[77,7],[77,8],[77,9],[77,10],[77,11],[77,12],[77,13],[77,14],[77,15],[2,1],[2,7],[2,8],[2,9],[2,10],[2,11],[2,12],[2,13],[2,14],[2,15],[2,47],[2,50],[3,1],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[3,47],[3,50],[5,1],[5,7],[5,8],[5,9],[5,10],[5,11],[5,12],[5,13],[5,14],[5,15],[5,47],[5,50],[42,1],[42,7],[42,8],[42,9],[42,10],[42,11],[42,12],[42,13],[42,14],[42,15],[42,47],[42,50],[44,1],[44,7],[44,8],[44,9],[44,10],[44,11],[44,12],[44,13],[44,14],[44,15],[44,47],[44,50],[48,1],[48,7],[48,8],[48,9],[48,10],[48,11],[48,12],[48,13],[48,14],[48,15],[48,47],[48,50],[54,1],[54,7],[54,8],[54,9],[54,10],[54,11],[54,12],[54,13],[54,14],[54,15],[54,47],[54,50],[77,1],[77,7],[77,8],[77,9],[77,10],[77,11],[77,12],[77,13],[77,14],[77,15],[77,47],[77,50],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[42,8],[42,9],[42,10],[42,11],[42,12],[42,13],[42,14],[42,15],[4,0],[4,1],[4,3],[4,4],[4,5],[4,7],[4,24],[4,26],[4,28],[4,29],[4,31],[4,34],[4,39],[4,40],[52,0],[52,1],[52,3],[52,4],[52,5],[52,7],[52,24],[52,26],[52,28],[52,29],[52,31],[52,34],[52,39],[52,40],[4,0],[4,1],[4,3],[4,4],[4,5],[4,7],[4,8],[4,9],[4,10],[4,11],[4,12],[4,13],[4,14],[4,15],[4,24],[4,26],[4,28],[4,29],[4,31],[4,34],[4,39],[4,40],[52,0],[52,1],[52,3],[52,4],[52,5],[52,7],[52,8],[52,9],[52,10],[52,11],[52,12],[52,13],[52,14],[52,15],[52,24],[52,26],[52,28],[52,29],[52,31],[52,34],[52,39],[52,40],[7,0],[7,3],[7,8],[7,9],[7,10],[7,11],[7,12],[7,13],[7,14],[7,15],[7,29],[7,35],[21,0],[21,3],[21,8],[21,9],[21,10],[21,11],[21,12],[21,13],[21,14],[21,15],[21,29],[21,35],[7,0],[7,3],[7,8],[7,9],[7,10],[7,11],[7,12],[7,13],[7,14],[7,15],[21,0],[21,3],[21,8],[21,9],[21,10],[21,11],[21,12],[21,13],[21,14],[21,15],[7,0],[7,3],[21,0],[21,3],[8,0],[8,1],[8,2],[8,4],[8,5],[8,6],[8,24],[8,25],[8,27],[8,32],[63,0],[63,1],[63,2],[63,4],[63,5],[63,6],[63,24],[63,25],[63,27],[63,32],[8,0],[8,1],[8,2],[8,4],[8,5],[8,6],[8,16],[8,17],[8,18],[8,19],[8,20],[8,21],[8,22],[8,23],[8,24],[8,25],[8,27],[8,32],[63,0],[63,1],[63,2],[63,4],[63,5],[63,6],[63,16],[63,17],[63,18],[63,19],[63,20],[63,21],[63,22],[63,23],[63,24],[63,25],[63,27],[63,32],[8,0],[8,2],[8,4],[8,5],[8,16],[8,17],[8,18],[8,19],[8,20],[8,21],[8,22],[8,23],[8,25],[8,27],[8,0],[8,2],[8,16],[8,17],[8,18],[8,19],[8,20],[8,21],[8,22],[8,23],[9,0],[9,2],[9,16],[9,17],[9,18],[9,19],[9,20],[9,21],[9,22],[9,23],[9,30],[9,36],[18,0],[18,2],[18,16],[18,17],[18,18],[18,19],[18,20],[18,21],[18,22],[18,23],[18,30],[18,36],[9,0],[9,2],[9,16],[9,17],[9,18],[9,19],[9,20],[9,21],[9,22],[9,23],[18,0],[18,2],[18,16],[18,17],[18,18],[18,19],[18,20],[18,21],[18,22],[18,23],[9,0],[9,2],[18,0],[18,2],[10,1],[10,6],[10,16],[10,17],[10,18],[10,19],[10,20],[10,21],[10,22],[10,23],[13,1],[13,6],[13,16],[13,17],[13,18],[13,19],[13,20],[13,21],[13,22],[13,23],[28,1],[28,6],[28,16],[28,17],[28,18],[28,19],[28,20],[28,21],[28,22],[28,23],[30,1],[30,6],[30,16],[30,17],[30,18],[30,19],[30,20],[30,21],[30,22],[30,23],[57,1],[57,6],[57,16],[57,17],[57,18],[57,19],[57,20],[57,21],[57,22],[57,23],[64,1],[64,6],[64,16],[64,17],[64,18],[64,19],[64,20],[64,21],[64,22],[64,23],[80,1],[80,6],[80,16],[80,17],[80,18],[80,19],[80,20],[80,21],[80,22],[80,23],[86,1],[86,6],[86,16],[86,17],[86,18],[86,19],[86,20],[86,21],[86,22],[86,23],[10,1],[10,6],[10,16],[10,17],[10,18],[10,19],[10,20],[10,21],[10,22],[10,23],[10,48],[10,49],[13,1],[13,6],[13,16],[13,17],[13,18],[13,19],[13,20],[13,21],[13,22],[13,23],[13,48],[13,49],[28,1],[28,6],[28,16],[28,17],[28,18],[28,19],[28,20],[28,21],[28,22],[28,23],[28,48],[28,49],[30,1],[30,6],[30,16],[30,17],[30,18],[30,19],[30,20],[30,21],[30,22],[30,23],[30,48],[30,49],[57,1],[57,6],[57,16],[57,17],[57,18],[57,19],[57,20],[57,21],[57,22],[57,23],[57,48],[57,49],[64,1],[64,6],[64,16],[64,17],[64,18],[64,19],[64,20],[64,21],[64,22],[64,23],[64,48],[64,49],[80,1],[80,6],[80,16],[80,17],[80,18],[80,19],[80,20],[80,21],[80,22],[80,23],[80,48],[80,49],[86,1],[86,6],[86,16],[86,17],[86,18],[86,19],[86,20],[86,21],[86,22],[86,23],[86,48],[86,49],[12,0],[12,1],[12,2],[12,4],[12,5],[12,6],[12,16],[12,17],[12,18],[12,19],[12,20],[12,21],[12,22],[12,23],[12,24],[12,25],[12,27],[12,30],[12,32],[12,33],[12,36],[12,41],[12,48],[12,49],[84,0],[84,1],[84,2],[84,4],[84,5],[84,6],[84,16],[84,17],[84,18],[84,19],[84,20],[84,21],[84,22],[84,23],[84,24],[84,25],[84,27],[84,30],[84,32],[84,33],[84,36],[84,41],[84,48],[84,49],[12,0],[12,1],[12,2],[12,4],[12,5],[12,6],[12,16],[12,17],[12,18],[12,19],[12,20],[12,21],[12,22],[12,23],[12,24],[12,25],[12,27],[12,30],[12,32],[12,33],[12,36],[12,41],[84,0],[84,1],[84,2],[84,4],[84,5],[84,6],[84,16],[84,17],[84,18],[84,19],[84,20],[84,21],[84,22],[84,23],[84,24],[84,25],[84,27],[84,30],[84,32],[84,33],[84,36],[84,41],[12,0],[12,1],[12,2],[12,4],[12,5],[12,6],[12,24],[12,25],[12,27],[12,30],[12,32],[12,33],[12,36],[12,41],[84,0],[84,1],[84,2],[84,4],[84,5],[84,6],[84,24],[84,25],[84,27],[84,30],[84,32],[84,33],[84,36],[84,41],[14,0],[14,1],[14,3],[14,4],[14,5],[14,7],[14,24],[14,26],[14,28],[14,29],[14,31],[14,34],[14,39],[14,40],[39,0],[39,1],[39,3],[39,4],[39,5],[39,7],[39,24],[39,26],[39,28],[39,29],[39,31],[39,34],[39,39],[39,40],[41,0],[41,1],[41,3],[41,4],[41,5],[41,7],[41,24],[41,26],[41,28],[41,29],[41,31],[41,34],[41,39],[41,40],[47,0],[47,1],[47,3],[47,4],[47,5],[47,7],[47,24],[47,26],[47,28],[47,29],[47,31],[47,34],[47,39],[47,40],[51,0],[51,1],[51,3],[51,4],[51,5],[51,7],[51,24],[51,26],[51,28],[51,29],[51,31],[51,34],[51,39],[51,40],[14,0],[14,1],[14,3],[14,4],[14,5],[14,7],[14,24],[14,26],[14,28],[14,29],[14,31],[14,34],[14,35],[14,39],[14,40],[14,42],[14,43],[14,45],[39,0],[39,1],[39,3],[39,4],[39,5],[39,7],[39,24],[39,26],[39,28],[39,29],[39,31],[39,34],[39,35],[39,39],[39,40],[39,42],[39,43],[39,45],[41,0],[41,1],[41,3],[41,4],[41,5],[41,7],[41,24],[41,26],[41,28],[41,29],[41,31],[41,34],[41,35],[41,39],[41,40],[41,42],[41,43],[41,45],[47,0],[47,1],[47,3],[47,4],[47,5],[47,7],[47,24],[47,26],[47,28],[47,29],[47,31],[47,34],[47,35],[47,39],[47,40],[47,42],[47,43],[47,45],[51,0],[51,1],[51,3],[51,4],[51,5],[51,7],[51,24],[51,26],[51,28],[51,29],[51,31],[51,34],[51,35],[51,39],[51,40],[51,42],[51,43],[51,45],[14,0],[14,1],[14,3],[14,4],[14,5],[14,7],[14,24],[14,26],[14,28],[14,29],[14,31],[14,34],[14,35],[14,42],[39,0],[39,1],[39,3],[39,4],[39,5],[39,7],[39,24],[39,26],[39,28],[39,29],[39,31],[39,34],[39,35],[39,42],[41,0],[41,1],[41,3],[41,4],[41,5],[41,7],[41,24],[41,26],[41,28],[41,29],[41,31],[41,34],[41,35],[41,42],[47,0],[47,1],[47,3],[47,4],[47,5],[47,7],[47,24],[47,26],[47,28],[47,29],[47,31],[47,34],[47,35],[47,42],[51,0],[51,1],[51,3],[51,4],[51,5],[51,7],[51,24],[51,26],[51,28],[51,29],[51,31],[51,34],[51,35],[51,42],[14,0],[14,1],[14,3],[14,4],[14,5],[14,7],[14,24],[14,26],[14,28],[14,31],[39,0],[39,1],[39,3],[39,4],[39,5],[39,7],[39,24],[39,26],[39,28],[39,31],[41,0],[41,1],[41,3],[41,4],[41,5],[41,7],[41,24],[41,26],[41,28],[41,31],[47,0],[47,1],[47,3],[47,4],[47,5],[47,7],[47,24],[47,26],[47,28],[47,31],[51,0],[51,1],[51,3],[51,4],[51,5],[51,7],[51,24],[51,26],[51,28],[51,31],[14,0],[14,3],[14,4],[14,5],[14,26],[14,28],[39,0],[39,3],[39,4],[39,5],[39,26],[39,28],[41,0],[41,3],[41,4],[41,5],[41,26],[41,28],[47,0],[47,3],[47,4],[47,5],[47,26],[47,28],[51,0],[51,3],[51,4],[51,5],[51,26],[51,28],[14,0],[14,3],[39,0],[39,3],[41,0],[41,3],[47,0],[47,3],[51,0],[51,3],[16,0],[16,1],[16,4],[16,5],[16,24],[27,0],[27,1],[27,4],[27,5],[27,24],[29,0],[29,1],[29,4],[29,5],[29,24],[31,0],[31,1],[31,4],[31,5],[31,24],[40,0],[40,1],[40,4],[40,5],[40,24],[46,0],[46,1],[46,4],[46,5],[46,24],[50,0],[50,1],[50,4],[50,5],[50,24],[67,0],[67,1],[67,4],[67,5],[67,24],[68,0],[68,1],[68,4],[68,5],[68,24],[69,0],[69,1],[69,4],[69,5],[69,24],[70,0],[70,1],[70,4],[70,5],[70,24],[78,0],[78,1],[78,4],[78,5],[78,24],[16,0],[16,1],[16,4],[16,5],[16,24],[29,0],[29,1],[29,4],[29,5],[29,24],[50,0],[50,1],[50,4],[50,5],[50,24],[67,0],[67,1],[67,4],[67,5],[67,24],[68,0],[68,1],[68,4],[68,5],[68,24],[69,0],[69,1],[69,4],[69,5],[69,24],[70,0],[70,1],[70,4],[70,5],[70,24],[78,0],[78,1],[78,4],[78,5],[78,24],[16,0],[16,4],[16,5],[29,0],[29,4],[29,5],[50,0],[50,4],[50,5],[78,0],[78,4],[78,5],[16,0],[78,0],[17,1],[17,6],[23,1],[23,6],[24,1],[24,6],[25,1],[25,6],[26,1],[26,6],[79,1],[79,6],[83,1],[83,6],[89,1],[89,6],[19,1],[19,7],[32,1],[32,7],[33,1],[33,7],[34,1],[34,7],[35,1],[35,7],[36,1],[36,7],[37,1],[37,7],[38,1],[38,7],[20,1],[20,7],[43,1],[43,7],[45,1],[45,7],[49,1],[49,7],[20,1],[20,7],[20,47],[20,50],[43,1],[43,7],[43,47],[43,50],[45,1],[45,7],[45,47],[45,50],[49,1],[49,7],[49,47],[49,50],[22,1],[22,2],[22,6],[22,16],[22,17],[22,18],[22,19],[22,20],[22,21],[22,22],[22,23],[22,25],[22,27],[22,30],[22,32],[22,33],[22,37],[22,38],[55,1],[55,2],[55,6],[55,16],[55,17],[55,18],[55,19],[55,20],[55,21],[55,22],[55,23],[55,25],[55,27],[55,30],[55,32],[55,33],[55,37],[55,38],[22,1],[22,3],[22,7],[22,8],[22,9],[22,10],[22,11],[22,12],[22,13],[22,14],[22,15],[22,26],[22,28],[22,29],[22,31],[22,34],[22,39],[22,40],[55,1],[55,3],[55,7],[55,8],[55,9],[55,10],[55,11],[55,12],[55,13],[55,14],[55,15],[55,26],[55,28],[55,29],[55,31],[55,34],[55,39],[55,40],[28,1],[28,6],[28,16],[28,17],[28,18],[28,19],[28,20],[28,21],[28,22],[28,23],[30,1],[30,6],[30,16],[30,17],[30,18],[30,19],[30,20],[30,21],[30,22],[30,23],[64,1],[64,6],[64,16],[64,17],[64,18],[64,19],[64,20],[64,21],[64,22],[64,23],[80,1],[80,6],[80,16],[80,17],[80,18],[80,19],[80,20],[80,21],[80,22],[80,23],[42,1],[42,7],[42,8],[42,9],[42,10],[42,11],[42,12],[42,13],[42,14],[42,15],[44,1],[44,7],[44,8],[44,9],[44,10],[44,11],[44,12],[44,13],[44,14],[44,15],[48,1],[48,7],[48,8],[48,9],[48,10],[48,11],[48,12],[48,13],[48,14],[48,15],[77,1],[77,7],[77,8],[77,9],[77,10],[77,11],[77,12],[77,13],[77,14],[77,15],[53,8],[53,9],[53,10],[53,11],[53,12],[53,13],[53,14],[53,15],[76,8],[76,9],[76,10],[76,11],[76,12],[76,13],[76,14],[76,15],[56,16],[56,17],[56,18],[56,19],[56,20],[56,21],[56,22],[56,23],[65,16],[65,17],[65,18],[65,19],[65,20],[65,21],[65,22],[65,23],[58,0],[58,1],[58,2],[58,4],[58,5],[58,6],[58,16],[58,17],[58,18],[58,19],[58,20],[58,21],[58,22],[58,23],[58,24],[58,25],[58,27],[58,30],[58,32],[58,33],[58,37],[58,38],[85,0],[85,1],[85,2],[85,4],[85,5],[85,6],[85,16],[85,17],[85,18],[85,19],[85,20],[85,21],[85,22],[85,23],[85,24],[85,25],[85,27],[85,30],[85,32],[85,33],[85,37],[85,38],[58,0],[58,1],[58,2],[58,4],[58,5],[58,6],[58,24],[58,25],[58,27],[58,30],[58,32],[58,33],[58,37],[58,38],[85,0],[85,1],[85,2],[85,4],[85,5],[85,6],[85,24],[85,25],[85,27],[85,30],[85,32],[85,33],[85,37],[85,38],[59,0],[59,2],[59,4],[59,5],[59,16],[59,17],[59,18],[59,19],[59,20],[59,21],[59,22],[59,23],[59,25],[59,27],[59,30],[59,36],[60,0],[60,2],[60,4],[60,5],[60,16],[60,17],[60,18],[60,19],[60,20],[60,21],[60,22],[60,23],[60,25],[60,27],[60,30],[60,36],[61,0],[61,2],[61,4],[61,5],[61,16],[61,17],[61,18],[61,19],[61,20],[61,21],[61,22],[61,23],[61,25],[61,27],[61,30],[61,36],[66,0],[66,2],[66,4],[66,5],[66,16],[66,17],[66,18],[66,19],[66,20],[66,21],[66,22],[66,23],[66,25],[66,27],[66,30],[66,36],[59,0],[59,2],[59,4],[59,5],[59,16],[59,17],[59,18],[59,19],[59,20],[59,21],[59,22],[59,23],[59,25],[59,27],[66,0],[66,2],[66,4],[66,5],[66,16],[66,17],[66,18],[66,19],[66,20],[66,21],[66,22],[66,23],[66,25],[66,27],[59,0],[59,2],[59,4],[59,5],[59,25],[59,27],[66,0],[66,2],[66,4],[66,5],[66,25],[66,27],[59,0],[59,3],[59,4],[59,5],[59,26],[59,28],[74,0],[74,3],[74,4],[74,5],[74,26],[74,28],[59,0],[59,3],[59,4],[59,5],[59,8],[59,9],[59,10],[59,11],[59,12],[59,13],[59,14],[59,15],[59,26],[59,28],[74,0],[74,3],[74,4],[74,5],[74,8],[74,9],[74,10],[74,11],[74,12],[74,13],[74,14],[74,15],[74,26],[74,28],[59,0],[59,3],[59,4],[59,5],[59,8],[59,9],[59,10],[59,11],[59,12],[59,13],[59,14],[59,15],[59,26],[59,28],[59,29],[59,35],[71,0],[71,3],[71,4],[71,5],[71,8],[71,9],[71,10],[71,11],[71,12],[71,13],[71,14],[71,15],[71,26],[71,28],[71,29],[71,35],[74,0],[74,3],[74,4],[74,5],[74,8],[74,9],[74,10],[74,11],[74,12],[74,13],[74,14],[74,15],[74,26],[74,28],[74,29],[74,35],[75,0],[75,3],[75,4],[75,5],[75,8],[75,9],[75,10],[75,11],[75,12],[75,13],[75,14],[75,15],[75,26],[75,28],[75,29],[75,35],[62,1],[62,6],[62,1],[62,6],[62,16],[62,17],[62,18],[62,19],[62,20],[62,21],[62,22],[62,23],[62,0],[62,1],[62,2],[62,4],[62,5],[62,6],[62,16],[62,17],[62,18],[62,19],[62,20],[62,21],[62,22],[62,23],[62,24],[62,25],[62,27],[62,30],[62,32],[62,33],[62,36],[62,37],[62,38],[62,41],[62,44],[62,46],[62,0],[62,1],[62,2],[62,4],[62,5],[62,6],[62,16],[62,17],[62,18],[62,19],[62,20],[62,21],[62,22],[62,23],[62,24],[62,25],[62,27],[62,30],[62,32],[62,33],[62,36],[62,41],[67,1],[69,1],[72,1],[72,7],[72,1],[72,7],[72,8],[72,9],[72,10],[72,11],[72,12],[72,13],[72,14],[72,15],[72,0],[72,1],[72,3],[72,4],[72,5],[72,7],[72,8],[72,9],[72,10],[72,11],[72,12],[72,13],[72,14],[72,15],[72,24],[72,26],[72,28],[72,29],[72,31],[72,34],[72,35],[72,39],[72,40],[72,42],[72,43],[72,45],[72,0],[72,1],[72,3],[72,4],[72,5],[72,7],[72,8],[72,9],[72,10],[72,11],[72,12],[72,13],[72,14],[72,15],[72,24],[72,26],[72,28],[72,29],[72,31],[72,34],[72,35],[72,42],[80,16],[80,17],[80,18],[80,19],[80,20],[80,21],[80,22],[80,23],[86,16],[86,17],[86,18],[86,19],[86,20],[86,21],[86,22],[86,23],[81,16],[81,17],[81,18],[81,19],[81,20],[81,21],[81,22],[81,23],[82,8],[82,9],[82,10],[82,11],[82,12],[82,13],[82,14],[82,15],[87,16],[87,17],[87,18],[87,19],[87,20],[87,21],[87,22],[87,23],[98,16],[98,17],[98,18],[98,19],[98,20],[98,21],[98,22],[98,23],[101,16],[101,17],[101,18],[101,19],[101,20],[101,21],[101,22],[101,23],[103,16],[103,17],[103,18],[103,19],[103,20],[103,21],[103,22],[103,23],[107,16],[107,17],[107,18],[107,19],[107,20],[107,21],[107,22],[107,23],[88,0],[88,1],[88,2],[88,4],[88,5],[88,6],[88,24],[88,25],[88,27],[88,30],[88,32],[88,33],[88,37],[88,38],[97,0],[97,1],[97,2],[97,4],[97,5],[97,6],[97,24],[97,25],[97,27],[97,30],[97,32],[97,33],[97,37],[97,38],[102,0],[102,1],[102,2],[102,4],[102,5],[102,6],[102,24],[102,25],[102,27],[102,30],[102,32],[102,33],[102,37],[102,38],[104,0],[104,1],[104,2],[104,4],[104,5],[104,6],[104,24],[104,25],[104,27],[104,30],[104,32],[104,33],[104,37],[104,38],[108,0],[108,1],[108,2],[108,4],[108,5],[108,6],[108,24],[108,25],[108,27],[108,30],[108,32],[108,33],[108,37],[108,38],[88,0],[88,1],[88,2],[88,4],[88,5],[88,6],[88,24],[88,25],[88,27],[88,30],[88,32],[88,33],[88,36],[88,37],[88,38],[88,41],[88,44],[88,46],[97,0],[97,1],[97,2],[97,4],[97,5],[97,6],[97,24],[97,25],[97,27],[97,30],[97,32],[97,33],[97,36],[97,37],[97,38],[97,41],[97,44],[97,46],[102,0],[102,1],[102,2],[102,4],[102,5],[102,6],[102,24],[102,25],[102,27],[102,30],[102,32],[102,33],[102,36],[102,37],[102,38],[102,41],[102,44],[102,46],[104,0],[104,1],[104,2],[104,4],[104,5],[104,6],[104,24],[104,25],[104,27],[104,30],[104,32],[104,33],[104,36],[104,37],[104,38],[104,41],[104,44],[104,46],[108,0],[108,1],[108,2],[108,4],[108,5],[108,6],[108,24],[108,25],[108,27],[108,30],[108,32],[108,33],[108,36],[108,37],[108,38],[108,41],[108,44],[108,46],[88,0],[88,1],[88,2],[88,4],[88,5],[88,6],[88,24],[88,25],[88,27],[88,30],[88,32],[88,33],[88,36],[88,41],[97,0],[97,1],[97,2],[97,4],[97,5],[97,6],[97,24],[97,25],[97,27],[97,30],[97,32],[97,33],[97,36],[97,41],[102,0],[102,1],[102,2],[102,4],[102,5],[102,6],[102,24],[102,25],[102,27],[102,30],[102,32],[102,33],[102,36],[102,41],[104,0],[104,1],[104,2],[104,4],[104,5],[104,6],[104,24],[104,25],[104,27],[104,30],[104,32],[104,33],[104,36],[104,41],[108,0],[108,1],[108,2],[108,4],[108,5],[108,6],[108,24],[108,25],[108,27],[108,30],[108,32],[108,33],[108,36],[108,41],[88,0],[88,1],[88,2],[88,4],[88,5],[88,6],[88,24],[88,25],[88,27],[88,32],[97,0],[97,1],[97,2],[97,4],[97,5],[97,6],[97,24],[97,25],[97,27],[97,32],[102,0],[102,1],[102,2],[102,4],[102,5],[102,6],[102,24],[102,25],[102,27],[102,32],[104,0],[104,1],[104,2],[104,4],[104,5],[104,6],[104,24],[104,25],[104,27],[104,32],[108,0],[108,1],[108,2],[108,4],[108,5],[108,6],[108,24],[108,25],[108,27],[108,32],[88,0],[88,2],[88,4],[88,5],[88,25],[88,27],[97,0],[97,2],[97,4],[97,5],[97,25],[97,27],[102,0],[102,2],[102,4],[102,5],[102,25],[102,27],[104,0],[104,2],[104,4],[104,5],[104,25],[104,27],[108,0],[108,2],[108,4],[108,5],[108,25],[108,27],[88,0],[88,2],[97,0],[97,2],[102,0],[102,2],[104,0],[104,2],[108,0],[108,2],[90,1],[90,6],[100,1],[100,6],[106,1],[106,6],[110,1],[110,6],[90,1],[90,6],[90,48],[90,49],[100,1],[100,6],[100,48],[100,49],[106,1],[106,6],[106,48],[106,49],[110,1],[110,6],[110,48],[110,49],[90,51],[90,52],[90,53],[90,54],[90,55],[90,56],[90,57],[90,58],[100,51],[100,52],[100,53],[100,54],[100,55],[100,56],[100,57],[100,58],[106,51],[106,52],[106,53],[106,54],[106,55],[106,56],[106,57],[106,58],[110,51],[110,52],[110,53],[110,54],[110,55],[110,56],[110,57],[110,58]
	// ];

	// const compare = {};
	// compareArray.forEach(([edge, face]) => { compare[`${edge} ${face}`] = true; });

	// const edgesFaces = {};
	// ear.layer.getEdgesFacesOverlap(folded)
	// 	.forEach((faces, edge) => faces
	// 		.forEach(face => { edgesFaces[`${edge} ${face}`] = true; }));

	// expect({
	// 	...edgesFaces,
	// 	...{
	// 		"62 16": true,
	// 		"62 17": true,
	// 		"62 18": true,
	// 		"62 19": true,
	// 		"62 20": true,
	// 		"62 21": true,
	// 		"62 22": true,
	// 		"62 23": true,
	// 		"63 16": true,
	// 		"63 17": true,
	// 		"63 18": true,
	// 		"63 19": true,
	// 		"63 20": true,
	// 		"63 21": true,
	// 		"63 22": true,
	// 		"63 23": true,
	// 	}
	// }).toMatchObject(compare);

	const epsilon = 1e-4;

	const {
		constraints: {
			taco_taco,
			taco_tortilla,
			tortilla_tortilla,
			transitivity,
		},
		facePairs,
		orders,
	} = ear.layer.makeSolverConstraintsFlat(folded, epsilon);

	// console.log(ear.layer.getEdgesFacesOverlap(folded));

	expect(ear.graph.getEdgesEdgesCollinearOverlap(folded, epsilon).flat().length).toBe(554);
	expect(ear.graph.getFacesEdgesOverlap(folded, epsilon).flat().length).toBe(1167);
	expect(taco_taco.length).toMatchObject(196);
	expect(taco_tortilla.length).toMatchObject(1049);
	expect(tortilla_tortilla.length).toMatchObject(0);
	expect(transitivity.length).toMatchObject(5328);
	expect(Object.keys(facePairs).length).toBe(838);
	expect(Object.keys(orders).length).toBe(102);
});

// test("makeSolverConstraintsFlat flapping bird", () => {
// 	const foldfile = fs.readFileSync("./tests/files/fold/randlett-flapping-bird.fold", "utf-8");
// 	const fold = JSON.parse(foldfile);
// 	const folded = ear.graph.getFramesByClassName(fold, "foldedForm")[0];
// 	ear.graph.populate(folded);

// 	expect(ear.graph.getEdgesEdgesCollinearOverlap(folded).flat().length).toBe(114);
// 	expect(ear.layer.getEdgesFacesOverlap(folded).flat().length).toBe(110);

// 	const {
// 		constraints: {
// 			taco_taco,
// 			taco_tortilla,
// 			tortilla_tortilla,
// 			transitivity,
// 		},
// 		facePairs,
// 		orders,
// 	} = ear.layer.makeSolverConstraintsFlat(folded);

// 	expect(taco_taco.length).toMatchObject(27);
// 	expect(taco_tortilla.length).toMatchObject(82);
// 	expect(tortilla_tortilla.length).toMatchObject(15);
// 	expect(transitivity.length).toMatchObject(168);
// 	expect(Object.keys(facePairs).length).toBe(125);
// 	expect(Object.keys(orders).length).toBe(30);
// });

// test("layer bird", () => {
// 	const foldfile = fs.readFileSync("./tests/files/fold/kraft-bird-base.fold", "utf-8");
// 	const fold = JSON.parse(foldfile);
// 	const folded = {
// 		...fold,
// 		vertices_coords: ear.graph.makeVerticesCoordsFlatFolded(fold, [6]),
// 	};
// 	ear.graph.populate(folded);

// 	expect(ear.graph.getEdgesEdgesCollinearOverlap(folded).flat().length).toBe(3404);
// 	expect(ear.layer.getEdgesFacesOverlap(folded).flat().length).toBe(15088);

// 	const {
// 		constraints: {
// 			taco_taco,
// 			taco_tortilla,
// 			tortilla_tortilla,
// 			transitivity,
// 		},
// 		facePairs,
// 		orders,
// 	} = ear.layer.makeSolverConstraintsFlat(folded, 1e-6);

// 	expect(taco_taco.length).toBe(764);
// 	// expect(taco_tortilla.length).toBe(4860); // 6122
// 	// expect(tortilla_tortilla.length).toBe(2613); // 3125
// 	// expect(transitivity.length).toBe(54856); // 55179

// 	expect(Object.keys(facePairs).length).toBe(5848);
// 	expect(Object.keys(orders).length).toBe(338);
// });
