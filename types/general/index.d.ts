declare const _default: {
    toCamel: (s: string) => string;
    toKebab: (s: string) => string;
    capitalized: (s: string) => string;
    sortPointsAlongVector: (points: number[][], vector: number[]) => number[];
    radialSortUnitVectors2: (vectors: [number, number][]) => number[];
    radialSortVectors3: (points: [number, number, number][], vector?: [number, number, number], origin?: [number, number, number]) => number[];
    cleanNumber: (number: number, places?: number) => number;
    clusterSortedGeneric: (elements: any[], comparison: Function) => number[][];
    clusterUnsortedIndices: (indices: any[], comparison: Function) => number[][];
    clusterScalars: (numbers: number[], epsilon?: number) => number[][];
    clusterRanges: (ranges: [number, number][], epsilon?: number) => number[][];
    clusterParallelVectors: (vectors: number[][], epsilon?: number) => number[][];
    uniqueElements: (array: number[]) => number[];
    nonUniqueElements: (array: any[]) => any[];
    uniqueSortedNumbers: (array: number[]) => number[];
    epsilonUniqueSortedNumbers: (array: number[], epsilon?: number) => number[];
    arrayIntersection: (array1: any[], array2: any[]) => any[];
    rotateCircularArray: (array: any[], newStartIndex: number) => any[];
    splitCircularArray: (array: any[], indices: [number, number]) => [any[], any[]];
    chooseTwoPairs: (array: any[]) => [any, any][];
    setDifferenceSortedNumbers: (a: number[], b: number[]) => number[];
    setDifferenceSortedEpsilonNumbers: (a: number[], b: number[], epsilon?: number) => number[];
    arrayMinimumIndex: (array: any[], map?: Function) => number;
    arrayMaximumIndex: (array: any[], map?: Function) => number;
    mergeArraysWithHoles: (...arrays: any[][]) => any[];
    clustersToReflexiveArrays: (clusters: number[][]) => number[][];
    arrayArrayToLookupArray: (array_array: number[][]) => boolean[][];
    lookupArrayToArrayArray: (lookupArray: boolean[][]) => number[][];
};
export default _default;
//# sourceMappingURL=index.d.ts.map